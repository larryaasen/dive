// ignore: slash_for_doc_comments
/******************************************************************************
  Copyright (C) 2013-2021 by Hugh Bailey <jim@obsproject.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
******************************************************************************/

// The package ffigen generates code that generates warnings with the Dart
// analyzer, so ignore some of the rules.
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: unused_element
// ignore_for_file: unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings to obslib
class DiveObslibFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DiveObslibFFI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DiveObslibFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void base_set_allocator(
    ffi.Pointer<base_allocator> defs,
  ) {
    return _base_set_allocator(
      defs,
    );
  }

  late final _base_set_allocatorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<base_allocator>)>>(
      'base_set_allocator');
  late final _base_set_allocator = _base_set_allocatorPtr
      .asFunction<void Function(ffi.Pointer<base_allocator>)>();

  ffi.Pointer<ffi.Void> bmalloc(
    int size,
  ) {
    return _bmalloc(
      size,
    );
  }

  late final _bmallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'bmalloc');
  late final _bmalloc =
      _bmallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> brealloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _brealloc(
      ptr,
      size,
    );
  }

  late final _breallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('brealloc');
  late final _brealloc = _breallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void bfree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _bfree(
      ptr,
    );
  }

  late final _bfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'bfree');
  late final _bfree =
      _bfreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int base_get_alignment() {
    return _base_get_alignment();
  }

  late final _base_get_alignmentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('base_get_alignment');
  late final _base_get_alignment =
      _base_get_alignmentPtr.asFunction<int Function()>();

  int bnum_allocs() {
    return _bnum_allocs();
  }

  late final _bnum_allocsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('bnum_allocs');
  late final _bnum_allocs = _bnum_allocsPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> bmemdup(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _bmemdup(
      ptr,
      size,
    );
  }

  late final _bmemdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('bmemdup');
  late final _bmemdup = _bmemdupPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void profile_register_root(
    ffi.Pointer<ffi.Int8> name,
    int expected_time_between_calls,
  ) {
    return _profile_register_root(
      name,
      expected_time_between_calls,
    );
  }

  late final _profile_register_rootPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>, ffi.Uint64)>>('profile_register_root');
  late final _profile_register_root = _profile_register_rootPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int8>, int)>();

  void profile_start(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _profile_start(
      name,
    );
  }

  late final _profile_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'profile_start');
  late final _profile_start =
      _profile_startPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  void profile_end(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _profile_end(
      name,
    );
  }

  late final _profile_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'profile_end');
  late final _profile_end =
      _profile_endPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  void profile_reenable_thread() {
    return _profile_reenable_thread();
  }

  late final _profile_reenable_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'profile_reenable_thread');
  late final _profile_reenable_thread =
      _profile_reenable_threadPtr.asFunction<void Function()>();

  void profiler_start() {
    return _profiler_start();
  }

  late final _profiler_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('profiler_start');
  late final _profiler_start = _profiler_startPtr.asFunction<void Function()>();

  void profiler_stop() {
    return _profiler_stop();
  }

  late final _profiler_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('profiler_stop');
  late final _profiler_stop = _profiler_stopPtr.asFunction<void Function()>();

  void profiler_print(
    ffi.Pointer<profiler_snapshot_t> snap,
  ) {
    return _profiler_print(
      snap,
    );
  }

  late final _profiler_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<profiler_snapshot_t>)>>('profiler_print');
  late final _profiler_print = _profiler_printPtr
      .asFunction<void Function(ffi.Pointer<profiler_snapshot_t>)>();

  void profiler_print_time_between_calls(
    ffi.Pointer<profiler_snapshot_t> snap,
  ) {
    return _profiler_print_time_between_calls(
      snap,
    );
  }

  late final _profiler_print_time_between_callsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<profiler_snapshot_t>)>>(
      'profiler_print_time_between_calls');
  late final _profiler_print_time_between_calls =
      _profiler_print_time_between_callsPtr
          .asFunction<void Function(ffi.Pointer<profiler_snapshot_t>)>();

  void profiler_free() {
    return _profiler_free();
  }

  late final _profiler_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('profiler_free');
  late final _profiler_free = _profiler_freePtr.asFunction<void Function()>();

  ffi.Pointer<profiler_name_store_t> profiler_name_store_create() {
    return _profiler_name_store_create();
  }

  late final _profiler_name_store_createPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<profiler_name_store_t> Function()>>(
      'profiler_name_store_create');
  late final _profiler_name_store_create = _profiler_name_store_createPtr
      .asFunction<ffi.Pointer<profiler_name_store_t> Function()>();

  void profiler_name_store_free(
    ffi.Pointer<profiler_name_store_t> store,
  ) {
    return _profiler_name_store_free(
      store,
    );
  }

  late final _profiler_name_store_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<profiler_name_store_t>)>>('profiler_name_store_free');
  late final _profiler_name_store_free = _profiler_name_store_freePtr
      .asFunction<void Function(ffi.Pointer<profiler_name_store_t>)>();

  ffi.Pointer<ffi.Int8> profile_store_name(
    ffi.Pointer<profiler_name_store_t> store,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _profile_store_name(
      store,
      format,
    );
  }

  late final _profile_store_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<profiler_name_store_t>,
              ffi.Pointer<ffi.Int8>)>>('profile_store_name');
  late final _profile_store_name = _profile_store_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<profiler_name_store_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<profiler_snapshot_t> profile_snapshot_create() {
    return _profile_snapshot_create();
  }

  late final _profile_snapshot_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<profiler_snapshot_t> Function()>>(
          'profile_snapshot_create');
  late final _profile_snapshot_create = _profile_snapshot_createPtr
      .asFunction<ffi.Pointer<profiler_snapshot_t> Function()>();

  void profile_snapshot_free(
    ffi.Pointer<profiler_snapshot_t> snap,
  ) {
    return _profile_snapshot_free(
      snap,
    );
  }

  late final _profile_snapshot_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<profiler_snapshot_t>)>>('profile_snapshot_free');
  late final _profile_snapshot_free = _profile_snapshot_freePtr
      .asFunction<void Function(ffi.Pointer<profiler_snapshot_t>)>();

  int profiler_snapshot_dump_csv(
    ffi.Pointer<profiler_snapshot_t> snap,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _profiler_snapshot_dump_csv(
      snap,
      filename,
    );
  }

  late final _profiler_snapshot_dump_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<profiler_snapshot_t>,
              ffi.Pointer<ffi.Int8>)>>('profiler_snapshot_dump_csv');
  late final _profiler_snapshot_dump_csv =
      _profiler_snapshot_dump_csvPtr.asFunction<
          int Function(
              ffi.Pointer<profiler_snapshot_t>, ffi.Pointer<ffi.Int8>)>();

  int profiler_snapshot_dump_csv_gz(
    ffi.Pointer<profiler_snapshot_t> snap,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _profiler_snapshot_dump_csv_gz(
      snap,
      filename,
    );
  }

  late final _profiler_snapshot_dump_csv_gzPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<profiler_snapshot_t>,
              ffi.Pointer<ffi.Int8>)>>('profiler_snapshot_dump_csv_gz');
  late final _profiler_snapshot_dump_csv_gz =
      _profiler_snapshot_dump_csv_gzPtr.asFunction<
          int Function(
              ffi.Pointer<profiler_snapshot_t>, ffi.Pointer<ffi.Int8>)>();

  int profiler_snapshot_num_roots(
    ffi.Pointer<profiler_snapshot_t> snap,
  ) {
    return _profiler_snapshot_num_roots(
      snap,
    );
  }

  late final _profiler_snapshot_num_rootsPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<profiler_snapshot_t>)>>(
      'profiler_snapshot_num_roots');
  late final _profiler_snapshot_num_roots = _profiler_snapshot_num_rootsPtr
      .asFunction<int Function(ffi.Pointer<profiler_snapshot_t>)>();

  void profiler_snapshot_enumerate_roots(
    ffi.Pointer<profiler_snapshot_t> snap,
    profiler_entry_enum_func func,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _profiler_snapshot_enumerate_roots(
      snap,
      func,
      context,
    );
  }

  late final _profiler_snapshot_enumerate_rootsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<profiler_snapshot_t>,
              profiler_entry_enum_func,
              ffi.Pointer<ffi.Void>)>>('profiler_snapshot_enumerate_roots');
  late final _profiler_snapshot_enumerate_roots =
      _profiler_snapshot_enumerate_rootsPtr.asFunction<
          void Function(ffi.Pointer<profiler_snapshot_t>,
              profiler_entry_enum_func, ffi.Pointer<ffi.Void>)>();

  void profiler_snapshot_filter_roots(
    ffi.Pointer<profiler_snapshot_t> snap,
    profiler_name_filter_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _profiler_snapshot_filter_roots(
      snap,
      func,
      data,
    );
  }

  late final _profiler_snapshot_filter_rootsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<profiler_snapshot_t>,
              profiler_name_filter_func,
              ffi.Pointer<ffi.Void>)>>('profiler_snapshot_filter_roots');
  late final _profiler_snapshot_filter_roots =
      _profiler_snapshot_filter_rootsPtr.asFunction<
          void Function(ffi.Pointer<profiler_snapshot_t>,
              profiler_name_filter_func, ffi.Pointer<ffi.Void>)>();

  int profiler_snapshot_num_children(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_num_children(
      entry,
    );
  }

  late final _profiler_snapshot_num_childrenPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_num_children');
  late final _profiler_snapshot_num_children =
      _profiler_snapshot_num_childrenPtr
          .asFunction<int Function(ffi.Pointer<profiler_snapshot_entry_t>)>();

  void profiler_snapshot_enumerate_children(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
    profiler_entry_enum_func func,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _profiler_snapshot_enumerate_children(
      entry,
      func,
      context,
    );
  }

  late final _profiler_snapshot_enumerate_childrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<profiler_snapshot_entry_t>,
              profiler_entry_enum_func,
              ffi.Pointer<ffi.Void>)>>('profiler_snapshot_enumerate_children');
  late final _profiler_snapshot_enumerate_children =
      _profiler_snapshot_enumerate_childrenPtr.asFunction<
          void Function(ffi.Pointer<profiler_snapshot_entry_t>,
              profiler_entry_enum_func, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int8> profiler_snapshot_entry_name(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_name(
      entry,
    );
  }

  late final _profiler_snapshot_entry_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_name');
  late final _profiler_snapshot_entry_name =
      _profiler_snapshot_entry_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<profiler_snapshot_entry_t>)>();

  ffi.Pointer<profiler_time_entries_t> profiler_snapshot_entry_times(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_times(
      entry,
    );
  }

  late final _profiler_snapshot_entry_timesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<profiler_time_entries_t> Function(
                  ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_times');
  late final _profiler_snapshot_entry_times =
      _profiler_snapshot_entry_timesPtr.asFunction<
          ffi.Pointer<profiler_time_entries_t> Function(
              ffi.Pointer<profiler_snapshot_entry_t>)>();

  int profiler_snapshot_entry_min_time(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_min_time(
      entry,
    );
  }

  late final _profiler_snapshot_entry_min_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_min_time');
  late final _profiler_snapshot_entry_min_time =
      _profiler_snapshot_entry_min_timePtr
          .asFunction<int Function(ffi.Pointer<profiler_snapshot_entry_t>)>();

  int profiler_snapshot_entry_max_time(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_max_time(
      entry,
    );
  }

  late final _profiler_snapshot_entry_max_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_max_time');
  late final _profiler_snapshot_entry_max_time =
      _profiler_snapshot_entry_max_timePtr
          .asFunction<int Function(ffi.Pointer<profiler_snapshot_entry_t>)>();

  int profiler_snapshot_entry_overall_count(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_overall_count(
      entry,
    );
  }

  late final _profiler_snapshot_entry_overall_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_overall_count');
  late final _profiler_snapshot_entry_overall_count =
      _profiler_snapshot_entry_overall_countPtr
          .asFunction<int Function(ffi.Pointer<profiler_snapshot_entry_t>)>();

  ffi.Pointer<profiler_time_entries_t>
      profiler_snapshot_entry_times_between_calls(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_times_between_calls(
      entry,
    );
  }

  late final _profiler_snapshot_entry_times_between_callsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<profiler_time_entries_t> Function(
                  ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_times_between_calls');
  late final _profiler_snapshot_entry_times_between_calls =
      _profiler_snapshot_entry_times_between_callsPtr.asFunction<
          ffi.Pointer<profiler_time_entries_t> Function(
              ffi.Pointer<profiler_snapshot_entry_t>)>();

  int profiler_snapshot_entry_expected_time_between_calls(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_expected_time_between_calls(
      entry,
    );
  }

  late final _profiler_snapshot_entry_expected_time_between_callsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_expected_time_between_calls');
  late final _profiler_snapshot_entry_expected_time_between_calls =
      _profiler_snapshot_entry_expected_time_between_callsPtr
          .asFunction<int Function(ffi.Pointer<profiler_snapshot_entry_t>)>();

  int profiler_snapshot_entry_min_time_between_calls(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_min_time_between_calls(
      entry,
    );
  }

  late final _profiler_snapshot_entry_min_time_between_callsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_min_time_between_calls');
  late final _profiler_snapshot_entry_min_time_between_calls =
      _profiler_snapshot_entry_min_time_between_callsPtr
          .asFunction<int Function(ffi.Pointer<profiler_snapshot_entry_t>)>();

  int profiler_snapshot_entry_max_time_between_calls(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_max_time_between_calls(
      entry,
    );
  }

  late final _profiler_snapshot_entry_max_time_between_callsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_max_time_between_calls');
  late final _profiler_snapshot_entry_max_time_between_calls =
      _profiler_snapshot_entry_max_time_between_callsPtr
          .asFunction<int Function(ffi.Pointer<profiler_snapshot_entry_t>)>();

  int profiler_snapshot_entry_overall_between_calls_count(
    ffi.Pointer<profiler_snapshot_entry_t> entry,
  ) {
    return _profiler_snapshot_entry_overall_between_calls_count(
      entry,
    );
  }

  late final _profiler_snapshot_entry_overall_between_calls_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<profiler_snapshot_entry_t>)>>(
      'profiler_snapshot_entry_overall_between_calls_count');
  late final _profiler_snapshot_entry_overall_between_calls_count =
      _profiler_snapshot_entry_overall_between_calls_countPtr
          .asFunction<int Function(ffi.Pointer<profiler_snapshot_entry_t>)>();

  ffi.Pointer<lookup_t> text_lookup_create(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _text_lookup_create(
      path,
    );
  }

  late final _text_lookup_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lookup_t> Function(
              ffi.Pointer<ffi.Int8>)>>('text_lookup_create');
  late final _text_lookup_create = _text_lookup_createPtr
      .asFunction<ffi.Pointer<lookup_t> Function(ffi.Pointer<ffi.Int8>)>();

  int text_lookup_add(
    ffi.Pointer<lookup_t> lookup,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _text_lookup_add(
      lookup,
      path,
    );
  }

  late final _text_lookup_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<lookup_t>,
              ffi.Pointer<ffi.Int8>)>>('text_lookup_add');
  late final _text_lookup_add = _text_lookup_addPtr
      .asFunction<int Function(ffi.Pointer<lookup_t>, ffi.Pointer<ffi.Int8>)>();

  void text_lookup_destroy(
    ffi.Pointer<lookup_t> lookup,
  ) {
    return _text_lookup_destroy(
      lookup,
    );
  }

  late final _text_lookup_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lookup_t>)>>(
          'text_lookup_destroy');
  late final _text_lookup_destroy = _text_lookup_destroyPtr
      .asFunction<void Function(ffi.Pointer<lookup_t>)>();

  int text_lookup_getstr(
    ffi.Pointer<lookup_t> lookup,
    ffi.Pointer<ffi.Int8> lookup_val,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> out,
  ) {
    return _text_lookup_getstr(
      lookup,
      lookup_val,
      out,
    );
  }

  late final _text_lookup_getstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<lookup_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('text_lookup_getstr');
  late final _text_lookup_getstr = _text_lookup_getstrPtr.asFunction<
      int Function(ffi.Pointer<lookup_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  void gs_shader_destroy(
    ffi.Pointer<gs_shader_t> shader,
  ) {
    return _gs_shader_destroy(
      shader,
    );
  }

  late final _gs_shader_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_shader_t>)>>(
          'gs_shader_destroy');
  late final _gs_shader_destroy = _gs_shader_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_shader_t>)>();

  int gs_shader_get_num_params(
    ffi.Pointer<gs_shader_t> shader,
  ) {
    return _gs_shader_get_num_params(
      shader,
    );
  }

  late final _gs_shader_get_num_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gs_shader_t>)>>(
          'gs_shader_get_num_params');
  late final _gs_shader_get_num_params = _gs_shader_get_num_paramsPtr
      .asFunction<int Function(ffi.Pointer<gs_shader_t>)>();

  ffi.Pointer<gs_sparam_t> gs_shader_get_param_by_idx(
    ffi.Pointer<gs_shader_t> shader,
    int param,
  ) {
    return _gs_shader_get_param_by_idx(
      shader,
      param,
    );
  }

  late final _gs_shader_get_param_by_idxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_sparam_t> Function(ffi.Pointer<gs_shader_t>,
              ffi.Uint32)>>('gs_shader_get_param_by_idx');
  late final _gs_shader_get_param_by_idx =
      _gs_shader_get_param_by_idxPtr.asFunction<
          ffi.Pointer<gs_sparam_t> Function(ffi.Pointer<gs_shader_t>, int)>();

  ffi.Pointer<gs_sparam_t> gs_shader_get_param_by_name(
    ffi.Pointer<gs_shader_t> shader,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gs_shader_get_param_by_name(
      shader,
      name,
    );
  }

  late final _gs_shader_get_param_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_sparam_t> Function(ffi.Pointer<gs_shader_t>,
              ffi.Pointer<ffi.Int8>)>>('gs_shader_get_param_by_name');
  late final _gs_shader_get_param_by_name =
      _gs_shader_get_param_by_namePtr.asFunction<
          ffi.Pointer<gs_sparam_t> Function(
              ffi.Pointer<gs_shader_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gs_sparam_t> gs_shader_get_viewproj_matrix(
    ffi.Pointer<gs_shader_t> shader,
  ) {
    return _gs_shader_get_viewproj_matrix(
      shader,
    );
  }

  late final _gs_shader_get_viewproj_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_sparam_t> Function(
              ffi.Pointer<gs_shader_t>)>>('gs_shader_get_viewproj_matrix');
  late final _gs_shader_get_viewproj_matrix =
      _gs_shader_get_viewproj_matrixPtr.asFunction<
          ffi.Pointer<gs_sparam_t> Function(ffi.Pointer<gs_shader_t>)>();

  ffi.Pointer<gs_sparam_t> gs_shader_get_world_matrix(
    ffi.Pointer<gs_shader_t> shader,
  ) {
    return _gs_shader_get_world_matrix(
      shader,
    );
  }

  late final _gs_shader_get_world_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_sparam_t> Function(
              ffi.Pointer<gs_shader_t>)>>('gs_shader_get_world_matrix');
  late final _gs_shader_get_world_matrix =
      _gs_shader_get_world_matrixPtr.asFunction<
          ffi.Pointer<gs_sparam_t> Function(ffi.Pointer<gs_shader_t>)>();

  void gs_shader_get_param_info(
    ffi.Pointer<gs_sparam_t> param,
    ffi.Pointer<gs_shader_param_info> info,
  ) {
    return _gs_shader_get_param_info(
      param,
      info,
    );
  }

  late final _gs_shader_get_param_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_sparam_t>,
              ffi.Pointer<gs_shader_param_info>)>>('gs_shader_get_param_info');
  late final _gs_shader_get_param_info =
      _gs_shader_get_param_infoPtr.asFunction<
          void Function(
              ffi.Pointer<gs_sparam_t>, ffi.Pointer<gs_shader_param_info>)>();

  void gs_shader_set_bool(
    ffi.Pointer<gs_sparam_t> param,
    int val,
  ) {
    return _gs_shader_set_bool(
      param,
      val,
    );
  }

  late final _gs_shader_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_sparam_t>, ffi.Uint8)>>('gs_shader_set_bool');
  late final _gs_shader_set_bool = _gs_shader_set_boolPtr
      .asFunction<void Function(ffi.Pointer<gs_sparam_t>, int)>();

  void gs_shader_set_float(
    ffi.Pointer<gs_sparam_t> param,
    double val,
  ) {
    return _gs_shader_set_float(
      param,
      val,
    );
  }

  late final _gs_shader_set_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_sparam_t>, ffi.Float)>>('gs_shader_set_float');
  late final _gs_shader_set_float = _gs_shader_set_floatPtr
      .asFunction<void Function(ffi.Pointer<gs_sparam_t>, double)>();

  void gs_shader_set_int(
    ffi.Pointer<gs_sparam_t> param,
    int val,
  ) {
    return _gs_shader_set_int(
      param,
      val,
    );
  }

  late final _gs_shader_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_sparam_t>, ffi.Int32)>>('gs_shader_set_int');
  late final _gs_shader_set_int = _gs_shader_set_intPtr
      .asFunction<void Function(ffi.Pointer<gs_sparam_t>, int)>();

  void gs_shader_set_matrix3(
    ffi.Pointer<gs_sparam_t> param,
    ffi.Pointer<matrix3> val,
  ) {
    return _gs_shader_set_matrix3(
      param,
      val,
    );
  }

  late final _gs_shader_set_matrix3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_sparam_t>,
              ffi.Pointer<matrix3>)>>('gs_shader_set_matrix3');
  late final _gs_shader_set_matrix3 = _gs_shader_set_matrix3Ptr.asFunction<
      void Function(ffi.Pointer<gs_sparam_t>, ffi.Pointer<matrix3>)>();

  void gs_shader_set_matrix4(
    ffi.Pointer<gs_sparam_t> param,
    ffi.Pointer<matrix4> val,
  ) {
    return _gs_shader_set_matrix4(
      param,
      val,
    );
  }

  late final _gs_shader_set_matrix4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_sparam_t>,
              ffi.Pointer<matrix4>)>>('gs_shader_set_matrix4');
  late final _gs_shader_set_matrix4 = _gs_shader_set_matrix4Ptr.asFunction<
      void Function(ffi.Pointer<gs_sparam_t>, ffi.Pointer<matrix4>)>();

  void gs_shader_set_vec2(
    ffi.Pointer<gs_sparam_t> param,
    ffi.Pointer<vec2> val,
  ) {
    return _gs_shader_set_vec2(
      param,
      val,
    );
  }

  late final _gs_shader_set_vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_sparam_t>,
              ffi.Pointer<vec2>)>>('gs_shader_set_vec2');
  late final _gs_shader_set_vec2 = _gs_shader_set_vec2Ptr
      .asFunction<void Function(ffi.Pointer<gs_sparam_t>, ffi.Pointer<vec2>)>();

  void gs_shader_set_vec3(
    ffi.Pointer<gs_sparam_t> param,
    ffi.Pointer<vec3> val,
  ) {
    return _gs_shader_set_vec3(
      param,
      val,
    );
  }

  late final _gs_shader_set_vec3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_sparam_t>,
              ffi.Pointer<vec3>)>>('gs_shader_set_vec3');
  late final _gs_shader_set_vec3 = _gs_shader_set_vec3Ptr
      .asFunction<void Function(ffi.Pointer<gs_sparam_t>, ffi.Pointer<vec3>)>();

  void gs_shader_set_vec4(
    ffi.Pointer<gs_sparam_t> param,
    ffi.Pointer<vec4> val,
  ) {
    return _gs_shader_set_vec4(
      param,
      val,
    );
  }

  late final _gs_shader_set_vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_sparam_t>,
              ffi.Pointer<vec4>)>>('gs_shader_set_vec4');
  late final _gs_shader_set_vec4 = _gs_shader_set_vec4Ptr
      .asFunction<void Function(ffi.Pointer<gs_sparam_t>, ffi.Pointer<vec4>)>();

  void gs_shader_set_texture(
    ffi.Pointer<gs_sparam_t> param,
    ffi.Pointer<gs_texture_t> val,
  ) {
    return _gs_shader_set_texture(
      param,
      val,
    );
  }

  late final _gs_shader_set_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_sparam_t>,
              ffi.Pointer<gs_texture_t>)>>('gs_shader_set_texture');
  late final _gs_shader_set_texture = _gs_shader_set_texturePtr.asFunction<
      void Function(ffi.Pointer<gs_sparam_t>, ffi.Pointer<gs_texture_t>)>();

  void gs_shader_set_val(
    ffi.Pointer<gs_sparam_t> param,
    ffi.Pointer<ffi.Void> val,
    int size,
  ) {
    return _gs_shader_set_val(
      param,
      val,
      size,
    );
  }

  late final _gs_shader_set_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_sparam_t>, ffi.Pointer<ffi.Void>,
              size_t)>>('gs_shader_set_val');
  late final _gs_shader_set_val = _gs_shader_set_valPtr.asFunction<
      void Function(ffi.Pointer<gs_sparam_t>, ffi.Pointer<ffi.Void>, int)>();

  void gs_shader_set_default(
    ffi.Pointer<gs_sparam_t> param,
  ) {
    return _gs_shader_set_default(
      param,
    );
  }

  late final _gs_shader_set_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_sparam_t>)>>(
          'gs_shader_set_default');
  late final _gs_shader_set_default = _gs_shader_set_defaultPtr
      .asFunction<void Function(ffi.Pointer<gs_sparam_t>)>();

  void gs_shader_set_next_sampler(
    ffi.Pointer<gs_sparam_t> param,
    ffi.Pointer<gs_samplerstate_t> sampler,
  ) {
    return _gs_shader_set_next_sampler(
      param,
      sampler,
    );
  }

  late final _gs_shader_set_next_samplerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_sparam_t>,
              ffi.Pointer<gs_samplerstate_t>)>>('gs_shader_set_next_sampler');
  late final _gs_shader_set_next_sampler =
      _gs_shader_set_next_samplerPtr.asFunction<
          void Function(
              ffi.Pointer<gs_sparam_t>, ffi.Pointer<gs_samplerstate_t>)>();

  void gs_effect_destroy(
    ffi.Pointer<gs_effect_t> effect,
  ) {
    return _gs_effect_destroy(
      effect,
    );
  }

  late final _gs_effect_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_effect_t>)>>(
          'gs_effect_destroy');
  late final _gs_effect_destroy = _gs_effect_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_effect_t>)>();

  ffi.Pointer<gs_technique_t> gs_effect_get_technique(
    ffi.Pointer<gs_effect_t> effect,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gs_effect_get_technique(
      effect,
      name,
    );
  }

  late final _gs_effect_get_techniquePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_technique_t> Function(ffi.Pointer<gs_effect_t>,
              ffi.Pointer<ffi.Int8>)>>('gs_effect_get_technique');
  late final _gs_effect_get_technique = _gs_effect_get_techniquePtr.asFunction<
      ffi.Pointer<gs_technique_t> Function(
          ffi.Pointer<gs_effect_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gs_technique_t> gs_effect_get_current_technique(
    ffi.Pointer<gs_effect_t> effect,
  ) {
    return _gs_effect_get_current_technique(
      effect,
    );
  }

  late final _gs_effect_get_current_techniquePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_technique_t> Function(
              ffi.Pointer<gs_effect_t>)>>('gs_effect_get_current_technique');
  late final _gs_effect_get_current_technique =
      _gs_effect_get_current_techniquePtr.asFunction<
          ffi.Pointer<gs_technique_t> Function(ffi.Pointer<gs_effect_t>)>();

  int gs_technique_begin(
    ffi.Pointer<gs_technique_t> technique,
  ) {
    return _gs_technique_begin(
      technique,
    );
  }

  late final _gs_technique_beginPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gs_technique_t>)>>(
          'gs_technique_begin');
  late final _gs_technique_begin = _gs_technique_beginPtr
      .asFunction<int Function(ffi.Pointer<gs_technique_t>)>();

  void gs_technique_end(
    ffi.Pointer<gs_technique_t> technique,
  ) {
    return _gs_technique_end(
      technique,
    );
  }

  late final _gs_technique_endPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_technique_t>)>>(
      'gs_technique_end');
  late final _gs_technique_end = _gs_technique_endPtr
      .asFunction<void Function(ffi.Pointer<gs_technique_t>)>();

  int gs_technique_begin_pass(
    ffi.Pointer<gs_technique_t> technique,
    int pass,
  ) {
    return _gs_technique_begin_pass(
      technique,
      pass,
    );
  }

  late final _gs_technique_begin_passPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gs_technique_t>, size_t)>>('gs_technique_begin_pass');
  late final _gs_technique_begin_pass = _gs_technique_begin_passPtr
      .asFunction<int Function(ffi.Pointer<gs_technique_t>, int)>();

  int gs_technique_begin_pass_by_name(
    ffi.Pointer<gs_technique_t> technique,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gs_technique_begin_pass_by_name(
      technique,
      name,
    );
  }

  late final _gs_technique_begin_pass_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<gs_technique_t>,
              ffi.Pointer<ffi.Int8>)>>('gs_technique_begin_pass_by_name');
  late final _gs_technique_begin_pass_by_name =
      _gs_technique_begin_pass_by_namePtr.asFunction<
          int Function(ffi.Pointer<gs_technique_t>, ffi.Pointer<ffi.Int8>)>();

  void gs_technique_end_pass(
    ffi.Pointer<gs_technique_t> technique,
  ) {
    return _gs_technique_end_pass(
      technique,
    );
  }

  late final _gs_technique_end_passPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_technique_t>)>>(
      'gs_technique_end_pass');
  late final _gs_technique_end_pass = _gs_technique_end_passPtr
      .asFunction<void Function(ffi.Pointer<gs_technique_t>)>();

  ffi.Pointer<gs_epass_t> gs_technique_get_pass_by_idx(
    ffi.Pointer<gs_technique_t> technique,
    int pass,
  ) {
    return _gs_technique_get_pass_by_idx(
      technique,
      pass,
    );
  }

  late final _gs_technique_get_pass_by_idxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_epass_t> Function(ffi.Pointer<gs_technique_t>,
              size_t)>>('gs_technique_get_pass_by_idx');
  late final _gs_technique_get_pass_by_idx =
      _gs_technique_get_pass_by_idxPtr.asFunction<
          ffi.Pointer<gs_epass_t> Function(ffi.Pointer<gs_technique_t>, int)>();

  ffi.Pointer<gs_epass_t> gs_technique_get_pass_by_name(
    ffi.Pointer<gs_technique_t> technique,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gs_technique_get_pass_by_name(
      technique,
      name,
    );
  }

  late final _gs_technique_get_pass_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_epass_t> Function(ffi.Pointer<gs_technique_t>,
              ffi.Pointer<ffi.Int8>)>>('gs_technique_get_pass_by_name');
  late final _gs_technique_get_pass_by_name =
      _gs_technique_get_pass_by_namePtr.asFunction<
          ffi.Pointer<gs_epass_t> Function(
              ffi.Pointer<gs_technique_t>, ffi.Pointer<ffi.Int8>)>();

  int gs_effect_get_num_params(
    ffi.Pointer<gs_effect_t> effect,
  ) {
    return _gs_effect_get_num_params(
      effect,
    );
  }

  late final _gs_effect_get_num_paramsPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gs_effect_t>)>>(
          'gs_effect_get_num_params');
  late final _gs_effect_get_num_params = _gs_effect_get_num_paramsPtr
      .asFunction<int Function(ffi.Pointer<gs_effect_t>)>();

  ffi.Pointer<gs_eparam_t> gs_effect_get_param_by_idx(
    ffi.Pointer<gs_effect_t> effect,
    int param,
  ) {
    return _gs_effect_get_param_by_idx(
      effect,
      param,
    );
  }

  late final _gs_effect_get_param_by_idxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_eparam_t> Function(
              ffi.Pointer<gs_effect_t>, size_t)>>('gs_effect_get_param_by_idx');
  late final _gs_effect_get_param_by_idx =
      _gs_effect_get_param_by_idxPtr.asFunction<
          ffi.Pointer<gs_eparam_t> Function(ffi.Pointer<gs_effect_t>, int)>();

  ffi.Pointer<gs_eparam_t> gs_effect_get_param_by_name(
    ffi.Pointer<gs_effect_t> effect,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gs_effect_get_param_by_name(
      effect,
      name,
    );
  }

  late final _gs_effect_get_param_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_eparam_t> Function(ffi.Pointer<gs_effect_t>,
              ffi.Pointer<ffi.Int8>)>>('gs_effect_get_param_by_name');
  late final _gs_effect_get_param_by_name =
      _gs_effect_get_param_by_namePtr.asFunction<
          ffi.Pointer<gs_eparam_t> Function(
              ffi.Pointer<gs_effect_t>, ffi.Pointer<ffi.Int8>)>();

  int gs_param_get_num_annotations(
    ffi.Pointer<gs_eparam_t> param,
  ) {
    return _gs_param_get_num_annotations(
      param,
    );
  }

  late final _gs_param_get_num_annotationsPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gs_eparam_t>)>>(
          'gs_param_get_num_annotations');
  late final _gs_param_get_num_annotations = _gs_param_get_num_annotationsPtr
      .asFunction<int Function(ffi.Pointer<gs_eparam_t>)>();

  ffi.Pointer<gs_eparam_t> gs_param_get_annotation_by_idx(
    ffi.Pointer<gs_eparam_t> param,
    int annotation,
  ) {
    return _gs_param_get_annotation_by_idx(
      param,
      annotation,
    );
  }

  late final _gs_param_get_annotation_by_idxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_eparam_t> Function(ffi.Pointer<gs_eparam_t>,
              size_t)>>('gs_param_get_annotation_by_idx');
  late final _gs_param_get_annotation_by_idx =
      _gs_param_get_annotation_by_idxPtr.asFunction<
          ffi.Pointer<gs_eparam_t> Function(ffi.Pointer<gs_eparam_t>, int)>();

  ffi.Pointer<gs_eparam_t> gs_param_get_annotation_by_name(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gs_param_get_annotation_by_name(
      param,
      name,
    );
  }

  late final _gs_param_get_annotation_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_eparam_t> Function(ffi.Pointer<gs_eparam_t>,
              ffi.Pointer<ffi.Int8>)>>('gs_param_get_annotation_by_name');
  late final _gs_param_get_annotation_by_name =
      _gs_param_get_annotation_by_namePtr.asFunction<
          ffi.Pointer<gs_eparam_t> Function(
              ffi.Pointer<gs_eparam_t>, ffi.Pointer<ffi.Int8>)>();

  /// Helper function to simplify effect usage.  Use with a while loop that
  /// contains drawing functions.  Automatically handles techniques, passes, and
  /// unloading.
  int gs_effect_loop(
    ffi.Pointer<gs_effect_t> effect,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gs_effect_loop(
      effect,
      name,
    );
  }

  late final _gs_effect_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<gs_effect_t>,
              ffi.Pointer<ffi.Int8>)>>('gs_effect_loop');
  late final _gs_effect_loop = _gs_effect_loopPtr.asFunction<
      int Function(ffi.Pointer<gs_effect_t>, ffi.Pointer<ffi.Int8>)>();

  /// used internally
  void gs_effect_update_params(
    ffi.Pointer<gs_effect_t> effect,
  ) {
    return _gs_effect_update_params(
      effect,
    );
  }

  late final _gs_effect_update_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_effect_t>)>>(
          'gs_effect_update_params');
  late final _gs_effect_update_params = _gs_effect_update_paramsPtr
      .asFunction<void Function(ffi.Pointer<gs_effect_t>)>();

  ffi.Pointer<gs_eparam_t> gs_effect_get_viewproj_matrix(
    ffi.Pointer<gs_effect_t> effect,
  ) {
    return _gs_effect_get_viewproj_matrix(
      effect,
    );
  }

  late final _gs_effect_get_viewproj_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_eparam_t> Function(
              ffi.Pointer<gs_effect_t>)>>('gs_effect_get_viewproj_matrix');
  late final _gs_effect_get_viewproj_matrix =
      _gs_effect_get_viewproj_matrixPtr.asFunction<
          ffi.Pointer<gs_eparam_t> Function(ffi.Pointer<gs_effect_t>)>();

  ffi.Pointer<gs_eparam_t> gs_effect_get_world_matrix(
    ffi.Pointer<gs_effect_t> effect,
  ) {
    return _gs_effect_get_world_matrix(
      effect,
    );
  }

  late final _gs_effect_get_world_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_eparam_t> Function(
              ffi.Pointer<gs_effect_t>)>>('gs_effect_get_world_matrix');
  late final _gs_effect_get_world_matrix =
      _gs_effect_get_world_matrixPtr.asFunction<
          ffi.Pointer<gs_eparam_t> Function(ffi.Pointer<gs_effect_t>)>();

  void gs_effect_get_param_info(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<gs_effect_param_info> info,
  ) {
    return _gs_effect_get_param_info(
      param,
      info,
    );
  }

  late final _gs_effect_get_param_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_eparam_t>,
              ffi.Pointer<gs_effect_param_info>)>>('gs_effect_get_param_info');
  late final _gs_effect_get_param_info =
      _gs_effect_get_param_infoPtr.asFunction<
          void Function(
              ffi.Pointer<gs_eparam_t>, ffi.Pointer<gs_effect_param_info>)>();

  void gs_effect_set_bool(
    ffi.Pointer<gs_eparam_t> param,
    int val,
  ) {
    return _gs_effect_set_bool(
      param,
      val,
    );
  }

  late final _gs_effect_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_eparam_t>, ffi.Uint8)>>('gs_effect_set_bool');
  late final _gs_effect_set_bool = _gs_effect_set_boolPtr
      .asFunction<void Function(ffi.Pointer<gs_eparam_t>, int)>();

  void gs_effect_set_float(
    ffi.Pointer<gs_eparam_t> param,
    double val,
  ) {
    return _gs_effect_set_float(
      param,
      val,
    );
  }

  late final _gs_effect_set_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_eparam_t>, ffi.Float)>>('gs_effect_set_float');
  late final _gs_effect_set_float = _gs_effect_set_floatPtr
      .asFunction<void Function(ffi.Pointer<gs_eparam_t>, double)>();

  void gs_effect_set_int(
    ffi.Pointer<gs_eparam_t> param,
    int val,
  ) {
    return _gs_effect_set_int(
      param,
      val,
    );
  }

  late final _gs_effect_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_eparam_t>, ffi.Int32)>>('gs_effect_set_int');
  late final _gs_effect_set_int = _gs_effect_set_intPtr
      .asFunction<void Function(ffi.Pointer<gs_eparam_t>, int)>();

  void gs_effect_set_matrix4(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<matrix4> val,
  ) {
    return _gs_effect_set_matrix4(
      param,
      val,
    );
  }

  late final _gs_effect_set_matrix4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_eparam_t>,
              ffi.Pointer<matrix4>)>>('gs_effect_set_matrix4');
  late final _gs_effect_set_matrix4 = _gs_effect_set_matrix4Ptr.asFunction<
      void Function(ffi.Pointer<gs_eparam_t>, ffi.Pointer<matrix4>)>();

  void gs_effect_set_vec2(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<vec2> val,
  ) {
    return _gs_effect_set_vec2(
      param,
      val,
    );
  }

  late final _gs_effect_set_vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_eparam_t>,
              ffi.Pointer<vec2>)>>('gs_effect_set_vec2');
  late final _gs_effect_set_vec2 = _gs_effect_set_vec2Ptr
      .asFunction<void Function(ffi.Pointer<gs_eparam_t>, ffi.Pointer<vec2>)>();

  void gs_effect_set_vec3(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<vec3> val,
  ) {
    return _gs_effect_set_vec3(
      param,
      val,
    );
  }

  late final _gs_effect_set_vec3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_eparam_t>,
              ffi.Pointer<vec3>)>>('gs_effect_set_vec3');
  late final _gs_effect_set_vec3 = _gs_effect_set_vec3Ptr
      .asFunction<void Function(ffi.Pointer<gs_eparam_t>, ffi.Pointer<vec3>)>();

  void gs_effect_set_vec4(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<vec4> val,
  ) {
    return _gs_effect_set_vec4(
      param,
      val,
    );
  }

  late final _gs_effect_set_vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_eparam_t>,
              ffi.Pointer<vec4>)>>('gs_effect_set_vec4');
  late final _gs_effect_set_vec4 = _gs_effect_set_vec4Ptr
      .asFunction<void Function(ffi.Pointer<gs_eparam_t>, ffi.Pointer<vec4>)>();

  void gs_effect_set_texture(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<gs_texture_t> val,
  ) {
    return _gs_effect_set_texture(
      param,
      val,
    );
  }

  late final _gs_effect_set_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_eparam_t>,
              ffi.Pointer<gs_texture_t>)>>('gs_effect_set_texture');
  late final _gs_effect_set_texture = _gs_effect_set_texturePtr.asFunction<
      void Function(ffi.Pointer<gs_eparam_t>, ffi.Pointer<gs_texture_t>)>();

  void gs_effect_set_texture_srgb(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<gs_texture_t> val,
  ) {
    return _gs_effect_set_texture_srgb(
      param,
      val,
    );
  }

  late final _gs_effect_set_texture_srgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_eparam_t>,
              ffi.Pointer<gs_texture_t>)>>('gs_effect_set_texture_srgb');
  late final _gs_effect_set_texture_srgb =
      _gs_effect_set_texture_srgbPtr.asFunction<
          void Function(ffi.Pointer<gs_eparam_t>, ffi.Pointer<gs_texture_t>)>();

  void gs_effect_set_val(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<ffi.Void> val,
    int size,
  ) {
    return _gs_effect_set_val(
      param,
      val,
      size,
    );
  }

  late final _gs_effect_set_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_eparam_t>, ffi.Pointer<ffi.Void>,
              size_t)>>('gs_effect_set_val');
  late final _gs_effect_set_val = _gs_effect_set_valPtr.asFunction<
      void Function(ffi.Pointer<gs_eparam_t>, ffi.Pointer<ffi.Void>, int)>();

  void gs_effect_set_default(
    ffi.Pointer<gs_eparam_t> param,
  ) {
    return _gs_effect_set_default(
      param,
    );
  }

  late final _gs_effect_set_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_eparam_t>)>>(
          'gs_effect_set_default');
  late final _gs_effect_set_default = _gs_effect_set_defaultPtr
      .asFunction<void Function(ffi.Pointer<gs_eparam_t>)>();

  int gs_effect_get_val_size(
    ffi.Pointer<gs_eparam_t> param,
  ) {
    return _gs_effect_get_val_size(
      param,
    );
  }

  late final _gs_effect_get_val_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gs_eparam_t>)>>(
          'gs_effect_get_val_size');
  late final _gs_effect_get_val_size = _gs_effect_get_val_sizePtr
      .asFunction<int Function(ffi.Pointer<gs_eparam_t>)>();

  ffi.Pointer<ffi.Void> gs_effect_get_val(
    ffi.Pointer<gs_eparam_t> param,
  ) {
    return _gs_effect_get_val(
      param,
    );
  }

  late final _gs_effect_get_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gs_eparam_t>)>>('gs_effect_get_val');
  late final _gs_effect_get_val = _gs_effect_get_valPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<gs_eparam_t>)>();

  int gs_effect_get_default_val_size(
    ffi.Pointer<gs_eparam_t> param,
  ) {
    return _gs_effect_get_default_val_size(
      param,
    );
  }

  late final _gs_effect_get_default_val_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gs_eparam_t>)>>(
          'gs_effect_get_default_val_size');
  late final _gs_effect_get_default_val_size =
      _gs_effect_get_default_val_sizePtr
          .asFunction<int Function(ffi.Pointer<gs_eparam_t>)>();

  ffi.Pointer<ffi.Void> gs_effect_get_default_val(
    ffi.Pointer<gs_eparam_t> param,
  ) {
    return _gs_effect_get_default_val(
      param,
    );
  }

  late final _gs_effect_get_default_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gs_eparam_t>)>>('gs_effect_get_default_val');
  late final _gs_effect_get_default_val = _gs_effect_get_default_valPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<gs_eparam_t>)>();

  void gs_effect_set_next_sampler(
    ffi.Pointer<gs_eparam_t> param,
    ffi.Pointer<gs_samplerstate_t> sampler,
  ) {
    return _gs_effect_set_next_sampler(
      param,
      sampler,
    );
  }

  late final _gs_effect_set_next_samplerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_eparam_t>,
              ffi.Pointer<gs_samplerstate_t>)>>('gs_effect_set_next_sampler');
  late final _gs_effect_set_next_sampler =
      _gs_effect_set_next_samplerPtr.asFunction<
          void Function(
              ffi.Pointer<gs_eparam_t>, ffi.Pointer<gs_samplerstate_t>)>();

  void gs_effect_set_color(
    ffi.Pointer<gs_eparam_t> param,
    int argb,
  ) {
    return _gs_effect_set_color(
      param,
      argb,
    );
  }

  late final _gs_effect_set_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_eparam_t>, ffi.Uint32)>>('gs_effect_set_color');
  late final _gs_effect_set_color = _gs_effect_set_colorPtr
      .asFunction<void Function(ffi.Pointer<gs_eparam_t>, int)>();

  ffi.Pointer<gs_texrender_t> gs_texrender_create(
    int format,
    int zsformat,
  ) {
    return _gs_texrender_create(
      format,
      zsformat,
    );
  }

  late final _gs_texrender_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_texrender_t> Function(
              ffi.Int32, ffi.Int32)>>('gs_texrender_create');
  late final _gs_texrender_create = _gs_texrender_createPtr
      .asFunction<ffi.Pointer<gs_texrender_t> Function(int, int)>();

  void gs_texrender_destroy(
    ffi.Pointer<gs_texrender_t> texrender,
  ) {
    return _gs_texrender_destroy(
      texrender,
    );
  }

  late final _gs_texrender_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_texrender_t>)>>(
      'gs_texrender_destroy');
  late final _gs_texrender_destroy = _gs_texrender_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_texrender_t>)>();

  int gs_texrender_begin(
    ffi.Pointer<gs_texrender_t> texrender,
    int cx,
    int cy,
  ) {
    return _gs_texrender_begin(
      texrender,
      cx,
      cy,
    );
  }

  late final _gs_texrender_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<gs_texrender_t>, ffi.Uint32,
              ffi.Uint32)>>('gs_texrender_begin');
  late final _gs_texrender_begin = _gs_texrender_beginPtr
      .asFunction<int Function(ffi.Pointer<gs_texrender_t>, int, int)>();

  void gs_texrender_end(
    ffi.Pointer<gs_texrender_t> texrender,
  ) {
    return _gs_texrender_end(
      texrender,
    );
  }

  late final _gs_texrender_endPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_texrender_t>)>>(
      'gs_texrender_end');
  late final _gs_texrender_end = _gs_texrender_endPtr
      .asFunction<void Function(ffi.Pointer<gs_texrender_t>)>();

  void gs_texrender_reset(
    ffi.Pointer<gs_texrender_t> texrender,
  ) {
    return _gs_texrender_reset(
      texrender,
    );
  }

  late final _gs_texrender_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_texrender_t>)>>(
      'gs_texrender_reset');
  late final _gs_texrender_reset = _gs_texrender_resetPtr
      .asFunction<void Function(ffi.Pointer<gs_texrender_t>)>();

  ffi.Pointer<gs_texture_t> gs_texrender_get_texture(
    ffi.Pointer<gs_texrender_t> texrender,
  ) {
    return _gs_texrender_get_texture(
      texrender,
    );
  }

  late final _gs_texrender_get_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_texture_t> Function(
              ffi.Pointer<gs_texrender_t>)>>('gs_texrender_get_texture');
  late final _gs_texrender_get_texture =
      _gs_texrender_get_texturePtr.asFunction<
          ffi.Pointer<gs_texture_t> Function(ffi.Pointer<gs_texrender_t>)>();

  ffi.Pointer<ffi.Int8> gs_get_device_name() {
    return _gs_get_device_name();
  }

  late final _gs_get_device_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'gs_get_device_name');
  late final _gs_get_device_name =
      _gs_get_device_namePtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  int gs_get_device_type() {
    return _gs_get_device_type();
  }

  late final _gs_get_device_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('gs_get_device_type');
  late final _gs_get_device_type =
      _gs_get_device_typePtr.asFunction<int Function()>();

  void gs_enum_adapters(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Uint8 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Uint32)>>
        callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _gs_enum_adapters(
      callback,
      param,
    );
  }

  late final _gs_enum_adaptersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Int8>, ffi.Uint32)>>,
              ffi.Pointer<ffi.Void>)>>('gs_enum_adapters');
  late final _gs_enum_adapters = _gs_enum_adaptersPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Int8>, ffi.Uint32)>>,
          ffi.Pointer<ffi.Void>)>();

  int gs_create(
    ffi.Pointer<ffi.Pointer<graphics_t>> graphics,
    ffi.Pointer<ffi.Int8> module,
    int adapter,
  ) {
    return _gs_create(
      graphics,
      module,
      adapter,
    );
  }

  late final _gs_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<graphics_t>>,
              ffi.Pointer<ffi.Int8>, ffi.Uint32)>>('gs_create');
  late final _gs_create = _gs_createPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<graphics_t>>, ffi.Pointer<ffi.Int8>, int)>();

  void gs_destroy(
    ffi.Pointer<graphics_t> graphics,
  ) {
    return _gs_destroy(
      graphics,
    );
  }

  late final _gs_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<graphics_t>)>>(
          'gs_destroy');
  late final _gs_destroy =
      _gs_destroyPtr.asFunction<void Function(ffi.Pointer<graphics_t>)>();

  void gs_enter_context(
    ffi.Pointer<graphics_t> graphics,
  ) {
    return _gs_enter_context(
      graphics,
    );
  }

  late final _gs_enter_contextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<graphics_t>)>>(
          'gs_enter_context');
  late final _gs_enter_context =
      _gs_enter_contextPtr.asFunction<void Function(ffi.Pointer<graphics_t>)>();

  void gs_leave_context() {
    return _gs_leave_context();
  }

  late final _gs_leave_contextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_leave_context');
  late final _gs_leave_context =
      _gs_leave_contextPtr.asFunction<void Function()>();

  ffi.Pointer<graphics_t> gs_get_context() {
    return _gs_get_context();
  }

  late final _gs_get_contextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<graphics_t> Function()>>(
          'gs_get_context');
  late final _gs_get_context =
      _gs_get_contextPtr.asFunction<ffi.Pointer<graphics_t> Function()>();

  ffi.Pointer<ffi.Void> gs_get_device_obj() {
    return _gs_get_device_obj();
  }

  late final _gs_get_device_objPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'gs_get_device_obj');
  late final _gs_get_device_obj =
      _gs_get_device_objPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  void gs_matrix_push() {
    return _gs_matrix_push();
  }

  late final _gs_matrix_pushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_matrix_push');
  late final _gs_matrix_push = _gs_matrix_pushPtr.asFunction<void Function()>();

  void gs_matrix_pop() {
    return _gs_matrix_pop();
  }

  late final _gs_matrix_popPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_matrix_pop');
  late final _gs_matrix_pop = _gs_matrix_popPtr.asFunction<void Function()>();

  void gs_matrix_identity() {
    return _gs_matrix_identity();
  }

  late final _gs_matrix_identityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_matrix_identity');
  late final _gs_matrix_identity =
      _gs_matrix_identityPtr.asFunction<void Function()>();

  void gs_matrix_transpose() {
    return _gs_matrix_transpose();
  }

  late final _gs_matrix_transposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_matrix_transpose');
  late final _gs_matrix_transpose =
      _gs_matrix_transposePtr.asFunction<void Function()>();

  void gs_matrix_set(
    ffi.Pointer<matrix4> matrix,
  ) {
    return _gs_matrix_set(
      matrix,
    );
  }

  late final _gs_matrix_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<matrix4>)>>(
          'gs_matrix_set');
  late final _gs_matrix_set =
      _gs_matrix_setPtr.asFunction<void Function(ffi.Pointer<matrix4>)>();

  void gs_matrix_get(
    ffi.Pointer<matrix4> dst,
  ) {
    return _gs_matrix_get(
      dst,
    );
  }

  late final _gs_matrix_getPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<matrix4>)>>(
          'gs_matrix_get');
  late final _gs_matrix_get =
      _gs_matrix_getPtr.asFunction<void Function(ffi.Pointer<matrix4>)>();

  void gs_matrix_mul(
    ffi.Pointer<matrix4> matrix,
  ) {
    return _gs_matrix_mul(
      matrix,
    );
  }

  late final _gs_matrix_mulPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<matrix4>)>>(
          'gs_matrix_mul');
  late final _gs_matrix_mul =
      _gs_matrix_mulPtr.asFunction<void Function(ffi.Pointer<matrix4>)>();

  void gs_matrix_rotquat(
    ffi.Pointer<quat> rot,
  ) {
    return _gs_matrix_rotquat(
      rot,
    );
  }

  late final _gs_matrix_rotquatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<quat>)>>(
          'gs_matrix_rotquat');
  late final _gs_matrix_rotquat =
      _gs_matrix_rotquatPtr.asFunction<void Function(ffi.Pointer<quat>)>();

  void gs_matrix_rotaa(
    ffi.Pointer<axisang> rot,
  ) {
    return _gs_matrix_rotaa(
      rot,
    );
  }

  late final _gs_matrix_rotaaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<axisang>)>>(
          'gs_matrix_rotaa');
  late final _gs_matrix_rotaa =
      _gs_matrix_rotaaPtr.asFunction<void Function(ffi.Pointer<axisang>)>();

  void gs_matrix_translate(
    ffi.Pointer<vec3> pos,
  ) {
    return _gs_matrix_translate(
      pos,
    );
  }

  late final _gs_matrix_translatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vec3>)>>(
          'gs_matrix_translate');
  late final _gs_matrix_translate =
      _gs_matrix_translatePtr.asFunction<void Function(ffi.Pointer<vec3>)>();

  void gs_matrix_scale(
    ffi.Pointer<vec3> scale,
  ) {
    return _gs_matrix_scale(
      scale,
    );
  }

  late final _gs_matrix_scalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vec3>)>>(
          'gs_matrix_scale');
  late final _gs_matrix_scale =
      _gs_matrix_scalePtr.asFunction<void Function(ffi.Pointer<vec3>)>();

  void gs_matrix_rotaa4f(
    double x,
    double y,
    double z,
    double angle,
  ) {
    return _gs_matrix_rotaa4f(
      x,
      y,
      z,
      angle,
    );
  }

  late final _gs_matrix_rotaa4fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float,
              ffi.Float)>>('gs_matrix_rotaa4f');
  late final _gs_matrix_rotaa4f = _gs_matrix_rotaa4fPtr
      .asFunction<void Function(double, double, double, double)>();

  void gs_matrix_translate3f(
    double x,
    double y,
    double z,
  ) {
    return _gs_matrix_translate3f(
      x,
      y,
      z,
    );
  }

  late final _gs_matrix_translate3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Float, ffi.Float, ffi.Float)>>('gs_matrix_translate3f');
  late final _gs_matrix_translate3f = _gs_matrix_translate3fPtr
      .asFunction<void Function(double, double, double)>();

  void gs_matrix_scale3f(
    double x,
    double y,
    double z,
  ) {
    return _gs_matrix_scale3f(
      x,
      y,
      z,
    );
  }

  late final _gs_matrix_scale3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Float, ffi.Float, ffi.Float)>>('gs_matrix_scale3f');
  late final _gs_matrix_scale3f =
      _gs_matrix_scale3fPtr.asFunction<void Function(double, double, double)>();

  void gs_render_start(
    int b_new,
  ) {
    return _gs_render_start(
      b_new,
    );
  }

  late final _gs_render_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'gs_render_start');
  late final _gs_render_start =
      _gs_render_startPtr.asFunction<void Function(int)>();

  void gs_render_stop(
    int mode,
  ) {
    return _gs_render_stop(
      mode,
    );
  }

  late final _gs_render_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'gs_render_stop');
  late final _gs_render_stop =
      _gs_render_stopPtr.asFunction<void Function(int)>();

  ffi.Pointer<gs_vertbuffer_t> gs_render_save() {
    return _gs_render_save();
  }

  late final _gs_render_savePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_vertbuffer_t> Function()>>(
          'gs_render_save');
  late final _gs_render_save =
      _gs_render_savePtr.asFunction<ffi.Pointer<gs_vertbuffer_t> Function()>();

  void gs_vertex2f(
    double x,
    double y,
  ) {
    return _gs_vertex2f(
      x,
      y,
    );
  }

  late final _gs_vertex2fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'gs_vertex2f');
  late final _gs_vertex2f =
      _gs_vertex2fPtr.asFunction<void Function(double, double)>();

  void gs_vertex3f(
    double x,
    double y,
    double z,
  ) {
    return _gs_vertex3f(
      x,
      y,
      z,
    );
  }

  late final _gs_vertex3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float)>>('gs_vertex3f');
  late final _gs_vertex3f =
      _gs_vertex3fPtr.asFunction<void Function(double, double, double)>();

  void gs_normal3f(
    double x,
    double y,
    double z,
  ) {
    return _gs_normal3f(
      x,
      y,
      z,
    );
  }

  late final _gs_normal3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float)>>('gs_normal3f');
  late final _gs_normal3f =
      _gs_normal3fPtr.asFunction<void Function(double, double, double)>();

  void gs_color(
    int color,
  ) {
    return _gs_color(
      color,
    );
  }

  late final _gs_colorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('gs_color');
  late final _gs_color = _gs_colorPtr.asFunction<void Function(int)>();

  void gs_texcoord(
    double x,
    double y,
    int unit,
  ) {
    return _gs_texcoord(
      x,
      y,
      unit,
    );
  }

  late final _gs_texcoordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Int32)>>('gs_texcoord');
  late final _gs_texcoord =
      _gs_texcoordPtr.asFunction<void Function(double, double, int)>();

  void gs_vertex2v(
    ffi.Pointer<vec2> v,
  ) {
    return _gs_vertex2v(
      v,
    );
  }

  late final _gs_vertex2vPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vec2>)>>(
          'gs_vertex2v');
  late final _gs_vertex2v =
      _gs_vertex2vPtr.asFunction<void Function(ffi.Pointer<vec2>)>();

  void gs_vertex3v(
    ffi.Pointer<vec3> v,
  ) {
    return _gs_vertex3v(
      v,
    );
  }

  late final _gs_vertex3vPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vec3>)>>(
          'gs_vertex3v');
  late final _gs_vertex3v =
      _gs_vertex3vPtr.asFunction<void Function(ffi.Pointer<vec3>)>();

  void gs_normal3v(
    ffi.Pointer<vec3> v,
  ) {
    return _gs_normal3v(
      v,
    );
  }

  late final _gs_normal3vPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vec3>)>>(
          'gs_normal3v');
  late final _gs_normal3v =
      _gs_normal3vPtr.asFunction<void Function(ffi.Pointer<vec3>)>();

  void gs_color4v(
    ffi.Pointer<vec4> v,
  ) {
    return _gs_color4v(
      v,
    );
  }

  late final _gs_color4vPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vec4>)>>(
          'gs_color4v');
  late final _gs_color4v =
      _gs_color4vPtr.asFunction<void Function(ffi.Pointer<vec4>)>();

  void gs_texcoord2v(
    ffi.Pointer<vec2> v,
    int unit,
  ) {
    return _gs_texcoord2v(
      v,
      unit,
    );
  }

  late final _gs_texcoord2vPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vec2>, ffi.Int32)>>(
      'gs_texcoord2v');
  late final _gs_texcoord2v =
      _gs_texcoord2vPtr.asFunction<void Function(ffi.Pointer<vec2>, int)>();

  ffi.Pointer<input_t> gs_get_input() {
    return _gs_get_input();
  }

  late final _gs_get_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<input_t> Function()>>(
          'gs_get_input');
  late final _gs_get_input =
      _gs_get_inputPtr.asFunction<ffi.Pointer<input_t> Function()>();

  ffi.Pointer<gs_effect_t> gs_get_effect() {
    return _gs_get_effect();
  }

  late final _gs_get_effectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_effect_t> Function()>>(
          'gs_get_effect');
  late final _gs_get_effect =
      _gs_get_effectPtr.asFunction<ffi.Pointer<gs_effect_t> Function()>();

  ffi.Pointer<gs_effect_t> gs_effect_create_from_file(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    return _gs_effect_create_from_file(
      file,
      error_string,
    );
  }

  late final _gs_effect_create_from_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gs_effect_t> Function(
                  ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'gs_effect_create_from_file');
  late final _gs_effect_create_from_file =
      _gs_effect_create_from_filePtr.asFunction<
          ffi.Pointer<gs_effect_t> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<gs_effect_t> gs_effect_create(
    ffi.Pointer<ffi.Int8> effect_string,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    return _gs_effect_create(
      effect_string,
      filename,
      error_string,
    );
  }

  late final _gs_effect_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_effect_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('gs_effect_create');
  late final _gs_effect_create = _gs_effect_createPtr.asFunction<
      ffi.Pointer<gs_effect_t> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<gs_shader_t> gs_vertexshader_create_from_file(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    return _gs_vertexshader_create_from_file(
      file,
      error_string,
    );
  }

  late final _gs_vertexshader_create_from_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gs_shader_t> Function(
                  ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'gs_vertexshader_create_from_file');
  late final _gs_vertexshader_create_from_file =
      _gs_vertexshader_create_from_filePtr.asFunction<
          ffi.Pointer<gs_shader_t> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<gs_shader_t> gs_pixelshader_create_from_file(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    return _gs_pixelshader_create_from_file(
      file,
      error_string,
    );
  }

  late final _gs_pixelshader_create_from_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gs_shader_t> Function(
                  ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'gs_pixelshader_create_from_file');
  late final _gs_pixelshader_create_from_file =
      _gs_pixelshader_create_from_filePtr.asFunction<
          ffi.Pointer<gs_shader_t> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<gs_texture_t> gs_texture_create_from_file(
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _gs_texture_create_from_file(
      file,
    );
  }

  late final _gs_texture_create_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_texture_t> Function(
              ffi.Pointer<ffi.Int8>)>>('gs_texture_create_from_file');
  late final _gs_texture_create_from_file = _gs_texture_create_from_filePtr
      .asFunction<ffi.Pointer<gs_texture_t> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Uint8> gs_create_texture_file_data(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<ffi.Uint32> cx,
    ffi.Pointer<ffi.Uint32> cy,
  ) {
    return _gs_create_texture_file_data(
      file,
      format,
      cx,
      cy,
    );
  }

  late final _gs_create_texture_file_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('gs_create_texture_file_data');
  late final _gs_create_texture_file_data =
      _gs_create_texture_file_dataPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>();

  /// Draws a 2D sprite
  ///
  /// If width or height is 0, the width or height of the texture will be used.
  /// The flip value specifies whether the texture should be flipped on the U or V
  /// axis with GS_FLIP_U and GS_FLIP_V.
  void gs_draw_sprite(
    ffi.Pointer<gs_texture_t> tex,
    int flip,
    int width,
    int height,
  ) {
    return _gs_draw_sprite(
      tex,
      flip,
      width,
      height,
    );
  }

  late final _gs_draw_spritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_texture_t>, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('gs_draw_sprite');
  late final _gs_draw_sprite = _gs_draw_spritePtr
      .asFunction<void Function(ffi.Pointer<gs_texture_t>, int, int, int)>();

  void gs_draw_sprite_subregion(
    ffi.Pointer<gs_texture_t> tex,
    int flip,
    int x,
    int y,
    int cx,
    int cy,
  ) {
    return _gs_draw_sprite_subregion(
      tex,
      flip,
      x,
      y,
      cx,
      cy,
    );
  }

  late final _gs_draw_sprite_subregionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_texture_t>, ffi.Uint32, ffi.Uint32,
              ffi.Uint32, ffi.Uint32, ffi.Uint32)>>('gs_draw_sprite_subregion');
  late final _gs_draw_sprite_subregion =
      _gs_draw_sprite_subregionPtr.asFunction<
          void Function(ffi.Pointer<gs_texture_t>, int, int, int, int, int)>();

  void gs_draw_cube_backdrop(
    ffi.Pointer<gs_texture_t> cubetex,
    ffi.Pointer<quat> rot,
    double left,
    double right,
    double top,
    double bottom,
    double znear,
  ) {
    return _gs_draw_cube_backdrop(
      cubetex,
      rot,
      left,
      right,
      top,
      bottom,
      znear,
    );
  }

  late final _gs_draw_cube_backdropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_texture_t>,
              ffi.Pointer<quat>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('gs_draw_cube_backdrop');
  late final _gs_draw_cube_backdrop = _gs_draw_cube_backdropPtr.asFunction<
      void Function(ffi.Pointer<gs_texture_t>, ffi.Pointer<quat>, double,
          double, double, double, double)>();

  /// sets the viewport to current swap chain size
  void gs_reset_viewport() {
    return _gs_reset_viewport();
  }

  late final _gs_reset_viewportPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_reset_viewport');
  late final _gs_reset_viewport =
      _gs_reset_viewportPtr.asFunction<void Function()>();

  /// sets default screen-sized orthographic mode
  void gs_set_2d_mode() {
    return _gs_set_2d_mode();
  }

  late final _gs_set_2d_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_set_2d_mode');
  late final _gs_set_2d_mode = _gs_set_2d_modePtr.asFunction<void Function()>();

  /// sets default screen-sized perspective mode
  void gs_set_3d_mode(
    double fovy,
    double znear,
    double zvar,
  ) {
    return _gs_set_3d_mode(
      fovy,
      znear,
      zvar,
    );
  }

  late final _gs_set_3d_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gs_set_3d_mode');
  late final _gs_set_3d_mode =
      _gs_set_3d_modePtr.asFunction<void Function(double, double, double)>();

  void gs_viewport_push() {
    return _gs_viewport_push();
  }

  late final _gs_viewport_pushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_viewport_push');
  late final _gs_viewport_push =
      _gs_viewport_pushPtr.asFunction<void Function()>();

  void gs_viewport_pop() {
    return _gs_viewport_pop();
  }

  late final _gs_viewport_popPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_viewport_pop');
  late final _gs_viewport_pop =
      _gs_viewport_popPtr.asFunction<void Function()>();

  void gs_texture_set_image(
    ffi.Pointer<gs_texture_t> tex,
    ffi.Pointer<ffi.Uint8> data,
    int linesize,
    int invert,
  ) {
    return _gs_texture_set_image(
      tex,
      data,
      linesize,
      invert,
    );
  }

  late final _gs_texture_set_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_texture_t>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Uint8)>>('gs_texture_set_image');
  late final _gs_texture_set_image = _gs_texture_set_imagePtr.asFunction<
      void Function(
          ffi.Pointer<gs_texture_t>, ffi.Pointer<ffi.Uint8>, int, int)>();

  void gs_cubetexture_set_image(
    ffi.Pointer<gs_texture_t> cubetex,
    int side,
    ffi.Pointer<ffi.Void> data,
    int linesize,
    int invert,
  ) {
    return _gs_cubetexture_set_image(
      cubetex,
      side,
      data,
      linesize,
      invert,
    );
  }

  late final _gs_cubetexture_set_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_texture_t>,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint8)>>('gs_cubetexture_set_image');
  late final _gs_cubetexture_set_image =
      _gs_cubetexture_set_imagePtr.asFunction<
          void Function(ffi.Pointer<gs_texture_t>, int, ffi.Pointer<ffi.Void>,
              int, int)>();

  void gs_perspective(
    double fovy,
    double aspect,
    double znear,
    double zfar,
  ) {
    return _gs_perspective(
      fovy,
      aspect,
      znear,
      zfar,
    );
  }

  late final _gs_perspectivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Float, ffi.Float, ffi.Float, ffi.Float)>>('gs_perspective');
  late final _gs_perspective = _gs_perspectivePtr
      .asFunction<void Function(double, double, double, double)>();

  void gs_blend_state_push() {
    return _gs_blend_state_push();
  }

  late final _gs_blend_state_pushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_blend_state_push');
  late final _gs_blend_state_push =
      _gs_blend_state_pushPtr.asFunction<void Function()>();

  void gs_blend_state_pop() {
    return _gs_blend_state_pop();
  }

  late final _gs_blend_state_popPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_blend_state_pop');
  late final _gs_blend_state_pop =
      _gs_blend_state_popPtr.asFunction<void Function()>();

  void gs_reset_blend_state() {
    return _gs_reset_blend_state();
  }

  late final _gs_reset_blend_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_reset_blend_state');
  late final _gs_reset_blend_state =
      _gs_reset_blend_statePtr.asFunction<void Function()>();

  ffi.Pointer<gs_swapchain_t> gs_swapchain_create(
    ffi.Pointer<gs_init_data> data,
  ) {
    return _gs_swapchain_create(
      data,
    );
  }

  late final _gs_swapchain_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_swapchain_t> Function(
              ffi.Pointer<gs_init_data>)>>('gs_swapchain_create');
  late final _gs_swapchain_create = _gs_swapchain_createPtr.asFunction<
      ffi.Pointer<gs_swapchain_t> Function(ffi.Pointer<gs_init_data>)>();

  void gs_resize(
    int x,
    int y,
  ) {
    return _gs_resize(
      x,
      y,
    );
  }

  late final _gs_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32, ffi.Uint32)>>(
          'gs_resize');
  late final _gs_resize = _gs_resizePtr.asFunction<void Function(int, int)>();

  void gs_get_size(
    ffi.Pointer<ffi.Uint32> x,
    ffi.Pointer<ffi.Uint32> y,
  ) {
    return _gs_get_size(
      x,
      y,
    );
  }

  late final _gs_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('gs_get_size');
  late final _gs_get_size = _gs_get_sizePtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int gs_get_width() {
    return _gs_get_width();
  }

  late final _gs_get_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('gs_get_width');
  late final _gs_get_width = _gs_get_widthPtr.asFunction<int Function()>();

  int gs_get_height() {
    return _gs_get_height();
  }

  late final _gs_get_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('gs_get_height');
  late final _gs_get_height = _gs_get_heightPtr.asFunction<int Function()>();

  ffi.Pointer<gs_texture_t> gs_texture_create(
    int width,
    int height,
    int color_format,
    int levels,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    int flags,
  ) {
    return _gs_texture_create(
      width,
      height,
      color_format,
      levels,
      data,
      flags,
    );
  }

  late final _gs_texture_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_texture_t> Function(
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Uint32)>>('gs_texture_create');
  late final _gs_texture_create = _gs_texture_createPtr.asFunction<
      ffi.Pointer<gs_texture_t> Function(
          int, int, int, int, ffi.Pointer<ffi.Pointer<ffi.Uint8>>, int)>();

  ffi.Pointer<gs_texture_t> gs_cubetexture_create(
    int size,
    int color_format,
    int levels,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    int flags,
  ) {
    return _gs_cubetexture_create(
      size,
      color_format,
      levels,
      data,
      flags,
    );
  }

  late final _gs_cubetexture_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_texture_t> Function(
              ffi.Uint32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Uint32)>>('gs_cubetexture_create');
  late final _gs_cubetexture_create = _gs_cubetexture_createPtr.asFunction<
      ffi.Pointer<gs_texture_t> Function(
          int, int, int, ffi.Pointer<ffi.Pointer<ffi.Uint8>>, int)>();

  ffi.Pointer<gs_texture_t> gs_voltexture_create(
    int width,
    int height,
    int depth,
    int color_format,
    int levels,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    int flags,
  ) {
    return _gs_voltexture_create(
      width,
      height,
      depth,
      color_format,
      levels,
      data,
      flags,
    );
  }

  late final _gs_voltexture_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_texture_t> Function(
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Uint32)>>('gs_voltexture_create');
  late final _gs_voltexture_create = _gs_voltexture_createPtr.asFunction<
      ffi.Pointer<gs_texture_t> Function(
          int, int, int, int, int, ffi.Pointer<ffi.Pointer<ffi.Uint8>>, int)>();

  ffi.Pointer<gs_zstencil_t> gs_zstencil_create(
    int width,
    int height,
    int format,
  ) {
    return _gs_zstencil_create(
      width,
      height,
      format,
    );
  }

  late final _gs_zstencil_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_zstencil_t> Function(
              ffi.Uint32, ffi.Uint32, ffi.Int32)>>('gs_zstencil_create');
  late final _gs_zstencil_create = _gs_zstencil_createPtr
      .asFunction<ffi.Pointer<gs_zstencil_t> Function(int, int, int)>();

  ffi.Pointer<gs_stagesurf_t> gs_stagesurface_create(
    int width,
    int height,
    int color_format,
  ) {
    return _gs_stagesurface_create(
      width,
      height,
      color_format,
    );
  }

  late final _gs_stagesurface_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_stagesurf_t> Function(
              ffi.Uint32, ffi.Uint32, ffi.Int32)>>('gs_stagesurface_create');
  late final _gs_stagesurface_create = _gs_stagesurface_createPtr
      .asFunction<ffi.Pointer<gs_stagesurf_t> Function(int, int, int)>();

  ffi.Pointer<gs_samplerstate_t> gs_samplerstate_create(
    ffi.Pointer<gs_sampler_info> info,
  ) {
    return _gs_samplerstate_create(
      info,
    );
  }

  late final _gs_samplerstate_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_samplerstate_t> Function(
              ffi.Pointer<gs_sampler_info>)>>('gs_samplerstate_create');
  late final _gs_samplerstate_create = _gs_samplerstate_createPtr.asFunction<
      ffi.Pointer<gs_samplerstate_t> Function(ffi.Pointer<gs_sampler_info>)>();

  ffi.Pointer<gs_shader_t> gs_vertexshader_create(
    ffi.Pointer<ffi.Int8> shader,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    return _gs_vertexshader_create(
      shader,
      file,
      error_string,
    );
  }

  late final _gs_vertexshader_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_shader_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('gs_vertexshader_create');
  late final _gs_vertexshader_create = _gs_vertexshader_createPtr.asFunction<
      ffi.Pointer<gs_shader_t> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<gs_shader_t> gs_pixelshader_create(
    ffi.Pointer<ffi.Int8> shader,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    return _gs_pixelshader_create(
      shader,
      file,
      error_string,
    );
  }

  late final _gs_pixelshader_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_shader_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('gs_pixelshader_create');
  late final _gs_pixelshader_create = _gs_pixelshader_createPtr.asFunction<
      ffi.Pointer<gs_shader_t> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<gs_vertbuffer_t> gs_vertexbuffer_create(
    ffi.Pointer<gs_vb_data> data,
    int flags,
  ) {
    return _gs_vertexbuffer_create(
      data,
      flags,
    );
  }

  late final _gs_vertexbuffer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_vertbuffer_t> Function(
              ffi.Pointer<gs_vb_data>, ffi.Uint32)>>('gs_vertexbuffer_create');
  late final _gs_vertexbuffer_create = _gs_vertexbuffer_createPtr.asFunction<
      ffi.Pointer<gs_vertbuffer_t> Function(ffi.Pointer<gs_vb_data>, int)>();

  ffi.Pointer<gs_indexbuffer_t> gs_indexbuffer_create(
    int type,
    ffi.Pointer<ffi.Void> indices,
    int num,
    int flags,
  ) {
    return _gs_indexbuffer_create(
      type,
      indices,
      num,
      flags,
    );
  }

  late final _gs_indexbuffer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_indexbuffer_t> Function(
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Uint32)>>('gs_indexbuffer_create');
  late final _gs_indexbuffer_create = _gs_indexbuffer_createPtr.asFunction<
      ffi.Pointer<gs_indexbuffer_t> Function(
          int, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<gs_timer_t> gs_timer_create() {
    return _gs_timer_create();
  }

  late final _gs_timer_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_timer_t> Function()>>(
          'gs_timer_create');
  late final _gs_timer_create =
      _gs_timer_createPtr.asFunction<ffi.Pointer<gs_timer_t> Function()>();

  ffi.Pointer<gs_timer_range_t> gs_timer_range_create() {
    return _gs_timer_range_create();
  }

  late final _gs_timer_range_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_timer_range_t> Function()>>(
          'gs_timer_range_create');
  late final _gs_timer_range_create = _gs_timer_range_createPtr
      .asFunction<ffi.Pointer<gs_timer_range_t> Function()>();

  int gs_get_texture_type(
    ffi.Pointer<gs_texture_t> texture,
  ) {
    return _gs_get_texture_type(
      texture,
    );
  }

  late final _gs_get_texture_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_get_texture_type');
  late final _gs_get_texture_type = _gs_get_texture_typePtr
      .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  void gs_load_vertexbuffer(
    ffi.Pointer<gs_vertbuffer_t> vertbuffer,
  ) {
    return _gs_load_vertexbuffer(
      vertbuffer,
    );
  }

  late final _gs_load_vertexbufferPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_vertbuffer_t>)>>(
      'gs_load_vertexbuffer');
  late final _gs_load_vertexbuffer = _gs_load_vertexbufferPtr
      .asFunction<void Function(ffi.Pointer<gs_vertbuffer_t>)>();

  void gs_load_indexbuffer(
    ffi.Pointer<gs_indexbuffer_t> indexbuffer,
  ) {
    return _gs_load_indexbuffer(
      indexbuffer,
    );
  }

  late final _gs_load_indexbufferPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_indexbuffer_t>)>>(
      'gs_load_indexbuffer');
  late final _gs_load_indexbuffer = _gs_load_indexbufferPtr
      .asFunction<void Function(ffi.Pointer<gs_indexbuffer_t>)>();

  void gs_load_texture(
    ffi.Pointer<gs_texture_t> tex,
    int unit,
  ) {
    return _gs_load_texture(
      tex,
      unit,
    );
  }

  late final _gs_load_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_texture_t>, ffi.Int32)>>('gs_load_texture');
  late final _gs_load_texture = _gs_load_texturePtr
      .asFunction<void Function(ffi.Pointer<gs_texture_t>, int)>();

  void gs_load_samplerstate(
    ffi.Pointer<gs_samplerstate_t> samplerstate,
    int unit,
  ) {
    return _gs_load_samplerstate(
      samplerstate,
      unit,
    );
  }

  late final _gs_load_samplerstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_samplerstate_t>,
              ffi.Int32)>>('gs_load_samplerstate');
  late final _gs_load_samplerstate = _gs_load_samplerstatePtr
      .asFunction<void Function(ffi.Pointer<gs_samplerstate_t>, int)>();

  void gs_load_vertexshader(
    ffi.Pointer<gs_shader_t> vertshader,
  ) {
    return _gs_load_vertexshader(
      vertshader,
    );
  }

  late final _gs_load_vertexshaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_shader_t>)>>(
          'gs_load_vertexshader');
  late final _gs_load_vertexshader = _gs_load_vertexshaderPtr
      .asFunction<void Function(ffi.Pointer<gs_shader_t>)>();

  void gs_load_pixelshader(
    ffi.Pointer<gs_shader_t> pixelshader,
  ) {
    return _gs_load_pixelshader(
      pixelshader,
    );
  }

  late final _gs_load_pixelshaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_shader_t>)>>(
          'gs_load_pixelshader');
  late final _gs_load_pixelshader = _gs_load_pixelshaderPtr
      .asFunction<void Function(ffi.Pointer<gs_shader_t>)>();

  void gs_load_default_samplerstate(
    int b_3d,
    int unit,
  ) {
    return _gs_load_default_samplerstate(
      b_3d,
      unit,
    );
  }

  late final _gs_load_default_samplerstatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8, ffi.Int32)>>(
          'gs_load_default_samplerstate');
  late final _gs_load_default_samplerstate =
      _gs_load_default_samplerstatePtr.asFunction<void Function(int, int)>();

  ffi.Pointer<gs_shader_t> gs_get_vertex_shader() {
    return _gs_get_vertex_shader();
  }

  late final _gs_get_vertex_shaderPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_shader_t> Function()>>(
          'gs_get_vertex_shader');
  late final _gs_get_vertex_shader = _gs_get_vertex_shaderPtr
      .asFunction<ffi.Pointer<gs_shader_t> Function()>();

  ffi.Pointer<gs_shader_t> gs_get_pixel_shader() {
    return _gs_get_pixel_shader();
  }

  late final _gs_get_pixel_shaderPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_shader_t> Function()>>(
          'gs_get_pixel_shader');
  late final _gs_get_pixel_shader =
      _gs_get_pixel_shaderPtr.asFunction<ffi.Pointer<gs_shader_t> Function()>();

  ffi.Pointer<gs_texture_t> gs_get_render_target() {
    return _gs_get_render_target();
  }

  late final _gs_get_render_targetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_texture_t> Function()>>(
          'gs_get_render_target');
  late final _gs_get_render_target = _gs_get_render_targetPtr
      .asFunction<ffi.Pointer<gs_texture_t> Function()>();

  ffi.Pointer<gs_zstencil_t> gs_get_zstencil_target() {
    return _gs_get_zstencil_target();
  }

  late final _gs_get_zstencil_targetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_zstencil_t> Function()>>(
          'gs_get_zstencil_target');
  late final _gs_get_zstencil_target = _gs_get_zstencil_targetPtr
      .asFunction<ffi.Pointer<gs_zstencil_t> Function()>();

  void gs_set_render_target(
    ffi.Pointer<gs_texture_t> tex,
    ffi.Pointer<gs_zstencil_t> zstencil,
  ) {
    return _gs_set_render_target(
      tex,
      zstencil,
    );
  }

  late final _gs_set_render_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_texture_t>,
              ffi.Pointer<gs_zstencil_t>)>>('gs_set_render_target');
  late final _gs_set_render_target = _gs_set_render_targetPtr.asFunction<
      void Function(ffi.Pointer<gs_texture_t>, ffi.Pointer<gs_zstencil_t>)>();

  void gs_set_cube_render_target(
    ffi.Pointer<gs_texture_t> cubetex,
    int side,
    ffi.Pointer<gs_zstencil_t> zstencil,
  ) {
    return _gs_set_cube_render_target(
      cubetex,
      side,
      zstencil,
    );
  }

  late final _gs_set_cube_render_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_texture_t>, ffi.Int32,
              ffi.Pointer<gs_zstencil_t>)>>('gs_set_cube_render_target');
  late final _gs_set_cube_render_target =
      _gs_set_cube_render_targetPtr.asFunction<
          void Function(
              ffi.Pointer<gs_texture_t>, int, ffi.Pointer<gs_zstencil_t>)>();

  void gs_enable_framebuffer_srgb(
    int enable,
  ) {
    return _gs_enable_framebuffer_srgb(
      enable,
    );
  }

  late final _gs_enable_framebuffer_srgbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'gs_enable_framebuffer_srgb');
  late final _gs_enable_framebuffer_srgb =
      _gs_enable_framebuffer_srgbPtr.asFunction<void Function(int)>();

  int gs_framebuffer_srgb_enabled() {
    return _gs_framebuffer_srgb_enabled();
  }

  late final _gs_framebuffer_srgb_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'gs_framebuffer_srgb_enabled');
  late final _gs_framebuffer_srgb_enabled =
      _gs_framebuffer_srgb_enabledPtr.asFunction<int Function()>();

  int gs_get_linear_srgb() {
    return _gs_get_linear_srgb();
  }

  late final _gs_get_linear_srgbPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('gs_get_linear_srgb');
  late final _gs_get_linear_srgb =
      _gs_get_linear_srgbPtr.asFunction<int Function()>();

  int gs_set_linear_srgb(
    int linear_srgb,
  ) {
    return _gs_set_linear_srgb(
      linear_srgb,
    );
  }

  late final _gs_set_linear_srgbPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Uint8)>>(
          'gs_set_linear_srgb');
  late final _gs_set_linear_srgb =
      _gs_set_linear_srgbPtr.asFunction<int Function(int)>();

  void gs_copy_texture(
    ffi.Pointer<gs_texture_t> dst,
    ffi.Pointer<gs_texture_t> src,
  ) {
    return _gs_copy_texture(
      dst,
      src,
    );
  }

  late final _gs_copy_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_texture_t>,
              ffi.Pointer<gs_texture_t>)>>('gs_copy_texture');
  late final _gs_copy_texture = _gs_copy_texturePtr.asFunction<
      void Function(ffi.Pointer<gs_texture_t>, ffi.Pointer<gs_texture_t>)>();

  void gs_copy_texture_region(
    ffi.Pointer<gs_texture_t> dst,
    int dst_x,
    int dst_y,
    ffi.Pointer<gs_texture_t> src,
    int src_x,
    int src_y,
    int src_w,
    int src_h,
  ) {
    return _gs_copy_texture_region(
      dst,
      dst_x,
      dst_y,
      src,
      src_x,
      src_y,
      src_w,
      src_h,
    );
  }

  late final _gs_copy_texture_regionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_texture_t>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<gs_texture_t>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('gs_copy_texture_region');
  late final _gs_copy_texture_region = _gs_copy_texture_regionPtr.asFunction<
      void Function(ffi.Pointer<gs_texture_t>, int, int,
          ffi.Pointer<gs_texture_t>, int, int, int, int)>();

  void gs_stage_texture(
    ffi.Pointer<gs_stagesurf_t> dst,
    ffi.Pointer<gs_texture_t> src,
  ) {
    return _gs_stage_texture(
      dst,
      src,
    );
  }

  late final _gs_stage_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_stagesurf_t>,
              ffi.Pointer<gs_texture_t>)>>('gs_stage_texture');
  late final _gs_stage_texture = _gs_stage_texturePtr.asFunction<
      void Function(ffi.Pointer<gs_stagesurf_t>, ffi.Pointer<gs_texture_t>)>();

  void gs_begin_frame() {
    return _gs_begin_frame();
  }

  late final _gs_begin_framePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_begin_frame');
  late final _gs_begin_frame = _gs_begin_framePtr.asFunction<void Function()>();

  void gs_begin_scene() {
    return _gs_begin_scene();
  }

  late final _gs_begin_scenePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_begin_scene');
  late final _gs_begin_scene = _gs_begin_scenePtr.asFunction<void Function()>();

  void gs_draw(
    int draw_mode,
    int start_vert,
    int num_verts,
  ) {
    return _gs_draw(
      draw_mode,
      start_vert,
      num_verts,
    );
  }

  late final _gs_drawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Uint32, ffi.Uint32)>>('gs_draw');
  late final _gs_draw = _gs_drawPtr.asFunction<void Function(int, int, int)>();

  void gs_end_scene() {
    return _gs_end_scene();
  }

  late final _gs_end_scenePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_end_scene');
  late final _gs_end_scene = _gs_end_scenePtr.asFunction<void Function()>();

  void gs_load_swapchain(
    ffi.Pointer<gs_swapchain_t> swapchain,
  ) {
    return _gs_load_swapchain(
      swapchain,
    );
  }

  late final _gs_load_swapchainPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_swapchain_t>)>>(
      'gs_load_swapchain');
  late final _gs_load_swapchain = _gs_load_swapchainPtr
      .asFunction<void Function(ffi.Pointer<gs_swapchain_t>)>();

  void gs_clear(
    int clear_flags,
    ffi.Pointer<vec4> color,
    double depth,
    int stencil,
  ) {
    return _gs_clear(
      clear_flags,
      color,
      depth,
      stencil,
    );
  }

  late final _gs_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint32, ffi.Pointer<vec4>, ffi.Float,
              ffi.Uint8)>>('gs_clear');
  late final _gs_clear = _gs_clearPtr
      .asFunction<void Function(int, ffi.Pointer<vec4>, double, int)>();

  void gs_present() {
    return _gs_present();
  }

  late final _gs_presentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_present');
  late final _gs_present = _gs_presentPtr.asFunction<void Function()>();

  void gs_flush() {
    return _gs_flush();
  }

  late final _gs_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_flush');
  late final _gs_flush = _gs_flushPtr.asFunction<void Function()>();

  void gs_set_cull_mode(
    int mode,
  ) {
    return _gs_set_cull_mode(
      mode,
    );
  }

  late final _gs_set_cull_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'gs_set_cull_mode');
  late final _gs_set_cull_mode =
      _gs_set_cull_modePtr.asFunction<void Function(int)>();

  int gs_get_cull_mode() {
    return _gs_get_cull_mode();
  }

  late final _gs_get_cull_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('gs_get_cull_mode');
  late final _gs_get_cull_mode =
      _gs_get_cull_modePtr.asFunction<int Function()>();

  void gs_enable_blending(
    int enable,
  ) {
    return _gs_enable_blending(
      enable,
    );
  }

  late final _gs_enable_blendingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'gs_enable_blending');
  late final _gs_enable_blending =
      _gs_enable_blendingPtr.asFunction<void Function(int)>();

  void gs_enable_depth_test(
    int enable,
  ) {
    return _gs_enable_depth_test(
      enable,
    );
  }

  late final _gs_enable_depth_testPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'gs_enable_depth_test');
  late final _gs_enable_depth_test =
      _gs_enable_depth_testPtr.asFunction<void Function(int)>();

  void gs_enable_stencil_test(
    int enable,
  ) {
    return _gs_enable_stencil_test(
      enable,
    );
  }

  late final _gs_enable_stencil_testPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'gs_enable_stencil_test');
  late final _gs_enable_stencil_test =
      _gs_enable_stencil_testPtr.asFunction<void Function(int)>();

  void gs_enable_stencil_write(
    int enable,
  ) {
    return _gs_enable_stencil_write(
      enable,
    );
  }

  late final _gs_enable_stencil_writePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'gs_enable_stencil_write');
  late final _gs_enable_stencil_write =
      _gs_enable_stencil_writePtr.asFunction<void Function(int)>();

  void gs_enable_color(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    return _gs_enable_color(
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _gs_enable_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Uint8, ffi.Uint8, ffi.Uint8, ffi.Uint8)>>('gs_enable_color');
  late final _gs_enable_color =
      _gs_enable_colorPtr.asFunction<void Function(int, int, int, int)>();

  void gs_blend_function(
    int src,
    int dest,
  ) {
    return _gs_blend_function(
      src,
      dest,
    );
  }

  late final _gs_blend_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'gs_blend_function');
  late final _gs_blend_function =
      _gs_blend_functionPtr.asFunction<void Function(int, int)>();

  void gs_blend_function_separate(
    int src_c,
    int dest_c,
    int src_a,
    int dest_a,
  ) {
    return _gs_blend_function_separate(
      src_c,
      dest_c,
      src_a,
      dest_a,
    );
  }

  late final _gs_blend_function_separatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('gs_blend_function_separate');
  late final _gs_blend_function_separate = _gs_blend_function_separatePtr
      .asFunction<void Function(int, int, int, int)>();

  void gs_depth_function(
    int test,
  ) {
    return _gs_depth_function(
      test,
    );
  }

  late final _gs_depth_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'gs_depth_function');
  late final _gs_depth_function =
      _gs_depth_functionPtr.asFunction<void Function(int)>();

  void gs_stencil_function(
    int side,
    int test,
  ) {
    return _gs_stencil_function(
      side,
      test,
    );
  }

  late final _gs_stencil_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'gs_stencil_function');
  late final _gs_stencil_function =
      _gs_stencil_functionPtr.asFunction<void Function(int, int)>();

  void gs_stencil_op(
    int side,
    int fail,
    int zfail,
    int zpass,
  ) {
    return _gs_stencil_op(
      side,
      fail,
      zfail,
      zpass,
    );
  }

  late final _gs_stencil_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32)>>('gs_stencil_op');
  late final _gs_stencil_op =
      _gs_stencil_opPtr.asFunction<void Function(int, int, int, int)>();

  void gs_set_viewport(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _gs_set_viewport(
      x,
      y,
      width,
      height,
    );
  }

  late final _gs_set_viewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32)>>('gs_set_viewport');
  late final _gs_set_viewport =
      _gs_set_viewportPtr.asFunction<void Function(int, int, int, int)>();

  void gs_get_viewport(
    ffi.Pointer<gs_rect> rect,
  ) {
    return _gs_get_viewport(
      rect,
    );
  }

  late final _gs_get_viewportPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_rect>)>>(
          'gs_get_viewport');
  late final _gs_get_viewport =
      _gs_get_viewportPtr.asFunction<void Function(ffi.Pointer<gs_rect>)>();

  void gs_set_scissor_rect(
    ffi.Pointer<gs_rect> rect,
  ) {
    return _gs_set_scissor_rect(
      rect,
    );
  }

  late final _gs_set_scissor_rectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_rect>)>>(
          'gs_set_scissor_rect');
  late final _gs_set_scissor_rect =
      _gs_set_scissor_rectPtr.asFunction<void Function(ffi.Pointer<gs_rect>)>();

  void gs_ortho(
    double left,
    double right,
    double top,
    double bottom,
    double znear,
    double zfar,
  ) {
    return _gs_ortho(
      left,
      right,
      top,
      bottom,
      znear,
      zfar,
    );
  }

  late final _gs_orthoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float, ffi.Float,
              ffi.Float, ffi.Float)>>('gs_ortho');
  late final _gs_ortho = _gs_orthoPtr.asFunction<
      void Function(double, double, double, double, double, double)>();

  void gs_frustum(
    double left,
    double right,
    double top,
    double bottom,
    double znear,
    double zfar,
  ) {
    return _gs_frustum(
      left,
      right,
      top,
      bottom,
      znear,
      zfar,
    );
  }

  late final _gs_frustumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float, ffi.Float,
              ffi.Float, ffi.Float)>>('gs_frustum');
  late final _gs_frustum = _gs_frustumPtr.asFunction<
      void Function(double, double, double, double, double, double)>();

  void gs_projection_push() {
    return _gs_projection_push();
  }

  late final _gs_projection_pushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_projection_push');
  late final _gs_projection_push =
      _gs_projection_pushPtr.asFunction<void Function()>();

  void gs_projection_pop() {
    return _gs_projection_pop();
  }

  late final _gs_projection_popPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_projection_pop');
  late final _gs_projection_pop =
      _gs_projection_popPtr.asFunction<void Function()>();

  void gs_swapchain_destroy(
    ffi.Pointer<gs_swapchain_t> swapchain,
  ) {
    return _gs_swapchain_destroy(
      swapchain,
    );
  }

  late final _gs_swapchain_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_swapchain_t>)>>(
      'gs_swapchain_destroy');
  late final _gs_swapchain_destroy = _gs_swapchain_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_swapchain_t>)>();

  void gs_texture_destroy(
    ffi.Pointer<gs_texture_t> tex,
  ) {
    return _gs_texture_destroy(
      tex,
    );
  }

  late final _gs_texture_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_texture_t>)>>(
          'gs_texture_destroy');
  late final _gs_texture_destroy = _gs_texture_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_texture_t>)>();

  int gs_texture_get_width(
    ffi.Pointer<gs_texture_t> tex,
  ) {
    return _gs_texture_get_width(
      tex,
    );
  }

  late final _gs_texture_get_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_texture_get_width');
  late final _gs_texture_get_width = _gs_texture_get_widthPtr
      .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  int gs_texture_get_height(
    ffi.Pointer<gs_texture_t> tex,
  ) {
    return _gs_texture_get_height(
      tex,
    );
  }

  late final _gs_texture_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_texture_get_height');
  late final _gs_texture_get_height = _gs_texture_get_heightPtr
      .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  int gs_texture_get_color_format(
    ffi.Pointer<gs_texture_t> tex,
  ) {
    return _gs_texture_get_color_format(
      tex,
    );
  }

  late final _gs_texture_get_color_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_texture_get_color_format');
  late final _gs_texture_get_color_format = _gs_texture_get_color_formatPtr
      .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  int gs_texture_map(
    ffi.Pointer<gs_texture_t> tex,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> ptr,
    ffi.Pointer<ffi.Uint32> linesize,
  ) {
    return _gs_texture_map(
      tex,
      ptr,
      linesize,
    );
  }

  late final _gs_texture_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gs_texture_t>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Uint32>)>>('gs_texture_map');
  late final _gs_texture_map = _gs_texture_mapPtr.asFunction<
      int Function(ffi.Pointer<gs_texture_t>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.Uint32>)>();

  void gs_texture_unmap(
    ffi.Pointer<gs_texture_t> tex,
  ) {
    return _gs_texture_unmap(
      tex,
    );
  }

  late final _gs_texture_unmapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_texture_t>)>>(
          'gs_texture_unmap');
  late final _gs_texture_unmap = _gs_texture_unmapPtr
      .asFunction<void Function(ffi.Pointer<gs_texture_t>)>();

  /// special-case function (GL only) - specifies whether the texture is a
  /// GL_TEXTURE_RECTANGLE type, which doesn't use normalized texture
  /// coordinates, doesn't support mipmapping, and requires address clamping
  int gs_texture_is_rect(
    ffi.Pointer<gs_texture_t> tex,
  ) {
    return _gs_texture_is_rect(
      tex,
    );
  }

  late final _gs_texture_is_rectPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_texture_is_rect');
  late final _gs_texture_is_rect = _gs_texture_is_rectPtr
      .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  /// Gets a pointer to the context-specific object associated with the texture.
  /// For example, for GL, this is a GLuint*.  For D3D11, ID3D11Texture2D*.
  ffi.Pointer<ffi.Void> gs_texture_get_obj(
    ffi.Pointer<gs_texture_t> tex,
  ) {
    return _gs_texture_get_obj(
      tex,
    );
  }

  late final _gs_texture_get_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gs_texture_t>)>>('gs_texture_get_obj');
  late final _gs_texture_get_obj = _gs_texture_get_objPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<gs_texture_t>)>();

  void gs_cubetexture_destroy(
    ffi.Pointer<gs_texture_t> cubetex,
  ) {
    return _gs_cubetexture_destroy(
      cubetex,
    );
  }

  late final _gs_cubetexture_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_texture_t>)>>(
          'gs_cubetexture_destroy');
  late final _gs_cubetexture_destroy = _gs_cubetexture_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_texture_t>)>();

  int gs_cubetexture_get_size(
    ffi.Pointer<gs_texture_t> cubetex,
  ) {
    return _gs_cubetexture_get_size(
      cubetex,
    );
  }

  late final _gs_cubetexture_get_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_cubetexture_get_size');
  late final _gs_cubetexture_get_size = _gs_cubetexture_get_sizePtr
      .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  int gs_cubetexture_get_color_format(
    ffi.Pointer<gs_texture_t> cubetex,
  ) {
    return _gs_cubetexture_get_color_format(
      cubetex,
    );
  }

  late final _gs_cubetexture_get_color_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_cubetexture_get_color_format');
  late final _gs_cubetexture_get_color_format =
      _gs_cubetexture_get_color_formatPtr
          .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  void gs_voltexture_destroy(
    ffi.Pointer<gs_texture_t> voltex,
  ) {
    return _gs_voltexture_destroy(
      voltex,
    );
  }

  late final _gs_voltexture_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_texture_t>)>>(
          'gs_voltexture_destroy');
  late final _gs_voltexture_destroy = _gs_voltexture_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_texture_t>)>();

  int gs_voltexture_get_width(
    ffi.Pointer<gs_texture_t> voltex,
  ) {
    return _gs_voltexture_get_width(
      voltex,
    );
  }

  late final _gs_voltexture_get_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_voltexture_get_width');
  late final _gs_voltexture_get_width = _gs_voltexture_get_widthPtr
      .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  int gs_voltexture_get_height(
    ffi.Pointer<gs_texture_t> voltex,
  ) {
    return _gs_voltexture_get_height(
      voltex,
    );
  }

  late final _gs_voltexture_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_voltexture_get_height');
  late final _gs_voltexture_get_height = _gs_voltexture_get_heightPtr
      .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  int gs_voltexture_get_depth(
    ffi.Pointer<gs_texture_t> voltex,
  ) {
    return _gs_voltexture_get_depth(
      voltex,
    );
  }

  late final _gs_voltexture_get_depthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_voltexture_get_depth');
  late final _gs_voltexture_get_depth = _gs_voltexture_get_depthPtr
      .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  int gs_voltexture_get_color_format(
    ffi.Pointer<gs_texture_t> voltex,
  ) {
    return _gs_voltexture_get_color_format(
      voltex,
    );
  }

  late final _gs_voltexture_get_color_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gs_texture_t>)>>(
      'gs_voltexture_get_color_format');
  late final _gs_voltexture_get_color_format =
      _gs_voltexture_get_color_formatPtr
          .asFunction<int Function(ffi.Pointer<gs_texture_t>)>();

  void gs_stagesurface_destroy(
    ffi.Pointer<gs_stagesurf_t> stagesurf,
  ) {
    return _gs_stagesurface_destroy(
      stagesurf,
    );
  }

  late final _gs_stagesurface_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_stagesurf_t>)>>(
      'gs_stagesurface_destroy');
  late final _gs_stagesurface_destroy = _gs_stagesurface_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_stagesurf_t>)>();

  int gs_stagesurface_get_width(
    ffi.Pointer<gs_stagesurf_t> stagesurf,
  ) {
    return _gs_stagesurface_get_width(
      stagesurf,
    );
  }

  late final _gs_stagesurface_get_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gs_stagesurf_t>)>>(
      'gs_stagesurface_get_width');
  late final _gs_stagesurface_get_width = _gs_stagesurface_get_widthPtr
      .asFunction<int Function(ffi.Pointer<gs_stagesurf_t>)>();

  int gs_stagesurface_get_height(
    ffi.Pointer<gs_stagesurf_t> stagesurf,
  ) {
    return _gs_stagesurface_get_height(
      stagesurf,
    );
  }

  late final _gs_stagesurface_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gs_stagesurf_t>)>>(
      'gs_stagesurface_get_height');
  late final _gs_stagesurface_get_height = _gs_stagesurface_get_heightPtr
      .asFunction<int Function(ffi.Pointer<gs_stagesurf_t>)>();

  int gs_stagesurface_get_color_format(
    ffi.Pointer<gs_stagesurf_t> stagesurf,
  ) {
    return _gs_stagesurface_get_color_format(
      stagesurf,
    );
  }

  late final _gs_stagesurface_get_color_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gs_stagesurf_t>)>>(
      'gs_stagesurface_get_color_format');
  late final _gs_stagesurface_get_color_format =
      _gs_stagesurface_get_color_formatPtr
          .asFunction<int Function(ffi.Pointer<gs_stagesurf_t>)>();

  int gs_stagesurface_map(
    ffi.Pointer<gs_stagesurf_t> stagesurf,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    ffi.Pointer<ffi.Uint32> linesize,
  ) {
    return _gs_stagesurface_map(
      stagesurf,
      data,
      linesize,
    );
  }

  late final _gs_stagesurface_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gs_stagesurf_t>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Uint32>)>>('gs_stagesurface_map');
  late final _gs_stagesurface_map = _gs_stagesurface_mapPtr.asFunction<
      int Function(ffi.Pointer<gs_stagesurf_t>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.Uint32>)>();

  void gs_stagesurface_unmap(
    ffi.Pointer<gs_stagesurf_t> stagesurf,
  ) {
    return _gs_stagesurface_unmap(
      stagesurf,
    );
  }

  late final _gs_stagesurface_unmapPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_stagesurf_t>)>>(
      'gs_stagesurface_unmap');
  late final _gs_stagesurface_unmap = _gs_stagesurface_unmapPtr
      .asFunction<void Function(ffi.Pointer<gs_stagesurf_t>)>();

  void gs_zstencil_destroy(
    ffi.Pointer<gs_zstencil_t> zstencil,
  ) {
    return _gs_zstencil_destroy(
      zstencil,
    );
  }

  late final _gs_zstencil_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_zstencil_t>)>>(
      'gs_zstencil_destroy');
  late final _gs_zstencil_destroy = _gs_zstencil_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_zstencil_t>)>();

  void gs_samplerstate_destroy(
    ffi.Pointer<gs_samplerstate_t> samplerstate,
  ) {
    return _gs_samplerstate_destroy(
      samplerstate,
    );
  }

  late final _gs_samplerstate_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gs_samplerstate_t>)>>('gs_samplerstate_destroy');
  late final _gs_samplerstate_destroy = _gs_samplerstate_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_samplerstate_t>)>();

  void gs_vertexbuffer_destroy(
    ffi.Pointer<gs_vertbuffer_t> vertbuffer,
  ) {
    return _gs_vertexbuffer_destroy(
      vertbuffer,
    );
  }

  late final _gs_vertexbuffer_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_vertbuffer_t>)>>(
      'gs_vertexbuffer_destroy');
  late final _gs_vertexbuffer_destroy = _gs_vertexbuffer_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_vertbuffer_t>)>();

  void gs_vertexbuffer_flush(
    ffi.Pointer<gs_vertbuffer_t> vertbuffer,
  ) {
    return _gs_vertexbuffer_flush(
      vertbuffer,
    );
  }

  late final _gs_vertexbuffer_flushPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_vertbuffer_t>)>>(
      'gs_vertexbuffer_flush');
  late final _gs_vertexbuffer_flush = _gs_vertexbuffer_flushPtr
      .asFunction<void Function(ffi.Pointer<gs_vertbuffer_t>)>();

  void gs_vertexbuffer_flush_direct(
    ffi.Pointer<gs_vertbuffer_t> vertbuffer,
    ffi.Pointer<gs_vb_data> data,
  ) {
    return _gs_vertexbuffer_flush_direct(
      vertbuffer,
      data,
    );
  }

  late final _gs_vertexbuffer_flush_directPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_vertbuffer_t>,
              ffi.Pointer<gs_vb_data>)>>('gs_vertexbuffer_flush_direct');
  late final _gs_vertexbuffer_flush_direct =
      _gs_vertexbuffer_flush_directPtr.asFunction<
          void Function(
              ffi.Pointer<gs_vertbuffer_t>, ffi.Pointer<gs_vb_data>)>();

  ffi.Pointer<gs_vb_data> gs_vertexbuffer_get_data(
    ffi.Pointer<gs_vertbuffer_t> vertbuffer,
  ) {
    return _gs_vertexbuffer_get_data(
      vertbuffer,
    );
  }

  late final _gs_vertexbuffer_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_vb_data> Function(
              ffi.Pointer<gs_vertbuffer_t>)>>('gs_vertexbuffer_get_data');
  late final _gs_vertexbuffer_get_data =
      _gs_vertexbuffer_get_dataPtr.asFunction<
          ffi.Pointer<gs_vb_data> Function(ffi.Pointer<gs_vertbuffer_t>)>();

  void gs_indexbuffer_destroy(
    ffi.Pointer<gs_indexbuffer_t> indexbuffer,
  ) {
    return _gs_indexbuffer_destroy(
      indexbuffer,
    );
  }

  late final _gs_indexbuffer_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_indexbuffer_t>)>>(
      'gs_indexbuffer_destroy');
  late final _gs_indexbuffer_destroy = _gs_indexbuffer_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_indexbuffer_t>)>();

  void gs_indexbuffer_flush(
    ffi.Pointer<gs_indexbuffer_t> indexbuffer,
  ) {
    return _gs_indexbuffer_flush(
      indexbuffer,
    );
  }

  late final _gs_indexbuffer_flushPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_indexbuffer_t>)>>(
      'gs_indexbuffer_flush');
  late final _gs_indexbuffer_flush = _gs_indexbuffer_flushPtr
      .asFunction<void Function(ffi.Pointer<gs_indexbuffer_t>)>();

  void gs_indexbuffer_flush_direct(
    ffi.Pointer<gs_indexbuffer_t> indexbuffer,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gs_indexbuffer_flush_direct(
      indexbuffer,
      data,
    );
  }

  late final _gs_indexbuffer_flush_directPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_indexbuffer_t>,
              ffi.Pointer<ffi.Void>)>>('gs_indexbuffer_flush_direct');
  late final _gs_indexbuffer_flush_direct =
      _gs_indexbuffer_flush_directPtr.asFunction<
          void Function(
              ffi.Pointer<gs_indexbuffer_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> gs_indexbuffer_get_data(
    ffi.Pointer<gs_indexbuffer_t> indexbuffer,
  ) {
    return _gs_indexbuffer_get_data(
      indexbuffer,
    );
  }

  late final _gs_indexbuffer_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gs_indexbuffer_t>)>>('gs_indexbuffer_get_data');
  late final _gs_indexbuffer_get_data = _gs_indexbuffer_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<gs_indexbuffer_t>)>();

  int gs_indexbuffer_get_num_indices(
    ffi.Pointer<gs_indexbuffer_t> indexbuffer,
  ) {
    return _gs_indexbuffer_get_num_indices(
      indexbuffer,
    );
  }

  late final _gs_indexbuffer_get_num_indicesPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gs_indexbuffer_t>)>>(
      'gs_indexbuffer_get_num_indices');
  late final _gs_indexbuffer_get_num_indices =
      _gs_indexbuffer_get_num_indicesPtr
          .asFunction<int Function(ffi.Pointer<gs_indexbuffer_t>)>();

  int gs_indexbuffer_get_type(
    ffi.Pointer<gs_indexbuffer_t> indexbuffer,
  ) {
    return _gs_indexbuffer_get_type(
      indexbuffer,
    );
  }

  late final _gs_indexbuffer_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gs_indexbuffer_t>)>>('gs_indexbuffer_get_type');
  late final _gs_indexbuffer_get_type = _gs_indexbuffer_get_typePtr
      .asFunction<int Function(ffi.Pointer<gs_indexbuffer_t>)>();

  void gs_timer_destroy(
    ffi.Pointer<gs_timer_t> timer,
  ) {
    return _gs_timer_destroy(
      timer,
    );
  }

  late final _gs_timer_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_timer_t>)>>(
          'gs_timer_destroy');
  late final _gs_timer_destroy =
      _gs_timer_destroyPtr.asFunction<void Function(ffi.Pointer<gs_timer_t>)>();

  void gs_timer_begin(
    ffi.Pointer<gs_timer_t> timer,
  ) {
    return _gs_timer_begin(
      timer,
    );
  }

  late final _gs_timer_beginPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_timer_t>)>>(
          'gs_timer_begin');
  late final _gs_timer_begin =
      _gs_timer_beginPtr.asFunction<void Function(ffi.Pointer<gs_timer_t>)>();

  void gs_timer_end(
    ffi.Pointer<gs_timer_t> timer,
  ) {
    return _gs_timer_end(
      timer,
    );
  }

  late final _gs_timer_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_timer_t>)>>(
          'gs_timer_end');
  late final _gs_timer_end =
      _gs_timer_endPtr.asFunction<void Function(ffi.Pointer<gs_timer_t>)>();

  int gs_timer_get_data(
    ffi.Pointer<gs_timer_t> timer,
    ffi.Pointer<ffi.Uint64> ticks,
  ) {
    return _gs_timer_get_data(
      timer,
      ticks,
    );
  }

  late final _gs_timer_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<gs_timer_t>,
              ffi.Pointer<ffi.Uint64>)>>('gs_timer_get_data');
  late final _gs_timer_get_data = _gs_timer_get_dataPtr.asFunction<
      int Function(ffi.Pointer<gs_timer_t>, ffi.Pointer<ffi.Uint64>)>();

  void gs_timer_range_destroy(
    ffi.Pointer<gs_timer_range_t> timer,
  ) {
    return _gs_timer_range_destroy(
      timer,
    );
  }

  late final _gs_timer_range_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_timer_range_t>)>>(
      'gs_timer_range_destroy');
  late final _gs_timer_range_destroy = _gs_timer_range_destroyPtr
      .asFunction<void Function(ffi.Pointer<gs_timer_range_t>)>();

  void gs_timer_range_begin(
    ffi.Pointer<gs_timer_range_t> range,
  ) {
    return _gs_timer_range_begin(
      range,
    );
  }

  late final _gs_timer_range_beginPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_timer_range_t>)>>(
      'gs_timer_range_begin');
  late final _gs_timer_range_begin = _gs_timer_range_beginPtr
      .asFunction<void Function(ffi.Pointer<gs_timer_range_t>)>();

  void gs_timer_range_end(
    ffi.Pointer<gs_timer_range_t> range,
  ) {
    return _gs_timer_range_end(
      range,
    );
  }

  late final _gs_timer_range_endPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gs_timer_range_t>)>>(
      'gs_timer_range_end');
  late final _gs_timer_range_end = _gs_timer_range_endPtr
      .asFunction<void Function(ffi.Pointer<gs_timer_range_t>)>();

  int gs_timer_range_get_data(
    ffi.Pointer<gs_timer_range_t> range,
    ffi.Pointer<ffi.Uint8> disjoint,
    ffi.Pointer<ffi.Uint64> frequency,
  ) {
    return _gs_timer_range_get_data(
      range,
      disjoint,
      frequency,
    );
  }

  late final _gs_timer_range_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gs_timer_range_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint64>)>>('gs_timer_range_get_data');
  late final _gs_timer_range_get_data = _gs_timer_range_get_dataPtr.asFunction<
      int Function(ffi.Pointer<gs_timer_range_t>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint64>)>();

  int gs_nv12_available() {
    return _gs_nv12_available();
  }

  late final _gs_nv12_availablePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('gs_nv12_available');
  late final _gs_nv12_available =
      _gs_nv12_availablePtr.asFunction<int Function()>();

  void gs_debug_marker_begin(
    ffi.Pointer<ffi.Float> color,
    ffi.Pointer<ffi.Int8> markername,
  ) {
    return _gs_debug_marker_begin(
      color,
      markername,
    );
  }

  late final _gs_debug_marker_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int8>)>>('gs_debug_marker_begin');
  late final _gs_debug_marker_begin = _gs_debug_marker_beginPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int8>)>();

  void gs_debug_marker_begin_format(
    ffi.Pointer<ffi.Float> color,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gs_debug_marker_begin_format(
      color,
      format,
    );
  }

  late final _gs_debug_marker_begin_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int8>)>>('gs_debug_marker_begin_format');
  late final _gs_debug_marker_begin_format =
      _gs_debug_marker_begin_formatPtr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int8>)>();

  void gs_debug_marker_end() {
    return _gs_debug_marker_end();
  }

  late final _gs_debug_marker_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gs_debug_marker_end');
  late final _gs_debug_marker_end =
      _gs_debug_marker_endPtr.asFunction<void Function()>();

  /// platform specific function for creating (GL_TEXTURE_RECTANGLE) textures
  /// from shared surface resources
  ffi.Pointer<gs_texture_t> gs_texture_create_from_iosurface(
    ffi.Pointer<ffi.Void> iosurf,
  ) {
    return _gs_texture_create_from_iosurface(
      iosurf,
    );
  }

  late final _gs_texture_create_from_iosurfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gs_texture_t> Function(
              ffi.Pointer<ffi.Void>)>>('gs_texture_create_from_iosurface');
  late final _gs_texture_create_from_iosurface =
      _gs_texture_create_from_iosurfacePtr.asFunction<
          ffi.Pointer<gs_texture_t> Function(ffi.Pointer<ffi.Void>)>();

  int gs_texture_rebind_iosurface(
    ffi.Pointer<gs_texture_t> texture,
    ffi.Pointer<ffi.Void> iosurf,
  ) {
    return _gs_texture_rebind_iosurface(
      texture,
      iosurf,
    );
  }

  late final _gs_texture_rebind_iosurfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<gs_texture_t>,
              ffi.Pointer<ffi.Void>)>>('gs_texture_rebind_iosurface');
  late final _gs_texture_rebind_iosurface =
      _gs_texture_rebind_iosurfacePtr.asFunction<
          int Function(ffi.Pointer<gs_texture_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<gs_texture_t> gs_texture_open_shared(
    int handle,
  ) {
    return _gs_texture_open_shared(
      handle,
    );
  }

  late final _gs_texture_open_sharedPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gs_texture_t> Function(ffi.Uint32)>>(
      'gs_texture_open_shared');
  late final _gs_texture_open_shared = _gs_texture_open_sharedPtr
      .asFunction<ffi.Pointer<gs_texture_t> Function(int)>();

  int gs_shared_texture_available() {
    return _gs_shared_texture_available();
  }

  late final _gs_shared_texture_availablePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'gs_shared_texture_available');
  late final _gs_shared_texture_available =
      _gs_shared_texture_availablePtr.asFunction<int Function()>();

  void vec2_abs(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    return _vec2_abs(
      dst,
      v,
    );
  }

  late final _vec2_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<vec2>, ffi.Pointer<vec2>)>>('vec2_abs');
  late final _vec2_abs = _vec2_absPtr
      .asFunction<void Function(ffi.Pointer<vec2>, ffi.Pointer<vec2>)>();

  void vec2_floor(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    return _vec2_floor(
      dst,
      v,
    );
  }

  late final _vec2_floorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vec2>, ffi.Pointer<vec2>)>>('vec2_floor');
  late final _vec2_floor = _vec2_floorPtr
      .asFunction<void Function(ffi.Pointer<vec2>, ffi.Pointer<vec2>)>();

  void vec2_ceil(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    return _vec2_ceil(
      dst,
      v,
    );
  }

  late final _vec2_ceilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vec2>, ffi.Pointer<vec2>)>>('vec2_ceil');
  late final _vec2_ceil = _vec2_ceilPtr
      .asFunction<void Function(ffi.Pointer<vec2>, ffi.Pointer<vec2>)>();

  int vec2_close(
    ffi.Pointer<vec2> v1,
    ffi.Pointer<vec2> v2,
    double epsilon,
  ) {
    return _vec2_close(
      v1,
      v2,
      epsilon,
    );
  }

  late final _vec2_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<vec2>, ffi.Pointer<vec2>, ffi.Float)>>('vec2_close');
  late final _vec2_close = _vec2_closePtr
      .asFunction<int Function(ffi.Pointer<vec2>, ffi.Pointer<vec2>, double)>();

  void vec2_norm(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    return _vec2_norm(
      dst,
      v,
    );
  }

  late final _vec2_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vec2>, ffi.Pointer<vec2>)>>('vec2_norm');
  late final _vec2_norm = _vec2_normPtr
      .asFunction<void Function(ffi.Pointer<vec2>, ffi.Pointer<vec2>)>();

  void vec3_from_vec4(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec4> v,
  ) {
    return _vec3_from_vec4(
      dst,
      v,
    );
  }

  late final _vec3_from_vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vec3>, ffi.Pointer<vec4>)>>('vec3_from_vec4');
  late final _vec3_from_vec4 = _vec3_from_vec4Ptr
      .asFunction<void Function(ffi.Pointer<vec3>, ffi.Pointer<vec4>)>();

  double vec3_plane_dist(
    ffi.Pointer<vec3> v,
    ffi.Pointer<plane> p,
  ) {
    return _vec3_plane_dist(
      v,
      p,
    );
  }

  late final _vec3_plane_distPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<vec3>, ffi.Pointer<plane>)>>('vec3_plane_dist');
  late final _vec3_plane_dist = _vec3_plane_distPtr
      .asFunction<double Function(ffi.Pointer<vec3>, ffi.Pointer<plane>)>();

  void vec3_transform(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<matrix4> m,
  ) {
    return _vec3_transform(
      dst,
      v,
      m,
    );
  }

  late final _vec3_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<vec3>, ffi.Pointer<vec3>,
              ffi.Pointer<matrix4>)>>('vec3_transform');
  late final _vec3_transform = _vec3_transformPtr.asFunction<
      void Function(
          ffi.Pointer<vec3>, ffi.Pointer<vec3>, ffi.Pointer<matrix4>)>();

  void vec3_rotate(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<matrix3> m,
  ) {
    return _vec3_rotate(
      dst,
      v,
      m,
    );
  }

  late final _vec3_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<vec3>, ffi.Pointer<vec3>,
              ffi.Pointer<matrix3>)>>('vec3_rotate');
  late final _vec3_rotate = _vec3_rotatePtr.asFunction<
      void Function(
          ffi.Pointer<vec3>, ffi.Pointer<vec3>, ffi.Pointer<matrix3>)>();

  void vec3_transform3x4(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<matrix3> m,
  ) {
    return _vec3_transform3x4(
      dst,
      v,
      m,
    );
  }

  late final _vec3_transform3x4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<vec3>, ffi.Pointer<vec3>,
              ffi.Pointer<matrix3>)>>('vec3_transform3x4');
  late final _vec3_transform3x4 = _vec3_transform3x4Ptr.asFunction<
      void Function(
          ffi.Pointer<vec3>, ffi.Pointer<vec3>, ffi.Pointer<matrix3>)>();

  void vec3_mirror(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<plane> p,
  ) {
    return _vec3_mirror(
      dst,
      v,
      p,
    );
  }

  late final _vec3_mirrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<vec3>, ffi.Pointer<vec3>,
              ffi.Pointer<plane>)>>('vec3_mirror');
  late final _vec3_mirror = _vec3_mirrorPtr.asFunction<
      void Function(
          ffi.Pointer<vec3>, ffi.Pointer<vec3>, ffi.Pointer<plane>)>();

  void vec3_mirrorv(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<vec3> vec,
  ) {
    return _vec3_mirrorv(
      dst,
      v,
      vec,
    );
  }

  late final _vec3_mirrorvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<vec3>, ffi.Pointer<vec3>,
              ffi.Pointer<vec3>)>>('vec3_mirrorv');
  late final _vec3_mirrorv = _vec3_mirrorvPtr.asFunction<
      void Function(ffi.Pointer<vec3>, ffi.Pointer<vec3>, ffi.Pointer<vec3>)>();

  void vec3_rand(
    ffi.Pointer<vec3> dst,
    int positive_only,
  ) {
    return _vec3_rand(
      dst,
      positive_only,
    );
  }

  late final _vec3_randPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vec3>, ffi.Int32)>>(
      'vec3_rand');
  late final _vec3_rand =
      _vec3_randPtr.asFunction<void Function(ffi.Pointer<vec3>, int)>();

  int audio_output_open(
    ffi.Pointer<ffi.Pointer<audio_t>> audio,
    ffi.Pointer<audio_output_info> info,
  ) {
    return _audio_output_open(
      audio,
      info,
    );
  }

  late final _audio_output_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<audio_t>>,
              ffi.Pointer<audio_output_info>)>>('audio_output_open');
  late final _audio_output_open = _audio_output_openPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<audio_t>>, ffi.Pointer<audio_output_info>)>();

  void audio_output_close(
    ffi.Pointer<audio_t> audio,
  ) {
    return _audio_output_close(
      audio,
    );
  }

  late final _audio_output_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<audio_t>)>>(
          'audio_output_close');
  late final _audio_output_close =
      _audio_output_closePtr.asFunction<void Function(ffi.Pointer<audio_t>)>();

  int audio_output_connect(
    ffi.Pointer<audio_t> video,
    int mix_idx,
    ffi.Pointer<audio_convert_info> conversion,
    audio_output_callback_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _audio_output_connect(
      video,
      mix_idx,
      conversion,
      callback,
      param,
    );
  }

  late final _audio_output_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<audio_t>,
              size_t,
              ffi.Pointer<audio_convert_info>,
              audio_output_callback_t,
              ffi.Pointer<ffi.Void>)>>('audio_output_connect');
  late final _audio_output_connect = _audio_output_connectPtr.asFunction<
      int Function(ffi.Pointer<audio_t>, int, ffi.Pointer<audio_convert_info>,
          audio_output_callback_t, ffi.Pointer<ffi.Void>)>();

  void audio_output_disconnect(
    ffi.Pointer<audio_t> video,
    int mix_idx,
    audio_output_callback_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _audio_output_disconnect(
      video,
      mix_idx,
      callback,
      param,
    );
  }

  late final _audio_output_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<audio_t>,
              size_t,
              audio_output_callback_t,
              ffi.Pointer<ffi.Void>)>>('audio_output_disconnect');
  late final _audio_output_disconnect = _audio_output_disconnectPtr.asFunction<
      void Function(ffi.Pointer<audio_t>, int, audio_output_callback_t,
          ffi.Pointer<ffi.Void>)>();

  int audio_output_active(
    ffi.Pointer<audio_t> audio,
  ) {
    return _audio_output_active(
      audio,
    );
  }

  late final _audio_output_activePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<audio_t>)>>(
          'audio_output_active');
  late final _audio_output_active =
      _audio_output_activePtr.asFunction<int Function(ffi.Pointer<audio_t>)>();

  int audio_output_get_block_size(
    ffi.Pointer<audio_t> audio,
  ) {
    return _audio_output_get_block_size(
      audio,
    );
  }

  late final _audio_output_get_block_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<audio_t>)>>(
          'audio_output_get_block_size');
  late final _audio_output_get_block_size = _audio_output_get_block_sizePtr
      .asFunction<int Function(ffi.Pointer<audio_t>)>();

  int audio_output_get_planes(
    ffi.Pointer<audio_t> audio,
  ) {
    return _audio_output_get_planes(
      audio,
    );
  }

  late final _audio_output_get_planesPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<audio_t>)>>(
          'audio_output_get_planes');
  late final _audio_output_get_planes = _audio_output_get_planesPtr
      .asFunction<int Function(ffi.Pointer<audio_t>)>();

  int audio_output_get_channels(
    ffi.Pointer<audio_t> audio,
  ) {
    return _audio_output_get_channels(
      audio,
    );
  }

  late final _audio_output_get_channelsPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<audio_t>)>>(
          'audio_output_get_channels');
  late final _audio_output_get_channels = _audio_output_get_channelsPtr
      .asFunction<int Function(ffi.Pointer<audio_t>)>();

  int audio_output_get_sample_rate(
    ffi.Pointer<audio_t> audio,
  ) {
    return _audio_output_get_sample_rate(
      audio,
    );
  }

  late final _audio_output_get_sample_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<audio_t>)>>(
          'audio_output_get_sample_rate');
  late final _audio_output_get_sample_rate = _audio_output_get_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<audio_t>)>();

  ffi.Pointer<audio_output_info> audio_output_get_info(
    ffi.Pointer<audio_t> audio,
  ) {
    return _audio_output_get_info(
      audio,
    );
  }

  late final _audio_output_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<audio_output_info> Function(
              ffi.Pointer<audio_t>)>>('audio_output_get_info');
  late final _audio_output_get_info = _audio_output_get_infoPtr.asFunction<
      ffi.Pointer<audio_output_info> Function(ffi.Pointer<audio_t>)>();

  int video_format_from_fourcc(
    int fourcc,
  ) {
    return _video_format_from_fourcc(
      fourcc,
    );
  }

  late final _video_format_from_fourccPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>(
          'video_format_from_fourcc');
  late final _video_format_from_fourcc =
      _video_format_from_fourccPtr.asFunction<int Function(int)>();

  int video_format_get_parameters(
    int color_space,
    int range,
    ffi.Pointer<ffi.Float> matrix,
    ffi.Pointer<ffi.Float> min_range,
    ffi.Pointer<ffi.Float> max_range,
  ) {
    return _video_format_get_parameters(
      color_space,
      range,
      matrix,
      min_range,
      max_range,
    );
  }

  late final _video_format_get_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('video_format_get_parameters');
  late final _video_format_get_parameters =
      _video_format_get_parametersPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>();

  int video_output_open(
    ffi.Pointer<ffi.Pointer<video_t>> video,
    ffi.Pointer<video_output_info> info,
  ) {
    return _video_output_open(
      video,
      info,
    );
  }

  late final _video_output_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<video_t>>,
              ffi.Pointer<video_output_info>)>>('video_output_open');
  late final _video_output_open = _video_output_openPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<video_t>>, ffi.Pointer<video_output_info>)>();

  void video_output_close(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_close(
      video,
    );
  }

  late final _video_output_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<video_t>)>>(
          'video_output_close');
  late final _video_output_close =
      _video_output_closePtr.asFunction<void Function(ffi.Pointer<video_t>)>();

  int video_output_connect(
    ffi.Pointer<video_t> video,
    ffi.Pointer<video_scale_info> conversion,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>
        callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _video_output_connect(
      video,
      conversion,
      callback,
      param,
    );
  }

  late final _video_output_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<video_t>,
              ffi.Pointer<video_scale_info>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>,
              ffi.Pointer<ffi.Void>)>>('video_output_connect');
  late final _video_output_connect = _video_output_connectPtr.asFunction<
      int Function(
          ffi.Pointer<video_t>,
          ffi.Pointer<video_scale_info>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>,
          ffi.Pointer<ffi.Void>)>();

  void video_output_disconnect(
    ffi.Pointer<video_t> video,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>
        callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _video_output_disconnect(
      video,
      callback,
      param,
    );
  }

  late final _video_output_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<video_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>,
              ffi.Pointer<ffi.Void>)>>('video_output_disconnect');
  late final _video_output_disconnect = _video_output_disconnectPtr.asFunction<
      void Function(
          ffi.Pointer<video_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>,
          ffi.Pointer<ffi.Void>)>();

  int video_output_active(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_active(
      video,
    );
  }

  late final _video_output_activePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<video_t>)>>(
          'video_output_active');
  late final _video_output_active =
      _video_output_activePtr.asFunction<int Function(ffi.Pointer<video_t>)>();

  ffi.Pointer<video_output_info> video_output_get_info(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_get_info(
      video,
    );
  }

  late final _video_output_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<video_output_info> Function(
              ffi.Pointer<video_t>)>>('video_output_get_info');
  late final _video_output_get_info = _video_output_get_infoPtr.asFunction<
      ffi.Pointer<video_output_info> Function(ffi.Pointer<video_t>)>();

  int video_output_lock_frame(
    ffi.Pointer<video_t> video,
    ffi.Pointer<video_frame> frame,
    int count,
    int timestamp,
  ) {
    return _video_output_lock_frame(
      video,
      frame,
      count,
      timestamp,
    );
  }

  late final _video_output_lock_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<video_t>, ffi.Pointer<video_frame>,
              ffi.Int32, ffi.Uint64)>>('video_output_lock_frame');
  late final _video_output_lock_frame = _video_output_lock_framePtr.asFunction<
      int Function(ffi.Pointer<video_t>, ffi.Pointer<video_frame>, int, int)>();

  void video_output_unlock_frame(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_unlock_frame(
      video,
    );
  }

  late final _video_output_unlock_framePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<video_t>)>>(
          'video_output_unlock_frame');
  late final _video_output_unlock_frame = _video_output_unlock_framePtr
      .asFunction<void Function(ffi.Pointer<video_t>)>();

  int video_output_get_frame_time(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_get_frame_time(
      video,
    );
  }

  late final _video_output_get_frame_timePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<video_t>)>>(
          'video_output_get_frame_time');
  late final _video_output_get_frame_time = _video_output_get_frame_timePtr
      .asFunction<int Function(ffi.Pointer<video_t>)>();

  void video_output_stop(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_stop(
      video,
    );
  }

  late final _video_output_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<video_t>)>>(
          'video_output_stop');
  late final _video_output_stop =
      _video_output_stopPtr.asFunction<void Function(ffi.Pointer<video_t>)>();

  int video_output_stopped(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_stopped(
      video,
    );
  }

  late final _video_output_stoppedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<video_t>)>>(
          'video_output_stopped');
  late final _video_output_stopped =
      _video_output_stoppedPtr.asFunction<int Function(ffi.Pointer<video_t>)>();

  int video_output_get_format(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_get_format(
      video,
    );
  }

  late final _video_output_get_formatPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<video_t>)>>(
          'video_output_get_format');
  late final _video_output_get_format = _video_output_get_formatPtr
      .asFunction<int Function(ffi.Pointer<video_t>)>();

  int video_output_get_width(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_get_width(
      video,
    );
  }

  late final _video_output_get_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<video_t>)>>(
          'video_output_get_width');
  late final _video_output_get_width = _video_output_get_widthPtr
      .asFunction<int Function(ffi.Pointer<video_t>)>();

  int video_output_get_height(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_get_height(
      video,
    );
  }

  late final _video_output_get_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<video_t>)>>(
          'video_output_get_height');
  late final _video_output_get_height = _video_output_get_heightPtr
      .asFunction<int Function(ffi.Pointer<video_t>)>();

  double video_output_get_frame_rate(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_get_frame_rate(
      video,
    );
  }

  late final _video_output_get_frame_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<video_t>)>>(
          'video_output_get_frame_rate');
  late final _video_output_get_frame_rate = _video_output_get_frame_ratePtr
      .asFunction<double Function(ffi.Pointer<video_t>)>();

  int video_output_get_skipped_frames(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_get_skipped_frames(
      video,
    );
  }

  late final _video_output_get_skipped_framesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<video_t>)>>(
          'video_output_get_skipped_frames');
  late final _video_output_get_skipped_frames =
      _video_output_get_skipped_framesPtr
          .asFunction<int Function(ffi.Pointer<video_t>)>();

  int video_output_get_total_frames(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_get_total_frames(
      video,
    );
  }

  late final _video_output_get_total_framesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<video_t>)>>(
          'video_output_get_total_frames');
  late final _video_output_get_total_frames = _video_output_get_total_framesPtr
      .asFunction<int Function(ffi.Pointer<video_t>)>();

  void video_output_inc_texture_encoders(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_inc_texture_encoders(
      video,
    );
  }

  late final _video_output_inc_texture_encodersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<video_t>)>>(
          'video_output_inc_texture_encoders');
  late final _video_output_inc_texture_encoders =
      _video_output_inc_texture_encodersPtr
          .asFunction<void Function(ffi.Pointer<video_t>)>();

  void video_output_dec_texture_encoders(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_dec_texture_encoders(
      video,
    );
  }

  late final _video_output_dec_texture_encodersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<video_t>)>>(
          'video_output_dec_texture_encoders');
  late final _video_output_dec_texture_encoders =
      _video_output_dec_texture_encodersPtr
          .asFunction<void Function(ffi.Pointer<video_t>)>();

  void video_output_inc_texture_frames(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_inc_texture_frames(
      video,
    );
  }

  late final _video_output_inc_texture_framesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<video_t>)>>(
          'video_output_inc_texture_frames');
  late final _video_output_inc_texture_frames =
      _video_output_inc_texture_framesPtr
          .asFunction<void Function(ffi.Pointer<video_t>)>();

  void video_output_inc_texture_skipped_frames(
    ffi.Pointer<video_t> video,
  ) {
    return _video_output_inc_texture_skipped_frames(
      video,
    );
  }

  late final _video_output_inc_texture_skipped_framesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<video_t>)>>(
          'video_output_inc_texture_skipped_frames');
  late final _video_output_inc_texture_skipped_frames =
      _video_output_inc_texture_skipped_framesPtr
          .asFunction<void Function(ffi.Pointer<video_t>)>();

  ffi.Pointer<signal_handler_t> signal_handler_create() {
    return _signal_handler_create();
  }

  late final _signal_handler_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<signal_handler_t> Function()>>(
          'signal_handler_create');
  late final _signal_handler_create = _signal_handler_createPtr
      .asFunction<ffi.Pointer<signal_handler_t> Function()>();

  void signal_handler_destroy(
    ffi.Pointer<signal_handler_t> handler,
  ) {
    return _signal_handler_destroy(
      handler,
    );
  }

  late final _signal_handler_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<signal_handler_t>)>>(
      'signal_handler_destroy');
  late final _signal_handler_destroy = _signal_handler_destroyPtr
      .asFunction<void Function(ffi.Pointer<signal_handler_t>)>();

  int signal_handler_add(
    ffi.Pointer<signal_handler_t> handler,
    ffi.Pointer<ffi.Int8> signal_decl,
  ) {
    return _signal_handler_add(
      handler,
      signal_decl,
    );
  }

  late final _signal_handler_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<signal_handler_t>,
              ffi.Pointer<ffi.Int8>)>>('signal_handler_add');
  late final _signal_handler_add = _signal_handler_addPtr.asFunction<
      int Function(ffi.Pointer<signal_handler_t>, ffi.Pointer<ffi.Int8>)>();

  void signal_handler_connect(
    ffi.Pointer<signal_handler_t> handler,
    ffi.Pointer<ffi.Int8> signal,
    signal_callback_t callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _signal_handler_connect(
      handler,
      signal,
      callback,
      data,
    );
  }

  late final _signal_handler_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<signal_handler_t>,
              ffi.Pointer<ffi.Int8>,
              signal_callback_t,
              ffi.Pointer<ffi.Void>)>>('signal_handler_connect');
  late final _signal_handler_connect = _signal_handler_connectPtr.asFunction<
      void Function(ffi.Pointer<signal_handler_t>, ffi.Pointer<ffi.Int8>,
          signal_callback_t, ffi.Pointer<ffi.Void>)>();

  void signal_handler_connect_ref(
    ffi.Pointer<signal_handler_t> handler,
    ffi.Pointer<ffi.Int8> signal,
    signal_callback_t callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _signal_handler_connect_ref(
      handler,
      signal,
      callback,
      data,
    );
  }

  late final _signal_handler_connect_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<signal_handler_t>,
              ffi.Pointer<ffi.Int8>,
              signal_callback_t,
              ffi.Pointer<ffi.Void>)>>('signal_handler_connect_ref');
  late final _signal_handler_connect_ref =
      _signal_handler_connect_refPtr.asFunction<
          void Function(ffi.Pointer<signal_handler_t>, ffi.Pointer<ffi.Int8>,
              signal_callback_t, ffi.Pointer<ffi.Void>)>();

  void signal_handler_disconnect(
    ffi.Pointer<signal_handler_t> handler,
    ffi.Pointer<ffi.Int8> signal,
    signal_callback_t callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _signal_handler_disconnect(
      handler,
      signal,
      callback,
      data,
    );
  }

  late final _signal_handler_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<signal_handler_t>,
              ffi.Pointer<ffi.Int8>,
              signal_callback_t,
              ffi.Pointer<ffi.Void>)>>('signal_handler_disconnect');
  late final _signal_handler_disconnect =
      _signal_handler_disconnectPtr.asFunction<
          void Function(ffi.Pointer<signal_handler_t>, ffi.Pointer<ffi.Int8>,
              signal_callback_t, ffi.Pointer<ffi.Void>)>();

  void signal_handler_connect_global(
    ffi.Pointer<signal_handler_t> handler,
    global_signal_callback_t callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _signal_handler_connect_global(
      handler,
      callback,
      data,
    );
  }

  late final _signal_handler_connect_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<signal_handler_t>,
              global_signal_callback_t,
              ffi.Pointer<ffi.Void>)>>('signal_handler_connect_global');
  late final _signal_handler_connect_global =
      _signal_handler_connect_globalPtr.asFunction<
          void Function(ffi.Pointer<signal_handler_t>, global_signal_callback_t,
              ffi.Pointer<ffi.Void>)>();

  void signal_handler_disconnect_global(
    ffi.Pointer<signal_handler_t> handler,
    global_signal_callback_t callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _signal_handler_disconnect_global(
      handler,
      callback,
      data,
    );
  }

  late final _signal_handler_disconnect_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<signal_handler_t>,
              global_signal_callback_t,
              ffi.Pointer<ffi.Void>)>>('signal_handler_disconnect_global');
  late final _signal_handler_disconnect_global =
      _signal_handler_disconnect_globalPtr.asFunction<
          void Function(ffi.Pointer<signal_handler_t>, global_signal_callback_t,
              ffi.Pointer<ffi.Void>)>();

  void signal_handler_remove_current() {
    return _signal_handler_remove_current();
  }

  late final _signal_handler_remove_currentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'signal_handler_remove_current');
  late final _signal_handler_remove_current =
      _signal_handler_remove_currentPtr.asFunction<void Function()>();

  void signal_handler_signal(
    ffi.Pointer<signal_handler_t> handler,
    ffi.Pointer<ffi.Int8> signal,
    ffi.Pointer<calldata_t> params,
  ) {
    return _signal_handler_signal(
      handler,
      signal,
      params,
    );
  }

  late final _signal_handler_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<signal_handler_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<calldata_t>)>>('signal_handler_signal');
  late final _signal_handler_signal = _signal_handler_signalPtr.asFunction<
      void Function(ffi.Pointer<signal_handler_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<calldata_t>)>();

  ffi.Pointer<proc_handler_t> proc_handler_create() {
    return _proc_handler_create();
  }

  late final _proc_handler_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<proc_handler_t> Function()>>(
          'proc_handler_create');
  late final _proc_handler_create = _proc_handler_createPtr
      .asFunction<ffi.Pointer<proc_handler_t> Function()>();

  void proc_handler_destroy(
    ffi.Pointer<proc_handler_t> handler,
  ) {
    return _proc_handler_destroy(
      handler,
    );
  }

  late final _proc_handler_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<proc_handler_t>)>>(
      'proc_handler_destroy');
  late final _proc_handler_destroy = _proc_handler_destroyPtr
      .asFunction<void Function(ffi.Pointer<proc_handler_t>)>();

  void proc_handler_add(
    ffi.Pointer<proc_handler_t> handler,
    ffi.Pointer<ffi.Int8> decl_string,
    proc_handler_proc_t proc,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _proc_handler_add(
      handler,
      decl_string,
      proc,
      data,
    );
  }

  late final _proc_handler_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<proc_handler_t>, ffi.Pointer<ffi.Int8>,
              proc_handler_proc_t, ffi.Pointer<ffi.Void>)>>('proc_handler_add');
  late final _proc_handler_add = _proc_handler_addPtr.asFunction<
      void Function(ffi.Pointer<proc_handler_t>, ffi.Pointer<ffi.Int8>,
          proc_handler_proc_t, ffi.Pointer<ffi.Void>)>();

  /// Calls a function in a procedure handler.  Returns false if the named
  /// procedure is not found.
  int proc_handler_call(
    ffi.Pointer<proc_handler_t> handler,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<calldata_t> params,
  ) {
    return _proc_handler_call(
      handler,
      name,
      params,
    );
  }

  late final _proc_handler_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<proc_handler_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<calldata_t>)>>('proc_handler_call');
  late final _proc_handler_call = _proc_handler_callPtr.asFunction<
      int Function(ffi.Pointer<proc_handler_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<calldata_t>)>();

  ffi.Pointer<obs_data_t> obs_data_create() {
    return _obs_data_create();
  }

  late final _obs_data_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<obs_data_t> Function()>>(
          'obs_data_create');
  late final _obs_data_create =
      _obs_data_createPtr.asFunction<ffi.Pointer<obs_data_t> Function()>();

  ffi.Pointer<obs_data_t> obs_data_create_from_json(
    ffi.Pointer<ffi.Int8> json_string,
  ) {
    return _obs_data_create_from_json(
      json_string,
    );
  }

  late final _obs_data_create_from_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_data_create_from_json');
  late final _obs_data_create_from_json = _obs_data_create_from_jsonPtr
      .asFunction<ffi.Pointer<obs_data_t> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_t> obs_data_create_from_json_file(
    ffi.Pointer<ffi.Int8> json_file,
  ) {
    return _obs_data_create_from_json_file(
      json_file,
    );
  }

  late final _obs_data_create_from_json_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_data_create_from_json_file');
  late final _obs_data_create_from_json_file =
      _obs_data_create_from_json_filePtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_t> obs_data_create_from_json_file_safe(
    ffi.Pointer<ffi.Int8> json_file,
    ffi.Pointer<ffi.Int8> backup_ext,
  ) {
    return _obs_data_create_from_json_file_safe(
      json_file,
      backup_ext,
    );
  }

  late final _obs_data_create_from_json_file_safePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_create_from_json_file_safe');
  late final _obs_data_create_from_json_file_safe =
      _obs_data_create_from_json_file_safePtr.asFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  void obs_data_addref(
    ffi.Pointer<obs_data_t> data,
  ) {
    return _obs_data_addref(
      data,
    );
  }

  late final _obs_data_addrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_t>)>>(
          'obs_data_addref');
  late final _obs_data_addref =
      _obs_data_addrefPtr.asFunction<void Function(ffi.Pointer<obs_data_t>)>();

  void obs_data_release(
    ffi.Pointer<obs_data_t> data,
  ) {
    return _obs_data_release(
      data,
    );
  }

  late final _obs_data_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_t>)>>(
          'obs_data_release');
  late final _obs_data_release =
      _obs_data_releasePtr.asFunction<void Function(ffi.Pointer<obs_data_t>)>();

  ffi.Pointer<ffi.Int8> obs_data_get_json(
    ffi.Pointer<obs_data_t> data,
  ) {
    return _obs_data_get_json(
      data,
    );
  }

  late final _obs_data_get_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_data_t>)>>('obs_data_get_json');
  late final _obs_data_get_json = _obs_data_get_jsonPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_t>)>();

  int obs_data_save_json(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _obs_data_save_json(
      data,
      file,
    );
  }

  late final _obs_data_save_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_save_json');
  late final _obs_data_save_json = _obs_data_save_jsonPtr.asFunction<
      int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_save_json_safe(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> temp_ext,
    ffi.Pointer<ffi.Int8> backup_ext,
  ) {
    return _obs_data_save_json_safe(
      data,
      file,
      temp_ext,
      backup_ext,
    );
  }

  late final _obs_data_save_json_safePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_save_json_safe');
  late final _obs_data_save_json_safe = _obs_data_save_json_safePtr.asFunction<
      int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  void obs_data_apply(
    ffi.Pointer<obs_data_t> target,
    ffi.Pointer<obs_data_t> apply_data,
  ) {
    return _obs_data_apply(
      target,
      apply_data,
    );
  }

  late final _obs_data_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<obs_data_t>)>>('obs_data_apply');
  late final _obs_data_apply = _obs_data_applyPtr.asFunction<
      void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<obs_data_t>)>();

  void obs_data_erase(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_erase(
      data,
      name,
    );
  }

  late final _obs_data_erasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_erase');
  late final _obs_data_erase = _obs_data_erasePtr.asFunction<
      void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  void obs_data_clear(
    ffi.Pointer<obs_data_t> data,
  ) {
    return _obs_data_clear(
      data,
    );
  }

  late final _obs_data_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_t>)>>(
          'obs_data_clear');
  late final _obs_data_clear =
      _obs_data_clearPtr.asFunction<void Function(ffi.Pointer<obs_data_t>)>();

  void obs_data_set_string(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _obs_data_set_string(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_set_string');
  late final _obs_data_set_string = _obs_data_set_stringPtr.asFunction<
      void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void obs_data_set_int(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    return _obs_data_set_int(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Int64)>>('obs_data_set_int');
  late final _obs_data_set_int = _obs_data_set_intPtr.asFunction<
      void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, int)>();

  void obs_data_set_double(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    return _obs_data_set_double(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Double)>>('obs_data_set_double');
  late final _obs_data_set_double = _obs_data_set_doublePtr.asFunction<
      void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, double)>();

  void obs_data_set_bool(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    return _obs_data_set_bool(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Uint8)>>('obs_data_set_bool');
  late final _obs_data_set_bool = _obs_data_set_boolPtr.asFunction<
      void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, int)>();

  void obs_data_set_obj(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> obj,
  ) {
    return _obs_data_set_obj(
      data,
      name,
      obj,
    );
  }

  late final _obs_data_set_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>)>>('obs_data_set_obj');
  late final _obs_data_set_obj = _obs_data_set_objPtr.asFunction<
      void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<obs_data_t>)>();

  void obs_data_set_array(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_array_t> array,
  ) {
    return _obs_data_set_array(
      data,
      name,
      array,
    );
  }

  late final _obs_data_set_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_array_t>)>>('obs_data_set_array');
  late final _obs_data_set_array = _obs_data_set_arrayPtr.asFunction<
      void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<obs_data_array_t>)>();

  void obs_data_set_default_string(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _obs_data_set_default_string(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_default_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_set_default_string');
  late final _obs_data_set_default_string =
      _obs_data_set_default_stringPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  void obs_data_set_default_int(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    return _obs_data_set_default_int(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_default_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Int64)>>('obs_data_set_default_int');
  late final _obs_data_set_default_int =
      _obs_data_set_default_intPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, int)>();

  void obs_data_set_default_double(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    return _obs_data_set_default_double(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_default_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Double)>>('obs_data_set_default_double');
  late final _obs_data_set_default_double =
      _obs_data_set_default_doublePtr.asFunction<
          void Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, double)>();

  void obs_data_set_default_bool(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    return _obs_data_set_default_bool(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_default_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Uint8)>>('obs_data_set_default_bool');
  late final _obs_data_set_default_bool =
      _obs_data_set_default_boolPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, int)>();

  void obs_data_set_default_obj(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> obj,
  ) {
    return _obs_data_set_default_obj(
      data,
      name,
      obj,
    );
  }

  late final _obs_data_set_default_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>)>>('obs_data_set_default_obj');
  late final _obs_data_set_default_obj =
      _obs_data_set_default_objPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>)>();

  void obs_data_set_autoselect_string(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _obs_data_set_autoselect_string(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_autoselect_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_set_autoselect_string');
  late final _obs_data_set_autoselect_string =
      _obs_data_set_autoselect_stringPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  void obs_data_set_autoselect_int(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    return _obs_data_set_autoselect_int(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_autoselect_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Int64)>>('obs_data_set_autoselect_int');
  late final _obs_data_set_autoselect_int =
      _obs_data_set_autoselect_intPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, int)>();

  void obs_data_set_autoselect_double(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    return _obs_data_set_autoselect_double(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_autoselect_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Double)>>('obs_data_set_autoselect_double');
  late final _obs_data_set_autoselect_double =
      _obs_data_set_autoselect_doublePtr.asFunction<
          void Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, double)>();

  void obs_data_set_autoselect_bool(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    return _obs_data_set_autoselect_bool(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_autoselect_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Uint8)>>('obs_data_set_autoselect_bool');
  late final _obs_data_set_autoselect_bool =
      _obs_data_set_autoselect_boolPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, int)>();

  void obs_data_set_autoselect_obj(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> obj,
  ) {
    return _obs_data_set_autoselect_obj(
      data,
      name,
      obj,
    );
  }

  late final _obs_data_set_autoselect_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>)>>('obs_data_set_autoselect_obj');
  late final _obs_data_set_autoselect_obj =
      _obs_data_set_autoselect_objPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>)>();

  ffi.Pointer<ffi.Int8> obs_data_get_string(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_string(
      data,
      name,
    );
  }

  late final _obs_data_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_string');
  late final _obs_data_get_string = _obs_data_get_stringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_get_int(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_int(
      data,
      name,
    );
  }

  late final _obs_data_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_int');
  late final _obs_data_get_int = _obs_data_get_intPtr.asFunction<
      int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  double obs_data_get_double(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_double(
      data,
      name,
    );
  }

  late final _obs_data_get_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_double');
  late final _obs_data_get_double = _obs_data_get_doublePtr.asFunction<
      double Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_get_bool(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_bool(
      data,
      name,
    );
  }

  late final _obs_data_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_bool');
  late final _obs_data_get_bool = _obs_data_get_boolPtr.asFunction<
      int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_t> obs_data_get_obj(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_obj(
      data,
      name,
    );
  }

  late final _obs_data_get_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_obj');
  late final _obs_data_get_obj = _obs_data_get_objPtr.asFunction<
      ffi.Pointer<obs_data_t> Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_array_t> obs_data_get_array(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_array(
      data,
      name,
    );
  }

  late final _obs_data_get_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_array_t> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_array');
  late final _obs_data_get_array = _obs_data_get_arrayPtr.asFunction<
      ffi.Pointer<obs_data_array_t> Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> obs_data_get_default_string(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_default_string(
      data,
      name,
    );
  }

  late final _obs_data_get_default_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_default_string');
  late final _obs_data_get_default_string =
      _obs_data_get_default_stringPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_get_default_int(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_default_int(
      data,
      name,
    );
  }

  late final _obs_data_get_default_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_default_int');
  late final _obs_data_get_default_int =
      _obs_data_get_default_intPtr.asFunction<
          int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  double obs_data_get_default_double(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_default_double(
      data,
      name,
    );
  }

  late final _obs_data_get_default_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_default_double');
  late final _obs_data_get_default_double =
      _obs_data_get_default_doublePtr.asFunction<
          double Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_get_default_bool(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_default_bool(
      data,
      name,
    );
  }

  late final _obs_data_get_default_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_default_bool');
  late final _obs_data_get_default_bool =
      _obs_data_get_default_boolPtr.asFunction<
          int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_t> obs_data_get_default_obj(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_default_obj(
      data,
      name,
    );
  }

  late final _obs_data_get_default_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_default_obj');
  late final _obs_data_get_default_obj =
      _obs_data_get_default_objPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_array_t> obs_data_get_default_array(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_default_array(
      data,
      name,
    );
  }

  late final _obs_data_get_default_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_array_t> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_default_array');
  late final _obs_data_get_default_array =
      _obs_data_get_default_arrayPtr.asFunction<
          ffi.Pointer<obs_data_array_t> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> obs_data_get_autoselect_string(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_autoselect_string(
      data,
      name,
    );
  }

  late final _obs_data_get_autoselect_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_autoselect_string');
  late final _obs_data_get_autoselect_string =
      _obs_data_get_autoselect_stringPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_get_autoselect_int(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_autoselect_int(
      data,
      name,
    );
  }

  late final _obs_data_get_autoselect_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_autoselect_int');
  late final _obs_data_get_autoselect_int =
      _obs_data_get_autoselect_intPtr.asFunction<
          int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  double obs_data_get_autoselect_double(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_autoselect_double(
      data,
      name,
    );
  }

  late final _obs_data_get_autoselect_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_autoselect_double');
  late final _obs_data_get_autoselect_double =
      _obs_data_get_autoselect_doublePtr.asFunction<
          double Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_get_autoselect_bool(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_autoselect_bool(
      data,
      name,
    );
  }

  late final _obs_data_get_autoselect_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_autoselect_bool');
  late final _obs_data_get_autoselect_bool =
      _obs_data_get_autoselect_boolPtr.asFunction<
          int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_t> obs_data_get_autoselect_obj(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_autoselect_obj(
      data,
      name,
    );
  }

  late final _obs_data_get_autoselect_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_autoselect_obj');
  late final _obs_data_get_autoselect_obj =
      _obs_data_get_autoselect_objPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_array_t> obs_data_get_autoselect_array(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_get_autoselect_array(
      data,
      name,
    );
  }

  late final _obs_data_get_autoselect_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_array_t> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_get_autoselect_array');
  late final _obs_data_get_autoselect_array =
      _obs_data_get_autoselect_arrayPtr.asFunction<
          ffi.Pointer<obs_data_array_t> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_array_t> obs_data_array_create() {
    return _obs_data_array_create();
  }

  late final _obs_data_array_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<obs_data_array_t> Function()>>(
          'obs_data_array_create');
  late final _obs_data_array_create = _obs_data_array_createPtr
      .asFunction<ffi.Pointer<obs_data_array_t> Function()>();

  void obs_data_array_addref(
    ffi.Pointer<obs_data_array_t> array,
  ) {
    return _obs_data_array_addref(
      array,
    );
  }

  late final _obs_data_array_addrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_array_t>)>>(
      'obs_data_array_addref');
  late final _obs_data_array_addref = _obs_data_array_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_data_array_t>)>();

  void obs_data_array_release(
    ffi.Pointer<obs_data_array_t> array,
  ) {
    return _obs_data_array_release(
      array,
    );
  }

  late final _obs_data_array_releasePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_array_t>)>>(
      'obs_data_array_release');
  late final _obs_data_array_release = _obs_data_array_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_data_array_t>)>();

  int obs_data_array_count(
    ffi.Pointer<obs_data_array_t> array,
  ) {
    return _obs_data_array_count(
      array,
    );
  }

  late final _obs_data_array_countPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<obs_data_array_t>)>>(
      'obs_data_array_count');
  late final _obs_data_array_count = _obs_data_array_countPtr
      .asFunction<int Function(ffi.Pointer<obs_data_array_t>)>();

  ffi.Pointer<obs_data_t> obs_data_array_item(
    ffi.Pointer<obs_data_array_t> array,
    int idx,
  ) {
    return _obs_data_array_item(
      array,
      idx,
    );
  }

  late final _obs_data_array_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_data_array_t>, size_t)>>('obs_data_array_item');
  late final _obs_data_array_item = _obs_data_array_itemPtr.asFunction<
      ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_data_array_t>, int)>();

  int obs_data_array_push_back(
    ffi.Pointer<obs_data_array_t> array,
    ffi.Pointer<obs_data_t> obj,
  ) {
    return _obs_data_array_push_back(
      array,
      obj,
    );
  }

  late final _obs_data_array_push_backPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<obs_data_array_t>,
              ffi.Pointer<obs_data_t>)>>('obs_data_array_push_back');
  late final _obs_data_array_push_back =
      _obs_data_array_push_backPtr.asFunction<
          int Function(
              ffi.Pointer<obs_data_array_t>, ffi.Pointer<obs_data_t>)>();

  void obs_data_array_insert(
    ffi.Pointer<obs_data_array_t> array,
    int idx,
    ffi.Pointer<obs_data_t> obj,
  ) {
    return _obs_data_array_insert(
      array,
      idx,
      obj,
    );
  }

  late final _obs_data_array_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_array_t>, size_t,
              ffi.Pointer<obs_data_t>)>>('obs_data_array_insert');
  late final _obs_data_array_insert = _obs_data_array_insertPtr.asFunction<
      void Function(
          ffi.Pointer<obs_data_array_t>, int, ffi.Pointer<obs_data_t>)>();

  void obs_data_array_push_back_array(
    ffi.Pointer<obs_data_array_t> array,
    ffi.Pointer<obs_data_array_t> array2,
  ) {
    return _obs_data_array_push_back_array(
      array,
      array2,
    );
  }

  late final _obs_data_array_push_back_arrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<obs_data_array_t>,
                  ffi.Pointer<obs_data_array_t>)>>(
      'obs_data_array_push_back_array');
  late final _obs_data_array_push_back_array =
      _obs_data_array_push_back_arrayPtr.asFunction<
          void Function(
              ffi.Pointer<obs_data_array_t>, ffi.Pointer<obs_data_array_t>)>();

  void obs_data_array_erase(
    ffi.Pointer<obs_data_array_t> array,
    int idx,
  ) {
    return _obs_data_array_erase(
      array,
      idx,
    );
  }

  late final _obs_data_array_erasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_data_array_t>, size_t)>>('obs_data_array_erase');
  late final _obs_data_array_erase = _obs_data_array_erasePtr
      .asFunction<void Function(ffi.Pointer<obs_data_array_t>, int)>();

  int obs_data_has_user_value(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_has_user_value(
      data,
      name,
    );
  }

  late final _obs_data_has_user_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_has_user_value');
  late final _obs_data_has_user_value = _obs_data_has_user_valuePtr.asFunction<
      int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_has_default_value(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_has_default_value(
      data,
      name,
    );
  }

  late final _obs_data_has_default_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_has_default_value');
  late final _obs_data_has_default_value =
      _obs_data_has_default_valuePtr.asFunction<
          int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_has_autoselect_value(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_has_autoselect_value(
      data,
      name,
    );
  }

  late final _obs_data_has_autoselect_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_has_autoselect_value');
  late final _obs_data_has_autoselect_value =
      _obs_data_has_autoselect_valuePtr.asFunction<
          int Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_item_has_user_value(
    ffi.Pointer<obs_data_item_t> data,
  ) {
    return _obs_data_item_has_user_value(
      data,
    );
  }

  late final _obs_data_item_has_user_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_has_user_value');
  late final _obs_data_item_has_user_value = _obs_data_item_has_user_valuePtr
      .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  int obs_data_item_has_default_value(
    ffi.Pointer<obs_data_item_t> data,
  ) {
    return _obs_data_item_has_default_value(
      data,
    );
  }

  late final _obs_data_item_has_default_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_has_default_value');
  late final _obs_data_item_has_default_value =
      _obs_data_item_has_default_valuePtr
          .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  int obs_data_item_has_autoselect_value(
    ffi.Pointer<obs_data_item_t> data,
  ) {
    return _obs_data_item_has_autoselect_value(
      data,
    );
  }

  late final _obs_data_item_has_autoselect_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_has_autoselect_value');
  late final _obs_data_item_has_autoselect_value =
      _obs_data_item_has_autoselect_valuePtr
          .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  void obs_data_unset_user_value(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_unset_user_value(
      data,
      name,
    );
  }

  late final _obs_data_unset_user_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_unset_user_value');
  late final _obs_data_unset_user_value =
      _obs_data_unset_user_valuePtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  void obs_data_unset_default_value(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_unset_default_value(
      data,
      name,
    );
  }

  late final _obs_data_unset_default_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_unset_default_value');
  late final _obs_data_unset_default_value =
      _obs_data_unset_default_valuePtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  void obs_data_unset_autoselect_value(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_unset_autoselect_value(
      data,
      name,
    );
  }

  late final _obs_data_unset_autoselect_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_unset_autoselect_value');
  late final _obs_data_unset_autoselect_value =
      _obs_data_unset_autoselect_valuePtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  void obs_data_item_unset_user_value(
    ffi.Pointer<obs_data_item_t> data,
  ) {
    return _obs_data_item_unset_user_value(
      data,
    );
  }

  late final _obs_data_item_unset_user_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_unset_user_value');
  late final _obs_data_item_unset_user_value =
      _obs_data_item_unset_user_valuePtr
          .asFunction<void Function(ffi.Pointer<obs_data_item_t>)>();

  void obs_data_item_unset_default_value(
    ffi.Pointer<obs_data_item_t> data,
  ) {
    return _obs_data_item_unset_default_value(
      data,
    );
  }

  late final _obs_data_item_unset_default_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_unset_default_value');
  late final _obs_data_item_unset_default_value =
      _obs_data_item_unset_default_valuePtr
          .asFunction<void Function(ffi.Pointer<obs_data_item_t>)>();

  void obs_data_item_unset_autoselect_value(
    ffi.Pointer<obs_data_item_t> data,
  ) {
    return _obs_data_item_unset_autoselect_value(
      data,
    );
  }

  late final _obs_data_item_unset_autoselect_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_unset_autoselect_value');
  late final _obs_data_item_unset_autoselect_value =
      _obs_data_item_unset_autoselect_valuePtr
          .asFunction<void Function(ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<obs_data_item_t> obs_data_first(
    ffi.Pointer<obs_data_t> data,
  ) {
    return _obs_data_first(
      data,
    );
  }

  late final _obs_data_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_item_t> Function(
              ffi.Pointer<obs_data_t>)>>('obs_data_first');
  late final _obs_data_first = _obs_data_firstPtr.asFunction<
      ffi.Pointer<obs_data_item_t> Function(ffi.Pointer<obs_data_t>)>();

  ffi.Pointer<obs_data_item_t> obs_data_item_byname(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_data_item_byname(
      data,
      name,
    );
  }

  late final _obs_data_item_bynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_item_t> Function(ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_item_byname');
  late final _obs_data_item_byname = _obs_data_item_bynamePtr.asFunction<
      ffi.Pointer<obs_data_item_t> Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_data_item_next(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
  ) {
    return _obs_data_item_next(
      item,
    );
  }

  late final _obs_data_item_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>)>>(
      'obs_data_item_next');
  late final _obs_data_item_next = _obs_data_item_nextPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>)>();

  void obs_data_item_release(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
  ) {
    return _obs_data_item_release(
      item,
    );
  }

  late final _obs_data_item_releasePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>)>>(
      'obs_data_item_release');
  late final _obs_data_item_release = _obs_data_item_releasePtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>)>();

  void obs_data_item_remove(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
  ) {
    return _obs_data_item_remove(
      item,
    );
  }

  late final _obs_data_item_removePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>)>>(
      'obs_data_item_remove');
  late final _obs_data_item_remove = _obs_data_item_removePtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>)>();

  int obs_data_item_gettype(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_gettype(
      item,
    );
  }

  late final _obs_data_item_gettypePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_gettype');
  late final _obs_data_item_gettype = _obs_data_item_gettypePtr
      .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  int obs_data_item_numtype(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_numtype(
      item,
    );
  }

  late final _obs_data_item_numtypePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_numtype');
  late final _obs_data_item_numtype = _obs_data_item_numtypePtr
      .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<ffi.Int8> obs_data_item_get_name(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_name(
      item,
    );
  }

  late final _obs_data_item_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_data_item_t>)>>('obs_data_item_get_name');
  late final _obs_data_item_get_name = _obs_data_item_get_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_item_t>)>();

  void obs_data_item_set_string(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _obs_data_item_set_string(
      item,
      val,
    );
  }

  late final _obs_data_item_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_item_set_string');
  late final _obs_data_item_set_string =
      _obs_data_item_set_stringPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<ffi.Int8>)>();

  void obs_data_item_set_int(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    int val,
  ) {
    return _obs_data_item_set_int(
      item,
      val,
    );
  }

  late final _obs_data_item_set_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Int64)>>('obs_data_item_set_int');
  late final _obs_data_item_set_int = _obs_data_item_set_intPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>, int)>();

  void obs_data_item_set_double(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    double val,
  ) {
    return _obs_data_item_set_double(
      item,
      val,
    );
  }

  late final _obs_data_item_set_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Double)>>('obs_data_item_set_double');
  late final _obs_data_item_set_double =
      _obs_data_item_set_doublePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>, double)>();

  void obs_data_item_set_bool(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    int val,
  ) {
    return _obs_data_item_set_bool(
      item,
      val,
    );
  }

  late final _obs_data_item_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Uint8)>>('obs_data_item_set_bool');
  late final _obs_data_item_set_bool = _obs_data_item_set_boolPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>, int)>();

  void obs_data_item_set_obj(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    ffi.Pointer<obs_data_t> val,
  ) {
    return _obs_data_item_set_obj(
      item,
      val,
    );
  }

  late final _obs_data_item_set_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<obs_data_t>)>>('obs_data_item_set_obj');
  late final _obs_data_item_set_obj = _obs_data_item_set_objPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
          ffi.Pointer<obs_data_t>)>();

  void obs_data_item_set_array(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    ffi.Pointer<obs_data_array_t> val,
  ) {
    return _obs_data_item_set_array(
      item,
      val,
    );
  }

  late final _obs_data_item_set_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<obs_data_array_t>)>>('obs_data_item_set_array');
  late final _obs_data_item_set_array = _obs_data_item_set_arrayPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
          ffi.Pointer<obs_data_array_t>)>();

  void obs_data_item_set_default_string(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _obs_data_item_set_default_string(
      item,
      val,
    );
  }

  late final _obs_data_item_set_default_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_item_set_default_string');
  late final _obs_data_item_set_default_string =
      _obs_data_item_set_default_stringPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<ffi.Int8>)>();

  void obs_data_item_set_default_int(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    int val,
  ) {
    return _obs_data_item_set_default_int(
      item,
      val,
    );
  }

  late final _obs_data_item_set_default_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Int64)>>('obs_data_item_set_default_int');
  late final _obs_data_item_set_default_int =
      _obs_data_item_set_default_intPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>, int)>();

  void obs_data_item_set_default_double(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    double val,
  ) {
    return _obs_data_item_set_default_double(
      item,
      val,
    );
  }

  late final _obs_data_item_set_default_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Double)>>('obs_data_item_set_default_double');
  late final _obs_data_item_set_default_double =
      _obs_data_item_set_default_doublePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>, double)>();

  void obs_data_item_set_default_bool(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    int val,
  ) {
    return _obs_data_item_set_default_bool(
      item,
      val,
    );
  }

  late final _obs_data_item_set_default_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Uint8)>>('obs_data_item_set_default_bool');
  late final _obs_data_item_set_default_bool =
      _obs_data_item_set_default_boolPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>, int)>();

  void obs_data_item_set_default_obj(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    ffi.Pointer<obs_data_t> val,
  ) {
    return _obs_data_item_set_default_obj(
      item,
      val,
    );
  }

  late final _obs_data_item_set_default_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<obs_data_t>)>>('obs_data_item_set_default_obj');
  late final _obs_data_item_set_default_obj =
      _obs_data_item_set_default_objPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<obs_data_t>)>();

  void obs_data_item_set_default_array(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    ffi.Pointer<obs_data_array_t> val,
  ) {
    return _obs_data_item_set_default_array(
      item,
      val,
    );
  }

  late final _obs_data_item_set_default_arrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
                  ffi.Pointer<obs_data_array_t>)>>(
      'obs_data_item_set_default_array');
  late final _obs_data_item_set_default_array =
      _obs_data_item_set_default_arrayPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<obs_data_array_t>)>();

  void obs_data_item_set_autoselect_string(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _obs_data_item_set_autoselect_string(
      item,
      val,
    );
  }

  late final _obs_data_item_set_autoselect_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<ffi.Int8>)>>('obs_data_item_set_autoselect_string');
  late final _obs_data_item_set_autoselect_string =
      _obs_data_item_set_autoselect_stringPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<ffi.Int8>)>();

  void obs_data_item_set_autoselect_int(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    int val,
  ) {
    return _obs_data_item_set_autoselect_int(
      item,
      val,
    );
  }

  late final _obs_data_item_set_autoselect_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Int64)>>('obs_data_item_set_autoselect_int');
  late final _obs_data_item_set_autoselect_int =
      _obs_data_item_set_autoselect_intPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>, int)>();

  void obs_data_item_set_autoselect_double(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    double val,
  ) {
    return _obs_data_item_set_autoselect_double(
      item,
      val,
    );
  }

  late final _obs_data_item_set_autoselect_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Double)>>('obs_data_item_set_autoselect_double');
  late final _obs_data_item_set_autoselect_double =
      _obs_data_item_set_autoselect_doublePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>, double)>();

  void obs_data_item_set_autoselect_bool(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    int val,
  ) {
    return _obs_data_item_set_autoselect_bool(
      item,
      val,
    );
  }

  late final _obs_data_item_set_autoselect_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Uint8)>>('obs_data_item_set_autoselect_bool');
  late final _obs_data_item_set_autoselect_bool =
      _obs_data_item_set_autoselect_boolPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>, int)>();

  void obs_data_item_set_autoselect_obj(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    ffi.Pointer<obs_data_t> val,
  ) {
    return _obs_data_item_set_autoselect_obj(
      item,
      val,
    );
  }

  late final _obs_data_item_set_autoselect_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<obs_data_t>)>>('obs_data_item_set_autoselect_obj');
  late final _obs_data_item_set_autoselect_obj =
      _obs_data_item_set_autoselect_objPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<obs_data_t>)>();

  void obs_data_item_set_autoselect_array(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    ffi.Pointer<obs_data_array_t> val,
  ) {
    return _obs_data_item_set_autoselect_array(
      item,
      val,
    );
  }

  late final _obs_data_item_set_autoselect_arrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
                  ffi.Pointer<obs_data_array_t>)>>(
      'obs_data_item_set_autoselect_array');
  late final _obs_data_item_set_autoselect_array =
      _obs_data_item_set_autoselect_arrayPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              ffi.Pointer<obs_data_array_t>)>();

  ffi.Pointer<ffi.Int8> obs_data_item_get_string(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_string(
      item,
    );
  }

  late final _obs_data_item_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_data_item_t>)>>('obs_data_item_get_string');
  late final _obs_data_item_get_string =
      _obs_data_item_get_stringPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_item_t>)>();

  int obs_data_item_get_int(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_int(
      item,
    );
  }

  late final _obs_data_item_get_intPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_int');
  late final _obs_data_item_get_int = _obs_data_item_get_intPtr
      .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  double obs_data_item_get_double(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_double(
      item,
    );
  }

  late final _obs_data_item_get_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<obs_data_item_t>)>>('obs_data_item_get_double');
  late final _obs_data_item_get_double = _obs_data_item_get_doublePtr
      .asFunction<double Function(ffi.Pointer<obs_data_item_t>)>();

  int obs_data_item_get_bool(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_bool(
      item,
    );
  }

  late final _obs_data_item_get_boolPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_bool');
  late final _obs_data_item_get_bool = _obs_data_item_get_boolPtr
      .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<obs_data_t> obs_data_item_get_obj(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_obj(
      item,
    );
  }

  late final _obs_data_item_get_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_data_item_t>)>>('obs_data_item_get_obj');
  late final _obs_data_item_get_obj = _obs_data_item_get_objPtr.asFunction<
      ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<obs_data_array_t> obs_data_item_get_array(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_array(
      item,
    );
  }

  late final _obs_data_item_get_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_array_t> Function(
              ffi.Pointer<obs_data_item_t>)>>('obs_data_item_get_array');
  late final _obs_data_item_get_array = _obs_data_item_get_arrayPtr.asFunction<
      ffi.Pointer<obs_data_array_t> Function(ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<ffi.Int8> obs_data_item_get_default_string(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_default_string(
      item,
    );
  }

  late final _obs_data_item_get_default_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_default_string');
  late final _obs_data_item_get_default_string =
      _obs_data_item_get_default_stringPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_item_t>)>();

  int obs_data_item_get_default_int(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_default_int(
      item,
    );
  }

  late final _obs_data_item_get_default_intPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_default_int');
  late final _obs_data_item_get_default_int = _obs_data_item_get_default_intPtr
      .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  double obs_data_item_get_default_double(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_default_double(
      item,
    );
  }

  late final _obs_data_item_get_default_doublePtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_default_double');
  late final _obs_data_item_get_default_double =
      _obs_data_item_get_default_doublePtr
          .asFunction<double Function(ffi.Pointer<obs_data_item_t>)>();

  int obs_data_item_get_default_bool(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_default_bool(
      item,
    );
  }

  late final _obs_data_item_get_default_boolPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_default_bool');
  late final _obs_data_item_get_default_bool =
      _obs_data_item_get_default_boolPtr
          .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<obs_data_t> obs_data_item_get_default_obj(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_default_obj(
      item,
    );
  }

  late final _obs_data_item_get_default_objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_data_item_t>)>>('obs_data_item_get_default_obj');
  late final _obs_data_item_get_default_obj =
      _obs_data_item_get_default_objPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<obs_data_array_t> obs_data_item_get_default_array(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_default_array(
      item,
    );
  }

  late final _obs_data_item_get_default_arrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<obs_data_array_t> Function(
                  ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_default_array');
  late final _obs_data_item_get_default_array =
      _obs_data_item_get_default_arrayPtr.asFunction<
          ffi.Pointer<obs_data_array_t> Function(
              ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<ffi.Int8> obs_data_item_get_autoselect_string(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_autoselect_string(
      item,
    );
  }

  late final _obs_data_item_get_autoselect_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_autoselect_string');
  late final _obs_data_item_get_autoselect_string =
      _obs_data_item_get_autoselect_stringPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_data_item_t>)>();

  int obs_data_item_get_autoselect_int(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_autoselect_int(
      item,
    );
  }

  late final _obs_data_item_get_autoselect_intPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_autoselect_int');
  late final _obs_data_item_get_autoselect_int =
      _obs_data_item_get_autoselect_intPtr
          .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  double obs_data_item_get_autoselect_double(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_autoselect_double(
      item,
    );
  }

  late final _obs_data_item_get_autoselect_doublePtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_autoselect_double');
  late final _obs_data_item_get_autoselect_double =
      _obs_data_item_get_autoselect_doublePtr
          .asFunction<double Function(ffi.Pointer<obs_data_item_t>)>();

  int obs_data_item_get_autoselect_bool(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_autoselect_bool(
      item,
    );
  }

  late final _obs_data_item_get_autoselect_boolPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_autoselect_bool');
  late final _obs_data_item_get_autoselect_bool =
      _obs_data_item_get_autoselect_boolPtr
          .asFunction<int Function(ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<obs_data_t> obs_data_item_get_autoselect_obj(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_autoselect_obj(
      item,
    );
  }

  late final _obs_data_item_get_autoselect_objPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_autoselect_obj');
  late final _obs_data_item_get_autoselect_obj =
      _obs_data_item_get_autoselect_objPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_data_item_t>)>();

  ffi.Pointer<obs_data_array_t> obs_data_item_get_autoselect_array(
    ffi.Pointer<obs_data_item_t> item,
  ) {
    return _obs_data_item_get_autoselect_array(
      item,
    );
  }

  late final _obs_data_item_get_autoselect_arrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<obs_data_array_t> Function(
                  ffi.Pointer<obs_data_item_t>)>>(
      'obs_data_item_get_autoselect_array');
  late final _obs_data_item_get_autoselect_array =
      _obs_data_item_get_autoselect_arrayPtr.asFunction<
          ffi.Pointer<obs_data_array_t> Function(
              ffi.Pointer<obs_data_item_t>)>();

  void obs_data_set_vec2(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    return _obs_data_set_vec2(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>>('obs_data_set_vec2');
  late final _obs_data_set_vec2 = _obs_data_set_vec2Ptr.asFunction<
      void Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, ffi.Pointer<vec2>)>();

  void obs_data_set_vec3(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    return _obs_data_set_vec3(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_vec3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>>('obs_data_set_vec3');
  late final _obs_data_set_vec3 = _obs_data_set_vec3Ptr.asFunction<
      void Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, ffi.Pointer<vec3>)>();

  void obs_data_set_vec4(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    return _obs_data_set_vec4(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>>('obs_data_set_vec4');
  late final _obs_data_set_vec4 = _obs_data_set_vec4Ptr.asFunction<
      void Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, ffi.Pointer<vec4>)>();

  void obs_data_set_quat(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    return _obs_data_set_quat(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_quatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>>('obs_data_set_quat');
  late final _obs_data_set_quat = _obs_data_set_quatPtr.asFunction<
      void Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, ffi.Pointer<quat>)>();

  void obs_data_set_default_vec2(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    return _obs_data_set_default_vec2(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_default_vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>>('obs_data_set_default_vec2');
  late final _obs_data_set_default_vec2 =
      _obs_data_set_default_vec2Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>();

  void obs_data_set_default_vec3(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    return _obs_data_set_default_vec3(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_default_vec3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>>('obs_data_set_default_vec3');
  late final _obs_data_set_default_vec3 =
      _obs_data_set_default_vec3Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>();

  void obs_data_set_default_vec4(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    return _obs_data_set_default_vec4(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_default_vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>>('obs_data_set_default_vec4');
  late final _obs_data_set_default_vec4 =
      _obs_data_set_default_vec4Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>();

  void obs_data_set_default_quat(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    return _obs_data_set_default_quat(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_default_quatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>>('obs_data_set_default_quat');
  late final _obs_data_set_default_quat =
      _obs_data_set_default_quatPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>();

  void obs_data_set_autoselect_vec2(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    return _obs_data_set_autoselect_vec2(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_autoselect_vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>>('obs_data_set_autoselect_vec2');
  late final _obs_data_set_autoselect_vec2 =
      _obs_data_set_autoselect_vec2Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>();

  void obs_data_set_autoselect_vec3(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    return _obs_data_set_autoselect_vec3(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_autoselect_vec3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>>('obs_data_set_autoselect_vec3');
  late final _obs_data_set_autoselect_vec3 =
      _obs_data_set_autoselect_vec3Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>();

  void obs_data_set_autoselect_vec4(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    return _obs_data_set_autoselect_vec4(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_autoselect_vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>>('obs_data_set_autoselect_vec4');
  late final _obs_data_set_autoselect_vec4 =
      _obs_data_set_autoselect_vec4Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>();

  void obs_data_set_autoselect_quat(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    return _obs_data_set_autoselect_quat(
      data,
      name,
      val,
    );
  }

  late final _obs_data_set_autoselect_quatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>>('obs_data_set_autoselect_quat');
  late final _obs_data_set_autoselect_quat =
      _obs_data_set_autoselect_quatPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>();

  void obs_data_get_vec2(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    return _obs_data_get_vec2(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>>('obs_data_get_vec2');
  late final _obs_data_get_vec2 = _obs_data_get_vec2Ptr.asFunction<
      void Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, ffi.Pointer<vec2>)>();

  void obs_data_get_vec3(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    return _obs_data_get_vec3(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_vec3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>>('obs_data_get_vec3');
  late final _obs_data_get_vec3 = _obs_data_get_vec3Ptr.asFunction<
      void Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, ffi.Pointer<vec3>)>();

  void obs_data_get_vec4(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    return _obs_data_get_vec4(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>>('obs_data_get_vec4');
  late final _obs_data_get_vec4 = _obs_data_get_vec4Ptr.asFunction<
      void Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, ffi.Pointer<vec4>)>();

  void obs_data_get_quat(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    return _obs_data_get_quat(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_quatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>>('obs_data_get_quat');
  late final _obs_data_get_quat = _obs_data_get_quatPtr.asFunction<
      void Function(
          ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>, ffi.Pointer<quat>)>();

  void obs_data_get_default_vec2(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    return _obs_data_get_default_vec2(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_default_vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>>('obs_data_get_default_vec2');
  late final _obs_data_get_default_vec2 =
      _obs_data_get_default_vec2Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>();

  void obs_data_get_default_vec3(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    return _obs_data_get_default_vec3(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_default_vec3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>>('obs_data_get_default_vec3');
  late final _obs_data_get_default_vec3 =
      _obs_data_get_default_vec3Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>();

  void obs_data_get_default_vec4(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    return _obs_data_get_default_vec4(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_default_vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>>('obs_data_get_default_vec4');
  late final _obs_data_get_default_vec4 =
      _obs_data_get_default_vec4Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>();

  void obs_data_get_default_quat(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    return _obs_data_get_default_quat(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_default_quatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>>('obs_data_get_default_quat');
  late final _obs_data_get_default_quat =
      _obs_data_get_default_quatPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>();

  void obs_data_get_autoselect_vec2(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    return _obs_data_get_autoselect_vec2(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_autoselect_vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>>('obs_data_get_autoselect_vec2');
  late final _obs_data_get_autoselect_vec2 =
      _obs_data_get_autoselect_vec2Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec2>)>();

  void obs_data_get_autoselect_vec3(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    return _obs_data_get_autoselect_vec3(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_autoselect_vec3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>>('obs_data_get_autoselect_vec3');
  late final _obs_data_get_autoselect_vec3 =
      _obs_data_get_autoselect_vec3Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec3>)>();

  void obs_data_get_autoselect_vec4(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    return _obs_data_get_autoselect_vec4(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_autoselect_vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>>('obs_data_get_autoselect_vec4');
  late final _obs_data_get_autoselect_vec4 =
      _obs_data_get_autoselect_vec4Ptr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<vec4>)>();

  void obs_data_get_autoselect_quat(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    return _obs_data_get_autoselect_quat(
      data,
      name,
      val,
    );
  }

  late final _obs_data_get_autoselect_quatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>>('obs_data_get_autoselect_quat');
  late final _obs_data_get_autoselect_quat =
      _obs_data_get_autoselect_quatPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<quat>)>();

  void obs_data_set_frames_per_second(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    media_frames_per_second fps,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _obs_data_set_frames_per_second(
      data,
      name,
      fps,
      option,
    );
  }

  late final _obs_data_set_frames_per_secondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>,
              media_frames_per_second,
              ffi.Pointer<ffi.Int8>)>>('obs_data_set_frames_per_second');
  late final _obs_data_set_frames_per_second =
      _obs_data_set_frames_per_secondPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              media_frames_per_second, ffi.Pointer<ffi.Int8>)>();

  void obs_data_set_default_frames_per_second(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    media_frames_per_second fps,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _obs_data_set_default_frames_per_second(
      data,
      name,
      fps,
      option,
    );
  }

  late final _obs_data_set_default_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
                  media_frames_per_second, ffi.Pointer<ffi.Int8>)>>(
      'obs_data_set_default_frames_per_second');
  late final _obs_data_set_default_frames_per_second =
      _obs_data_set_default_frames_per_secondPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              media_frames_per_second, ffi.Pointer<ffi.Int8>)>();

  void obs_data_set_autoselect_frames_per_second(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    media_frames_per_second fps,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _obs_data_set_autoselect_frames_per_second(
      data,
      name,
      fps,
      option,
    );
  }

  late final _obs_data_set_autoselect_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
                  media_frames_per_second, ffi.Pointer<ffi.Int8>)>>(
      'obs_data_set_autoselect_frames_per_second');
  late final _obs_data_set_autoselect_frames_per_second =
      _obs_data_set_autoselect_frames_per_secondPtr.asFunction<
          void Function(ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Int8>,
              media_frames_per_second, ffi.Pointer<ffi.Int8>)>();

  int obs_data_get_frames_per_second(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    return _obs_data_get_frames_per_second(
      data,
      name,
      fps,
      option,
    );
  }

  late final _obs_data_get_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<obs_data_t>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<media_frames_per_second>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'obs_data_get_frames_per_second');
  late final _obs_data_get_frames_per_second =
      _obs_data_get_frames_per_secondPtr.asFunction<
          int Function(
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<media_frames_per_second>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int obs_data_get_default_frames_per_second(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    return _obs_data_get_default_frames_per_second(
      data,
      name,
      fps,
      option,
    );
  }

  late final _obs_data_get_default_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<obs_data_t>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<media_frames_per_second>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'obs_data_get_default_frames_per_second');
  late final _obs_data_get_default_frames_per_second =
      _obs_data_get_default_frames_per_secondPtr.asFunction<
          int Function(
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<media_frames_per_second>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int obs_data_get_autoselect_frames_per_second(
    ffi.Pointer<obs_data_t> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    return _obs_data_get_autoselect_frames_per_second(
      data,
      name,
      fps,
      option,
    );
  }

  late final _obs_data_get_autoselect_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<obs_data_t>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<media_frames_per_second>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'obs_data_get_autoselect_frames_per_second');
  late final _obs_data_get_autoselect_frames_per_second =
      _obs_data_get_autoselect_frames_per_secondPtr.asFunction<
          int Function(
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<media_frames_per_second>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  void obs_data_item_set_frames_per_second(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    media_frames_per_second fps,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _obs_data_item_set_frames_per_second(
      item,
      fps,
      option,
    );
  }

  late final _obs_data_item_set_frames_per_secondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              media_frames_per_second,
              ffi.Pointer<ffi.Int8>)>>('obs_data_item_set_frames_per_second');
  late final _obs_data_item_set_frames_per_second =
      _obs_data_item_set_frames_per_secondPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              media_frames_per_second, ffi.Pointer<ffi.Int8>)>();

  void obs_data_item_set_default_frames_per_second(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    media_frames_per_second fps,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _obs_data_item_set_default_frames_per_second(
      item,
      fps,
      option,
    );
  }

  late final _obs_data_item_set_default_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
                  media_frames_per_second, ffi.Pointer<ffi.Int8>)>>(
      'obs_data_item_set_default_frames_per_second');
  late final _obs_data_item_set_default_frames_per_second =
      _obs_data_item_set_default_frames_per_secondPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              media_frames_per_second, ffi.Pointer<ffi.Int8>)>();

  void obs_data_item_set_autoselect_frames_per_second(
    ffi.Pointer<ffi.Pointer<obs_data_item_t>> item,
    media_frames_per_second fps,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _obs_data_item_set_autoselect_frames_per_second(
      item,
      fps,
      option,
    );
  }

  late final _obs_data_item_set_autoselect_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
                  media_frames_per_second, ffi.Pointer<ffi.Int8>)>>(
      'obs_data_item_set_autoselect_frames_per_second');
  late final _obs_data_item_set_autoselect_frames_per_second =
      _obs_data_item_set_autoselect_frames_per_secondPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<obs_data_item_t>>,
              media_frames_per_second, ffi.Pointer<ffi.Int8>)>();

  int obs_data_item_get_frames_per_second(
    ffi.Pointer<obs_data_item_t> item,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    return _obs_data_item_get_frames_per_second(
      item,
      fps,
      option,
    );
  }

  late final _obs_data_item_get_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<obs_data_item_t>,
                  ffi.Pointer<media_frames_per_second>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'obs_data_item_get_frames_per_second');
  late final _obs_data_item_get_frames_per_second =
      _obs_data_item_get_frames_per_secondPtr.asFunction<
          int Function(
              ffi.Pointer<obs_data_item_t>,
              ffi.Pointer<media_frames_per_second>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int obs_data_item_get_default_frames_per_second(
    ffi.Pointer<obs_data_item_t> item,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    return _obs_data_item_get_default_frames_per_second(
      item,
      fps,
      option,
    );
  }

  late final _obs_data_item_get_default_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<obs_data_item_t>,
                  ffi.Pointer<media_frames_per_second>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'obs_data_item_get_default_frames_per_second');
  late final _obs_data_item_get_default_frames_per_second =
      _obs_data_item_get_default_frames_per_secondPtr.asFunction<
          int Function(
              ffi.Pointer<obs_data_item_t>,
              ffi.Pointer<media_frames_per_second>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int obs_data_item_get_autoselect_frames_per_second(
    ffi.Pointer<obs_data_item_t> item,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    return _obs_data_item_get_autoselect_frames_per_second(
      item,
      fps,
      option,
    );
  }

  late final _obs_data_item_get_autoselect_frames_per_secondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<obs_data_item_t>,
                  ffi.Pointer<media_frames_per_second>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'obs_data_item_get_autoselect_frames_per_second');
  late final _obs_data_item_get_autoselect_frames_per_second =
      _obs_data_item_get_autoselect_frames_per_secondPtr.asFunction<
          int Function(
              ffi.Pointer<obs_data_item_t>,
              ffi.Pointer<media_frames_per_second>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  /// Registers a modal UI definition to the current obs context.  This should be
  /// used in obs_module_load.
  ///
  /// @param  info  Pointer to the modal definition structure
  void obs_register_modal_ui(
    ffi.Pointer<obs_modal_ui> info,
  ) {
    return _obs_register_modal_ui(
      info,
    );
  }

  late final _obs_register_modal_uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_modal_ui>)>>(
          'obs_register_modal_ui');
  late final _obs_register_modal_ui = _obs_register_modal_uiPtr
      .asFunction<void Function(ffi.Pointer<obs_modal_ui>)>();

  /// Registers a modeless UI definition to the current obs context.  This should
  /// be used in obs_module_load.
  ///
  /// @param  info  Pointer to the modal definition structure
  void obs_register_modeless_ui(
    ffi.Pointer<obs_modeless_ui> info,
  ) {
    return _obs_register_modeless_ui(
      info,
    );
  }

  late final _obs_register_modeless_uiPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_modeless_ui>)>>(
      'obs_register_modeless_ui');
  late final _obs_register_modeless_ui = _obs_register_modeless_uiPtr
      .asFunction<void Function(ffi.Pointer<obs_modeless_ui>)>();

  /// Requests modal UI to be displayed.  Returns when user is complete.
  ///
  /// @param    name  Name of the input/output/etc type that UI was requested for
  /// @param    task  Task of the user interface (usually "config")
  /// @param  target  Desired target (i.e. "qt", "wx", "gtk3", "win32", etc)
  /// @param    data  Pointer to the obs input/output/etc
  /// @param ui_data  UI-specific data, usually a parent pointer/handle (if any)
  ///
  /// @return         OBS_UI_SUCCESS if the UI was successful,
  /// OBS_UI_CANCEL if the UI was cancelled by the user, or
  /// OBS_UI_NOTFOUND if the UI callback was not found
  int obs_exec_ui(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> task,
    ffi.Pointer<ffi.Int8> target,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> ui_data,
  ) {
    return _obs_exec_ui(
      id,
      task,
      target,
      data,
      ui_data,
    );
  }

  late final _obs_exec_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('obs_exec_ui');
  late final _obs_exec_ui = _obs_exec_uiPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  /// Requests modeless UI to be created.  Returns immediately.
  ///
  /// @param    name  Name of the input/output/etc type that UI was requested for
  /// @param    task  Task of the user interface
  /// @param  target  Desired target (i.e. "qt", "wx", "gtk3", "win32", etc)
  /// @param    data  Pointer to the obs input/output/etc
  /// @param ui_data  UI-specific data, usually a parent pointer/handle (if any)
  ///
  /// @return         Pointer/handle to the target-specific modeless object, or
  /// NULL if not found or failed.
  ffi.Pointer<ffi.Void> obs_create_ui(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> task,
    ffi.Pointer<ffi.Int8> target,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> ui_data,
  ) {
    return _obs_create_ui(
      id,
      task,
      target,
      data,
      ui_data,
    );
  }

  late final _obs_create_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('obs_create_ui');
  late final _obs_create_ui = _obs_create_uiPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<obs_properties_t> obs_properties_create() {
    return _obs_properties_create();
  }

  late final _obs_properties_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<obs_properties_t> Function()>>(
          'obs_properties_create');
  late final _obs_properties_create = _obs_properties_createPtr
      .asFunction<ffi.Pointer<obs_properties_t> Function()>();

  ffi.Pointer<obs_properties_t> obs_properties_create_param(
    ffi.Pointer<ffi.Void> param,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        destroy,
  ) {
    return _obs_properties_create_param(
      param,
      destroy,
    );
  }

  late final _obs_properties_create_paramPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<obs_properties_t> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'obs_properties_create_param');
  late final _obs_properties_create_param =
      _obs_properties_create_paramPtr.asFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void obs_properties_destroy(
    ffi.Pointer<obs_properties_t> props,
  ) {
    return _obs_properties_destroy(
      props,
    );
  }

  late final _obs_properties_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_properties_t>)>>(
      'obs_properties_destroy');
  late final _obs_properties_destroy = _obs_properties_destroyPtr
      .asFunction<void Function(ffi.Pointer<obs_properties_t>)>();

  void obs_properties_set_flags(
    ffi.Pointer<obs_properties_t> props,
    int flags,
  ) {
    return _obs_properties_set_flags(
      props,
      flags,
    );
  }

  late final _obs_properties_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_properties_t>,
              ffi.Uint32)>>('obs_properties_set_flags');
  late final _obs_properties_set_flags = _obs_properties_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<obs_properties_t>, int)>();

  int obs_properties_get_flags(
    ffi.Pointer<obs_properties_t> props,
  ) {
    return _obs_properties_get_flags(
      props,
    );
  }

  late final _obs_properties_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<obs_properties_t>)>>('obs_properties_get_flags');
  late final _obs_properties_get_flags = _obs_properties_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<obs_properties_t>)>();

  void obs_properties_set_param(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Void> param,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        destroy,
  ) {
    return _obs_properties_set_param(
      props,
      param,
      destroy,
    );
  }

  late final _obs_properties_set_paramPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<obs_properties_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'obs_properties_set_param');
  late final _obs_properties_set_param =
      _obs_properties_set_paramPtr.asFunction<
          void Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> obs_properties_get_param(
    ffi.Pointer<obs_properties_t> props,
  ) {
    return _obs_properties_get_param(
      props,
    );
  }

  late final _obs_properties_get_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_properties_t>)>>('obs_properties_get_param');
  late final _obs_properties_get_param =
      _obs_properties_get_paramPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<obs_properties_t>)>();

  ffi.Pointer<obs_property_t> obs_properties_first(
    ffi.Pointer<obs_properties_t> props,
  ) {
    return _obs_properties_first(
      props,
    );
  }

  late final _obs_properties_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>)>>('obs_properties_first');
  late final _obs_properties_first = _obs_properties_firstPtr.asFunction<
      ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>)>();

  ffi.Pointer<obs_property_t> obs_properties_get(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> property,
  ) {
    return _obs_properties_get(
      props,
      property,
    );
  }

  late final _obs_properties_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_properties_get');
  late final _obs_properties_get = _obs_properties_getPtr.asFunction<
      ffi.Pointer<obs_property_t> Function(
          ffi.Pointer<obs_properties_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_properties_t> obs_properties_get_parent(
    ffi.Pointer<obs_properties_t> props,
  ) {
    return _obs_properties_get_parent(
      props,
    );
  }

  late final _obs_properties_get_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<obs_properties_t>)>>('obs_properties_get_parent');
  late final _obs_properties_get_parent =
      _obs_properties_get_parentPtr.asFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<obs_properties_t>)>();

  /// Remove a property from a properties list.
  ///
  /// Removes a property from a properties list. Only valid in either
  /// get_properties or modified_callback(2). modified_callback(2) must return
  /// true so that all UI properties are rebuilt and returning false is undefined
  /// behavior.
  ///
  /// @param props Properties to remove from.
  /// @param property Name of the property to remove.
  void obs_properties_remove_by_name(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> property,
  ) {
    return _obs_properties_remove_by_name(
      props,
      property,
    );
  }

  late final _obs_properties_remove_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_properties_remove_by_name');
  late final _obs_properties_remove_by_name =
      _obs_properties_remove_by_namePtr.asFunction<
          void Function(
              ffi.Pointer<obs_properties_t>, ffi.Pointer<ffi.Int8>)>();

  /// Applies settings to the properties by calling all the necessary
  /// modification callbacks
  void obs_properties_apply_settings(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_properties_apply_settings(
      props,
      settings,
    );
  }

  late final _obs_properties_apply_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_properties_t>,
              ffi.Pointer<obs_data_t>)>>('obs_properties_apply_settings');
  late final _obs_properties_apply_settings =
      _obs_properties_apply_settingsPtr.asFunction<
          void Function(
              ffi.Pointer<obs_properties_t>, ffi.Pointer<obs_data_t>)>();

  ffi.Pointer<obs_property_t> obs_properties_add_bool(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    return _obs_properties_add_bool(
      props,
      name,
      description,
    );
  }

  late final _obs_properties_add_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_properties_add_bool');
  late final _obs_properties_add_bool = _obs_properties_add_boolPtr.asFunction<
      ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_property_t> obs_properties_add_int(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int min,
    int max,
    int step,
  ) {
    return _obs_properties_add_int(
      props,
      name,
      description,
      min,
      max,
      step,
    );
  }

  late final _obs_properties_add_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('obs_properties_add_int');
  late final _obs_properties_add_int = _obs_properties_add_intPtr.asFunction<
      ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int, int)>();

  ffi.Pointer<obs_property_t> obs_properties_add_float(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    double min,
    double max,
    double step,
  ) {
    return _obs_properties_add_float(
      props,
      name,
      description,
      min,
      max,
      step,
    );
  }

  late final _obs_properties_add_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('obs_properties_add_float');
  late final _obs_properties_add_float =
      _obs_properties_add_floatPtr.asFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              double,
              double,
              double)>();

  ffi.Pointer<obs_property_t> obs_properties_add_int_slider(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int min,
    int max,
    int step,
  ) {
    return _obs_properties_add_int_slider(
      props,
      name,
      description,
      min,
      max,
      step,
    );
  }

  late final _obs_properties_add_int_sliderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('obs_properties_add_int_slider');
  late final _obs_properties_add_int_slider =
      _obs_properties_add_int_sliderPtr.asFunction<
          ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int, int)>();

  ffi.Pointer<obs_property_t> obs_properties_add_float_slider(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    double min,
    double max,
    double step,
  ) {
    return _obs_properties_add_float_slider(
      props,
      name,
      description,
      min,
      max,
      step,
    );
  }

  late final _obs_properties_add_float_sliderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('obs_properties_add_float_slider');
  late final _obs_properties_add_float_slider =
      _obs_properties_add_float_sliderPtr.asFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              double,
              double,
              double)>();

  ffi.Pointer<obs_property_t> obs_properties_add_text(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
  ) {
    return _obs_properties_add_text(
      props,
      name,
      description,
      type,
    );
  }

  late final _obs_properties_add_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('obs_properties_add_text');
  late final _obs_properties_add_text = _obs_properties_add_textPtr.asFunction<
      ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  /// Adds a 'path' property.  Can be a directory or a file.
  ///
  /// If target is a file path, the filters should be this format, separated by
  /// double semi-colens, and extensions separated by space:
  /// "Example types 1 and 2 (*.ex1 *.ex2);;Example type 3 (*.ex3)"
  ///
  /// @param  props        Properties object
  /// @param  name         Settings name
  /// @param  description  Description (display name) of the property
  /// @param  type         Type of path (directory or file)
  /// @param  filter       If type is a file path, then describes the file filter
  /// that the user can browse.  Items are separated via
  /// double semi-colens.  If multiple file types in a
  /// filter, separate with space.
  ffi.Pointer<obs_property_t> obs_properties_add_path(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
    ffi.Pointer<ffi.Int8> filter,
    ffi.Pointer<ffi.Int8> default_path,
  ) {
    return _obs_properties_add_path(
      props,
      name,
      description,
      type,
      filter,
      default_path,
    );
  }

  late final _obs_properties_add_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_properties_add_path');
  late final _obs_properties_add_path = _obs_properties_add_pathPtr.asFunction<
      ffi.Pointer<obs_property_t> Function(
          ffi.Pointer<obs_properties_t>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_property_t> obs_properties_add_list(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
    int format,
  ) {
    return _obs_properties_add_list(
      props,
      name,
      description,
      type,
      format,
    );
  }

  late final _obs_properties_add_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32)>>('obs_properties_add_list');
  late final _obs_properties_add_list = _obs_properties_add_listPtr.asFunction<
      ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<obs_property_t> obs_properties_add_color(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    return _obs_properties_add_color(
      props,
      name,
      description,
    );
  }

  late final _obs_properties_add_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_properties_add_color');
  late final _obs_properties_add_color =
      _obs_properties_add_colorPtr.asFunction<
          ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_property_t> obs_properties_add_color_alpha(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    return _obs_properties_add_color_alpha(
      props,
      name,
      description,
    );
  }

  late final _obs_properties_add_color_alphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_properties_add_color_alpha');
  late final _obs_properties_add_color_alpha =
      _obs_properties_add_color_alphaPtr.asFunction<
          ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_property_t> obs_properties_add_button(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> text,
    obs_property_clicked_t callback,
  ) {
    return _obs_properties_add_button(
      props,
      name,
      text,
      callback,
    );
  }

  late final _obs_properties_add_buttonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_property_clicked_t)>>('obs_properties_add_button');
  late final _obs_properties_add_button =
      _obs_properties_add_buttonPtr.asFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_property_clicked_t)>();

  ffi.Pointer<obs_property_t> obs_properties_add_button2(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> text,
    obs_property_clicked_t callback,
    ffi.Pointer<ffi.Void> priv,
  ) {
    return _obs_properties_add_button2(
      props,
      name,
      text,
      callback,
      priv,
    );
  }

  late final _obs_properties_add_button2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_property_clicked_t,
              ffi.Pointer<ffi.Void>)>>('obs_properties_add_button2');
  late final _obs_properties_add_button2 =
      _obs_properties_add_button2Ptr.asFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_property_clicked_t,
              ffi.Pointer<ffi.Void>)>();

  /// Adds a font selection property.
  ///
  /// A font is an obs_data sub-object which contains the following items:
  /// face:   face name string
  /// style:  style name string
  /// size:   size integer
  /// flags:  font flags integer (OBS_FONT_* defined above)
  ffi.Pointer<obs_property_t> obs_properties_add_font(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    return _obs_properties_add_font(
      props,
      name,
      description,
    );
  }

  late final _obs_properties_add_fontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_properties_add_font');
  late final _obs_properties_add_font = _obs_properties_add_fontPtr.asFunction<
      ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_property_t> obs_properties_add_editable_list(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
    ffi.Pointer<ffi.Int8> filter,
    ffi.Pointer<ffi.Int8> default_path,
  ) {
    return _obs_properties_add_editable_list(
      props,
      name,
      description,
      type,
      filter,
      default_path,
    );
  }

  late final _obs_properties_add_editable_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_properties_add_editable_list');
  late final _obs_properties_add_editable_list =
      _obs_properties_add_editable_listPtr.asFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              int,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_property_t> obs_properties_add_frame_rate(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    return _obs_properties_add_frame_rate(
      props,
      name,
      description,
    );
  }

  late final _obs_properties_add_frame_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_properties_add_frame_rate');
  late final _obs_properties_add_frame_rate =
      _obs_properties_add_frame_ratePtr.asFunction<
          ffi.Pointer<obs_property_t> Function(ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_property_t> obs_properties_add_group(
    ffi.Pointer<obs_properties_t> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
    ffi.Pointer<obs_properties_t> group,
  ) {
    return _obs_properties_add_group(
      props,
      name,
      description,
      type,
      group,
    );
  }

  late final _obs_properties_add_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<obs_properties_t>)>>('obs_properties_add_group');
  late final _obs_properties_add_group =
      _obs_properties_add_groupPtr.asFunction<
          ffi.Pointer<obs_property_t> Function(
              ffi.Pointer<obs_properties_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              int,
              ffi.Pointer<obs_properties_t>)>();

  void obs_property_set_modified_callback(
    ffi.Pointer<obs_property_t> p,
    obs_property_modified_t modified,
  ) {
    return _obs_property_set_modified_callback(
      p,
      modified,
    );
  }

  late final _obs_property_set_modified_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>,
              obs_property_modified_t)>>('obs_property_set_modified_callback');
  late final _obs_property_set_modified_callback =
      _obs_property_set_modified_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<obs_property_t>, obs_property_modified_t)>();

  void obs_property_set_modified_callback2(
    ffi.Pointer<obs_property_t> p,
    obs_property_modified2_t modified,
    ffi.Pointer<ffi.Void> priv,
  ) {
    return _obs_property_set_modified_callback2(
      p,
      modified,
      priv,
    );
  }

  late final _obs_property_set_modified_callback2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_property_t>,
              obs_property_modified2_t,
              ffi.Pointer<ffi.Void>)>>('obs_property_set_modified_callback2');
  late final _obs_property_set_modified_callback2 =
      _obs_property_set_modified_callback2Ptr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, obs_property_modified2_t,
              ffi.Pointer<ffi.Void>)>();

  int obs_property_modified(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_property_modified(
      p,
      settings,
    );
  }

  late final _obs_property_modifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_property_t>,
              ffi.Pointer<obs_data_t>)>>('obs_property_modified');
  late final _obs_property_modified = _obs_property_modifiedPtr.asFunction<
      int Function(ffi.Pointer<obs_property_t>, ffi.Pointer<obs_data_t>)>();

  int obs_property_button_clicked(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _obs_property_button_clicked(
      p,
      obj,
    );
  }

  late final _obs_property_button_clickedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_property_t>,
              ffi.Pointer<ffi.Void>)>>('obs_property_button_clicked');
  late final _obs_property_button_clicked =
      _obs_property_button_clickedPtr.asFunction<
          int Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Void>)>();

  void obs_property_set_visible(
    ffi.Pointer<obs_property_t> p,
    int visible,
  ) {
    return _obs_property_set_visible(
      p,
      visible,
    );
  }

  late final _obs_property_set_visiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>,
              ffi.Uint8)>>('obs_property_set_visible');
  late final _obs_property_set_visible = _obs_property_set_visiblePtr
      .asFunction<void Function(ffi.Pointer<obs_property_t>, int)>();

  void obs_property_set_enabled(
    ffi.Pointer<obs_property_t> p,
    int enabled,
  ) {
    return _obs_property_set_enabled(
      p,
      enabled,
    );
  }

  late final _obs_property_set_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>,
              ffi.Uint8)>>('obs_property_set_enabled');
  late final _obs_property_set_enabled = _obs_property_set_enabledPtr
      .asFunction<void Function(ffi.Pointer<obs_property_t>, int)>();

  void obs_property_set_description(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<ffi.Int8> description,
  ) {
    return _obs_property_set_description(
      p,
      description,
    );
  }

  late final _obs_property_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_property_set_description');
  late final _obs_property_set_description =
      _obs_property_set_descriptionPtr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>)>();

  void obs_property_set_long_description(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<ffi.Int8> long_description,
  ) {
    return _obs_property_set_long_description(
      p,
      long_description,
    );
  }

  late final _obs_property_set_long_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_property_set_long_description');
  late final _obs_property_set_long_description =
      _obs_property_set_long_descriptionPtr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> obs_property_name(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_name(
      p,
    );
  }

  late final _obs_property_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_property_t>)>>('obs_property_name');
  late final _obs_property_name = _obs_property_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_description(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_description(
      p,
    );
  }

  late final _obs_property_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_property_t>)>>('obs_property_description');
  late final _obs_property_description =
      _obs_property_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_long_description(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_long_description(
      p,
    );
  }

  late final _obs_property_long_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_property_t>)>>('obs_property_long_description');
  late final _obs_property_long_description =
      _obs_property_long_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_get_type(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_get_type(
      p,
    );
  }

  late final _obs_property_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_get_type');
  late final _obs_property_get_type = _obs_property_get_typePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_enabled(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_enabled(
      p,
    );
  }

  late final _obs_property_enabledPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_enabled');
  late final _obs_property_enabled = _obs_property_enabledPtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_visible(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_visible(
      p,
    );
  }

  late final _obs_property_visiblePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_visible');
  late final _obs_property_visible = _obs_property_visiblePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_next(
    ffi.Pointer<ffi.Pointer<obs_property_t>> p,
  ) {
    return _obs_property_next(
      p,
    );
  }

  late final _obs_property_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Pointer<obs_property_t>>)>>('obs_property_next');
  late final _obs_property_next = _obs_property_nextPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<obs_property_t>>)>();

  int obs_property_int_min(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_int_min(
      p,
    );
  }

  late final _obs_property_int_minPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_int_min');
  late final _obs_property_int_min = _obs_property_int_minPtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_int_max(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_int_max(
      p,
    );
  }

  late final _obs_property_int_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_int_max');
  late final _obs_property_int_max = _obs_property_int_maxPtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_int_step(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_int_step(
      p,
    );
  }

  late final _obs_property_int_stepPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_int_step');
  late final _obs_property_int_step = _obs_property_int_stepPtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_int_type(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_int_type(
      p,
    );
  }

  late final _obs_property_int_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_int_type');
  late final _obs_property_int_type = _obs_property_int_typePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_int_suffix(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_int_suffix(
      p,
    );
  }

  late final _obs_property_int_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_property_t>)>>('obs_property_int_suffix');
  late final _obs_property_int_suffix = _obs_property_int_suffixPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>();

  double obs_property_float_min(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_float_min(
      p,
    );
  }

  late final _obs_property_float_minPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_float_min');
  late final _obs_property_float_min = _obs_property_float_minPtr
      .asFunction<double Function(ffi.Pointer<obs_property_t>)>();

  double obs_property_float_max(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_float_max(
      p,
    );
  }

  late final _obs_property_float_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_float_max');
  late final _obs_property_float_max = _obs_property_float_maxPtr
      .asFunction<double Function(ffi.Pointer<obs_property_t>)>();

  double obs_property_float_step(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_float_step(
      p,
    );
  }

  late final _obs_property_float_stepPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_float_step');
  late final _obs_property_float_step = _obs_property_float_stepPtr
      .asFunction<double Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_float_type(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_float_type(
      p,
    );
  }

  late final _obs_property_float_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_float_type');
  late final _obs_property_float_type = _obs_property_float_typePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_float_suffix(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_float_suffix(
      p,
    );
  }

  late final _obs_property_float_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_property_t>)>>('obs_property_float_suffix');
  late final _obs_property_float_suffix =
      _obs_property_float_suffixPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_text_type(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_text_type(
      p,
    );
  }

  late final _obs_property_text_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_text_type');
  late final _obs_property_text_type = _obs_property_text_typePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_text_monospace(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_text_monospace(
      p,
    );
  }

  late final _obs_property_text_monospacePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_text_monospace');
  late final _obs_property_text_monospace = _obs_property_text_monospacePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_path_type(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_path_type(
      p,
    );
  }

  late final _obs_property_path_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_path_type');
  late final _obs_property_path_type = _obs_property_path_typePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_path_filter(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_path_filter(
      p,
    );
  }

  late final _obs_property_path_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_property_t>)>>('obs_property_path_filter');
  late final _obs_property_path_filter =
      _obs_property_path_filterPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_path_default_path(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_path_default_path(
      p,
    );
  }

  late final _obs_property_path_default_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_property_t>)>>('obs_property_path_default_path');
  late final _obs_property_path_default_path =
      _obs_property_path_default_pathPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_list_type(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_list_type(
      p,
    );
  }

  late final _obs_property_list_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_list_type');
  late final _obs_property_list_type = _obs_property_list_typePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_list_format(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_list_format(
      p,
    );
  }

  late final _obs_property_list_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_list_format');
  late final _obs_property_list_format = _obs_property_list_formatPtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  void obs_property_int_set_limits(
    ffi.Pointer<obs_property_t> p,
    int min,
    int max,
    int step,
  ) {
    return _obs_property_int_set_limits(
      p,
      min,
      max,
      step,
    );
  }

  late final _obs_property_int_set_limitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('obs_property_int_set_limits');
  late final _obs_property_int_set_limits = _obs_property_int_set_limitsPtr
      .asFunction<void Function(ffi.Pointer<obs_property_t>, int, int, int)>();

  void obs_property_float_set_limits(
    ffi.Pointer<obs_property_t> p,
    double min,
    double max,
    double step,
  ) {
    return _obs_property_float_set_limits(
      p,
      min,
      max,
      step,
    );
  }

  late final _obs_property_float_set_limitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>, ffi.Double, ffi.Double,
              ffi.Double)>>('obs_property_float_set_limits');
  late final _obs_property_float_set_limits =
      _obs_property_float_set_limitsPtr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, double, double, double)>();

  void obs_property_int_set_suffix(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<ffi.Int8> suffix,
  ) {
    return _obs_property_int_set_suffix(
      p,
      suffix,
    );
  }

  late final _obs_property_int_set_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_property_int_set_suffix');
  late final _obs_property_int_set_suffix =
      _obs_property_int_set_suffixPtr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>)>();

  void obs_property_float_set_suffix(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<ffi.Int8> suffix,
  ) {
    return _obs_property_float_set_suffix(
      p,
      suffix,
    );
  }

  late final _obs_property_float_set_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_property_float_set_suffix');
  late final _obs_property_float_set_suffix =
      _obs_property_float_set_suffixPtr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>)>();

  void obs_property_text_set_monospace(
    ffi.Pointer<obs_property_t> p,
    int monospace,
  ) {
    return _obs_property_text_set_monospace(
      p,
      monospace,
    );
  }

  late final _obs_property_text_set_monospacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>,
              ffi.Uint8)>>('obs_property_text_set_monospace');
  late final _obs_property_text_set_monospace =
      _obs_property_text_set_monospacePtr
          .asFunction<void Function(ffi.Pointer<obs_property_t>, int)>();

  void obs_property_list_clear(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_list_clear(
      p,
    );
  }

  late final _obs_property_list_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_list_clear');
  late final _obs_property_list_clear = _obs_property_list_clearPtr
      .asFunction<void Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_list_add_string(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _obs_property_list_add_string(
      p,
      name,
      val,
    );
  }

  late final _obs_property_list_add_stringPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_property_list_add_string');
  late final _obs_property_list_add_string =
      _obs_property_list_add_stringPtr.asFunction<
          int Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  int obs_property_list_add_int(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    return _obs_property_list_add_int(
      p,
      name,
      val,
    );
  }

  late final _obs_property_list_add_intPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>,
              ffi.Int64)>>('obs_property_list_add_int');
  late final _obs_property_list_add_int =
      _obs_property_list_add_intPtr.asFunction<
          int Function(
              ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>, int)>();

  int obs_property_list_add_float(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    return _obs_property_list_add_float(
      p,
      name,
      val,
    );
  }

  late final _obs_property_list_add_floatPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>,
              ffi.Double)>>('obs_property_list_add_float');
  late final _obs_property_list_add_float =
      _obs_property_list_add_floatPtr.asFunction<
          int Function(
              ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>, double)>();

  void obs_property_list_insert_string(
    ffi.Pointer<obs_property_t> p,
    int idx,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _obs_property_list_insert_string(
      p,
      idx,
      name,
      val,
    );
  }

  late final _obs_property_list_insert_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_property_t>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_property_list_insert_string');
  late final _obs_property_list_insert_string =
      _obs_property_list_insert_stringPtr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  void obs_property_list_insert_int(
    ffi.Pointer<obs_property_t> p,
    int idx,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    return _obs_property_list_insert_int(
      p,
      idx,
      name,
      val,
    );
  }

  late final _obs_property_list_insert_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_property_t>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Int64)>>('obs_property_list_insert_int');
  late final _obs_property_list_insert_int =
      _obs_property_list_insert_intPtr.asFunction<
          void Function(
              ffi.Pointer<obs_property_t>, int, ffi.Pointer<ffi.Int8>, int)>();

  void obs_property_list_insert_float(
    ffi.Pointer<obs_property_t> p,
    int idx,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    return _obs_property_list_insert_float(
      p,
      idx,
      name,
      val,
    );
  }

  late final _obs_property_list_insert_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_property_t>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Double)>>('obs_property_list_insert_float');
  late final _obs_property_list_insert_float =
      _obs_property_list_insert_floatPtr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, int, ffi.Pointer<ffi.Int8>,
              double)>();

  void obs_property_list_item_disable(
    ffi.Pointer<obs_property_t> p,
    int idx,
    int disabled,
  ) {
    return _obs_property_list_item_disable(
      p,
      idx,
      disabled,
    );
  }

  late final _obs_property_list_item_disablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>, size_t,
              ffi.Uint8)>>('obs_property_list_item_disable');
  late final _obs_property_list_item_disable =
      _obs_property_list_item_disablePtr
          .asFunction<void Function(ffi.Pointer<obs_property_t>, int, int)>();

  int obs_property_list_item_disabled(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_list_item_disabled(
      p,
      idx,
    );
  }

  late final _obs_property_list_item_disabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_list_item_disabled');
  late final _obs_property_list_item_disabled =
      _obs_property_list_item_disabledPtr
          .asFunction<int Function(ffi.Pointer<obs_property_t>, int)>();

  void obs_property_list_item_remove(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_list_item_remove(
      p,
      idx,
    );
  }

  late final _obs_property_list_item_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_list_item_remove');
  late final _obs_property_list_item_remove = _obs_property_list_item_removePtr
      .asFunction<void Function(ffi.Pointer<obs_property_t>, int)>();

  int obs_property_list_item_count(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_list_item_count(
      p,
    );
  }

  late final _obs_property_list_item_countPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<obs_property_t>)>>(
          'obs_property_list_item_count');
  late final _obs_property_list_item_count = _obs_property_list_item_countPtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_list_item_name(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_list_item_name(
      p,
      idx,
    );
  }

  late final _obs_property_list_item_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_list_item_name');
  late final _obs_property_list_item_name =
      _obs_property_list_item_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>, int)>();

  ffi.Pointer<ffi.Int8> obs_property_list_item_string(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_list_item_string(
      p,
      idx,
    );
  }

  late final _obs_property_list_item_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_list_item_string');
  late final _obs_property_list_item_string =
      _obs_property_list_item_stringPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>, int)>();

  int obs_property_list_item_int(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_list_item_int(
      p,
      idx,
    );
  }

  late final _obs_property_list_item_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_list_item_int');
  late final _obs_property_list_item_int = _obs_property_list_item_intPtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>, int)>();

  double obs_property_list_item_float(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_list_item_float(
      p,
      idx,
    );
  }

  late final _obs_property_list_item_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_list_item_float');
  late final _obs_property_list_item_float = _obs_property_list_item_floatPtr
      .asFunction<double Function(ffi.Pointer<obs_property_t>, int)>();

  int obs_property_editable_list_type(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_editable_list_type(
      p,
    );
  }

  late final _obs_property_editable_list_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_editable_list_type');
  late final _obs_property_editable_list_type =
      _obs_property_editable_list_typePtr
          .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_editable_list_filter(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_editable_list_filter(
      p,
    );
  }

  late final _obs_property_editable_list_filterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_editable_list_filter');
  late final _obs_property_editable_list_filter =
      _obs_property_editable_list_filterPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_editable_list_default_path(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_editable_list_default_path(
      p,
    );
  }

  late final _obs_property_editable_list_default_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_editable_list_default_path');
  late final _obs_property_editable_list_default_path =
      _obs_property_editable_list_default_pathPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>)>();

  void obs_property_frame_rate_clear(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_frame_rate_clear(
      p,
    );
  }

  late final _obs_property_frame_rate_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_frame_rate_clear');
  late final _obs_property_frame_rate_clear = _obs_property_frame_rate_clearPtr
      .asFunction<void Function(ffi.Pointer<obs_property_t>)>();

  void obs_property_frame_rate_options_clear(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_frame_rate_options_clear(
      p,
    );
  }

  late final _obs_property_frame_rate_options_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_frame_rate_options_clear');
  late final _obs_property_frame_rate_options_clear =
      _obs_property_frame_rate_options_clearPtr
          .asFunction<void Function(ffi.Pointer<obs_property_t>)>();

  void obs_property_frame_rate_fps_ranges_clear(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_frame_rate_fps_ranges_clear(
      p,
    );
  }

  late final _obs_property_frame_rate_fps_ranges_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_frame_rate_fps_ranges_clear');
  late final _obs_property_frame_rate_fps_ranges_clear =
      _obs_property_frame_rate_fps_ranges_clearPtr
          .asFunction<void Function(ffi.Pointer<obs_property_t>)>();

  int obs_property_frame_rate_option_add(
    ffi.Pointer<obs_property_t> p,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    return _obs_property_frame_rate_option_add(
      p,
      name,
      description,
    );
  }

  late final _obs_property_frame_rate_option_addPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_property_frame_rate_option_add');
  late final _obs_property_frame_rate_option_add =
      _obs_property_frame_rate_option_addPtr.asFunction<
          int Function(ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  int obs_property_frame_rate_fps_range_add(
    ffi.Pointer<obs_property_t> p,
    media_frames_per_second min,
    media_frames_per_second max,
  ) {
    return _obs_property_frame_rate_fps_range_add(
      p,
      min,
      max,
    );
  }

  late final _obs_property_frame_rate_fps_range_addPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<obs_property_t>,
                  media_frames_per_second, media_frames_per_second)>>(
      'obs_property_frame_rate_fps_range_add');
  late final _obs_property_frame_rate_fps_range_add =
      _obs_property_frame_rate_fps_range_addPtr.asFunction<
          int Function(ffi.Pointer<obs_property_t>, media_frames_per_second,
              media_frames_per_second)>();

  void obs_property_frame_rate_option_insert(
    ffi.Pointer<obs_property_t> p,
    int idx,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    return _obs_property_frame_rate_option_insert(
      p,
      idx,
      name,
      description,
    );
  }

  late final _obs_property_frame_rate_option_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_property_t>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_property_frame_rate_option_insert');
  late final _obs_property_frame_rate_option_insert =
      _obs_property_frame_rate_option_insertPtr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  void obs_property_frame_rate_fps_range_insert(
    ffi.Pointer<obs_property_t> p,
    int idx,
    media_frames_per_second min,
    media_frames_per_second max,
  ) {
    return _obs_property_frame_rate_fps_range_insert(
      p,
      idx,
      min,
      max,
    );
  }

  late final _obs_property_frame_rate_fps_range_insertPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<obs_property_t>, size_t,
                  media_frames_per_second, media_frames_per_second)>>(
      'obs_property_frame_rate_fps_range_insert');
  late final _obs_property_frame_rate_fps_range_insert =
      _obs_property_frame_rate_fps_range_insertPtr.asFunction<
          void Function(ffi.Pointer<obs_property_t>, int,
              media_frames_per_second, media_frames_per_second)>();

  int obs_property_frame_rate_options_count(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_frame_rate_options_count(
      p,
    );
  }

  late final _obs_property_frame_rate_options_countPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<obs_property_t>)>>(
          'obs_property_frame_rate_options_count');
  late final _obs_property_frame_rate_options_count =
      _obs_property_frame_rate_options_countPtr
          .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<ffi.Int8> obs_property_frame_rate_option_name(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_frame_rate_option_name(
      p,
      idx,
    );
  }

  late final _obs_property_frame_rate_option_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_frame_rate_option_name');
  late final _obs_property_frame_rate_option_name =
      _obs_property_frame_rate_option_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>, int)>();

  ffi.Pointer<ffi.Int8> obs_property_frame_rate_option_description(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_frame_rate_option_description(
      p,
      idx,
    );
  }

  late final _obs_property_frame_rate_option_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_frame_rate_option_description');
  late final _obs_property_frame_rate_option_description =
      _obs_property_frame_rate_option_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_property_t>, int)>();

  int obs_property_frame_rate_fps_ranges_count(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_frame_rate_fps_ranges_count(
      p,
    );
  }

  late final _obs_property_frame_rate_fps_ranges_countPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<obs_property_t>)>>(
          'obs_property_frame_rate_fps_ranges_count');
  late final _obs_property_frame_rate_fps_ranges_count =
      _obs_property_frame_rate_fps_ranges_countPtr
          .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  media_frames_per_second obs_property_frame_rate_fps_range_min(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_frame_rate_fps_range_min(
      p,
      idx,
    );
  }

  late final _obs_property_frame_rate_fps_range_minPtr = _lookup<
      ffi.NativeFunction<
          media_frames_per_second Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_frame_rate_fps_range_min');
  late final _obs_property_frame_rate_fps_range_min =
      _obs_property_frame_rate_fps_range_minPtr.asFunction<
          media_frames_per_second Function(ffi.Pointer<obs_property_t>, int)>();

  media_frames_per_second obs_property_frame_rate_fps_range_max(
    ffi.Pointer<obs_property_t> p,
    int idx,
  ) {
    return _obs_property_frame_rate_fps_range_max(
      p,
      idx,
    );
  }

  late final _obs_property_frame_rate_fps_range_maxPtr = _lookup<
      ffi.NativeFunction<
          media_frames_per_second Function(ffi.Pointer<obs_property_t>,
              size_t)>>('obs_property_frame_rate_fps_range_max');
  late final _obs_property_frame_rate_fps_range_max =
      _obs_property_frame_rate_fps_range_maxPtr.asFunction<
          media_frames_per_second Function(ffi.Pointer<obs_property_t>, int)>();

  int obs_property_group_type(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_group_type(
      p,
    );
  }

  late final _obs_property_group_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_property_group_type');
  late final _obs_property_group_type = _obs_property_group_typePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  ffi.Pointer<obs_properties_t> obs_property_group_content(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_property_group_content(
      p,
    );
  }

  late final _obs_property_group_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<obs_property_t>)>>('obs_property_group_content');
  late final _obs_property_group_content =
      _obs_property_group_contentPtr.asFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<obs_property_t>)>();

  int obs_proprety_text_type(
    ffi.Pointer<obs_property_t> p,
  ) {
    return _obs_proprety_text_type(
      p,
    );
  }

  late final _obs_proprety_text_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_property_t>)>>(
      'obs_proprety_text_type');
  late final _obs_proprety_text_type = _obs_proprety_text_typePtr
      .asFunction<int Function(ffi.Pointer<obs_property_t>)>();

  void obs_register_source_s(
    ffi.Pointer<obs_source_info> info,
    int size,
  ) {
    return _obs_register_source_s(
      info,
      size,
    );
  }

  late final _obs_register_source_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_info>, size_t)>>('obs_register_source_s');
  late final _obs_register_source_s = _obs_register_source_sPtr
      .asFunction<void Function(ffi.Pointer<obs_source_info>, int)>();

  void obs_register_encoder_s(
    ffi.Pointer<obs_encoder_info> info,
    int size,
  ) {
    return _obs_register_encoder_s(
      info,
      size,
    );
  }

  late final _obs_register_encoder_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_encoder_info>,
              size_t)>>('obs_register_encoder_s');
  late final _obs_register_encoder_s = _obs_register_encoder_sPtr
      .asFunction<void Function(ffi.Pointer<obs_encoder_info>, int)>();

  void obs_register_output_s(
    ffi.Pointer<obs_output_info> info,
    int size,
  ) {
    return _obs_register_output_s(
      info,
      size,
    );
  }

  late final _obs_register_output_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_output_info>, size_t)>>('obs_register_output_s');
  late final _obs_register_output_s = _obs_register_output_sPtr
      .asFunction<void Function(ffi.Pointer<obs_output_info>, int)>();

  void obs_register_service_s(
    ffi.Pointer<obs_service_info> info,
    int size,
  ) {
    return _obs_register_service_s(
      info,
      size,
    );
  }

  late final _obs_register_service_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_service_info>,
              size_t)>>('obs_register_service_s');
  late final _obs_register_service_s = _obs_register_service_sPtr
      .asFunction<void Function(ffi.Pointer<obs_service_info>, int)>();

  /// @brief Create a fader
  /// @param type the type of the fader
  /// @return pointer to the fader object
  ///
  /// A fader object is used to map input values from a gui element to dB and
  /// subsequently multiplier values used by libobs to mix audio.
  /// The current "position" of the fader is internally stored as dB value.
  ffi.Pointer<obs_fader_t> obs_fader_create(
    int type,
  ) {
    return _obs_fader_create(
      type,
    );
  }

  late final _obs_fader_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<obs_fader_t> Function(ffi.Int32)>>(
          'obs_fader_create');
  late final _obs_fader_create =
      _obs_fader_createPtr.asFunction<ffi.Pointer<obs_fader_t> Function(int)>();

  /// @brief Destroy a fader
  /// @param fader pointer to the fader object
  ///
  /// Destroy the fader and free all related data
  void obs_fader_destroy(
    ffi.Pointer<obs_fader_t> fader,
  ) {
    return _obs_fader_destroy(
      fader,
    );
  }

  late final _obs_fader_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_fader_t>)>>(
          'obs_fader_destroy');
  late final _obs_fader_destroy = _obs_fader_destroyPtr
      .asFunction<void Function(ffi.Pointer<obs_fader_t>)>();

  /// @brief Set the fader dB value
  /// @param fader pointer to the fader object
  /// @param db new dB value
  /// @return true if value was set without clamping
  int obs_fader_set_db(
    ffi.Pointer<obs_fader_t> fader,
    double db,
  ) {
    return _obs_fader_set_db(
      fader,
      db,
    );
  }

  late final _obs_fader_set_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<obs_fader_t>, ffi.Float)>>('obs_fader_set_db');
  late final _obs_fader_set_db = _obs_fader_set_dbPtr
      .asFunction<int Function(ffi.Pointer<obs_fader_t>, double)>();

  /// @brief Get the current fader dB value
  /// @param fader pointer to the fader object
  /// @return current fader dB value
  double obs_fader_get_db(
    ffi.Pointer<obs_fader_t> fader,
  ) {
    return _obs_fader_get_db(
      fader,
    );
  }

  late final _obs_fader_get_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<obs_fader_t>)>>(
          'obs_fader_get_db');
  late final _obs_fader_get_db = _obs_fader_get_dbPtr
      .asFunction<double Function(ffi.Pointer<obs_fader_t>)>();

  /// @brief Set the fader value from deflection
  /// @param fader pointer to the fader object
  /// @param def new deflection
  /// @return true if value was set without clamping
  ///
  /// This sets the new fader value from the supplied deflection, in case the
  /// resulting value was clamped due to limits this function will return false.
  /// The deflection is typically in the range [0.0, 1.0] but may be higher in
  /// order to provide some amplification. In order for this to work the high dB
  /// limit has to be set.
  int obs_fader_set_deflection(
    ffi.Pointer<obs_fader_t> fader,
    double def,
  ) {
    return _obs_fader_set_deflection(
      fader,
      def,
    );
  }

  late final _obs_fader_set_deflectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_fader_t>,
              ffi.Float)>>('obs_fader_set_deflection');
  late final _obs_fader_set_deflection = _obs_fader_set_deflectionPtr
      .asFunction<int Function(ffi.Pointer<obs_fader_t>, double)>();

  /// @brief Get the current fader deflection
  /// @param fader pointer to the fader object
  /// @return current fader deflection
  double obs_fader_get_deflection(
    ffi.Pointer<obs_fader_t> fader,
  ) {
    return _obs_fader_get_deflection(
      fader,
    );
  }

  late final _obs_fader_get_deflectionPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<obs_fader_t>)>>(
          'obs_fader_get_deflection');
  late final _obs_fader_get_deflection = _obs_fader_get_deflectionPtr
      .asFunction<double Function(ffi.Pointer<obs_fader_t>)>();

  /// @brief Set the fader value from multiplier
  /// @param fader pointer to the fader object
  /// @return true if the value was set without clamping
  int obs_fader_set_mul(
    ffi.Pointer<obs_fader_t> fader,
    double mul,
  ) {
    return _obs_fader_set_mul(
      fader,
      mul,
    );
  }

  late final _obs_fader_set_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<obs_fader_t>, ffi.Float)>>('obs_fader_set_mul');
  late final _obs_fader_set_mul = _obs_fader_set_mulPtr
      .asFunction<int Function(ffi.Pointer<obs_fader_t>, double)>();

  /// @brief Get the current fader multiplier value
  /// @param fader pointer to the fader object
  /// @return current fader multiplier
  double obs_fader_get_mul(
    ffi.Pointer<obs_fader_t> fader,
  ) {
    return _obs_fader_get_mul(
      fader,
    );
  }

  late final _obs_fader_get_mulPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<obs_fader_t>)>>(
          'obs_fader_get_mul');
  late final _obs_fader_get_mul = _obs_fader_get_mulPtr
      .asFunction<double Function(ffi.Pointer<obs_fader_t>)>();

  /// @brief Attach the fader to a source
  /// @param fader pointer to the fader object
  /// @param source pointer to the source object
  /// @return true on success
  ///
  /// When the fader is attached to a source it will automatically sync it's state
  /// to the volume of the source.
  int obs_fader_attach_source(
    ffi.Pointer<obs_fader_t> fader,
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_fader_attach_source(
      fader,
      source,
    );
  }

  late final _obs_fader_attach_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_fader_t>,
              ffi.Pointer<obs_source_t>)>>('obs_fader_attach_source');
  late final _obs_fader_attach_source = _obs_fader_attach_sourcePtr.asFunction<
      int Function(ffi.Pointer<obs_fader_t>, ffi.Pointer<obs_source_t>)>();

  /// @brief Detach the fader from the currently attached source
  /// @param fader pointer to the fader object
  void obs_fader_detach_source(
    ffi.Pointer<obs_fader_t> fader,
  ) {
    return _obs_fader_detach_source(
      fader,
    );
  }

  late final _obs_fader_detach_sourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_fader_t>)>>(
          'obs_fader_detach_source');
  late final _obs_fader_detach_source = _obs_fader_detach_sourcePtr
      .asFunction<void Function(ffi.Pointer<obs_fader_t>)>();

  void obs_fader_add_callback(
    ffi.Pointer<obs_fader_t> fader,
    obs_fader_changed_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_fader_add_callback(
      fader,
      callback,
      param,
    );
  }

  late final _obs_fader_add_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_fader_t>, obs_fader_changed_t,
              ffi.Pointer<ffi.Void>)>>('obs_fader_add_callback');
  late final _obs_fader_add_callback = _obs_fader_add_callbackPtr.asFunction<
      void Function(ffi.Pointer<obs_fader_t>, obs_fader_changed_t,
          ffi.Pointer<ffi.Void>)>();

  void obs_fader_remove_callback(
    ffi.Pointer<obs_fader_t> fader,
    obs_fader_changed_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_fader_remove_callback(
      fader,
      callback,
      param,
    );
  }

  late final _obs_fader_remove_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_fader_t>, obs_fader_changed_t,
              ffi.Pointer<ffi.Void>)>>('obs_fader_remove_callback');
  late final _obs_fader_remove_callback =
      _obs_fader_remove_callbackPtr.asFunction<
          void Function(ffi.Pointer<obs_fader_t>, obs_fader_changed_t,
              ffi.Pointer<ffi.Void>)>();

  /// @brief Create a volume meter
  /// @param type the mapping type to use for the volume meter
  /// @return pointer to the volume meter object
  ///
  /// A volume meter object is used to prepare the sound levels reported by audio
  /// sources for display in a GUI.
  /// It will automatically take source volume into account and map the levels
  /// to a range [0.0f, 1.0f].
  ffi.Pointer<obs_volmeter_t> obs_volmeter_create(
    int type,
  ) {
    return _obs_volmeter_create(
      type,
    );
  }

  late final _obs_volmeter_createPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<obs_volmeter_t> Function(ffi.Int32)>>(
      'obs_volmeter_create');
  late final _obs_volmeter_create = _obs_volmeter_createPtr
      .asFunction<ffi.Pointer<obs_volmeter_t> Function(int)>();

  /// @brief Destroy a volume meter
  /// @param volmeter pointer to the volmeter object
  ///
  /// Destroy the volume meter and free all related data
  void obs_volmeter_destroy(
    ffi.Pointer<obs_volmeter_t> volmeter,
  ) {
    return _obs_volmeter_destroy(
      volmeter,
    );
  }

  late final _obs_volmeter_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_volmeter_t>)>>(
      'obs_volmeter_destroy');
  late final _obs_volmeter_destroy = _obs_volmeter_destroyPtr
      .asFunction<void Function(ffi.Pointer<obs_volmeter_t>)>();

  /// @brief Attach the volume meter to a source
  /// @param volmeter pointer to the volume meter object
  /// @param source pointer to the source object
  /// @return true on success
  ///
  /// When the volume meter is attached to a source it will start to listen to
  /// volume updates on the source and after preparing the data emit its own
  /// signal.
  int obs_volmeter_attach_source(
    ffi.Pointer<obs_volmeter_t> volmeter,
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_volmeter_attach_source(
      volmeter,
      source,
    );
  }

  late final _obs_volmeter_attach_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_volmeter_t>,
              ffi.Pointer<obs_source_t>)>>('obs_volmeter_attach_source');
  late final _obs_volmeter_attach_source =
      _obs_volmeter_attach_sourcePtr.asFunction<
          int Function(
              ffi.Pointer<obs_volmeter_t>, ffi.Pointer<obs_source_t>)>();

  /// @brief Detach the volume meter from the currently attached source
  /// @param volmeter pointer to the volume meter object
  void obs_volmeter_detach_source(
    ffi.Pointer<obs_volmeter_t> volmeter,
  ) {
    return _obs_volmeter_detach_source(
      volmeter,
    );
  }

  late final _obs_volmeter_detach_sourcePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_volmeter_t>)>>(
      'obs_volmeter_detach_source');
  late final _obs_volmeter_detach_source = _obs_volmeter_detach_sourcePtr
      .asFunction<void Function(ffi.Pointer<obs_volmeter_t>)>();

  /// @brief Set the peak meter type for the volume meter
  /// @param volmeter pointer to the volume meter object
  /// @param peak_meter_type set if true-peak needs to be measured.
  void obs_volmeter_set_peak_meter_type(
    ffi.Pointer<obs_volmeter_t> volmeter,
    int peak_meter_type,
  ) {
    return _obs_volmeter_set_peak_meter_type(
      volmeter,
      peak_meter_type,
    );
  }

  late final _obs_volmeter_set_peak_meter_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_volmeter_t>,
              ffi.Int32)>>('obs_volmeter_set_peak_meter_type');
  late final _obs_volmeter_set_peak_meter_type =
      _obs_volmeter_set_peak_meter_typePtr
          .asFunction<void Function(ffi.Pointer<obs_volmeter_t>, int)>();

  /// @brief Set the update interval for the volume meter
  /// @param volmeter pointer to the volume meter object
  /// @param ms update interval in ms
  ///
  /// This sets the update interval in milliseconds that should be processed before
  /// the resulting values are emitted by the levels_updated signal. The resulting
  /// number of audio samples is rounded to an integer.
  ///
  /// Please note that due to way obs does receive audio data from the sources
  /// this is no hard guarantee for the timing of the signal itself. When the
  /// volume meter receives a chunk of data that is multiple the size of the sample
  /// interval, all data will be sampled and the values updated accordingly, but
  /// only the signal for the last segment is actually emitted.
  /// On the other hand data might be received in a way that will cause the signal
  /// to be emitted in shorter intervals than specified here under some
  /// circumstances.
  void obs_volmeter_set_update_interval(
    ffi.Pointer<obs_volmeter_t> volmeter,
    int ms,
  ) {
    return _obs_volmeter_set_update_interval(
      volmeter,
      ms,
    );
  }

  late final _obs_volmeter_set_update_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_volmeter_t>,
              ffi.Uint32)>>('obs_volmeter_set_update_interval');
  late final _obs_volmeter_set_update_interval =
      _obs_volmeter_set_update_intervalPtr
          .asFunction<void Function(ffi.Pointer<obs_volmeter_t>, int)>();

  /// @brief Get the update interval currently used for the volume meter
  /// @param volmeter pointer to the volume meter object
  /// @return update interval in ms
  int obs_volmeter_get_update_interval(
    ffi.Pointer<obs_volmeter_t> volmeter,
  ) {
    return _obs_volmeter_get_update_interval(
      volmeter,
    );
  }

  late final _obs_volmeter_get_update_intervalPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_volmeter_t>)>>(
      'obs_volmeter_get_update_interval');
  late final _obs_volmeter_get_update_interval =
      _obs_volmeter_get_update_intervalPtr
          .asFunction<int Function(ffi.Pointer<obs_volmeter_t>)>();

  /// @brief Get the number of channels which are configured for this source.
  /// @param volmeter pointer to the volume meter object
  int obs_volmeter_get_nr_channels(
    ffi.Pointer<obs_volmeter_t> volmeter,
  ) {
    return _obs_volmeter_get_nr_channels(
      volmeter,
    );
  }

  late final _obs_volmeter_get_nr_channelsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_volmeter_t>)>>(
      'obs_volmeter_get_nr_channels');
  late final _obs_volmeter_get_nr_channels = _obs_volmeter_get_nr_channelsPtr
      .asFunction<int Function(ffi.Pointer<obs_volmeter_t>)>();

  void obs_volmeter_add_callback(
    ffi.Pointer<obs_volmeter_t> volmeter,
    obs_volmeter_updated_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_volmeter_add_callback(
      volmeter,
      callback,
      param,
    );
  }

  late final _obs_volmeter_add_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_volmeter_t>, obs_volmeter_updated_t,
              ffi.Pointer<ffi.Void>)>>('obs_volmeter_add_callback');
  late final _obs_volmeter_add_callback =
      _obs_volmeter_add_callbackPtr.asFunction<
          void Function(ffi.Pointer<obs_volmeter_t>, obs_volmeter_updated_t,
              ffi.Pointer<ffi.Void>)>();

  void obs_volmeter_remove_callback(
    ffi.Pointer<obs_volmeter_t> volmeter,
    obs_volmeter_updated_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_volmeter_remove_callback(
      volmeter,
      callback,
      param,
    );
  }

  late final _obs_volmeter_remove_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_volmeter_t>, obs_volmeter_updated_t,
              ffi.Pointer<ffi.Void>)>>('obs_volmeter_remove_callback');
  late final _obs_volmeter_remove_callback =
      _obs_volmeter_remove_callbackPtr.asFunction<
          void Function(ffi.Pointer<obs_volmeter_t>, obs_volmeter_updated_t,
              ffi.Pointer<ffi.Void>)>();

  double obs_mul_to_db(
    double mul,
  ) {
    return _obs_mul_to_db(
      mul,
    );
  }

  late final _obs_mul_to_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'obs_mul_to_db');
  late final _obs_mul_to_db =
      _obs_mul_to_dbPtr.asFunction<double Function(double)>();

  double obs_db_to_mul(
    double db,
  ) {
    return _obs_db_to_mul(
      db,
    );
  }

  late final _obs_db_to_mulPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'obs_db_to_mul');
  late final _obs_db_to_mul =
      _obs_db_to_mulPtr.asFunction<double Function(double)>();

  int obs_hotkey_get_id(
    ffi.Pointer<obs_hotkey_t> key,
  ) {
    return _obs_hotkey_get_id(
      key,
    );
  }

  late final _obs_hotkey_get_idPtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_id Function(
              ffi.Pointer<obs_hotkey_t>)>>('obs_hotkey_get_id');
  late final _obs_hotkey_get_id = _obs_hotkey_get_idPtr
      .asFunction<int Function(ffi.Pointer<obs_hotkey_t>)>();

  ffi.Pointer<ffi.Int8> obs_hotkey_get_name(
    ffi.Pointer<obs_hotkey_t> key,
  ) {
    return _obs_hotkey_get_name(
      key,
    );
  }

  late final _obs_hotkey_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_hotkey_t>)>>('obs_hotkey_get_name');
  late final _obs_hotkey_get_name = _obs_hotkey_get_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_hotkey_t>)>();

  ffi.Pointer<ffi.Int8> obs_hotkey_get_description(
    ffi.Pointer<obs_hotkey_t> key,
  ) {
    return _obs_hotkey_get_description(
      key,
    );
  }

  late final _obs_hotkey_get_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_hotkey_t>)>>('obs_hotkey_get_description');
  late final _obs_hotkey_get_description = _obs_hotkey_get_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_hotkey_t>)>();

  int obs_hotkey_get_registerer_type(
    ffi.Pointer<obs_hotkey_t> key,
  ) {
    return _obs_hotkey_get_registerer_type(
      key,
    );
  }

  late final _obs_hotkey_get_registerer_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_hotkey_t>)>>(
      'obs_hotkey_get_registerer_type');
  late final _obs_hotkey_get_registerer_type =
      _obs_hotkey_get_registerer_typePtr
          .asFunction<int Function(ffi.Pointer<obs_hotkey_t>)>();

  ffi.Pointer<ffi.Void> obs_hotkey_get_registerer(
    ffi.Pointer<obs_hotkey_t> key,
  ) {
    return _obs_hotkey_get_registerer(
      key,
    );
  }

  late final _obs_hotkey_get_registererPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_hotkey_t>)>>('obs_hotkey_get_registerer');
  late final _obs_hotkey_get_registerer = _obs_hotkey_get_registererPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<obs_hotkey_t>)>();

  int obs_hotkey_get_pair_partner_id(
    ffi.Pointer<obs_hotkey_t> key,
  ) {
    return _obs_hotkey_get_pair_partner_id(
      key,
    );
  }

  late final _obs_hotkey_get_pair_partner_idPtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_id Function(
              ffi.Pointer<obs_hotkey_t>)>>('obs_hotkey_get_pair_partner_id');
  late final _obs_hotkey_get_pair_partner_id =
      _obs_hotkey_get_pair_partner_idPtr
          .asFunction<int Function(ffi.Pointer<obs_hotkey_t>)>();

  obs_key_combination_t obs_hotkey_binding_get_key_combination(
    ffi.Pointer<obs_hotkey_binding_t> binding,
  ) {
    return _obs_hotkey_binding_get_key_combination(
      binding,
    );
  }

  late final _obs_hotkey_binding_get_key_combinationPtr = _lookup<
          ffi.NativeFunction<
              obs_key_combination_t Function(
                  ffi.Pointer<obs_hotkey_binding_t>)>>(
      'obs_hotkey_binding_get_key_combination');
  late final _obs_hotkey_binding_get_key_combination =
      _obs_hotkey_binding_get_key_combinationPtr.asFunction<
          obs_key_combination_t Function(ffi.Pointer<obs_hotkey_binding_t>)>();

  int obs_hotkey_binding_get_hotkey_id(
    ffi.Pointer<obs_hotkey_binding_t> binding,
  ) {
    return _obs_hotkey_binding_get_hotkey_id(
      binding,
    );
  }

  late final _obs_hotkey_binding_get_hotkey_idPtr = _lookup<
          ffi.NativeFunction<
              obs_hotkey_id Function(ffi.Pointer<obs_hotkey_binding_t>)>>(
      'obs_hotkey_binding_get_hotkey_id');
  late final _obs_hotkey_binding_get_hotkey_id =
      _obs_hotkey_binding_get_hotkey_idPtr
          .asFunction<int Function(ffi.Pointer<obs_hotkey_binding_t>)>();

  ffi.Pointer<obs_hotkey_t> obs_hotkey_binding_get_hotkey(
    ffi.Pointer<obs_hotkey_binding_t> binding,
  ) {
    return _obs_hotkey_binding_get_hotkey(
      binding,
    );
  }

  late final _obs_hotkey_binding_get_hotkeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<obs_hotkey_t> Function(
                  ffi.Pointer<obs_hotkey_binding_t>)>>(
      'obs_hotkey_binding_get_hotkey');
  late final _obs_hotkey_binding_get_hotkey =
      _obs_hotkey_binding_get_hotkeyPtr.asFunction<
          ffi.Pointer<obs_hotkey_t> Function(
              ffi.Pointer<obs_hotkey_binding_t>)>();

  void obs_hotkey_set_name(
    int id,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_hotkey_set_name(
      id,
      name,
    );
  }

  late final _obs_hotkey_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              obs_hotkey_id, ffi.Pointer<ffi.Int8>)>>('obs_hotkey_set_name');
  late final _obs_hotkey_set_name = _obs_hotkey_set_namePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  void obs_hotkey_set_description(
    int id,
    ffi.Pointer<ffi.Int8> desc,
  ) {
    return _obs_hotkey_set_description(
      id,
      desc,
    );
  }

  late final _obs_hotkey_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_id,
              ffi.Pointer<ffi.Int8>)>>('obs_hotkey_set_description');
  late final _obs_hotkey_set_description = _obs_hotkey_set_descriptionPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  void obs_hotkey_pair_set_names(
    int id,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> name1,
  ) {
    return _obs_hotkey_pair_set_names(
      id,
      name0,
      name1,
    );
  }

  late final _obs_hotkey_pair_set_namesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_pair_id, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_hotkey_pair_set_names');
  late final _obs_hotkey_pair_set_names =
      _obs_hotkey_pair_set_namesPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  void obs_hotkey_pair_set_descriptions(
    int id,
    ffi.Pointer<ffi.Int8> desc0,
    ffi.Pointer<ffi.Int8> desc1,
  ) {
    return _obs_hotkey_pair_set_descriptions(
      id,
      desc0,
      desc1,
    );
  }

  late final _obs_hotkey_pair_set_descriptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_pair_id, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_hotkey_pair_set_descriptions');
  late final _obs_hotkey_pair_set_descriptions =
      _obs_hotkey_pair_set_descriptionsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  void obs_hotkeys_set_translations_s(
    ffi.Pointer<obs_hotkeys_translations> translations,
    int size,
  ) {
    return _obs_hotkeys_set_translations_s(
      translations,
      size,
    );
  }

  late final _obs_hotkeys_set_translations_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_hotkeys_translations>,
              size_t)>>('obs_hotkeys_set_translations_s');
  late final _obs_hotkeys_set_translations_s =
      _obs_hotkeys_set_translations_sPtr.asFunction<
          void Function(ffi.Pointer<obs_hotkeys_translations>, int)>();

  void obs_hotkeys_set_audio_hotkeys_translations(
    ffi.Pointer<ffi.Int8> mute,
    ffi.Pointer<ffi.Int8> unmute,
    ffi.Pointer<ffi.Int8> push_to_mute,
    ffi.Pointer<ffi.Int8> push_to_talk,
  ) {
    return _obs_hotkeys_set_audio_hotkeys_translations(
      mute,
      unmute,
      push_to_mute,
      push_to_talk,
    );
  }

  late final _obs_hotkeys_set_audio_hotkeys_translationsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>(
      'obs_hotkeys_set_audio_hotkeys_translations');
  late final _obs_hotkeys_set_audio_hotkeys_translations =
      _obs_hotkeys_set_audio_hotkeys_translationsPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  void obs_hotkeys_set_sceneitem_hotkeys_translations(
    ffi.Pointer<ffi.Int8> show1,
    ffi.Pointer<ffi.Int8> hide1,
  ) {
    return _obs_hotkeys_set_sceneitem_hotkeys_translations(
      show1,
      hide1,
    );
  }

  late final _obs_hotkeys_set_sceneitem_hotkeys_translationsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>(
      'obs_hotkeys_set_sceneitem_hotkeys_translations');
  late final _obs_hotkeys_set_sceneitem_hotkeys_translations =
      _obs_hotkeys_set_sceneitem_hotkeys_translationsPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int obs_hotkey_register_frontend(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    obs_hotkey_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_hotkey_register_frontend(
      name,
      description,
      func,
      data,
    );
  }

  late final _obs_hotkey_register_frontendPtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_id Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_func,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_register_frontend');
  late final _obs_hotkey_register_frontend =
      _obs_hotkey_register_frontendPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              obs_hotkey_func, ffi.Pointer<ffi.Void>)>();

  int obs_hotkey_register_encoder(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    obs_hotkey_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_hotkey_register_encoder(
      encoder,
      name,
      description,
      func,
      data,
    );
  }

  late final _obs_hotkey_register_encoderPtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_id Function(
              ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_func,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_register_encoder');
  late final _obs_hotkey_register_encoder =
      _obs_hotkey_register_encoderPtr.asFunction<
          int Function(ffi.Pointer<obs_encoder_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, obs_hotkey_func, ffi.Pointer<ffi.Void>)>();

  int obs_hotkey_register_output(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    obs_hotkey_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_hotkey_register_output(
      output,
      name,
      description,
      func,
      data,
    );
  }

  late final _obs_hotkey_register_outputPtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_id Function(
              ffi.Pointer<obs_output_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_func,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_register_output');
  late final _obs_hotkey_register_output =
      _obs_hotkey_register_outputPtr.asFunction<
          int Function(ffi.Pointer<obs_output_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, obs_hotkey_func, ffi.Pointer<ffi.Void>)>();

  int obs_hotkey_register_service(
    ffi.Pointer<obs_service_t> service,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    obs_hotkey_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_hotkey_register_service(
      service,
      name,
      description,
      func,
      data,
    );
  }

  late final _obs_hotkey_register_servicePtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_id Function(
              ffi.Pointer<obs_service_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_func,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_register_service');
  late final _obs_hotkey_register_service =
      _obs_hotkey_register_servicePtr.asFunction<
          int Function(ffi.Pointer<obs_service_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, obs_hotkey_func, ffi.Pointer<ffi.Void>)>();

  int obs_hotkey_register_source(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    obs_hotkey_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_hotkey_register_source(
      source,
      name,
      description,
      func,
      data,
    );
  }

  late final _obs_hotkey_register_sourcePtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_id Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_func,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_register_source');
  late final _obs_hotkey_register_source =
      _obs_hotkey_register_sourcePtr.asFunction<
          int Function(ffi.Pointer<obs_source_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, obs_hotkey_func, ffi.Pointer<ffi.Void>)>();

  int obs_hotkey_pair_register_frontend(
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    obs_hotkey_active_func func0,
    obs_hotkey_active_func func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    return _obs_hotkey_pair_register_frontend(
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  late final _obs_hotkey_pair_register_frontendPtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_pair_id Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_pair_register_frontend');
  late final _obs_hotkey_pair_register_frontend =
      _obs_hotkey_pair_register_frontendPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  int obs_hotkey_pair_register_encoder(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    obs_hotkey_active_func func0,
    obs_hotkey_active_func func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    return _obs_hotkey_pair_register_encoder(
      encoder,
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  late final _obs_hotkey_pair_register_encoderPtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_pair_id Function(
              ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_pair_register_encoder');
  late final _obs_hotkey_pair_register_encoder =
      _obs_hotkey_pair_register_encoderPtr.asFunction<
          int Function(
              ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  int obs_hotkey_pair_register_output(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    obs_hotkey_active_func func0,
    obs_hotkey_active_func func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    return _obs_hotkey_pair_register_output(
      output,
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  late final _obs_hotkey_pair_register_outputPtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_pair_id Function(
              ffi.Pointer<obs_output_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_pair_register_output');
  late final _obs_hotkey_pair_register_output =
      _obs_hotkey_pair_register_outputPtr.asFunction<
          int Function(
              ffi.Pointer<obs_output_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  int obs_hotkey_pair_register_service(
    ffi.Pointer<obs_service_t> service,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    obs_hotkey_active_func func0,
    obs_hotkey_active_func func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    return _obs_hotkey_pair_register_service(
      service,
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  late final _obs_hotkey_pair_register_servicePtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_pair_id Function(
              ffi.Pointer<obs_service_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_pair_register_service');
  late final _obs_hotkey_pair_register_service =
      _obs_hotkey_pair_register_servicePtr.asFunction<
          int Function(
              ffi.Pointer<obs_service_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  int obs_hotkey_pair_register_source(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    obs_hotkey_active_func func0,
    obs_hotkey_active_func func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    return _obs_hotkey_pair_register_source(
      source,
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  late final _obs_hotkey_pair_register_sourcePtr = _lookup<
      ffi.NativeFunction<
          obs_hotkey_pair_id Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_pair_register_source');
  late final _obs_hotkey_pair_register_source =
      _obs_hotkey_pair_register_sourcePtr.asFunction<
          int Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              obs_hotkey_active_func,
              obs_hotkey_active_func,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  void obs_hotkey_unregister(
    int id,
  ) {
    return _obs_hotkey_unregister(
      id,
    );
  }

  late final _obs_hotkey_unregisterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(obs_hotkey_id)>>(
          'obs_hotkey_unregister');
  late final _obs_hotkey_unregister =
      _obs_hotkey_unregisterPtr.asFunction<void Function(int)>();

  void obs_hotkey_pair_unregister(
    int id,
  ) {
    return _obs_hotkey_pair_unregister(
      id,
    );
  }

  late final _obs_hotkey_pair_unregisterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(obs_hotkey_pair_id)>>(
          'obs_hotkey_pair_unregister');
  late final _obs_hotkey_pair_unregister =
      _obs_hotkey_pair_unregisterPtr.asFunction<void Function(int)>();

  void obs_hotkey_load_bindings(
    int id,
    ffi.Pointer<obs_key_combination_t> combinations,
    int num,
  ) {
    return _obs_hotkey_load_bindings(
      id,
      combinations,
      num,
    );
  }

  late final _obs_hotkey_load_bindingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_id, ffi.Pointer<obs_key_combination_t>,
              size_t)>>('obs_hotkey_load_bindings');
  late final _obs_hotkey_load_bindings =
      _obs_hotkey_load_bindingsPtr.asFunction<
          void Function(int, ffi.Pointer<obs_key_combination_t>, int)>();

  void obs_hotkey_load(
    int id,
    ffi.Pointer<obs_data_array_t> data,
  ) {
    return _obs_hotkey_load(
      id,
      data,
    );
  }

  late final _obs_hotkey_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_id,
              ffi.Pointer<obs_data_array_t>)>>('obs_hotkey_load');
  late final _obs_hotkey_load = _obs_hotkey_loadPtr
      .asFunction<void Function(int, ffi.Pointer<obs_data_array_t>)>();

  void obs_hotkeys_load_encoder(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<obs_data_t> hotkeys,
  ) {
    return _obs_hotkeys_load_encoder(
      encoder,
      hotkeys,
    );
  }

  late final _obs_hotkeys_load_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<obs_data_t>)>>('obs_hotkeys_load_encoder');
  late final _obs_hotkeys_load_encoder =
      _obs_hotkeys_load_encoderPtr.asFunction<
          void Function(ffi.Pointer<obs_encoder_t>, ffi.Pointer<obs_data_t>)>();

  void obs_hotkeys_load_output(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<obs_data_t> hotkeys,
  ) {
    return _obs_hotkeys_load_output(
      output,
      hotkeys,
    );
  }

  late final _obs_hotkeys_load_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>,
              ffi.Pointer<obs_data_t>)>>('obs_hotkeys_load_output');
  late final _obs_hotkeys_load_output = _obs_hotkeys_load_outputPtr.asFunction<
      void Function(ffi.Pointer<obs_output_t>, ffi.Pointer<obs_data_t>)>();

  void obs_hotkeys_load_service(
    ffi.Pointer<obs_service_t> service,
    ffi.Pointer<obs_data_t> hotkeys,
  ) {
    return _obs_hotkeys_load_service(
      service,
      hotkeys,
    );
  }

  late final _obs_hotkeys_load_servicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_service_t>,
              ffi.Pointer<obs_data_t>)>>('obs_hotkeys_load_service');
  late final _obs_hotkeys_load_service =
      _obs_hotkeys_load_servicePtr.asFunction<
          void Function(ffi.Pointer<obs_service_t>, ffi.Pointer<obs_data_t>)>();

  void obs_hotkeys_load_source(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_data_t> hotkeys,
  ) {
    return _obs_hotkeys_load_source(
      source,
      hotkeys,
    );
  }

  late final _obs_hotkeys_load_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_data_t>)>>('obs_hotkeys_load_source');
  late final _obs_hotkeys_load_source = _obs_hotkeys_load_sourcePtr.asFunction<
      void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_data_t>)>();

  void obs_hotkey_pair_load(
    int id,
    ffi.Pointer<obs_data_array_t> data0,
    ffi.Pointer<obs_data_array_t> data1,
  ) {
    return _obs_hotkey_pair_load(
      id,
      data0,
      data1,
    );
  }

  late final _obs_hotkey_pair_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_pair_id, ffi.Pointer<obs_data_array_t>,
              ffi.Pointer<obs_data_array_t>)>>('obs_hotkey_pair_load');
  late final _obs_hotkey_pair_load = _obs_hotkey_pair_loadPtr.asFunction<
      void Function(
          int, ffi.Pointer<obs_data_array_t>, ffi.Pointer<obs_data_array_t>)>();

  ffi.Pointer<obs_data_array_t> obs_hotkey_save(
    int id,
  ) {
    return _obs_hotkey_save(
      id,
    );
  }

  late final _obs_hotkey_savePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_array_t> Function(
              obs_hotkey_id)>>('obs_hotkey_save');
  late final _obs_hotkey_save = _obs_hotkey_savePtr
      .asFunction<ffi.Pointer<obs_data_array_t> Function(int)>();

  void obs_hotkey_pair_save(
    int id,
    ffi.Pointer<ffi.Pointer<obs_data_array_t>> p_data0,
    ffi.Pointer<ffi.Pointer<obs_data_array_t>> p_data1,
  ) {
    return _obs_hotkey_pair_save(
      id,
      p_data0,
      p_data1,
    );
  }

  late final _obs_hotkey_pair_savePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  obs_hotkey_pair_id,
                  ffi.Pointer<ffi.Pointer<obs_data_array_t>>,
                  ffi.Pointer<ffi.Pointer<obs_data_array_t>>)>>(
      'obs_hotkey_pair_save');
  late final _obs_hotkey_pair_save = _obs_hotkey_pair_savePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Pointer<obs_data_array_t>>,
          ffi.Pointer<ffi.Pointer<obs_data_array_t>>)>();

  ffi.Pointer<obs_data_t> obs_hotkeys_save_encoder(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_hotkeys_save_encoder(
      encoder,
    );
  }

  late final _obs_hotkeys_save_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_hotkeys_save_encoder');
  late final _obs_hotkeys_save_encoder =
      _obs_hotkeys_save_encoderPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_encoder_t>)>();

  ffi.Pointer<obs_data_t> obs_hotkeys_save_output(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_hotkeys_save_output(
      output,
    );
  }

  late final _obs_hotkeys_save_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_hotkeys_save_output');
  late final _obs_hotkeys_save_output = _obs_hotkeys_save_outputPtr.asFunction<
      ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<obs_data_t> obs_hotkeys_save_service(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_hotkeys_save_service(
      service,
    );
  }

  late final _obs_hotkeys_save_servicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_service_t>)>>('obs_hotkeys_save_service');
  late final _obs_hotkeys_save_service =
      _obs_hotkeys_save_servicePtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_service_t>)>();

  ffi.Pointer<obs_data_t> obs_hotkeys_save_source(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_hotkeys_save_source(
      source,
    );
  }

  late final _obs_hotkeys_save_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_hotkeys_save_source');
  late final _obs_hotkeys_save_source = _obs_hotkeys_save_sourcePtr.asFunction<
      ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_source_t>)>();

  void obs_enum_hotkeys(
    obs_hotkey_enum_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_enum_hotkeys(
      func,
      data,
    );
  }

  late final _obs_enum_hotkeysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_enum_func,
              ffi.Pointer<ffi.Void>)>>('obs_enum_hotkeys');
  late final _obs_enum_hotkeys = _obs_enum_hotkeysPtr
      .asFunction<void Function(obs_hotkey_enum_func, ffi.Pointer<ffi.Void>)>();

  void obs_enum_hotkey_bindings(
    obs_hotkey_binding_enum_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_enum_hotkey_bindings(
      func,
      data,
    );
  }

  late final _obs_enum_hotkey_bindingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_binding_enum_func,
              ffi.Pointer<ffi.Void>)>>('obs_enum_hotkey_bindings');
  late final _obs_enum_hotkey_bindings =
      _obs_enum_hotkey_bindingsPtr.asFunction<
          void Function(obs_hotkey_binding_enum_func, ffi.Pointer<ffi.Void>)>();

  void obs_hotkey_inject_event(
    obs_key_combination_t hotkey,
    int pressed,
  ) {
    return _obs_hotkey_inject_event(
      hotkey,
      pressed,
    );
  }

  late final _obs_hotkey_inject_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              obs_key_combination_t, ffi.Uint8)>>('obs_hotkey_inject_event');
  late final _obs_hotkey_inject_event = _obs_hotkey_inject_eventPtr
      .asFunction<void Function(obs_key_combination_t, int)>();

  void obs_hotkey_enable_background_press(
    int enable,
  ) {
    return _obs_hotkey_enable_background_press(
      enable,
    );
  }

  late final _obs_hotkey_enable_background_pressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'obs_hotkey_enable_background_press');
  late final _obs_hotkey_enable_background_press =
      _obs_hotkey_enable_background_pressPtr.asFunction<void Function(int)>();

  void obs_hotkey_enable_strict_modifiers(
    int enable,
  ) {
    return _obs_hotkey_enable_strict_modifiers(
      enable,
    );
  }

  late final _obs_hotkey_enable_strict_modifiersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'obs_hotkey_enable_strict_modifiers');
  late final _obs_hotkey_enable_strict_modifiers =
      _obs_hotkey_enable_strict_modifiersPtr.asFunction<void Function(int)>();

  void obs_hotkey_set_callback_routing_func(
    obs_hotkey_callback_router_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_hotkey_set_callback_routing_func(
      func,
      data,
    );
  }

  late final _obs_hotkey_set_callback_routing_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_callback_router_func,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_set_callback_routing_func');
  late final _obs_hotkey_set_callback_routing_func =
      _obs_hotkey_set_callback_routing_funcPtr.asFunction<
          void Function(
              obs_hotkey_callback_router_func, ffi.Pointer<ffi.Void>)>();

  void obs_hotkey_trigger_routed_callback(
    int id,
    int pressed,
  ) {
    return _obs_hotkey_trigger_routed_callback(
      id,
      pressed,
    );
  }

  late final _obs_hotkey_trigger_routed_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(obs_hotkey_id, ffi.Uint8)>>(
          'obs_hotkey_trigger_routed_callback');
  late final _obs_hotkey_trigger_routed_callback =
      _obs_hotkey_trigger_routed_callbackPtr
          .asFunction<void Function(int, int)>();

  void obs_hotkey_enable_callback_rerouting(
    int enable,
  ) {
    return _obs_hotkey_enable_callback_rerouting(
      enable,
    );
  }

  late final _obs_hotkey_enable_callback_reroutingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'obs_hotkey_enable_callback_rerouting');
  late final _obs_hotkey_enable_callback_rerouting =
      _obs_hotkey_enable_callback_reroutingPtr.asFunction<void Function(int)>();

  void obs_hotkey_update_atomic(
    obs_hotkey_atomic_update_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_hotkey_update_atomic(
      func,
      data,
    );
  }

  late final _obs_hotkey_update_atomicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_hotkey_atomic_update_func,
              ffi.Pointer<ffi.Void>)>>('obs_hotkey_update_atomic');
  late final _obs_hotkey_update_atomic =
      _obs_hotkey_update_atomicPtr.asFunction<
          void Function(
              obs_hotkey_atomic_update_func, ffi.Pointer<ffi.Void>)>();

  void obs_key_to_str(
    int key,
    ffi.Pointer<dstr> str,
  ) {
    return _obs_key_to_str(
      key,
      str,
    );
  }

  late final _obs_key_to_strPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<dstr>)>>(
      'obs_key_to_str');
  late final _obs_key_to_str =
      _obs_key_to_strPtr.asFunction<void Function(int, ffi.Pointer<dstr>)>();

  void obs_key_combination_to_str(
    obs_key_combination_t key,
    ffi.Pointer<dstr> str,
  ) {
    return _obs_key_combination_to_str(
      key,
      str,
    );
  }

  late final _obs_key_combination_to_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_key_combination_t,
              ffi.Pointer<dstr>)>>('obs_key_combination_to_str');
  late final _obs_key_combination_to_str = _obs_key_combination_to_strPtr
      .asFunction<void Function(obs_key_combination_t, ffi.Pointer<dstr>)>();

  int obs_key_from_virtual_key(
    int code,
  ) {
    return _obs_key_from_virtual_key(
      code,
    );
  }

  late final _obs_key_from_virtual_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'obs_key_from_virtual_key');
  late final _obs_key_from_virtual_key =
      _obs_key_from_virtual_keyPtr.asFunction<int Function(int)>();

  int obs_key_to_virtual_key(
    int key,
  ) {
    return _obs_key_to_virtual_key(
      key,
    );
  }

  late final _obs_key_to_virtual_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'obs_key_to_virtual_key');
  late final _obs_key_to_virtual_key =
      _obs_key_to_virtual_keyPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> obs_key_to_name(
    int key,
  ) {
    return _obs_key_to_name(
      key,
    );
  }

  late final _obs_key_to_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'obs_key_to_name');
  late final _obs_key_to_name =
      _obs_key_to_namePtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int obs_key_from_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_key_from_name(
      name,
    );
  }

  late final _obs_key_from_namePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_key_from_name');
  late final _obs_key_from_name =
      _obs_key_from_namePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  /// Find a core libobs data file
  /// @param path name of the base file
  /// @return A string containing the full path to the file.
  /// Use bfree after use.
  ffi.Pointer<ffi.Int8> obs_find_data_file(
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _obs_find_data_file(
      file,
    );
  }

  late final _obs_find_data_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_find_data_file');
  late final _obs_find_data_file = _obs_find_data_filePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  /// Add a path to search libobs data files in.
  /// @param path Full path to directory to look in.
  /// The string is copied.
  void obs_add_data_path(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _obs_add_data_path(
      path,
    );
  }

  late final _obs_add_data_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_add_data_path');
  late final _obs_add_data_path =
      _obs_add_data_pathPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  /// Remove a path from libobs core data paths.
  /// @param path The path to compare to currently set paths.
  /// It does not need to be the same pointer, but
  /// the path string must match an entry fully.
  /// @return Whether or not the path was successfully removed.
  /// If false, the path could not be found.
  int obs_remove_data_path(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _obs_remove_data_path(
      path,
    );
  }

  late final _obs_remove_data_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_remove_data_path');
  late final _obs_remove_data_path = _obs_remove_data_pathPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  /// Initializes OBS
  ///
  /// @param  locale              The locale to use for modules
  /// @param  module_config_path  Path to module config storage directory
  /// (or NULL if none)
  /// @param  store               The profiler name store for OBS to use or NULL
  int obs_startup(
    ffi.Pointer<ffi.Int8> locale,
    ffi.Pointer<ffi.Int8> module_config_path,
    ffi.Pointer<profiler_name_store_t> store,
  ) {
    return _obs_startup(
      locale,
      module_config_path,
      store,
    );
  }

  late final _obs_startupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<profiler_name_store_t>)>>('obs_startup');
  late final _obs_startup = _obs_startupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<profiler_name_store_t>)>();

  /// Releases all data associated with OBS and terminates the OBS context
  void obs_shutdown() {
    return _obs_shutdown();
  }

  late final _obs_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('obs_shutdown');
  late final _obs_shutdown = _obs_shutdownPtr.asFunction<void Function()>();

  /// @return true if the main OBS context has been initialized
  int obs_initialized() {
    return _obs_initialized();
  }

  late final _obs_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('obs_initialized');
  late final _obs_initialized =
      _obs_initializedPtr.asFunction<int Function()>();

  /// @return The current core version
  int obs_get_version() {
    return _obs_get_version();
  }

  late final _obs_get_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('obs_get_version');
  late final _obs_get_version =
      _obs_get_versionPtr.asFunction<int Function()>();

  /// @return The current core version string
  ffi.Pointer<ffi.Int8> obs_get_version_string() {
    return _obs_get_version_string();
  }

  late final _obs_get_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'obs_get_version_string');
  late final _obs_get_version_string =
      _obs_get_version_stringPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  /// Sets things up for calls to obs_get_cmdline_args. Called only once at startup
  /// and safely copies argv/argc from main(). Subsequent calls do nothing.
  ///
  /// @param  argc  The count of command line arguments, from main()
  /// @param  argv  An array of command line arguments, copied from main() and ends
  /// with NULL.
  void obs_set_cmdline_args(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ) {
    return _obs_set_cmdline_args(
      argc,
      argv,
    );
  }

  late final _obs_set_cmdline_argsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('obs_set_cmdline_args');
  late final _obs_set_cmdline_args = _obs_set_cmdline_argsPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  /// Get the argc/argv used to start OBS
  ///
  /// @return  The command line arguments used for main(). Don't modify this or
  /// you'll mess things up for other callers.
  obs_cmdline_args obs_get_cmdline_args() {
    return _obs_get_cmdline_args();
  }

  late final _obs_get_cmdline_argsPtr =
      _lookup<ffi.NativeFunction<obs_cmdline_args Function()>>(
          'obs_get_cmdline_args');
  late final _obs_get_cmdline_args =
      _obs_get_cmdline_argsPtr.asFunction<obs_cmdline_args Function()>();

  /// Sets a new locale to use for modules.  This will call obs_module_set_locale
  /// for each module with the new locale.
  ///
  /// @param  locale  The locale to use for modules
  void obs_set_locale(
    ffi.Pointer<ffi.Int8> locale,
  ) {
    return _obs_set_locale(
      locale,
    );
  }

  late final _obs_set_localePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_set_locale');
  late final _obs_set_locale =
      _obs_set_localePtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  /// @return the current locale
  ffi.Pointer<ffi.Int8> obs_get_locale() {
    return _obs_get_locale();
  }

  late final _obs_get_localePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'obs_get_locale');
  late final _obs_get_locale =
      _obs_get_localePtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  /// Returns the profiler name store (see util/profiler.h) used by OBS, which is
  /// either a name store passed to obs_startup, an internal name store, or NULL
  /// in case obs_initialized() returns false.
  ffi.Pointer<profiler_name_store_t> obs_get_profiler_name_store() {
    return _obs_get_profiler_name_store();
  }

  late final _obs_get_profiler_name_storePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<profiler_name_store_t> Function()>>(
      'obs_get_profiler_name_store');
  late final _obs_get_profiler_name_store = _obs_get_profiler_name_storePtr
      .asFunction<ffi.Pointer<profiler_name_store_t> Function()>();

  /// Sets base video output base resolution/fps/format.
  ///
  /// @note This data cannot be changed if an output is currently active.
  /// @note The graphics module cannot be changed without fully destroying the
  /// OBS context.
  ///
  /// @param   ovi  Pointer to an obs_video_info structure containing the
  /// specification of the graphics subsystem,
  /// @return       OBS_VIDEO_SUCCESS if successful
  /// OBS_VIDEO_NOT_SUPPORTED if the adapter lacks capabilities
  /// OBS_VIDEO_INVALID_PARAM if a parameter is invalid
  /// OBS_VIDEO_CURRENTLY_ACTIVE if video is currently active
  /// OBS_VIDEO_MODULE_NOT_FOUND if the graphics module is not found
  /// OBS_VIDEO_FAIL for generic failure
  int obs_reset_video(
    ffi.Pointer<obs_video_info> ovi,
  ) {
    return _obs_reset_video(
      ovi,
    );
  }

  late final _obs_reset_videoPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_video_info>)>>(
      'obs_reset_video');
  late final _obs_reset_video = _obs_reset_videoPtr
      .asFunction<int Function(ffi.Pointer<obs_video_info>)>();

  /// Sets base audio output format/channels/samples/etc
  ///
  /// @note Cannot reset base audio if an output is currently active.
  int obs_reset_audio(
    ffi.Pointer<obs_audio_info> oai,
  ) {
    return _obs_reset_audio(
      oai,
    );
  }

  late final _obs_reset_audioPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_audio_info>)>>(
      'obs_reset_audio');
  late final _obs_reset_audio = _obs_reset_audioPtr
      .asFunction<int Function(ffi.Pointer<obs_audio_info>)>();

  /// Gets the current video settings, returns false if no video
  int obs_get_video_info(
    ffi.Pointer<obs_video_info> ovi,
  ) {
    return _obs_get_video_info(
      ovi,
    );
  }

  late final _obs_get_video_infoPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_video_info>)>>(
      'obs_get_video_info');
  late final _obs_get_video_info = _obs_get_video_infoPtr
      .asFunction<int Function(ffi.Pointer<obs_video_info>)>();

  /// Gets the current audio settings, returns false if no audio
  int obs_get_audio_info(
    ffi.Pointer<obs_audio_info> oai,
  ) {
    return _obs_get_audio_info(
      oai,
    );
  }

  late final _obs_get_audio_infoPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_audio_info>)>>(
      'obs_get_audio_info');
  late final _obs_get_audio_info = _obs_get_audio_infoPtr
      .asFunction<int Function(ffi.Pointer<obs_audio_info>)>();

  /// Opens a plugin module directly from a specific path.
  ///
  /// If the module already exists then the function will return successful, and
  /// the module parameter will be given the pointer to the existing module.
  ///
  /// This does not initialize the module, it only loads the module image.  To
  /// initialize the module, call obs_init_module.
  ///
  /// @param  module     The pointer to the created module.
  /// @param  path       Specifies the path to the module library file.  If the
  /// extension is not specified, it will use the extension
  /// appropriate to the operating system.
  /// @param  data_path  Specifies the path to the directory where the module's
  /// data files are stored.
  /// @returns           MODULE_SUCCESS if successful
  /// MODULE_ERROR if a generic error occurred
  /// MODULE_FILE_NOT_FOUND if the module was not found
  /// MODULE_MISSING_EXPORTS if required exports are missing
  /// MODULE_INCOMPATIBLE_VER if incompatible version
  int obs_open_module(
    ffi.Pointer<ffi.Pointer<obs_module_t>> module,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> data_path,
  ) {
    return _obs_open_module(
      module,
      path,
      data_path,
    );
  }

  late final _obs_open_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<obs_module_t>>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_open_module');
  late final _obs_open_module = _obs_open_modulePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<obs_module_t>>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  /// Initializes the module, which calls its obs_module_load export.  If the
  /// module is already loaded, then this function does nothing and returns
  /// successful.
  int obs_init_module(
    ffi.Pointer<obs_module_t> module,
  ) {
    return _obs_init_module(
      module,
    );
  }

  late final _obs_init_modulePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_module_t>)>>(
      'obs_init_module');
  late final _obs_init_module =
      _obs_init_modulePtr.asFunction<int Function(ffi.Pointer<obs_module_t>)>();

  /// Returns a module based upon its name, or NULL if not found
  ffi.Pointer<obs_module_t> obs_get_module(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_get_module(
      name,
    );
  }

  late final _obs_get_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_module_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_module');
  late final _obs_get_module = _obs_get_modulePtr
      .asFunction<ffi.Pointer<obs_module_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns locale text from a specific module
  int obs_module_get_locale_string(
    ffi.Pointer<obs_module_t> mod,
    ffi.Pointer<ffi.Int8> lookup_string,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> translated_string,
  ) {
    return _obs_module_get_locale_string(
      mod,
      lookup_string,
      translated_string,
    );
  }

  late final _obs_module_get_locale_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<obs_module_t>,
                  ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'obs_module_get_locale_string');
  late final _obs_module_get_locale_string =
      _obs_module_get_locale_stringPtr.asFunction<
          int Function(ffi.Pointer<obs_module_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<ffi.Int8> obs_module_get_locale_text(
    ffi.Pointer<obs_module_t> mod,
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _obs_module_get_locale_text(
      mod,
      text,
    );
  }

  late final _obs_module_get_locale_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_module_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_module_get_locale_text');
  late final _obs_module_get_locale_text =
      _obs_module_get_locale_textPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_module_t>, ffi.Pointer<ffi.Int8>)>();

  /// Logs loaded modules
  void obs_log_loaded_modules() {
    return _obs_log_loaded_modules();
  }

  late final _obs_log_loaded_modulesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'obs_log_loaded_modules');
  late final _obs_log_loaded_modules =
      _obs_log_loaded_modulesPtr.asFunction<void Function()>();

  /// Returns the module file name
  ffi.Pointer<ffi.Int8> obs_get_module_file_name(
    ffi.Pointer<obs_module_t> module,
  ) {
    return _obs_get_module_file_name(
      module,
    );
  }

  late final _obs_get_module_file_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_module_t>)>>('obs_get_module_file_name');
  late final _obs_get_module_file_name = _obs_get_module_file_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_module_t>)>();

  /// Returns the module full name
  ffi.Pointer<ffi.Int8> obs_get_module_name(
    ffi.Pointer<obs_module_t> module,
  ) {
    return _obs_get_module_name(
      module,
    );
  }

  late final _obs_get_module_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_module_t>)>>('obs_get_module_name');
  late final _obs_get_module_name = _obs_get_module_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_module_t>)>();

  /// Returns the module author(s)
  ffi.Pointer<ffi.Int8> obs_get_module_author(
    ffi.Pointer<obs_module_t> module,
  ) {
    return _obs_get_module_author(
      module,
    );
  }

  late final _obs_get_module_authorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_module_t>)>>('obs_get_module_author');
  late final _obs_get_module_author = _obs_get_module_authorPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_module_t>)>();

  /// Returns the module description
  ffi.Pointer<ffi.Int8> obs_get_module_description(
    ffi.Pointer<obs_module_t> module,
  ) {
    return _obs_get_module_description(
      module,
    );
  }

  late final _obs_get_module_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_module_t>)>>('obs_get_module_description');
  late final _obs_get_module_description = _obs_get_module_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_module_t>)>();

  /// Returns the module binary path
  ffi.Pointer<ffi.Int8> obs_get_module_binary_path(
    ffi.Pointer<obs_module_t> module,
  ) {
    return _obs_get_module_binary_path(
      module,
    );
  }

  late final _obs_get_module_binary_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_module_t>)>>('obs_get_module_binary_path');
  late final _obs_get_module_binary_path = _obs_get_module_binary_pathPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_module_t>)>();

  /// Returns the module data path
  ffi.Pointer<ffi.Int8> obs_get_module_data_path(
    ffi.Pointer<obs_module_t> module,
  ) {
    return _obs_get_module_data_path(
      module,
    );
  }

  late final _obs_get_module_data_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_module_t>)>>('obs_get_module_data_path');
  late final _obs_get_module_data_path = _obs_get_module_data_pathPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_module_t>)>();

  /// Adds a module search path to be used with obs_find_modules.  If the search
  /// path strings contain %module%, that text will be replaced with the module
  /// name when used.
  ///
  /// @param  bin   Specifies the module's binary directory search path.
  /// @param  data  Specifies the module's data directory search path.
  void obs_add_module_path(
    ffi.Pointer<ffi.Int8> bin,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _obs_add_module_path(
      bin,
      data,
    );
  }

  late final _obs_add_module_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_add_module_path');
  late final _obs_add_module_path = _obs_add_module_pathPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  /// Automatically loads all modules from module paths (convenience function)
  void obs_load_all_modules() {
    return _obs_load_all_modules();
  }

  late final _obs_load_all_modulesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('obs_load_all_modules');
  late final _obs_load_all_modules =
      _obs_load_all_modulesPtr.asFunction<void Function()>();

  /// Notifies modules that all modules have been loaded.  This function should
  /// be called after all modules have been loaded.
  void obs_post_load_modules() {
    return _obs_post_load_modules();
  }

  late final _obs_post_load_modulesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('obs_post_load_modules');
  late final _obs_post_load_modules =
      _obs_post_load_modulesPtr.asFunction<void Function()>();

  /// Finds all modules within the search paths added by obs_add_module_path.
  void obs_find_modules(
    obs_find_module_callback_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_find_modules(
      callback,
      param,
    );
  }

  late final _obs_find_modulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_find_module_callback_t,
              ffi.Pointer<ffi.Void>)>>('obs_find_modules');
  late final _obs_find_modules = _obs_find_modulesPtr.asFunction<
      void Function(obs_find_module_callback_t, ffi.Pointer<ffi.Void>)>();

  /// Enumerates all loaded modules
  void obs_enum_modules(
    obs_enum_module_callback_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_enum_modules(
      callback,
      param,
    );
  }

  late final _obs_enum_modulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_enum_module_callback_t,
              ffi.Pointer<ffi.Void>)>>('obs_enum_modules');
  late final _obs_enum_modules = _obs_enum_modulesPtr.asFunction<
      void Function(obs_enum_module_callback_t, ffi.Pointer<ffi.Void>)>();

  /// Helper function for using default module locale
  ffi.Pointer<lookup_t> obs_module_load_locale(
    ffi.Pointer<obs_module_t> module,
    ffi.Pointer<ffi.Int8> default_locale,
    ffi.Pointer<ffi.Int8> locale,
  ) {
    return _obs_module_load_locale(
      module,
      default_locale,
      locale,
    );
  }

  late final _obs_module_load_localePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lookup_t> Function(
              ffi.Pointer<obs_module_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_module_load_locale');
  late final _obs_module_load_locale = _obs_module_load_localePtr.asFunction<
      ffi.Pointer<lookup_t> Function(ffi.Pointer<obs_module_t>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  /// Returns the location of a plugin module data file.
  ///
  /// @note   Modules should use obs_module_file function defined in obs-module.h
  /// as a more elegant means of getting their files without having to
  /// specify the module parameter.
  ///
  /// @param  module  The module associated with the file to locate
  /// @param  file    The file to locate
  /// @return         Path string, or NULL if not found.  Use bfree to free string.
  ffi.Pointer<ffi.Int8> obs_find_module_file(
    ffi.Pointer<obs_module_t> module,
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _obs_find_module_file(
      module,
      file,
    );
  }

  late final _obs_find_module_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_module_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_find_module_file');
  late final _obs_find_module_file = _obs_find_module_filePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<obs_module_t>, ffi.Pointer<ffi.Int8>)>();

  /// Returns the path of a plugin module config file (whether it exists or not)
  ///
  /// @note   Modules should use obs_module_config_path function defined in
  /// obs-module.h as a more elegant means of getting their files without
  /// having to specify the module parameter.
  ///
  /// @param  module  The module associated with the path
  /// @param  file    The file to get a path to
  /// @return         Path string, or NULL if not found.  Use bfree to free string.
  ffi.Pointer<ffi.Int8> obs_module_get_config_path(
    ffi.Pointer<obs_module_t> module,
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _obs_module_get_config_path(
      module,
      file,
    );
  }

  late final _obs_module_get_config_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_module_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_module_get_config_path');
  late final _obs_module_get_config_path =
      _obs_module_get_config_pathPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_module_t>, ffi.Pointer<ffi.Int8>)>();

  /// Enumerates all source types (inputs, filters, transitions, etc).
  int obs_enum_source_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    return _obs_enum_source_types(
      idx,
      id,
    );
  }

  late final _obs_enum_source_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('obs_enum_source_types');
  late final _obs_enum_source_types = _obs_enum_source_typesPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  /// Enumerates all available inputs source types.
  ///
  /// Inputs are general source inputs (such as capture sources, device sources,
  /// etc).
  int obs_enum_input_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    return _obs_enum_input_types(
      idx,
      id,
    );
  }

  late final _obs_enum_input_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('obs_enum_input_types');
  late final _obs_enum_input_types = _obs_enum_input_typesPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int obs_enum_input_types2(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> unversioned_id,
  ) {
    return _obs_enum_input_types2(
      idx,
      id,
      unversioned_id,
    );
  }

  late final _obs_enum_input_types2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(size_t, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('obs_enum_input_types2');
  late final _obs_enum_input_types2 = _obs_enum_input_types2Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<ffi.Int8> obs_get_latest_input_type_id(
    ffi.Pointer<ffi.Int8> unversioned_id,
  ) {
    return _obs_get_latest_input_type_id(
      unversioned_id,
    );
  }

  late final _obs_get_latest_input_type_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_latest_input_type_id');
  late final _obs_get_latest_input_type_id = _obs_get_latest_input_type_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  /// Enumerates all available filter source types.
  ///
  /// Filters are sources that are used to modify the video/audio output of
  /// other sources.
  int obs_enum_filter_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    return _obs_enum_filter_types(
      idx,
      id,
    );
  }

  late final _obs_enum_filter_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('obs_enum_filter_types');
  late final _obs_enum_filter_types = _obs_enum_filter_typesPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  /// Enumerates all available transition source types.
  ///
  /// Transitions are sources used to transition between two or more other
  /// sources.
  int obs_enum_transition_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    return _obs_enum_transition_types(
      idx,
      id,
    );
  }

  late final _obs_enum_transition_typesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(size_t, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'obs_enum_transition_types');
  late final _obs_enum_transition_types = _obs_enum_transition_typesPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  /// Enumerates all available output types.
  int obs_enum_output_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    return _obs_enum_output_types(
      idx,
      id,
    );
  }

  late final _obs_enum_output_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('obs_enum_output_types');
  late final _obs_enum_output_types = _obs_enum_output_typesPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  /// Enumerates all available encoder types.
  int obs_enum_encoder_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    return _obs_enum_encoder_types(
      idx,
      id,
    );
  }

  late final _obs_enum_encoder_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('obs_enum_encoder_types');
  late final _obs_enum_encoder_types = _obs_enum_encoder_typesPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  /// Enumerates all available service types.
  int obs_enum_service_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    return _obs_enum_service_types(
      idx,
      id,
    );
  }

  late final _obs_enum_service_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('obs_enum_service_types');
  late final _obs_enum_service_types = _obs_enum_service_typesPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  /// Helper function for entering the OBS graphics context
  void obs_enter_graphics() {
    return _obs_enter_graphics();
  }

  late final _obs_enter_graphicsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('obs_enter_graphics');
  late final _obs_enter_graphics =
      _obs_enter_graphicsPtr.asFunction<void Function()>();

  /// Helper function for leaving the OBS graphics context
  void obs_leave_graphics() {
    return _obs_leave_graphics();
  }

  late final _obs_leave_graphicsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('obs_leave_graphics');
  late final _obs_leave_graphics =
      _obs_leave_graphicsPtr.asFunction<void Function()>();

  /// Gets the main audio output handler for this OBS context
  ffi.Pointer<audio_t> obs_get_audio() {
    return _obs_get_audio();
  }

  late final _obs_get_audioPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<audio_t> Function()>>(
          'obs_get_audio');
  late final _obs_get_audio =
      _obs_get_audioPtr.asFunction<ffi.Pointer<audio_t> Function()>();

  /// Gets the main video output handler for this OBS context
  ffi.Pointer<video_t> obs_get_video() {
    return _obs_get_video();
  }

  late final _obs_get_videoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<video_t> Function()>>(
          'obs_get_video');
  late final _obs_get_video =
      _obs_get_videoPtr.asFunction<ffi.Pointer<video_t> Function()>();

  /// Returns true if video is active, false otherwise
  int obs_video_active() {
    return _obs_video_active();
  }

  late final _obs_video_activePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('obs_video_active');
  late final _obs_video_active =
      _obs_video_activePtr.asFunction<int Function()>();

  /// Sets the primary output source for a channel.
  void obs_set_output_source(
    int channel,
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_set_output_source(
      channel,
      source,
    );
  }

  late final _obs_set_output_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Uint32, ffi.Pointer<obs_source_t>)>>('obs_set_output_source');
  late final _obs_set_output_source = _obs_set_output_sourcePtr
      .asFunction<void Function(int, ffi.Pointer<obs_source_t>)>();

  /// Gets the primary output source for a channel and increments the reference
  /// counter for that source.  Use obs_source_release to release.
  ffi.Pointer<obs_source_t> obs_get_output_source(
    int channel,
  ) {
    return _obs_get_output_source(
      channel,
    );
  }

  late final _obs_get_output_sourcePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<obs_source_t> Function(ffi.Uint32)>>(
      'obs_get_output_source');
  late final _obs_get_output_source = _obs_get_output_sourcePtr
      .asFunction<ffi.Pointer<obs_source_t> Function(int)>();

  /// Enumerates all input sources
  ///
  /// Callback function returns true to continue enumeration, or false to end
  /// enumeration.
  ///
  /// Use obs_source_get_ref or obs_source_get_weak_source if you want to retain
  /// a reference after obs_enum_sources finishes
  void obs_enum_sources(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Uint8 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>)>>
        enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_enum_sources(
      enum_proc,
      param,
    );
  }

  late final _obs_enum_sourcesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_enum_sources');
  late final _obs_enum_sources = _obs_enum_sourcesPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>)>>,
          ffi.Pointer<ffi.Void>)>();

  /// Enumerates scenes
  void obs_enum_scenes(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Uint8 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>)>>
        enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_enum_scenes(
      enum_proc,
      param,
    );
  }

  late final _obs_enum_scenesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_enum_scenes');
  late final _obs_enum_scenes = _obs_enum_scenesPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>)>>,
          ffi.Pointer<ffi.Void>)>();

  /// Enumerates outputs
  void obs_enum_outputs(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Uint8 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<obs_output_t>)>>
        enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_enum_outputs(
      enum_proc,
      param,
    );
  }

  late final _obs_enum_outputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<obs_output_t>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_enum_outputs');
  late final _obs_enum_outputs = _obs_enum_outputsPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<obs_output_t>)>>,
          ffi.Pointer<ffi.Void>)>();

  /// Enumerates encoders
  void obs_enum_encoders(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Uint8 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<obs_encoder_t>)>>
        enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_enum_encoders(
      enum_proc,
      param,
    );
  }

  late final _obs_enum_encodersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<obs_encoder_t>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_enum_encoders');
  late final _obs_enum_encoders = _obs_enum_encodersPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<obs_encoder_t>)>>,
          ffi.Pointer<ffi.Void>)>();

  /// Enumerates encoders
  void obs_enum_services(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Uint8 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<obs_service_t>)>>
        enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_enum_services(
      enum_proc,
      param,
    );
  }

  late final _obs_enum_servicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<obs_service_t>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_enum_services');
  late final _obs_enum_services = _obs_enum_servicesPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<obs_service_t>)>>,
          ffi.Pointer<ffi.Void>)>();

  /// Gets a source by its name.
  ///
  /// Increments the source reference counter, use obs_source_release to
  /// release it when complete.
  ffi.Pointer<obs_source_t> obs_get_source_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_get_source_by_name(
      name,
    );
  }

  late final _obs_get_source_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_source_by_name');
  late final _obs_get_source_by_name = _obs_get_source_by_namePtr
      .asFunction<ffi.Pointer<obs_source_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Gets an output by its name.
  ffi.Pointer<obs_output_t> obs_get_output_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_get_output_by_name(
      name,
    );
  }

  late final _obs_get_output_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_output_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_output_by_name');
  late final _obs_get_output_by_name = _obs_get_output_by_namePtr
      .asFunction<ffi.Pointer<obs_output_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Gets an encoder by its name.
  ffi.Pointer<obs_encoder_t> obs_get_encoder_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_get_encoder_by_name(
      name,
    );
  }

  late final _obs_get_encoder_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_encoder_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_encoder_by_name');
  late final _obs_get_encoder_by_name = _obs_get_encoder_by_namePtr
      .asFunction<ffi.Pointer<obs_encoder_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Gets an service by its name.
  ffi.Pointer<obs_service_t> obs_get_service_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_get_service_by_name(
      name,
    );
  }

  late final _obs_get_service_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_service_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_service_by_name');
  late final _obs_get_service_by_name = _obs_get_service_by_namePtr
      .asFunction<ffi.Pointer<obs_service_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns a commonly used base effect
  ffi.Pointer<gs_effect_t> obs_get_base_effect(
    int effect,
  ) {
    return _obs_get_base_effect(
      effect,
    );
  }

  late final _obs_get_base_effectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_effect_t> Function(ffi.Int32)>>(
          'obs_get_base_effect');
  late final _obs_get_base_effect = _obs_get_base_effectPtr
      .asFunction<ffi.Pointer<gs_effect_t> Function(int)>();

  ffi.Pointer<gs_effect_t> obs_get_default_rect_effect() {
    return _obs_get_default_rect_effect();
  }

  late final _obs_get_default_rect_effectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_effect_t> Function()>>(
          'obs_get_default_rect_effect');
  late final _obs_get_default_rect_effect = _obs_get_default_rect_effectPtr
      .asFunction<ffi.Pointer<gs_effect_t> Function()>();

  /// Returns the primary obs signal handler
  ffi.Pointer<signal_handler_t> obs_get_signal_handler() {
    return _obs_get_signal_handler();
  }

  late final _obs_get_signal_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<signal_handler_t> Function()>>(
          'obs_get_signal_handler');
  late final _obs_get_signal_handler = _obs_get_signal_handlerPtr
      .asFunction<ffi.Pointer<signal_handler_t> Function()>();

  /// Returns the primary obs procedure handler
  ffi.Pointer<proc_handler_t> obs_get_proc_handler() {
    return _obs_get_proc_handler();
  }

  late final _obs_get_proc_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<proc_handler_t> Function()>>(
          'obs_get_proc_handler');
  late final _obs_get_proc_handler = _obs_get_proc_handlerPtr
      .asFunction<ffi.Pointer<proc_handler_t> Function()>();

  /// Renders the main view
  void obs_render_main_view() {
    return _obs_render_main_view();
  }

  late final _obs_render_main_viewPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('obs_render_main_view');
  late final _obs_render_main_view =
      _obs_render_main_viewPtr.asFunction<void Function()>();

  /// Renders the last main output texture
  void obs_render_main_texture() {
    return _obs_render_main_texture();
  }

  late final _obs_render_main_texturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'obs_render_main_texture');
  late final _obs_render_main_texture =
      _obs_render_main_texturePtr.asFunction<void Function()>();

  /// Renders the last main output texture ignoring background color
  void obs_render_main_texture_src_color_only() {
    return _obs_render_main_texture_src_color_only();
  }

  late final _obs_render_main_texture_src_color_onlyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'obs_render_main_texture_src_color_only');
  late final _obs_render_main_texture_src_color_only =
      _obs_render_main_texture_src_color_onlyPtr.asFunction<void Function()>();

  /// Returns the last main output texture.  This can return NULL if the texture
  /// is unavailable.
  ffi.Pointer<gs_texture_t> obs_get_main_texture() {
    return _obs_get_main_texture();
  }

  late final _obs_get_main_texturePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gs_texture_t> Function()>>(
          'obs_get_main_texture');
  late final _obs_get_main_texture = _obs_get_main_texturePtr
      .asFunction<ffi.Pointer<gs_texture_t> Function()>();

  /// Sets the master user volume
  void obs_set_master_volume(
    double volume,
  ) {
    return _obs_set_master_volume(
      volume,
    );
  }

  late final _obs_set_master_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'obs_set_master_volume');
  late final _obs_set_master_volume =
      _obs_set_master_volumePtr.asFunction<void Function(double)>();

  /// Gets the master user volume
  double obs_get_master_volume() {
    return _obs_get_master_volume();
  }

  late final _obs_get_master_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>(
          'obs_get_master_volume');
  late final _obs_get_master_volume =
      _obs_get_master_volumePtr.asFunction<double Function()>();

  /// Saves a source to settings data
  ffi.Pointer<obs_data_t> obs_save_source(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_save_source(
      source,
    );
  }

  late final _obs_save_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_save_source');
  late final _obs_save_source = _obs_save_sourcePtr.asFunction<
      ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_source_t>)>();

  /// Loads a source from settings data
  ffi.Pointer<obs_source_t> obs_load_source(
    ffi.Pointer<obs_data_t> data,
  ) {
    return _obs_load_source(
      data,
    );
  }

  late final _obs_load_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_data_t>)>>('obs_load_source');
  late final _obs_load_source = _obs_load_sourcePtr.asFunction<
      ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_data_t>)>();

  /// Send a save signal to sources
  void obs_source_save(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_save(
      source,
    );
  }

  late final _obs_source_savePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_save');
  late final _obs_source_save = _obs_source_savePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Send a load signal to sources
  void obs_source_load(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_load(
      source,
    );
  }

  late final _obs_source_loadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_load');
  late final _obs_source_load = _obs_source_loadPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Loads sources from a data array
  void obs_load_sources(
    ffi.Pointer<obs_data_array_t> array,
    obs_load_source_cb cb,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _obs_load_sources(
      array,
      cb,
      private_data,
    );
  }

  late final _obs_load_sourcesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_data_array_t>, obs_load_source_cb,
              ffi.Pointer<ffi.Void>)>>('obs_load_sources');
  late final _obs_load_sources = _obs_load_sourcesPtr.asFunction<
      void Function(ffi.Pointer<obs_data_array_t>, obs_load_source_cb,
          ffi.Pointer<ffi.Void>)>();

  /// Saves sources to a data array
  ffi.Pointer<obs_data_array_t> obs_save_sources() {
    return _obs_save_sources();
  }

  late final _obs_save_sourcesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<obs_data_array_t> Function()>>(
          'obs_save_sources');
  late final _obs_save_sources = _obs_save_sourcesPtr
      .asFunction<ffi.Pointer<obs_data_array_t> Function()>();

  ffi.Pointer<obs_data_array_t> obs_save_sources_filtered(
    obs_save_source_filter_cb cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_save_sources_filtered(
      cb,
      data,
    );
  }

  late final _obs_save_sources_filteredPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_array_t> Function(obs_save_source_filter_cb,
              ffi.Pointer<ffi.Void>)>>('obs_save_sources_filtered');
  late final _obs_save_sources_filtered =
      _obs_save_sources_filteredPtr.asFunction<
          ffi.Pointer<obs_data_array_t> Function(
              obs_save_source_filter_cb, ffi.Pointer<ffi.Void>)>();

  int obs_obj_get_type(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _obs_obj_get_type(
      obj,
    );
  }

  late final _obs_obj_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          'obs_obj_get_type');
  late final _obs_obj_get_type =
      _obs_obj_get_typePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int8> obs_obj_get_id(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _obs_obj_get_id(
      obj,
    );
  }

  late final _obs_obj_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Void>)>>('obs_obj_get_id');
  late final _obs_obj_get_id = _obs_obj_get_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>();

  int obs_obj_invalid(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _obs_obj_invalid(
      obj,
    );
  }

  late final _obs_obj_invalidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          'obs_obj_invalid');
  late final _obs_obj_invalid =
      _obs_obj_invalidPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> obs_obj_get_data(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _obs_obj_get_data(
      obj,
    );
  }

  late final _obs_obj_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('obs_obj_get_data');
  late final _obs_obj_get_data = _obs_obj_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void obs_enum_audio_monitoring_devices(
    obs_enum_audio_device_cb cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_enum_audio_monitoring_devices(
      cb,
      data,
    );
  }

  late final _obs_enum_audio_monitoring_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(obs_enum_audio_device_cb,
              ffi.Pointer<ffi.Void>)>>('obs_enum_audio_monitoring_devices');
  late final _obs_enum_audio_monitoring_devices =
      _obs_enum_audio_monitoring_devicesPtr.asFunction<
          void Function(obs_enum_audio_device_cb, ffi.Pointer<ffi.Void>)>();

  int obs_set_audio_monitoring_device(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_set_audio_monitoring_device(
      name,
      id,
    );
  }

  late final _obs_set_audio_monitoring_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('obs_set_audio_monitoring_device');
  late final _obs_set_audio_monitoring_device =
      _obs_set_audio_monitoring_devicePtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  void obs_get_audio_monitoring_device(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    return _obs_get_audio_monitoring_device(
      name,
      id,
    );
  }

  late final _obs_get_audio_monitoring_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'obs_get_audio_monitoring_device');
  late final _obs_get_audio_monitoring_device =
      _obs_get_audio_monitoring_devicePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  void obs_add_tick_callback(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>>
        tick,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_add_tick_callback(
      tick,
      param,
    );
  }

  late final _obs_add_tick_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>>,
              ffi.Pointer<ffi.Void>)>>('obs_add_tick_callback');
  late final _obs_add_tick_callback = _obs_add_tick_callbackPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>>,
          ffi.Pointer<ffi.Void>)>();

  void obs_remove_tick_callback(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>>
        tick,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_remove_tick_callback(
      tick,
      param,
    );
  }

  late final _obs_remove_tick_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>>,
              ffi.Pointer<ffi.Void>)>>('obs_remove_tick_callback');
  late final _obs_remove_tick_callback =
      _obs_remove_tick_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>>,
              ffi.Pointer<ffi.Void>)>();

  void obs_add_main_render_callback(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>
        draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_add_main_render_callback(
      draw,
      param,
    );
  }

  late final _obs_add_main_render_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>,
              ffi.Pointer<ffi.Void>)>>('obs_add_main_render_callback');
  late final _obs_add_main_render_callback =
      _obs_add_main_render_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>,
              ffi.Pointer<ffi.Void>)>();

  void obs_remove_main_render_callback(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>
        draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_remove_main_render_callback(
      draw,
      param,
    );
  }

  late final _obs_remove_main_render_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>,
              ffi.Pointer<ffi.Void>)>>('obs_remove_main_render_callback');
  late final _obs_remove_main_render_callback =
      _obs_remove_main_render_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>,
              ffi.Pointer<ffi.Void>)>();

  void obs_add_raw_video_callback(
    ffi.Pointer<video_scale_info> conversion,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>
        callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_add_raw_video_callback(
      conversion,
      callback,
      param,
    );
  }

  late final _obs_add_raw_video_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<video_scale_info>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_add_raw_video_callback');
  late final _obs_add_raw_video_callback =
      _obs_add_raw_video_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<video_scale_info>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>,
              ffi.Pointer<ffi.Void>)>();

  void obs_remove_raw_video_callback(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>
        callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_remove_raw_video_callback(
      callback,
      param,
    );
  }

  late final _obs_remove_raw_video_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_remove_raw_video_callback');
  late final _obs_remove_raw_video_callback =
      _obs_remove_raw_video_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>>,
              ffi.Pointer<ffi.Void>)>();

  int obs_get_video_frame_time() {
    return _obs_get_video_frame_time();
  }

  late final _obs_get_video_frame_timePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'obs_get_video_frame_time');
  late final _obs_get_video_frame_time =
      _obs_get_video_frame_timePtr.asFunction<int Function()>();

  double obs_get_active_fps() {
    return _obs_get_active_fps();
  }

  late final _obs_get_active_fpsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('obs_get_active_fps');
  late final _obs_get_active_fps =
      _obs_get_active_fpsPtr.asFunction<double Function()>();

  int obs_get_average_frame_time_ns() {
    return _obs_get_average_frame_time_ns();
  }

  late final _obs_get_average_frame_time_nsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'obs_get_average_frame_time_ns');
  late final _obs_get_average_frame_time_ns =
      _obs_get_average_frame_time_nsPtr.asFunction<int Function()>();

  int obs_get_frame_interval_ns() {
    return _obs_get_frame_interval_ns();
  }

  late final _obs_get_frame_interval_nsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'obs_get_frame_interval_ns');
  late final _obs_get_frame_interval_ns =
      _obs_get_frame_interval_nsPtr.asFunction<int Function()>();

  int obs_get_total_frames() {
    return _obs_get_total_frames();
  }

  late final _obs_get_total_framesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'obs_get_total_frames');
  late final _obs_get_total_frames =
      _obs_get_total_framesPtr.asFunction<int Function()>();

  int obs_get_lagged_frames() {
    return _obs_get_lagged_frames();
  }

  late final _obs_get_lagged_framesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'obs_get_lagged_frames');
  late final _obs_get_lagged_frames =
      _obs_get_lagged_framesPtr.asFunction<int Function()>();

  int obs_nv12_tex_active() {
    return _obs_nv12_tex_active();
  }

  late final _obs_nv12_tex_activePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('obs_nv12_tex_active');
  late final _obs_nv12_tex_active =
      _obs_nv12_tex_activePtr.asFunction<int Function()>();

  void obs_apply_private_data(
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_apply_private_data(
      settings,
    );
  }

  late final _obs_apply_private_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_t>)>>(
          'obs_apply_private_data');
  late final _obs_apply_private_data = _obs_apply_private_dataPtr
      .asFunction<void Function(ffi.Pointer<obs_data_t>)>();

  void obs_set_private_data(
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_set_private_data(
      settings,
    );
  }

  late final _obs_set_private_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_t>)>>(
          'obs_set_private_data');
  late final _obs_set_private_data = _obs_set_private_dataPtr
      .asFunction<void Function(ffi.Pointer<obs_data_t>)>();

  ffi.Pointer<obs_data_t> obs_get_private_data() {
    return _obs_get_private_data();
  }

  late final _obs_get_private_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<obs_data_t> Function()>>(
          'obs_get_private_data');
  late final _obs_get_private_data =
      _obs_get_private_dataPtr.asFunction<ffi.Pointer<obs_data_t> Function()>();

  void obs_queue_task(
    int type,
    obs_task_t task,
    ffi.Pointer<ffi.Void> param,
    int wait,
  ) {
    return _obs_queue_task(
      type,
      task,
      param,
      wait,
    );
  }

  late final _obs_queue_taskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, obs_task_t, ffi.Pointer<ffi.Void>,
              ffi.Uint8)>>('obs_queue_task');
  late final _obs_queue_task = _obs_queue_taskPtr
      .asFunction<void Function(int, obs_task_t, ffi.Pointer<ffi.Void>, int)>();

  void obs_set_ui_task_handler(
    obs_task_handler_t handler,
  ) {
    return _obs_set_ui_task_handler(
      handler,
    );
  }

  late final _obs_set_ui_task_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(obs_task_handler_t)>>(
          'obs_set_ui_task_handler');
  late final _obs_set_ui_task_handler = _obs_set_ui_task_handlerPtr
      .asFunction<void Function(obs_task_handler_t)>();

  /// Creates a view context.
  ///
  /// A view can be used for things like separate previews, or drawing
  /// sources separately.
  ffi.Pointer<obs_view_t> obs_view_create() {
    return _obs_view_create();
  }

  late final _obs_view_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<obs_view_t> Function()>>(
          'obs_view_create');
  late final _obs_view_create =
      _obs_view_createPtr.asFunction<ffi.Pointer<obs_view_t> Function()>();

  /// Destroys this view context
  void obs_view_destroy(
    ffi.Pointer<obs_view_t> view,
  ) {
    return _obs_view_destroy(
      view,
    );
  }

  late final _obs_view_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_view_t>)>>(
          'obs_view_destroy');
  late final _obs_view_destroy =
      _obs_view_destroyPtr.asFunction<void Function(ffi.Pointer<obs_view_t>)>();

  /// Sets the source to be used for this view context.
  void obs_view_set_source(
    ffi.Pointer<obs_view_t> view,
    int channel,
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_view_set_source(
      view,
      channel,
      source,
    );
  }

  late final _obs_view_set_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_view_t>, ffi.Uint32,
              ffi.Pointer<obs_source_t>)>>('obs_view_set_source');
  late final _obs_view_set_source = _obs_view_set_sourcePtr.asFunction<
      void Function(ffi.Pointer<obs_view_t>, int, ffi.Pointer<obs_source_t>)>();

  /// Gets the source currently in use for this view context
  ffi.Pointer<obs_source_t> obs_view_get_source(
    ffi.Pointer<obs_view_t> view,
    int channel,
  ) {
    return _obs_view_get_source(
      view,
      channel,
    );
  }

  late final _obs_view_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_view_t>, ffi.Uint32)>>('obs_view_get_source');
  late final _obs_view_get_source = _obs_view_get_sourcePtr.asFunction<
      ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_view_t>, int)>();

  /// Renders the sources of this view context
  void obs_view_render(
    ffi.Pointer<obs_view_t> view,
  ) {
    return _obs_view_render(
      view,
    );
  }

  late final _obs_view_renderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_view_t>)>>(
          'obs_view_render');
  late final _obs_view_render =
      _obs_view_renderPtr.asFunction<void Function(ffi.Pointer<obs_view_t>)>();

  /// Adds a new window display linked to the main render pipeline.  This creates
  /// a new swap chain which updates every frame.
  ///
  /// @param  graphics_data  The swap chain initialization data.
  /// @return                The new display context, or NULL if failed.
  ffi.Pointer<obs_display_t> obs_display_create(
    ffi.Pointer<gs_init_data> graphics_data,
    int backround_color,
  ) {
    return _obs_display_create(
      graphics_data,
      backround_color,
    );
  }

  late final _obs_display_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_display_t> Function(
              ffi.Pointer<gs_init_data>, ffi.Uint32)>>('obs_display_create');
  late final _obs_display_create = _obs_display_createPtr.asFunction<
      ffi.Pointer<obs_display_t> Function(ffi.Pointer<gs_init_data>, int)>();

  /// Destroys a display context
  void obs_display_destroy(
    ffi.Pointer<obs_display_t> display,
  ) {
    return _obs_display_destroy(
      display,
    );
  }

  late final _obs_display_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_display_t>)>>(
      'obs_display_destroy');
  late final _obs_display_destroy = _obs_display_destroyPtr
      .asFunction<void Function(ffi.Pointer<obs_display_t>)>();

  /// Changes the size of this display
  void obs_display_resize(
    ffi.Pointer<obs_display_t> display,
    int cx,
    int cy,
  ) {
    return _obs_display_resize(
      display,
      cx,
      cy,
    );
  }

  late final _obs_display_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_display_t>, ffi.Uint32,
              ffi.Uint32)>>('obs_display_resize');
  late final _obs_display_resize = _obs_display_resizePtr
      .asFunction<void Function(ffi.Pointer<obs_display_t>, int, int)>();

  /// Adds a draw callback for this display context
  ///
  /// @param  display  The display context.
  /// @param  draw     The draw callback which is called each time a frame
  /// updates.
  /// @param  param    The user data to be associated with this draw callback.
  void obs_display_add_draw_callback(
    ffi.Pointer<obs_display_t> display,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>
        draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_display_add_draw_callback(
      display,
      draw,
      param,
    );
  }

  late final _obs_display_add_draw_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_display_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>,
              ffi.Pointer<ffi.Void>)>>('obs_display_add_draw_callback');
  late final _obs_display_add_draw_callback =
      _obs_display_add_draw_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<obs_display_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>,
              ffi.Pointer<ffi.Void>)>();

  /// Removes a draw callback for this display context
  void obs_display_remove_draw_callback(
    ffi.Pointer<obs_display_t> display,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>
        draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_display_remove_draw_callback(
      display,
      draw,
      param,
    );
  }

  late final _obs_display_remove_draw_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_display_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>,
              ffi.Pointer<ffi.Void>)>>('obs_display_remove_draw_callback');
  late final _obs_display_remove_draw_callback =
      _obs_display_remove_draw_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<obs_display_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>,
              ffi.Pointer<ffi.Void>)>();

  void obs_display_set_enabled(
    ffi.Pointer<obs_display_t> display,
    int enable,
  ) {
    return _obs_display_set_enabled(
      display,
      enable,
    );
  }

  late final _obs_display_set_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_display_t>,
              ffi.Uint8)>>('obs_display_set_enabled');
  late final _obs_display_set_enabled = _obs_display_set_enabledPtr
      .asFunction<void Function(ffi.Pointer<obs_display_t>, int)>();

  int obs_display_enabled(
    ffi.Pointer<obs_display_t> display,
  ) {
    return _obs_display_enabled(
      display,
    );
  }

  late final _obs_display_enabledPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_display_t>)>>(
      'obs_display_enabled');
  late final _obs_display_enabled = _obs_display_enabledPtr
      .asFunction<int Function(ffi.Pointer<obs_display_t>)>();

  void obs_display_set_background_color(
    ffi.Pointer<obs_display_t> display,
    int color,
  ) {
    return _obs_display_set_background_color(
      display,
      color,
    );
  }

  late final _obs_display_set_background_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_display_t>,
              ffi.Uint32)>>('obs_display_set_background_color');
  late final _obs_display_set_background_color =
      _obs_display_set_background_colorPtr
          .asFunction<void Function(ffi.Pointer<obs_display_t>, int)>();

  void obs_display_size(
    ffi.Pointer<obs_display_t> display,
    ffi.Pointer<ffi.Uint32> width,
    ffi.Pointer<ffi.Uint32> height,
  ) {
    return _obs_display_size(
      display,
      width,
      height,
    );
  }

  late final _obs_display_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_display_t>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('obs_display_size');
  late final _obs_display_size = _obs_display_sizePtr.asFunction<
      void Function(ffi.Pointer<obs_display_t>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  /// Returns the translated display name of a source
  ffi.Pointer<ffi.Int8> obs_source_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_source_get_display_name(
      id,
    );
  }

  late final _obs_source_get_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_source_get_display_name');
  late final _obs_source_get_display_name = _obs_source_get_display_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  /// Creates a source of the specified type with the specified settings.
  ///
  /// The "source" context is used for anything related to presenting
  /// or modifying video/audio.  Use obs_source_release to release it.
  ffi.Pointer<obs_source_t> obs_source_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    return _obs_source_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  late final _obs_source_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<obs_data_t>)>>('obs_source_create');
  late final _obs_source_create = _obs_source_createPtr.asFunction<
      ffi.Pointer<obs_source_t> Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<obs_data_t>,
          ffi.Pointer<obs_data_t>)>();

  ffi.Pointer<obs_source_t> obs_source_create_private(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_source_create_private(
      id,
      name,
      settings,
    );
  }

  late final _obs_source_create_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>)>>('obs_source_create_private');
  late final _obs_source_create_private =
      _obs_source_create_privatePtr.asFunction<
          ffi.Pointer<obs_source_t> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<obs_data_t>)>();

  ffi.Pointer<obs_source_t> obs_source_duplicate(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<ffi.Int8> desired_name,
    int create_private,
  ) {
    return _obs_source_duplicate(
      source,
      desired_name,
      create_private,
    );
  }

  late final _obs_source_duplicatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<ffi.Int8>, ffi.Uint8)>>('obs_source_duplicate');
  late final _obs_source_duplicate = _obs_source_duplicatePtr.asFunction<
      ffi.Pointer<obs_source_t> Function(
          ffi.Pointer<obs_source_t>, ffi.Pointer<ffi.Int8>, int)>();

  /// Adds/releases a reference to a source.  When the last reference is
  /// released, the source is destroyed.
  void obs_source_addref(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_addref(
      source,
    );
  }

  late final _obs_source_addrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_addref');
  late final _obs_source_addref = _obs_source_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_release(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_release(
      source,
    );
  }

  late final _obs_source_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_release');
  late final _obs_source_release = _obs_source_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  void obs_weak_source_addref(
    ffi.Pointer<obs_weak_source_t> weak,
  ) {
    return _obs_weak_source_addref(
      weak,
    );
  }

  late final _obs_weak_source_addrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_weak_source_t>)>>('obs_weak_source_addref');
  late final _obs_weak_source_addref = _obs_weak_source_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_weak_source_t>)>();

  void obs_weak_source_release(
    ffi.Pointer<obs_weak_source_t> weak,
  ) {
    return _obs_weak_source_release(
      weak,
    );
  }

  late final _obs_weak_source_releasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_weak_source_t>)>>('obs_weak_source_release');
  late final _obs_weak_source_release = _obs_weak_source_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_weak_source_t>)>();

  ffi.Pointer<obs_source_t> obs_source_get_ref(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_ref(
      source,
    );
  }

  late final _obs_source_get_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_ref');
  late final _obs_source_get_ref = _obs_source_get_refPtr.asFunction<
      ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_source_t>)>();

  ffi.Pointer<obs_weak_source_t> obs_source_get_weak_source(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_weak_source(
      source,
    );
  }

  late final _obs_source_get_weak_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_weak_source_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_weak_source');
  late final _obs_source_get_weak_source =
      _obs_source_get_weak_sourcePtr.asFunction<
          ffi.Pointer<obs_weak_source_t> Function(ffi.Pointer<obs_source_t>)>();

  ffi.Pointer<obs_source_t> obs_weak_source_get_source(
    ffi.Pointer<obs_weak_source_t> weak,
  ) {
    return _obs_weak_source_get_source(
      weak,
    );
  }

  late final _obs_weak_source_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_weak_source_t>)>>('obs_weak_source_get_source');
  late final _obs_weak_source_get_source =
      _obs_weak_source_get_sourcePtr.asFunction<
          ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_weak_source_t>)>();

  int obs_weak_source_references_source(
    ffi.Pointer<obs_weak_source_t> weak,
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_weak_source_references_source(
      weak,
      source,
    );
  }

  late final _obs_weak_source_references_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_weak_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_weak_source_references_source');
  late final _obs_weak_source_references_source =
      _obs_weak_source_references_sourcePtr.asFunction<
          int Function(
              ffi.Pointer<obs_weak_source_t>, ffi.Pointer<obs_source_t>)>();

  /// Notifies all references that the source should be released
  void obs_source_remove(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_remove(
      source,
    );
  }

  late final _obs_source_removePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_remove');
  late final _obs_source_remove = _obs_source_removePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Returns true if the source should be released
  int obs_source_removed(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_removed(
      source,
    );
  }

  late final _obs_source_removedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_removed');
  late final _obs_source_removed = _obs_source_removedPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Returns capability flags of a source
  int obs_source_get_output_flags(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_output_flags(
      source,
    );
  }

  late final _obs_source_get_output_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_output_flags');
  late final _obs_source_get_output_flags = _obs_source_get_output_flagsPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Returns capability flags of a source type
  int obs_get_source_output_flags(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_get_source_output_flags(
      id,
    );
  }

  late final _obs_get_source_output_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_get_source_output_flags');
  late final _obs_get_source_output_flags = _obs_get_source_output_flagsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  /// Gets the default settings for a source type
  ffi.Pointer<obs_data_t> obs_get_source_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_get_source_defaults(
      id,
    );
  }

  late final _obs_get_source_defaultsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_source_defaults');
  late final _obs_get_source_defaults = _obs_get_source_defaultsPtr
      .asFunction<ffi.Pointer<obs_data_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_get_source_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_get_source_properties(
      id,
    );
  }

  late final _obs_get_source_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_source_properties');
  late final _obs_get_source_properties =
      _obs_get_source_propertiesPtr.asFunction<
          ffi.Pointer<obs_properties_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns whether the source has custom properties or not
  int obs_is_source_configurable(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_is_source_configurable(
      id,
    );
  }

  late final _obs_is_source_configurablePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_is_source_configurable');
  late final _obs_is_source_configurable = _obs_is_source_configurablePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int obs_source_configurable(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_configurable(
      source,
    );
  }

  late final _obs_source_configurablePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_configurable');
  late final _obs_source_configurable = _obs_source_configurablePtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Returns the properties list for a specific existing source.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_source_properties(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_properties(
      source,
    );
  }

  late final _obs_source_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_properties');
  late final _obs_source_properties = _obs_source_propertiesPtr.asFunction<
      ffi.Pointer<obs_properties_t> Function(ffi.Pointer<obs_source_t>)>();

  /// Updates settings for this source
  void obs_source_update(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_source_update(
      source,
      settings,
    );
  }

  late final _obs_source_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_data_t>)>>('obs_source_update');
  late final _obs_source_update = _obs_source_updatePtr.asFunction<
      void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_data_t>)>();

  /// Renders a video source.
  void obs_source_video_render(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_video_render(
      source,
    );
  }

  late final _obs_source_video_renderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_video_render');
  late final _obs_source_video_render = _obs_source_video_renderPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Gets the width of a source (if it has video)
  int obs_source_get_width(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_width(
      source,
    );
  }

  late final _obs_source_get_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_width');
  late final _obs_source_get_width = _obs_source_get_widthPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Gets the height of a source (if it has video)
  int obs_source_get_height(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_height(
      source,
    );
  }

  late final _obs_source_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_height');
  late final _obs_source_get_height = _obs_source_get_heightPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// If the source is a filter, returns the parent source of the filter.  Only
  /// guaranteed to be valid inside of the video_render, filter_audio,
  /// filter_video, and filter_remove callbacks.
  ffi.Pointer<obs_source_t> obs_filter_get_parent(
    ffi.Pointer<obs_source_t> filter,
  ) {
    return _obs_filter_get_parent(
      filter,
    );
  }

  late final _obs_filter_get_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_filter_get_parent');
  late final _obs_filter_get_parent = _obs_filter_get_parentPtr.asFunction<
      ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_source_t>)>();

  /// If the source is a filter, returns the target source of the filter.  Only
  /// guaranteed to be valid inside of the video_render, filter_audio,
  /// filter_video, and filter_remove callbacks.
  ffi.Pointer<obs_source_t> obs_filter_get_target(
    ffi.Pointer<obs_source_t> filter,
  ) {
    return _obs_filter_get_target(
      filter,
    );
  }

  late final _obs_filter_get_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_filter_get_target');
  late final _obs_filter_get_target = _obs_filter_get_targetPtr.asFunction<
      ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_source_t>)>();

  /// Used to directly render a non-async source without any filter processing
  void obs_source_default_render(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_default_render(
      source,
    );
  }

  late final _obs_source_default_renderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_default_render');
  late final _obs_source_default_render = _obs_source_default_renderPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Adds a filter to the source (which is used whenever the source is used)
  void obs_source_filter_add(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_t> filter,
  ) {
    return _obs_source_filter_add(
      source,
      filter,
    );
  }

  late final _obs_source_filter_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_source_filter_add');
  late final _obs_source_filter_add = _obs_source_filter_addPtr.asFunction<
      void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>)>();

  /// Removes a filter from the source
  void obs_source_filter_remove(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_t> filter,
  ) {
    return _obs_source_filter_remove(
      source,
      filter,
    );
  }

  late final _obs_source_filter_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_source_filter_remove');
  late final _obs_source_filter_remove =
      _obs_source_filter_removePtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>)>();

  /// Modifies the order of a specific filter
  void obs_source_filter_set_order(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_t> filter,
    int movement,
  ) {
    return _obs_source_filter_set_order(
      source,
      filter,
      movement,
    );
  }

  late final _obs_source_filter_set_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>,
              ffi.Int32)>>('obs_source_filter_set_order');
  late final _obs_source_filter_set_order =
      _obs_source_filter_set_orderPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>, int)>();

  /// Gets the settings string for a source
  ffi.Pointer<obs_data_t> obs_source_get_settings(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_settings(
      source,
    );
  }

  late final _obs_source_get_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_settings');
  late final _obs_source_get_settings = _obs_source_get_settingsPtr.asFunction<
      ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_source_t>)>();

  /// Gets the name of a source
  ffi.Pointer<ffi.Int8> obs_source_get_name(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_name(
      source,
    );
  }

  late final _obs_source_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_name');
  late final _obs_source_get_name = _obs_source_get_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_source_t>)>();

  /// Sets the name of a source
  void obs_source_set_name(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_source_set_name(
      source,
      name,
    );
  }

  late final _obs_source_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_source_set_name');
  late final _obs_source_set_name = _obs_source_set_namePtr.asFunction<
      void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<ffi.Int8>)>();

  /// Gets the source type
  int obs_source_get_type(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_type(
      source,
    );
  }

  late final _obs_source_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_type');
  late final _obs_source_get_type = _obs_source_get_typePtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Gets the source identifier
  ffi.Pointer<ffi.Int8> obs_source_get_id(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_id(
      source,
    );
  }

  late final _obs_source_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_id');
  late final _obs_source_get_id = _obs_source_get_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_source_t>)>();

  ffi.Pointer<ffi.Int8> obs_source_get_unversioned_id(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_unversioned_id(
      source,
    );
  }

  late final _obs_source_get_unversioned_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_unversioned_id');
  late final _obs_source_get_unversioned_id = _obs_source_get_unversioned_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_source_t>)>();

  /// Returns the signal handler for a source
  ffi.Pointer<signal_handler_t> obs_source_get_signal_handler(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_signal_handler(
      source,
    );
  }

  late final _obs_source_get_signal_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<signal_handler_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_signal_handler');
  late final _obs_source_get_signal_handler =
      _obs_source_get_signal_handlerPtr.asFunction<
          ffi.Pointer<signal_handler_t> Function(ffi.Pointer<obs_source_t>)>();

  /// Returns the procedure handler for a source
  ffi.Pointer<proc_handler_t> obs_source_get_proc_handler(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_proc_handler(
      source,
    );
  }

  late final _obs_source_get_proc_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<proc_handler_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_proc_handler');
  late final _obs_source_get_proc_handler =
      _obs_source_get_proc_handlerPtr.asFunction<
          ffi.Pointer<proc_handler_t> Function(ffi.Pointer<obs_source_t>)>();

  /// Sets the user volume for a source that has audio output
  void obs_source_set_volume(
    ffi.Pointer<obs_source_t> source,
    double volume,
  ) {
    return _obs_source_set_volume(
      source,
      volume,
    );
  }

  late final _obs_source_set_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>, ffi.Float)>>('obs_source_set_volume');
  late final _obs_source_set_volume = _obs_source_set_volumePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, double)>();

  /// Gets the user volume for a source that has audio output
  double obs_source_get_volume(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_volume(
      source,
    );
  }

  late final _obs_source_get_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_volume');
  late final _obs_source_get_volume = _obs_source_get_volumePtr
      .asFunction<double Function(ffi.Pointer<obs_source_t>)>();

  int obs_source_get_speaker_layout(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_speaker_layout(
      source,
    );
  }

  late final _obs_source_get_speaker_layoutPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_speaker_layout');
  late final _obs_source_get_speaker_layout = _obs_source_get_speaker_layoutPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Sets the balance value for a stereo audio source
  void obs_source_set_balance_value(
    ffi.Pointer<obs_source_t> source,
    double balance,
  ) {
    return _obs_source_set_balance_value(
      source,
      balance,
    );
  }

  late final _obs_source_set_balance_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Float)>>('obs_source_set_balance_value');
  late final _obs_source_set_balance_value = _obs_source_set_balance_valuePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, double)>();

  /// Gets the balance value for a stereo audio source
  double obs_source_get_balance_value(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_balance_value(
      source,
    );
  }

  late final _obs_source_get_balance_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_balance_value');
  late final _obs_source_get_balance_value = _obs_source_get_balance_valuePtr
      .asFunction<double Function(ffi.Pointer<obs_source_t>)>();

  /// Sets the audio sync offset (in nanoseconds) for a source
  void obs_source_set_sync_offset(
    ffi.Pointer<obs_source_t> source,
    int offset,
  ) {
    return _obs_source_set_sync_offset(
      source,
      offset,
    );
  }

  late final _obs_source_set_sync_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Int64)>>('obs_source_set_sync_offset');
  late final _obs_source_set_sync_offset = _obs_source_set_sync_offsetPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  /// Gets the audio sync offset (in nanoseconds) for a source
  int obs_source_get_sync_offset(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_sync_offset(
      source,
    );
  }

  late final _obs_source_get_sync_offsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_sync_offset');
  late final _obs_source_get_sync_offset = _obs_source_get_sync_offsetPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Enumerates active child sources used by this source
  void obs_source_enum_active_sources(
    ffi.Pointer<obs_source_t> source,
    obs_source_enum_proc_t enum_callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_source_enum_active_sources(
      source,
      enum_callback,
      param,
    );
  }

  late final _obs_source_enum_active_sourcesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, obs_source_enum_proc_t,
              ffi.Pointer<ffi.Void>)>>('obs_source_enum_active_sources');
  late final _obs_source_enum_active_sources =
      _obs_source_enum_active_sourcesPtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, obs_source_enum_proc_t,
              ffi.Pointer<ffi.Void>)>();

  /// Enumerates the entire active child source tree used by this source
  void obs_source_enum_active_tree(
    ffi.Pointer<obs_source_t> source,
    obs_source_enum_proc_t enum_callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_source_enum_active_tree(
      source,
      enum_callback,
      param,
    );
  }

  late final _obs_source_enum_active_treePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, obs_source_enum_proc_t,
              ffi.Pointer<ffi.Void>)>>('obs_source_enum_active_tree');
  late final _obs_source_enum_active_tree =
      _obs_source_enum_active_treePtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, obs_source_enum_proc_t,
              ffi.Pointer<ffi.Void>)>();

  /// Returns true if active, false if not
  int obs_source_active(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_active(
      source,
    );
  }

  late final _obs_source_activePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_active');
  late final _obs_source_active = _obs_source_activePtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Returns true if currently displayed somewhere (active or not), false if not
  int obs_source_showing(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_showing(
      source,
    );
  }

  late final _obs_source_showingPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_showing');
  late final _obs_source_showing = _obs_source_showingPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Sets source flags.  Note that these are different from the main output
  /// flags.  These are generally things that can be set by the source or user,
  /// while the output flags are more used to determine capabilities of a source.
  void obs_source_set_flags(
    ffi.Pointer<obs_source_t> source,
    int flags,
  ) {
    return _obs_source_set_flags(
      source,
      flags,
    );
  }

  late final _obs_source_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>, ffi.Uint32)>>('obs_source_set_flags');
  late final _obs_source_set_flags = _obs_source_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  /// Gets source flags.
  int obs_source_get_flags(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_flags(
      source,
    );
  }

  late final _obs_source_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_flags');
  late final _obs_source_get_flags = _obs_source_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Sets audio mixer flags.  These flags are used to specify which mixers
  /// the source's audio should be applied to.
  void obs_source_set_audio_mixers(
    ffi.Pointer<obs_source_t> source,
    int mixers,
  ) {
    return _obs_source_set_audio_mixers(
      source,
      mixers,
    );
  }

  late final _obs_source_set_audio_mixersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint32)>>('obs_source_set_audio_mixers');
  late final _obs_source_set_audio_mixers = _obs_source_set_audio_mixersPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  /// Gets audio mixer flags
  int obs_source_get_audio_mixers(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_audio_mixers(
      source,
    );
  }

  late final _obs_source_get_audio_mixersPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_audio_mixers');
  late final _obs_source_get_audio_mixers = _obs_source_get_audio_mixersPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Increments the 'showing' reference counter to indicate that the source is
  /// being shown somewhere.  If the reference counter was 0, will call the 'show'
  /// callback.
  void obs_source_inc_showing(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_inc_showing(
      source,
    );
  }

  late final _obs_source_inc_showingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_inc_showing');
  late final _obs_source_inc_showing = _obs_source_inc_showingPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Increments the 'active' reference counter to indicate that the source is
  /// fully active.  If the reference counter was 0, will call the 'activate'
  /// callback.
  ///
  /// Unlike obs_source_inc_showing, this will cause children of this source to be
  /// considered showing as well (currently used by transition previews to make
  /// the stinger transition show correctly).  obs_source_inc_showing should
  /// generally be used instead.
  void obs_source_inc_active(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_inc_active(
      source,
    );
  }

  late final _obs_source_inc_activePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_inc_active');
  late final _obs_source_inc_active = _obs_source_inc_activePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Decrements the 'showing' reference counter to indicate that the source is
  /// no longer being shown somewhere.  If the reference counter is set to 0,
  /// will call the 'hide' callback
  void obs_source_dec_showing(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_dec_showing(
      source,
    );
  }

  late final _obs_source_dec_showingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_dec_showing');
  late final _obs_source_dec_showing = _obs_source_dec_showingPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Decrements the 'active' reference counter to indicate that the source is no
  /// longer fully active.  If the reference counter is set to 0, will call the
  /// 'deactivate' callback
  ///
  /// Unlike obs_source_dec_showing, this will cause children of this source to be
  /// considered not showing as well.  obs_source_dec_showing should generally be
  /// used instead.
  void obs_source_dec_active(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_dec_active(
      source,
    );
  }

  late final _obs_source_dec_activePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_dec_active');
  late final _obs_source_dec_active = _obs_source_dec_activePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Enumerates filters assigned to the source
  void obs_source_enum_filters(
    ffi.Pointer<obs_source_t> source,
    obs_source_enum_proc_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_source_enum_filters(
      source,
      callback,
      param,
    );
  }

  late final _obs_source_enum_filtersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, obs_source_enum_proc_t,
              ffi.Pointer<ffi.Void>)>>('obs_source_enum_filters');
  late final _obs_source_enum_filters = _obs_source_enum_filtersPtr.asFunction<
      void Function(ffi.Pointer<obs_source_t>, obs_source_enum_proc_t,
          ffi.Pointer<ffi.Void>)>();

  /// Gets a filter of a source by its display name.
  ffi.Pointer<obs_source_t> obs_source_get_filter_by_name(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_source_get_filter_by_name(
      source,
      name,
    );
  }

  late final _obs_source_get_filter_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_source_get_filter_by_name');
  late final _obs_source_get_filter_by_name =
      _obs_source_get_filter_by_namePtr.asFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<ffi.Int8>)>();

  void obs_source_copy_filters(
    ffi.Pointer<obs_source_t> dst,
    ffi.Pointer<obs_source_t> src,
  ) {
    return _obs_source_copy_filters(
      dst,
      src,
    );
  }

  late final _obs_source_copy_filtersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_source_copy_filters');
  late final _obs_source_copy_filters = _obs_source_copy_filtersPtr.asFunction<
      void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>)>();

  void obs_source_copy_single_filter(
    ffi.Pointer<obs_source_t> dst,
    ffi.Pointer<obs_source_t> filter,
  ) {
    return _obs_source_copy_single_filter(
      dst,
      filter,
    );
  }

  late final _obs_source_copy_single_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_source_copy_single_filter');
  late final _obs_source_copy_single_filter =
      _obs_source_copy_single_filterPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>)>();

  int obs_source_enabled(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_enabled(
      source,
    );
  }

  late final _obs_source_enabledPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_enabled');
  late final _obs_source_enabled = _obs_source_enabledPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_set_enabled(
    ffi.Pointer<obs_source_t> source,
    int enabled,
  ) {
    return _obs_source_set_enabled(
      source,
      enabled,
    );
  }

  late final _obs_source_set_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>, ffi.Uint8)>>('obs_source_set_enabled');
  late final _obs_source_set_enabled = _obs_source_set_enabledPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_muted(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_muted(
      source,
    );
  }

  late final _obs_source_mutedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_muted');
  late final _obs_source_muted = _obs_source_mutedPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_set_muted(
    ffi.Pointer<obs_source_t> source,
    int muted,
  ) {
    return _obs_source_set_muted(
      source,
      muted,
    );
  }

  late final _obs_source_set_mutedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>, ffi.Uint8)>>('obs_source_set_muted');
  late final _obs_source_set_muted = _obs_source_set_mutedPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_push_to_mute_enabled(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_push_to_mute_enabled(
      source,
    );
  }

  late final _obs_source_push_to_mute_enabledPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_push_to_mute_enabled');
  late final _obs_source_push_to_mute_enabled =
      _obs_source_push_to_mute_enabledPtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_enable_push_to_mute(
    ffi.Pointer<obs_source_t> source,
    int enabled,
  ) {
    return _obs_source_enable_push_to_mute(
      source,
      enabled,
    );
  }

  late final _obs_source_enable_push_to_mutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint8)>>('obs_source_enable_push_to_mute');
  late final _obs_source_enable_push_to_mute =
      _obs_source_enable_push_to_mutePtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_get_push_to_mute_delay(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_push_to_mute_delay(
      source,
    );
  }

  late final _obs_source_get_push_to_mute_delayPtr = _lookup<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_push_to_mute_delay');
  late final _obs_source_get_push_to_mute_delay =
      _obs_source_get_push_to_mute_delayPtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_set_push_to_mute_delay(
    ffi.Pointer<obs_source_t> source,
    int delay,
  ) {
    return _obs_source_set_push_to_mute_delay(
      source,
      delay,
    );
  }

  late final _obs_source_set_push_to_mute_delayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint64)>>('obs_source_set_push_to_mute_delay');
  late final _obs_source_set_push_to_mute_delay =
      _obs_source_set_push_to_mute_delayPtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_push_to_talk_enabled(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_push_to_talk_enabled(
      source,
    );
  }

  late final _obs_source_push_to_talk_enabledPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_push_to_talk_enabled');
  late final _obs_source_push_to_talk_enabled =
      _obs_source_push_to_talk_enabledPtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_enable_push_to_talk(
    ffi.Pointer<obs_source_t> source,
    int enabled,
  ) {
    return _obs_source_enable_push_to_talk(
      source,
      enabled,
    );
  }

  late final _obs_source_enable_push_to_talkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint8)>>('obs_source_enable_push_to_talk');
  late final _obs_source_enable_push_to_talk =
      _obs_source_enable_push_to_talkPtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_get_push_to_talk_delay(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_push_to_talk_delay(
      source,
    );
  }

  late final _obs_source_get_push_to_talk_delayPtr = _lookup<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_push_to_talk_delay');
  late final _obs_source_get_push_to_talk_delay =
      _obs_source_get_push_to_talk_delayPtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_set_push_to_talk_delay(
    ffi.Pointer<obs_source_t> source,
    int delay,
  ) {
    return _obs_source_set_push_to_talk_delay(
      source,
      delay,
    );
  }

  late final _obs_source_set_push_to_talk_delayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint64)>>('obs_source_set_push_to_talk_delay');
  late final _obs_source_set_push_to_talk_delay =
      _obs_source_set_push_to_talk_delayPtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  void obs_source_add_audio_capture_callback(
    ffi.Pointer<obs_source_t> source,
    obs_source_audio_capture_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_source_add_audio_capture_callback(
      source,
      callback,
      param,
    );
  }

  late final _obs_source_add_audio_capture_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>,
              obs_source_audio_capture_t,
              ffi.Pointer<ffi.Void>)>>('obs_source_add_audio_capture_callback');
  late final _obs_source_add_audio_capture_callback =
      _obs_source_add_audio_capture_callbackPtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, obs_source_audio_capture_t,
              ffi.Pointer<ffi.Void>)>();

  void obs_source_remove_audio_capture_callback(
    ffi.Pointer<obs_source_t> source,
    obs_source_audio_capture_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_source_remove_audio_capture_callback(
      source,
      callback,
      param,
    );
  }

  late final _obs_source_remove_audio_capture_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<obs_source_t>,
                  obs_source_audio_capture_t, ffi.Pointer<ffi.Void>)>>(
      'obs_source_remove_audio_capture_callback');
  late final _obs_source_remove_audio_capture_callback =
      _obs_source_remove_audio_capture_callbackPtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, obs_source_audio_capture_t,
              ffi.Pointer<ffi.Void>)>();

  void obs_source_add_caption_callback(
    ffi.Pointer<obs_source_t> source,
    obs_source_caption_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_source_add_caption_callback(
      source,
      callback,
      param,
    );
  }

  late final _obs_source_add_caption_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, obs_source_caption_t,
              ffi.Pointer<ffi.Void>)>>('obs_source_add_caption_callback');
  late final _obs_source_add_caption_callback =
      _obs_source_add_caption_callbackPtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, obs_source_caption_t,
              ffi.Pointer<ffi.Void>)>();

  void obs_source_remove_caption_callback(
    ffi.Pointer<obs_source_t> source,
    obs_source_caption_t callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_source_remove_caption_callback(
      source,
      callback,
      param,
    );
  }

  late final _obs_source_remove_caption_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, obs_source_caption_t,
              ffi.Pointer<ffi.Void>)>>('obs_source_remove_caption_callback');
  late final _obs_source_remove_caption_callback =
      _obs_source_remove_caption_callbackPtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, obs_source_caption_t,
              ffi.Pointer<ffi.Void>)>();

  void obs_source_set_deinterlace_mode(
    ffi.Pointer<obs_source_t> source,
    int mode,
  ) {
    return _obs_source_set_deinterlace_mode(
      source,
      mode,
    );
  }

  late final _obs_source_set_deinterlace_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Int32)>>('obs_source_set_deinterlace_mode');
  late final _obs_source_set_deinterlace_mode =
      _obs_source_set_deinterlace_modePtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_get_deinterlace_mode(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_deinterlace_mode(
      source,
    );
  }

  late final _obs_source_get_deinterlace_modePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_deinterlace_mode');
  late final _obs_source_get_deinterlace_mode =
      _obs_source_get_deinterlace_modePtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_set_deinterlace_field_order(
    ffi.Pointer<obs_source_t> source,
    int field_order,
  ) {
    return _obs_source_set_deinterlace_field_order(
      source,
      field_order,
    );
  }

  late final _obs_source_set_deinterlace_field_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Int32)>>('obs_source_set_deinterlace_field_order');
  late final _obs_source_set_deinterlace_field_order =
      _obs_source_set_deinterlace_field_orderPtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_get_deinterlace_field_order(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_deinterlace_field_order(
      source,
    );
  }

  late final _obs_source_get_deinterlace_field_orderPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_deinterlace_field_order');
  late final _obs_source_get_deinterlace_field_order =
      _obs_source_get_deinterlace_field_orderPtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_set_monitoring_type(
    ffi.Pointer<obs_source_t> source,
    int type,
  ) {
    return _obs_source_set_monitoring_type(
      source,
      type,
    );
  }

  late final _obs_source_set_monitoring_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Int32)>>('obs_source_set_monitoring_type');
  late final _obs_source_set_monitoring_type =
      _obs_source_set_monitoring_typePtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_get_monitoring_type(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_monitoring_type(
      source,
    );
  }

  late final _obs_source_get_monitoring_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_monitoring_type');
  late final _obs_source_get_monitoring_type =
      _obs_source_get_monitoring_typePtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Gets private front-end settings data.  This data is saved/loaded
  /// automatically.  Returns an incremented reference.
  ffi.Pointer<obs_data_t> obs_source_get_private_settings(
    ffi.Pointer<obs_source_t> item,
  ) {
    return _obs_source_get_private_settings(
      item,
    );
  }

  late final _obs_source_get_private_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_private_settings');
  late final _obs_source_get_private_settings =
      _obs_source_get_private_settingsPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_source_t>)>();

  ffi.Pointer<ffi.Void> obs_source_get_type_data(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_type_data(
      source,
    );
  }

  late final _obs_source_get_type_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_type_data');
  late final _obs_source_get_type_data = _obs_source_get_type_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<obs_source_t>)>();

  /// Helper function to set the color matrix information when drawing the source.
  ///
  /// @param  color_matrix     The color matrix.  Assigns to the 'color_matrix'
  /// effect variable.
  /// @param  color_range_min  The minimum color range.  Assigns to the
  /// 'color_range_min' effect variable.  If NULL,
  /// {0.0f, 0.0f, 0.0f} is used.
  /// @param  color_range_max  The maximum color range.  Assigns to the
  /// 'color_range_max' effect variable.  If NULL,
  /// {1.0f, 1.0f, 1.0f} is used.
  void obs_source_draw_set_color_matrix(
    ffi.Pointer<matrix4> color_matrix,
    ffi.Pointer<vec3> color_range_min,
    ffi.Pointer<vec3> color_range_max,
  ) {
    return _obs_source_draw_set_color_matrix(
      color_matrix,
      color_range_min,
      color_range_max,
    );
  }

  late final _obs_source_draw_set_color_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<matrix4>, ffi.Pointer<vec3>,
              ffi.Pointer<vec3>)>>('obs_source_draw_set_color_matrix');
  late final _obs_source_draw_set_color_matrix =
      _obs_source_draw_set_color_matrixPtr.asFunction<
          void Function(
              ffi.Pointer<matrix4>, ffi.Pointer<vec3>, ffi.Pointer<vec3>)>();

  /// Helper function to draw sprites for a source (synchronous video).
  ///
  /// @param  image   The sprite texture to draw.  Assigns to the 'image' variable
  /// of the current effect.
  /// @param  x       X position of the sprite.
  /// @param  y       Y position of the sprite.
  /// @param  cx      Width of the sprite.  If 0, uses the texture width.
  /// @param  cy      Height of the sprite.  If 0, uses the texture height.
  /// @param  flip    Specifies whether to flip the image vertically.
  void obs_source_draw(
    ffi.Pointer<gs_texture_t> image,
    int x,
    int y,
    int cx,
    int cy,
    int flip,
  ) {
    return _obs_source_draw(
      image,
      x,
      y,
      cx,
      cy,
      flip,
    );
  }

  late final _obs_source_drawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gs_texture_t>, ffi.Int32, ffi.Int32,
              ffi.Uint32, ffi.Uint32, ffi.Uint8)>>('obs_source_draw');
  late final _obs_source_draw = _obs_source_drawPtr.asFunction<
      void Function(ffi.Pointer<gs_texture_t>, int, int, int, int, int)>();

  /// Outputs asynchronous video data.  Set to NULL to deactivate the texture
  ///
  /// NOTE: Non-YUV formats will always be treated as full range with this
  /// function!  Use obs_source_output_video2 instead if partial range support is
  /// desired for non-YUV video formats.
  void obs_source_output_video(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    return _obs_source_output_video(
      source,
      frame,
    );
  }

  late final _obs_source_output_videoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_frame>)>>('obs_source_output_video');
  late final _obs_source_output_video = _obs_source_output_videoPtr.asFunction<
      void Function(
          ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_frame>)>();

  void obs_source_output_video2(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_frame2> frame,
  ) {
    return _obs_source_output_video2(
      source,
      frame,
    );
  }

  late final _obs_source_output_video2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_frame2>)>>('obs_source_output_video2');
  late final _obs_source_output_video2 =
      _obs_source_output_video2Ptr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_frame2>)>();

  void obs_source_set_async_rotation(
    ffi.Pointer<obs_source_t> source,
    int rotation,
  ) {
    return _obs_source_set_async_rotation(
      source,
      rotation,
    );
  }

  late final _obs_source_set_async_rotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Int64)>>('obs_source_set_async_rotation');
  late final _obs_source_set_async_rotation = _obs_source_set_async_rotationPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  void obs_source_output_cea708(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_cea_708> captions,
  ) {
    return _obs_source_output_cea708(
      source,
      captions,
    );
  }

  late final _obs_source_output_cea708Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_cea_708>)>>('obs_source_output_cea708');
  late final _obs_source_output_cea708 =
      _obs_source_output_cea708Ptr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_cea_708>)>();

  /// Preloads asynchronous video data to allow instantaneous playback
  ///
  /// NOTE: Non-YUV formats will always be treated as full range with this
  /// function!  Use obs_source_preload_video2 instead if partial range support is
  /// desired for non-YUV video formats.
  void obs_source_preload_video(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    return _obs_source_preload_video(
      source,
      frame,
    );
  }

  late final _obs_source_preload_videoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_frame>)>>('obs_source_preload_video');
  late final _obs_source_preload_video =
      _obs_source_preload_videoPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_frame>)>();

  void obs_source_preload_video2(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_frame2> frame,
  ) {
    return _obs_source_preload_video2(
      source,
      frame,
    );
  }

  late final _obs_source_preload_video2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_frame2>)>>('obs_source_preload_video2');
  late final _obs_source_preload_video2 =
      _obs_source_preload_video2Ptr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_frame2>)>();

  /// Shows any preloaded video data
  void obs_source_show_preloaded_video(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_show_preloaded_video(
      source,
    );
  }

  late final _obs_source_show_preloaded_videoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_show_preloaded_video');
  late final _obs_source_show_preloaded_video =
      _obs_source_show_preloaded_videoPtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Sets current async video frame immediately
  ///
  /// NOTE: Non-YUV formats will always be treated as full range with this
  /// function!  Use obs_source_preload_video2 instead if partial range support is
  /// desired for non-YUV video formats.
  void obs_source_set_video_frame(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    return _obs_source_set_video_frame(
      source,
      frame,
    );
  }

  late final _obs_source_set_video_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_frame>)>>('obs_source_set_video_frame');
  late final _obs_source_set_video_frame =
      _obs_source_set_video_framePtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_frame>)>();

  void obs_source_set_video_frame2(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_frame2> frame,
  ) {
    return _obs_source_set_video_frame2(
      source,
      frame,
    );
  }

  late final _obs_source_set_video_frame2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_frame2>)>>('obs_source_set_video_frame2');
  late final _obs_source_set_video_frame2 =
      _obs_source_set_video_frame2Ptr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_frame2>)>();

  /// Outputs audio data (always asynchronous)
  void obs_source_output_audio(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_audio> audio,
  ) {
    return _obs_source_output_audio(
      source,
      audio,
    );
  }

  late final _obs_source_output_audioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_audio>)>>('obs_source_output_audio');
  late final _obs_source_output_audio = _obs_source_output_audioPtr.asFunction<
      void Function(
          ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_audio>)>();

  /// Signal an update to any currently used properties via 'update_properties'
  void obs_source_update_properties(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_update_properties(
      source,
    );
  }

  late final _obs_source_update_propertiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_update_properties');
  late final _obs_source_update_properties = _obs_source_update_propertiesPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Gets the current async video frame
  ffi.Pointer<obs_source_frame> obs_source_get_frame(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_frame(
      source,
    );
  }

  late final _obs_source_get_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_frame> Function(
              ffi.Pointer<obs_source_t>)>>('obs_source_get_frame');
  late final _obs_source_get_frame = _obs_source_get_framePtr.asFunction<
      ffi.Pointer<obs_source_frame> Function(ffi.Pointer<obs_source_t>)>();

  /// Releases the current async video frame
  void obs_source_release_frame(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    return _obs_source_release_frame(
      source,
      frame,
    );
  }

  late final _obs_source_release_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_frame>)>>('obs_source_release_frame');
  late final _obs_source_release_frame =
      _obs_source_release_framePtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_frame>)>();

  /// Default RGB filter handler for generic effect filters.  Processes the
  /// filter chain and renders them to texture if needed, then the filter is
  /// drawn with
  ///
  /// After calling this, set your parameters for the effect, then call
  /// obs_source_process_filter_end to draw the filter.
  ///
  /// Returns true if filtering should continue, false if the filter is bypassed
  /// for whatever reason.
  int obs_source_process_filter_begin(
    ffi.Pointer<obs_source_t> filter,
    int format,
    int allow_direct,
  ) {
    return _obs_source_process_filter_begin(
      filter,
      format,
      allow_direct,
    );
  }

  late final _obs_source_process_filter_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_source_t>, ffi.Int32,
              ffi.Int32)>>('obs_source_process_filter_begin');
  late final _obs_source_process_filter_begin =
      _obs_source_process_filter_beginPtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>, int, int)>();

  /// Draws the filter.
  ///
  /// Before calling this function, first call obs_source_process_filter_begin and
  /// then set the effect parameters, and then call this function to finalize the
  /// filter.
  void obs_source_process_filter_end(
    ffi.Pointer<obs_source_t> filter,
    ffi.Pointer<gs_effect_t> effect,
    int width,
    int height,
  ) {
    return _obs_source_process_filter_end(
      filter,
      effect,
      width,
      height,
    );
  }

  late final _obs_source_process_filter_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<gs_effect_t>,
              ffi.Uint32, ffi.Uint32)>>('obs_source_process_filter_end');
  late final _obs_source_process_filter_end =
      _obs_source_process_filter_endPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<gs_effect_t>, int, int)>();

  /// Draws the filter with a specific technique.
  ///
  /// Before calling this function, first call obs_source_process_filter_begin and
  /// then set the effect parameters, and then call this function to finalize the
  /// filter.
  void obs_source_process_filter_tech_end(
    ffi.Pointer<obs_source_t> filter,
    ffi.Pointer<gs_effect_t> effect,
    int width,
    int height,
    ffi.Pointer<ffi.Int8> tech_name,
  ) {
    return _obs_source_process_filter_tech_end(
      filter,
      effect,
      width,
      height,
      tech_name,
    );
  }

  late final _obs_source_process_filter_tech_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<gs_effect_t>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('obs_source_process_filter_tech_end');
  late final _obs_source_process_filter_tech_end =
      _obs_source_process_filter_tech_endPtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<gs_effect_t>,
              int, int, ffi.Pointer<ffi.Int8>)>();

  /// Skips the filter if the filter is invalid and cannot be rendered
  void obs_source_skip_video_filter(
    ffi.Pointer<obs_source_t> filter,
  ) {
    return _obs_source_skip_video_filter(
      filter,
    );
  }

  late final _obs_source_skip_video_filterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_skip_video_filter');
  late final _obs_source_skip_video_filter = _obs_source_skip_video_filterPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  /// Adds an active child source.  Must be called by parent sources on child
  /// sources when the child is added and active.  This ensures that the source is
  /// properly activated if the parent is active.
  ///
  /// @returns true if source can be added, false if it causes recursion
  int obs_source_add_active_child(
    ffi.Pointer<obs_source_t> parent,
    ffi.Pointer<obs_source_t> child,
  ) {
    return _obs_source_add_active_child(
      parent,
      child,
    );
  }

  late final _obs_source_add_active_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_source_add_active_child');
  late final _obs_source_add_active_child =
      _obs_source_add_active_childPtr.asFunction<
          int Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>)>();

  /// Removes an active child source.  Must be called by parent sources on child
  /// sources when the child is removed or inactive.  This ensures that the source
  /// is properly deactivated if the parent is no longer active.
  void obs_source_remove_active_child(
    ffi.Pointer<obs_source_t> parent,
    ffi.Pointer<obs_source_t> child,
  ) {
    return _obs_source_remove_active_child(
      parent,
      child,
    );
  }

  late final _obs_source_remove_active_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_source_remove_active_child');
  late final _obs_source_remove_active_child =
      _obs_source_remove_active_childPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>)>();

  /// Sends a mouse down/up event to a source
  void obs_source_send_mouse_click(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_mouse_event> event,
    int type,
    int mouse_up,
    int click_count,
  ) {
    return _obs_source_send_mouse_click(
      source,
      event,
      type,
      mouse_up,
      click_count,
    );
  }

  late final _obs_source_send_mouse_clickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_mouse_event>,
              ffi.Int32,
              ffi.Uint8,
              ffi.Uint32)>>('obs_source_send_mouse_click');
  late final _obs_source_send_mouse_click =
      _obs_source_send_mouse_clickPtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_mouse_event>,
              int, int, int)>();

  /// Sends a mouse move event to a source.
  void obs_source_send_mouse_move(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_mouse_event> event,
    int mouse_leave,
  ) {
    return _obs_source_send_mouse_move(
      source,
      event,
      mouse_leave,
    );
  }

  late final _obs_source_send_mouse_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_mouse_event>,
              ffi.Uint8)>>('obs_source_send_mouse_move');
  late final _obs_source_send_mouse_move =
      _obs_source_send_mouse_movePtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_mouse_event>, int)>();

  /// Sends a mouse wheel event to a source
  void obs_source_send_mouse_wheel(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_mouse_event> event,
    int x_delta,
    int y_delta,
  ) {
    return _obs_source_send_mouse_wheel(
      source,
      event,
      x_delta,
      y_delta,
    );
  }

  late final _obs_source_send_mouse_wheelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_mouse_event>,
              ffi.Int32,
              ffi.Int32)>>('obs_source_send_mouse_wheel');
  late final _obs_source_send_mouse_wheel =
      _obs_source_send_mouse_wheelPtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_mouse_event>,
              int, int)>();

  /// Sends a got-focus or lost-focus event to a source
  void obs_source_send_focus(
    ffi.Pointer<obs_source_t> source,
    int focus,
  ) {
    return _obs_source_send_focus(
      source,
      focus,
    );
  }

  late final _obs_source_send_focusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>, ffi.Uint8)>>('obs_source_send_focus');
  late final _obs_source_send_focus = _obs_source_send_focusPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  /// Sends a key up/down event to a source
  void obs_source_send_key_click(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_key_event> event,
    int key_up,
  ) {
    return _obs_source_send_key_click(
      source,
      event,
      key_up,
    );
  }

  late final _obs_source_send_key_clickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_key_event>,
              ffi.Uint8)>>('obs_source_send_key_click');
  late final _obs_source_send_key_click =
      _obs_source_send_key_clickPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_key_event>, int)>();

  /// Sets the default source flags.
  void obs_source_set_default_flags(
    ffi.Pointer<obs_source_t> source,
    int flags,
  ) {
    return _obs_source_set_default_flags(
      source,
      flags,
    );
  }

  late final _obs_source_set_default_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint32)>>('obs_source_set_default_flags');
  late final _obs_source_set_default_flags = _obs_source_set_default_flagsPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  /// Gets the base width for a source (not taking in to account filtering)
  int obs_source_get_base_width(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_base_width(
      source,
    );
  }

  late final _obs_source_get_base_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_base_width');
  late final _obs_source_get_base_width = _obs_source_get_base_widthPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Gets the base height for a source (not taking in to account filtering)
  int obs_source_get_base_height(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_base_height(
      source,
    );
  }

  late final _obs_source_get_base_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_base_height');
  late final _obs_source_get_base_height = _obs_source_get_base_heightPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  int obs_source_audio_pending(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_audio_pending(
      source,
    );
  }

  late final _obs_source_audio_pendingPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_audio_pending');
  late final _obs_source_audio_pending = _obs_source_audio_pendingPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  int obs_source_get_audio_timestamp(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_audio_timestamp(
      source,
    );
  }

  late final _obs_source_get_audio_timestampPtr = _lookup<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_audio_timestamp');
  late final _obs_source_get_audio_timestamp =
      _obs_source_get_audio_timestampPtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_get_audio_mix(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<obs_source_audio_mix> audio,
  ) {
    return _obs_source_get_audio_mix(
      source,
      audio,
    );
  }

  late final _obs_source_get_audio_mixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_audio_mix>)>>('obs_source_get_audio_mix');
  late final _obs_source_get_audio_mix =
      _obs_source_get_audio_mixPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_audio_mix>)>();

  void obs_source_set_async_unbuffered(
    ffi.Pointer<obs_source_t> source,
    int unbuffered,
  ) {
    return _obs_source_set_async_unbuffered(
      source,
      unbuffered,
    );
  }

  late final _obs_source_set_async_unbufferedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint8)>>('obs_source_set_async_unbuffered');
  late final _obs_source_set_async_unbuffered =
      _obs_source_set_async_unbufferedPtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_async_unbuffered(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_async_unbuffered(
      source,
    );
  }

  late final _obs_source_async_unbufferedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_async_unbuffered');
  late final _obs_source_async_unbuffered = _obs_source_async_unbufferedPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Used to decouple audio from video so that audio doesn't attempt to sync up
  /// with video.  I.E. Audio acts independently.  Only works when in unbuffered
  /// mode.
  void obs_source_set_async_decoupled(
    ffi.Pointer<obs_source_t> source,
    int decouple,
  ) {
    return _obs_source_set_async_decoupled(
      source,
      decouple,
    );
  }

  late final _obs_source_set_async_decoupledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint8)>>('obs_source_set_async_decoupled');
  late final _obs_source_set_async_decoupled =
      _obs_source_set_async_decoupledPtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_async_decoupled(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_async_decoupled(
      source,
    );
  }

  late final _obs_source_async_decoupledPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_async_decoupled');
  late final _obs_source_async_decoupled = _obs_source_async_decoupledPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_set_audio_active(
    ffi.Pointer<obs_source_t> source,
    int show1,
  ) {
    return _obs_source_set_audio_active(
      source,
      show1,
    );
  }

  late final _obs_source_set_audio_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint8)>>('obs_source_set_audio_active');
  late final _obs_source_set_audio_active = _obs_source_set_audio_activePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_audio_active(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_audio_active(
      source,
    );
  }

  late final _obs_source_audio_activePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_audio_active');
  late final _obs_source_audio_active = _obs_source_audio_activePtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  int obs_source_get_last_obs_version(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_get_last_obs_version(
      source,
    );
  }

  late final _obs_source_get_last_obs_versionPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_get_last_obs_version');
  late final _obs_source_get_last_obs_version =
      _obs_source_get_last_obs_versionPtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  /// Media controls
  void obs_source_media_play_pause(
    ffi.Pointer<obs_source_t> source,
    int pause,
  ) {
    return _obs_source_media_play_pause(
      source,
      pause,
    );
  }

  late final _obs_source_media_play_pausePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint8)>>('obs_source_media_play_pause');
  late final _obs_source_media_play_pause = _obs_source_media_play_pausePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  void obs_source_media_restart(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_media_restart(
      source,
    );
  }

  late final _obs_source_media_restartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_media_restart');
  late final _obs_source_media_restart = _obs_source_media_restartPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_media_stop(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_media_stop(
      source,
    );
  }

  late final _obs_source_media_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_media_stop');
  late final _obs_source_media_stop = _obs_source_media_stopPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_media_next(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_media_next(
      source,
    );
  }

  late final _obs_source_media_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_media_next');
  late final _obs_source_media_next = _obs_source_media_nextPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_media_previous(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_media_previous(
      source,
    );
  }

  late final _obs_source_media_previousPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_media_previous');
  late final _obs_source_media_previous = _obs_source_media_previousPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  int obs_source_media_get_duration(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_media_get_duration(
      source,
    );
  }

  late final _obs_source_media_get_durationPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_media_get_duration');
  late final _obs_source_media_get_duration = _obs_source_media_get_durationPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  int obs_source_media_get_time(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_media_get_time(
      source,
    );
  }

  late final _obs_source_media_get_timePtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_media_get_time');
  late final _obs_source_media_get_time = _obs_source_media_get_timePtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_media_set_time(
    ffi.Pointer<obs_source_t> source,
    int ms,
  ) {
    return _obs_source_media_set_time(
      source,
      ms,
    );
  }

  late final _obs_source_media_set_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Int64)>>('obs_source_media_set_time');
  late final _obs_source_media_set_time = _obs_source_media_set_timePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_source_media_get_state(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_media_get_state(
      source,
    );
  }

  late final _obs_source_media_get_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_media_get_state');
  late final _obs_source_media_get_state = _obs_source_media_get_statePtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_media_started(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_media_started(
      source,
    );
  }

  late final _obs_source_media_startedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_media_started');
  late final _obs_source_media_started = _obs_source_media_startedPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  void obs_source_media_ended(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_media_ended(
      source,
    );
  }

  late final _obs_source_media_endedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_source_media_ended');
  late final _obs_source_media_ended = _obs_source_media_endedPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  ffi.Pointer<obs_source_t> obs_transition_get_source(
    ffi.Pointer<obs_source_t> transition,
    int target,
  ) {
    return _obs_transition_get_source(
      transition,
      target,
    );
  }

  late final _obs_transition_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_source_t>,
              ffi.Int32)>>('obs_transition_get_source');
  late final _obs_transition_get_source =
      _obs_transition_get_sourcePtr.asFunction<
          ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_source_t>, int)>();

  void obs_transition_clear(
    ffi.Pointer<obs_source_t> transition,
  ) {
    return _obs_transition_clear(
      transition,
    );
  }

  late final _obs_transition_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_transition_clear');
  late final _obs_transition_clear = _obs_transition_clearPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  ffi.Pointer<obs_source_t> obs_transition_get_active_source(
    ffi.Pointer<obs_source_t> transition,
  ) {
    return _obs_transition_get_active_source(
      transition,
    );
  }

  late final _obs_transition_get_active_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_transition_get_active_source');
  late final _obs_transition_get_active_source =
      _obs_transition_get_active_sourcePtr.asFunction<
          ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_source_t>)>();

  int obs_transition_start(
    ffi.Pointer<obs_source_t> transition,
    int mode,
    int duration_ms,
    ffi.Pointer<obs_source_t> dest,
  ) {
    return _obs_transition_start(
      transition,
      mode,
      duration_ms,
      dest,
    );
  }

  late final _obs_transition_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_source_t>, ffi.Int32, ffi.Uint32,
              ffi.Pointer<obs_source_t>)>>('obs_transition_start');
  late final _obs_transition_start = _obs_transition_startPtr.asFunction<
      int Function(
          ffi.Pointer<obs_source_t>, int, int, ffi.Pointer<obs_source_t>)>();

  void obs_transition_set(
    ffi.Pointer<obs_source_t> transition,
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_transition_set(
      transition,
      source,
    );
  }

  late final _obs_transition_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_transition_set');
  late final _obs_transition_set = _obs_transition_setPtr.asFunction<
      void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>)>();

  void obs_transition_set_manual_time(
    ffi.Pointer<obs_source_t> transition,
    double t,
  ) {
    return _obs_transition_set_manual_time(
      transition,
      t,
    );
  }

  late final _obs_transition_set_manual_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Float)>>('obs_transition_set_manual_time');
  late final _obs_transition_set_manual_time =
      _obs_transition_set_manual_timePtr
          .asFunction<void Function(ffi.Pointer<obs_source_t>, double)>();

  void obs_transition_set_manual_torque(
    ffi.Pointer<obs_source_t> transition,
    double torque,
    double clamp,
  ) {
    return _obs_transition_set_manual_torque(
      transition,
      torque,
      clamp,
    );
  }

  late final _obs_transition_set_manual_torquePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, ffi.Float,
              ffi.Float)>>('obs_transition_set_manual_torque');
  late final _obs_transition_set_manual_torque =
      _obs_transition_set_manual_torquePtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>, double, double)>();

  void obs_transition_set_scale_type(
    ffi.Pointer<obs_source_t> transition,
    int type,
  ) {
    return _obs_transition_set_scale_type(
      transition,
      type,
    );
  }

  late final _obs_transition_set_scale_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Int32)>>('obs_transition_set_scale_type');
  late final _obs_transition_set_scale_type = _obs_transition_set_scale_typePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_transition_get_scale_type(
    ffi.Pointer<obs_source_t> transition,
  ) {
    return _obs_transition_get_scale_type(
      transition,
    );
  }

  late final _obs_transition_get_scale_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_transition_get_scale_type');
  late final _obs_transition_get_scale_type = _obs_transition_get_scale_typePtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_transition_set_alignment(
    ffi.Pointer<obs_source_t> transition,
    int alignment,
  ) {
    return _obs_transition_set_alignment(
      transition,
      alignment,
    );
  }

  late final _obs_transition_set_alignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Uint32)>>('obs_transition_set_alignment');
  late final _obs_transition_set_alignment = _obs_transition_set_alignmentPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_transition_get_alignment(
    ffi.Pointer<obs_source_t> transition,
  ) {
    return _obs_transition_get_alignment(
      transition,
    );
  }

  late final _obs_transition_get_alignmentPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_transition_get_alignment');
  late final _obs_transition_get_alignment = _obs_transition_get_alignmentPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  void obs_transition_set_size(
    ffi.Pointer<obs_source_t> transition,
    int cx,
    int cy,
  ) {
    return _obs_transition_set_size(
      transition,
      cx,
      cy,
    );
  }

  late final _obs_transition_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, ffi.Uint32,
              ffi.Uint32)>>('obs_transition_set_size');
  late final _obs_transition_set_size = _obs_transition_set_sizePtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int, int)>();

  void obs_transition_get_size(
    ffi.Pointer<obs_source_t> transition,
    ffi.Pointer<ffi.Uint32> cx,
    ffi.Pointer<ffi.Uint32> cy,
  ) {
    return _obs_transition_get_size(
      transition,
      cx,
      cy,
    );
  }

  late final _obs_transition_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('obs_transition_get_size');
  late final _obs_transition_get_size = _obs_transition_get_sizePtr.asFunction<
      void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  /// Enables fixed transitions (videos or specific types of transitions that
  /// are of fixed duration and linearly interpolated
  void obs_transition_enable_fixed(
    ffi.Pointer<obs_source_t> transition,
    int enable,
    int duration_ms,
  ) {
    return _obs_transition_enable_fixed(
      transition,
      enable,
      duration_ms,
    );
  }

  late final _obs_transition_enable_fixedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>, ffi.Uint8,
              ffi.Uint32)>>('obs_transition_enable_fixed');
  late final _obs_transition_enable_fixed = _obs_transition_enable_fixedPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>, int, int)>();

  int obs_transition_fixed(
    ffi.Pointer<obs_source_t> transition,
  ) {
    return _obs_transition_fixed(
      transition,
    );
  }

  late final _obs_transition_fixedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_transition_fixed');
  late final _obs_transition_fixed = _obs_transition_fixedPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  double obs_transition_get_time(
    ffi.Pointer<obs_source_t> transition,
  ) {
    return _obs_transition_get_time(
      transition,
    );
  }

  late final _obs_transition_get_timePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<obs_source_t>)>>(
      'obs_transition_get_time');
  late final _obs_transition_get_time = _obs_transition_get_timePtr
      .asFunction<double Function(ffi.Pointer<obs_source_t>)>();

  void obs_transition_force_stop(
    ffi.Pointer<obs_source_t> transition,
  ) {
    return _obs_transition_force_stop(
      transition,
    );
  }

  late final _obs_transition_force_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_source_t>)>>(
          'obs_transition_force_stop');
  late final _obs_transition_force_stop = _obs_transition_force_stopPtr
      .asFunction<void Function(ffi.Pointer<obs_source_t>)>();

  void obs_transition_video_render(
    ffi.Pointer<obs_source_t> transition,
    obs_transition_video_render_callback_t callback,
  ) {
    return _obs_transition_video_render(
      transition,
      callback,
    );
  }

  late final _obs_transition_video_renderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<obs_source_t>,
                  obs_transition_video_render_callback_t)>>(
      'obs_transition_video_render');
  late final _obs_transition_video_render =
      _obs_transition_video_renderPtr.asFunction<
          void Function(ffi.Pointer<obs_source_t>,
              obs_transition_video_render_callback_t)>();

  /// Directly renders its sub-source instead of to texture.  Returns false if no
  /// longer transitioning
  int obs_transition_video_render_direct(
    ffi.Pointer<obs_source_t> transition,
    int target,
  ) {
    return _obs_transition_video_render_direct(
      transition,
      target,
    );
  }

  late final _obs_transition_video_render_directPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_source_t>,
              ffi.Int32)>>('obs_transition_video_render_direct');
  late final _obs_transition_video_render_direct =
      _obs_transition_video_render_directPtr
          .asFunction<int Function(ffi.Pointer<obs_source_t>, int)>();

  int obs_transition_audio_render(
    ffi.Pointer<obs_source_t> transition,
    ffi.Pointer<ffi.Uint64> ts_out,
    ffi.Pointer<obs_source_audio_mix> audio,
    int mixers,
    int channels,
    int sample_rate,
    obs_transition_audio_mix_callback_t mix_a_callback,
    obs_transition_audio_mix_callback_t mix_b_callback,
  ) {
    return _obs_transition_audio_render(
      transition,
      ts_out,
      audio,
      mixers,
      channels,
      sample_rate,
      mix_a_callback,
      mix_b_callback,
    );
  }

  late final _obs_transition_audio_renderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<obs_source_t>,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<obs_source_audio_mix>,
                  ffi.Uint32,
                  size_t,
                  size_t,
                  obs_transition_audio_mix_callback_t,
                  obs_transition_audio_mix_callback_t)>>(
      'obs_transition_audio_render');
  late final _obs_transition_audio_render =
      _obs_transition_audio_renderPtr.asFunction<
          int Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<obs_source_audio_mix>,
              int,
              int,
              int,
              obs_transition_audio_mix_callback_t,
              obs_transition_audio_mix_callback_t)>();

  void obs_transition_swap_begin(
    ffi.Pointer<obs_source_t> tr_dest,
    ffi.Pointer<obs_source_t> tr_source,
  ) {
    return _obs_transition_swap_begin(
      tr_dest,
      tr_source,
    );
  }

  late final _obs_transition_swap_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_transition_swap_begin');
  late final _obs_transition_swap_begin =
      _obs_transition_swap_beginPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>)>();

  void obs_transition_swap_end(
    ffi.Pointer<obs_source_t> tr_dest,
    ffi.Pointer<obs_source_t> tr_source,
  ) {
    return _obs_transition_swap_end(
      tr_dest,
      tr_source,
    );
  }

  late final _obs_transition_swap_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_t>,
              ffi.Pointer<obs_source_t>)>>('obs_transition_swap_end');
  late final _obs_transition_swap_end = _obs_transition_swap_endPtr.asFunction<
      void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>)>();

  /// Creates a scene.
  ///
  /// A scene is a source which is a container of other sources with specific
  /// display orientations.  Scenes can also be used like any other source.
  ffi.Pointer<obs_scene_t> obs_scene_create(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_scene_create(
      name,
    );
  }

  late final _obs_scene_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_scene_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_scene_create');
  late final _obs_scene_create = _obs_scene_createPtr
      .asFunction<ffi.Pointer<obs_scene_t> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_scene_t> obs_scene_create_private(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_scene_create_private(
      name,
    );
  }

  late final _obs_scene_create_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_scene_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_scene_create_private');
  late final _obs_scene_create_private = _obs_scene_create_privatePtr
      .asFunction<ffi.Pointer<obs_scene_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Duplicates a scene.
  ffi.Pointer<obs_scene_t> obs_scene_duplicate(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<ffi.Int8> name,
    int type,
  ) {
    return _obs_scene_duplicate(
      scene,
      name,
      type,
    );
  }

  late final _obs_scene_duplicatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_scene_t> Function(ffi.Pointer<obs_scene_t>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('obs_scene_duplicate');
  late final _obs_scene_duplicate = _obs_scene_duplicatePtr.asFunction<
      ffi.Pointer<obs_scene_t> Function(
          ffi.Pointer<obs_scene_t>, ffi.Pointer<ffi.Int8>, int)>();

  void obs_scene_addref(
    ffi.Pointer<obs_scene_t> scene,
  ) {
    return _obs_scene_addref(
      scene,
    );
  }

  late final _obs_scene_addrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_scene_t>)>>(
          'obs_scene_addref');
  late final _obs_scene_addref = _obs_scene_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_scene_t>)>();

  void obs_scene_release(
    ffi.Pointer<obs_scene_t> scene,
  ) {
    return _obs_scene_release(
      scene,
    );
  }

  late final _obs_scene_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_scene_t>)>>(
          'obs_scene_release');
  late final _obs_scene_release = _obs_scene_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_scene_t>)>();

  /// Gets the scene's source context
  ffi.Pointer<obs_source_t> obs_scene_get_source(
    ffi.Pointer<obs_scene_t> scene,
  ) {
    return _obs_scene_get_source(
      scene,
    );
  }

  late final _obs_scene_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_scene_t>)>>('obs_scene_get_source');
  late final _obs_scene_get_source = _obs_scene_get_sourcePtr.asFunction<
      ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_scene_t>)>();

  /// Gets the scene from its source, or NULL if not a scene
  ffi.Pointer<obs_scene_t> obs_scene_from_source(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_scene_from_source(
      source,
    );
  }

  late final _obs_scene_from_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_scene_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_scene_from_source');
  late final _obs_scene_from_source = _obs_scene_from_sourcePtr.asFunction<
      ffi.Pointer<obs_scene_t> Function(ffi.Pointer<obs_source_t>)>();

  /// Determines whether a source is within a scene
  ffi.Pointer<obs_sceneitem_t> obs_scene_find_source(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_scene_find_source(
      scene,
      name,
    );
  }

  late final _obs_scene_find_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(ffi.Pointer<obs_scene_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_scene_find_source');
  late final _obs_scene_find_source = _obs_scene_find_sourcePtr.asFunction<
      ffi.Pointer<obs_sceneitem_t> Function(
          ffi.Pointer<obs_scene_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_sceneitem_t> obs_scene_find_source_recursive(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_scene_find_source_recursive(
      scene,
      name,
    );
  }

  late final _obs_scene_find_source_recursivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(ffi.Pointer<obs_scene_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_scene_find_source_recursive');
  late final _obs_scene_find_source_recursive =
      _obs_scene_find_source_recursivePtr.asFunction<
          ffi.Pointer<obs_sceneitem_t> Function(
              ffi.Pointer<obs_scene_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_sceneitem_t> obs_scene_find_sceneitem_by_id(
    ffi.Pointer<obs_scene_t> scene,
    int id,
  ) {
    return _obs_scene_find_sceneitem_by_id(
      scene,
      id,
    );
  }

  late final _obs_scene_find_sceneitem_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(ffi.Pointer<obs_scene_t>,
              ffi.Int64)>>('obs_scene_find_sceneitem_by_id');
  late final _obs_scene_find_sceneitem_by_id =
      _obs_scene_find_sceneitem_by_idPtr.asFunction<
          ffi.Pointer<obs_sceneitem_t> Function(
              ffi.Pointer<obs_scene_t>, int)>();

  /// Enumerates sources within a scene
  void obs_scene_enum_items(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Uint8 Function(ffi.Pointer<obs_scene_t>,
                    ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_scene_enum_items(
      scene,
      callback,
      param,
    );
  }

  late final _obs_scene_enum_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_scene_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<obs_scene_t>,
                          ffi.Pointer<obs_sceneitem_t>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_scene_enum_items');
  late final _obs_scene_enum_items = _obs_scene_enum_itemsPtr.asFunction<
      void Function(
          ffi.Pointer<obs_scene_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<obs_scene_t>,
                      ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int obs_scene_reorder_items(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<ffi.Pointer<obs_sceneitem_t>> item_order,
    int item_order_size,
  ) {
    return _obs_scene_reorder_items(
      scene,
      item_order,
      item_order_size,
    );
  }

  late final _obs_scene_reorder_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<obs_scene_t>,
              ffi.Pointer<ffi.Pointer<obs_sceneitem_t>>,
              size_t)>>('obs_scene_reorder_items');
  late final _obs_scene_reorder_items = _obs_scene_reorder_itemsPtr.asFunction<
      int Function(ffi.Pointer<obs_scene_t>,
          ffi.Pointer<ffi.Pointer<obs_sceneitem_t>>, int)>();

  int obs_scene_reorder_items2(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<obs_sceneitem_order_info> item_order,
    int item_order_size,
  ) {
    return _obs_scene_reorder_items2(
      scene,
      item_order,
      item_order_size,
    );
  }

  late final _obs_scene_reorder_items2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<obs_scene_t>,
              ffi.Pointer<obs_sceneitem_order_info>,
              size_t)>>('obs_scene_reorder_items2');
  late final _obs_scene_reorder_items2 =
      _obs_scene_reorder_items2Ptr.asFunction<
          int Function(ffi.Pointer<obs_scene_t>,
              ffi.Pointer<obs_sceneitem_order_info>, int)>();

  /// Adds/creates a new scene item for a source
  ffi.Pointer<obs_sceneitem_t> obs_scene_add(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_scene_add(
      scene,
      source,
    );
  }

  late final _obs_scene_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(ffi.Pointer<obs_scene_t>,
              ffi.Pointer<obs_source_t>)>>('obs_scene_add');
  late final _obs_scene_add = _obs_scene_addPtr.asFunction<
      ffi.Pointer<obs_sceneitem_t> Function(
          ffi.Pointer<obs_scene_t>, ffi.Pointer<obs_source_t>)>();

  void obs_scene_atomic_update(
    ffi.Pointer<obs_scene_t> scene,
    obs_scene_atomic_update_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _obs_scene_atomic_update(
      scene,
      func,
      data,
    );
  }

  late final _obs_scene_atomic_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_scene_t>,
              obs_scene_atomic_update_func,
              ffi.Pointer<ffi.Void>)>>('obs_scene_atomic_update');
  late final _obs_scene_atomic_update = _obs_scene_atomic_updatePtr.asFunction<
      void Function(ffi.Pointer<obs_scene_t>, obs_scene_atomic_update_func,
          ffi.Pointer<ffi.Void>)>();

  void obs_sceneitem_addref(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_addref(
      item,
    );
  }

  late final _obs_sceneitem_addrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_addref');
  late final _obs_sceneitem_addref = _obs_sceneitem_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_release(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_release(
      item,
    );
  }

  late final _obs_sceneitem_releasePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_release');
  late final _obs_sceneitem_release = _obs_sceneitem_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>)>();

  /// Removes a scene item.
  void obs_sceneitem_remove(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_remove(
      item,
    );
  }

  late final _obs_sceneitem_removePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_remove');
  late final _obs_sceneitem_remove = _obs_sceneitem_removePtr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>)>();

  /// Gets the scene parent associated with the scene item.
  ffi.Pointer<obs_scene_t> obs_sceneitem_get_scene(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_scene(
      item,
    );
  }

  late final _obs_sceneitem_get_scenePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_scene_t> Function(
              ffi.Pointer<obs_sceneitem_t>)>>('obs_sceneitem_get_scene');
  late final _obs_sceneitem_get_scene = _obs_sceneitem_get_scenePtr.asFunction<
      ffi.Pointer<obs_scene_t> Function(ffi.Pointer<obs_sceneitem_t>)>();

  /// Gets the source of a scene item.
  ffi.Pointer<obs_source_t> obs_sceneitem_get_source(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_source(
      item,
    );
  }

  late final _obs_sceneitem_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_source_t> Function(
              ffi.Pointer<obs_sceneitem_t>)>>('obs_sceneitem_get_source');
  late final _obs_sceneitem_get_source =
      _obs_sceneitem_get_sourcePtr.asFunction<
          ffi.Pointer<obs_source_t> Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_select(
    ffi.Pointer<obs_sceneitem_t> item,
    int select,
  ) {
    return _obs_sceneitem_select(
      item,
      select,
    );
  }

  late final _obs_sceneitem_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Uint8)>>('obs_sceneitem_select');
  late final _obs_sceneitem_select = _obs_sceneitem_selectPtr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  int obs_sceneitem_selected(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_selected(
      item,
    );
  }

  late final _obs_sceneitem_selectedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_selected');
  late final _obs_sceneitem_selected = _obs_sceneitem_selectedPtr
      .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>)>();

  int obs_sceneitem_locked(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_locked(
      item,
    );
  }

  late final _obs_sceneitem_lockedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_locked');
  late final _obs_sceneitem_locked = _obs_sceneitem_lockedPtr
      .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>)>();

  int obs_sceneitem_set_locked(
    ffi.Pointer<obs_sceneitem_t> item,
    int lock,
  ) {
    return _obs_sceneitem_set_locked(
      item,
      lock,
    );
  }

  late final _obs_sceneitem_set_lockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Uint8)>>('obs_sceneitem_set_locked');
  late final _obs_sceneitem_set_locked = _obs_sceneitem_set_lockedPtr
      .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  void obs_sceneitem_set_pos(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<vec2> pos,
  ) {
    return _obs_sceneitem_set_pos(
      item,
      pos,
    );
  }

  late final _obs_sceneitem_set_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<vec2>)>>('obs_sceneitem_set_pos');
  late final _obs_sceneitem_set_pos = _obs_sceneitem_set_posPtr.asFunction<
      void Function(ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<vec2>)>();

  void obs_sceneitem_set_rot(
    ffi.Pointer<obs_sceneitem_t> item,
    double rot_deg,
  ) {
    return _obs_sceneitem_set_rot(
      item,
      rot_deg,
    );
  }

  late final _obs_sceneitem_set_rotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Float)>>('obs_sceneitem_set_rot');
  late final _obs_sceneitem_set_rot = _obs_sceneitem_set_rotPtr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>, double)>();

  void obs_sceneitem_set_scale(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<vec2> scale,
  ) {
    return _obs_sceneitem_set_scale(
      item,
      scale,
    );
  }

  late final _obs_sceneitem_set_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<vec2>)>>('obs_sceneitem_set_scale');
  late final _obs_sceneitem_set_scale = _obs_sceneitem_set_scalePtr.asFunction<
      void Function(ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<vec2>)>();

  void obs_sceneitem_set_alignment(
    ffi.Pointer<obs_sceneitem_t> item,
    int alignment,
  ) {
    return _obs_sceneitem_set_alignment(
      item,
      alignment,
    );
  }

  late final _obs_sceneitem_set_alignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Uint32)>>('obs_sceneitem_set_alignment');
  late final _obs_sceneitem_set_alignment = _obs_sceneitem_set_alignmentPtr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  void obs_sceneitem_set_order(
    ffi.Pointer<obs_sceneitem_t> item,
    int movement,
  ) {
    return _obs_sceneitem_set_order(
      item,
      movement,
    );
  }

  late final _obs_sceneitem_set_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Int32)>>('obs_sceneitem_set_order');
  late final _obs_sceneitem_set_order = _obs_sceneitem_set_orderPtr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  void obs_sceneitem_set_order_position(
    ffi.Pointer<obs_sceneitem_t> item,
    int position,
  ) {
    return _obs_sceneitem_set_order_position(
      item,
      position,
    );
  }

  late final _obs_sceneitem_set_order_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Int32)>>('obs_sceneitem_set_order_position');
  late final _obs_sceneitem_set_order_position =
      _obs_sceneitem_set_order_positionPtr
          .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  void obs_sceneitem_set_bounds_type(
    ffi.Pointer<obs_sceneitem_t> item,
    int type,
  ) {
    return _obs_sceneitem_set_bounds_type(
      item,
      type,
    );
  }

  late final _obs_sceneitem_set_bounds_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Int32)>>('obs_sceneitem_set_bounds_type');
  late final _obs_sceneitem_set_bounds_type = _obs_sceneitem_set_bounds_typePtr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  void obs_sceneitem_set_bounds_alignment(
    ffi.Pointer<obs_sceneitem_t> item,
    int alignment,
  ) {
    return _obs_sceneitem_set_bounds_alignment(
      item,
      alignment,
    );
  }

  late final _obs_sceneitem_set_bounds_alignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Uint32)>>('obs_sceneitem_set_bounds_alignment');
  late final _obs_sceneitem_set_bounds_alignment =
      _obs_sceneitem_set_bounds_alignmentPtr
          .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  void obs_sceneitem_set_bounds(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<vec2> bounds,
  ) {
    return _obs_sceneitem_set_bounds(
      item,
      bounds,
    );
  }

  late final _obs_sceneitem_set_boundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<vec2>)>>('obs_sceneitem_set_bounds');
  late final _obs_sceneitem_set_bounds =
      _obs_sceneitem_set_boundsPtr.asFunction<
          void Function(ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<vec2>)>();

  int obs_sceneitem_get_id(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_id(
      item,
    );
  }

  late final _obs_sceneitem_get_idPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_get_id');
  late final _obs_sceneitem_get_id = _obs_sceneitem_get_idPtr
      .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_get_pos(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<vec2> pos,
  ) {
    return _obs_sceneitem_get_pos(
      item,
      pos,
    );
  }

  late final _obs_sceneitem_get_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<vec2>)>>('obs_sceneitem_get_pos');
  late final _obs_sceneitem_get_pos = _obs_sceneitem_get_posPtr.asFunction<
      void Function(ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<vec2>)>();

  double obs_sceneitem_get_rot(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_rot(
      item,
    );
  }

  late final _obs_sceneitem_get_rotPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_get_rot');
  late final _obs_sceneitem_get_rot = _obs_sceneitem_get_rotPtr
      .asFunction<double Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_get_scale(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<vec2> scale,
  ) {
    return _obs_sceneitem_get_scale(
      item,
      scale,
    );
  }

  late final _obs_sceneitem_get_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<vec2>)>>('obs_sceneitem_get_scale');
  late final _obs_sceneitem_get_scale = _obs_sceneitem_get_scalePtr.asFunction<
      void Function(ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<vec2>)>();

  int obs_sceneitem_get_alignment(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_alignment(
      item,
    );
  }

  late final _obs_sceneitem_get_alignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<obs_sceneitem_t>)>>('obs_sceneitem_get_alignment');
  late final _obs_sceneitem_get_alignment = _obs_sceneitem_get_alignmentPtr
      .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>)>();

  int obs_sceneitem_get_bounds_type(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_bounds_type(
      item,
    );
  }

  late final _obs_sceneitem_get_bounds_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_get_bounds_type');
  late final _obs_sceneitem_get_bounds_type = _obs_sceneitem_get_bounds_typePtr
      .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>)>();

  int obs_sceneitem_get_bounds_alignment(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_bounds_alignment(
      item,
    );
  }

  late final _obs_sceneitem_get_bounds_alignmentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_get_bounds_alignment');
  late final _obs_sceneitem_get_bounds_alignment =
      _obs_sceneitem_get_bounds_alignmentPtr
          .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_get_bounds(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<vec2> bounds,
  ) {
    return _obs_sceneitem_get_bounds(
      item,
      bounds,
    );
  }

  late final _obs_sceneitem_get_boundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<vec2>)>>('obs_sceneitem_get_bounds');
  late final _obs_sceneitem_get_bounds =
      _obs_sceneitem_get_boundsPtr.asFunction<
          void Function(ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<vec2>)>();

  void obs_sceneitem_get_info(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<obs_transform_info> info,
  ) {
    return _obs_sceneitem_get_info(
      item,
      info,
    );
  }

  late final _obs_sceneitem_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<obs_transform_info>)>>('obs_sceneitem_get_info');
  late final _obs_sceneitem_get_info = _obs_sceneitem_get_infoPtr.asFunction<
      void Function(
          ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<obs_transform_info>)>();

  void obs_sceneitem_set_info(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<obs_transform_info> info,
  ) {
    return _obs_sceneitem_set_info(
      item,
      info,
    );
  }

  late final _obs_sceneitem_set_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<obs_transform_info>)>>('obs_sceneitem_set_info');
  late final _obs_sceneitem_set_info = _obs_sceneitem_set_infoPtr.asFunction<
      void Function(
          ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<obs_transform_info>)>();

  void obs_sceneitem_get_draw_transform(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<matrix4> transform,
  ) {
    return _obs_sceneitem_get_draw_transform(
      item,
      transform,
    );
  }

  late final _obs_sceneitem_get_draw_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<matrix4>)>>('obs_sceneitem_get_draw_transform');
  late final _obs_sceneitem_get_draw_transform =
      _obs_sceneitem_get_draw_transformPtr.asFunction<
          void Function(ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<matrix4>)>();

  void obs_sceneitem_get_box_transform(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<matrix4> transform,
  ) {
    return _obs_sceneitem_get_box_transform(
      item,
      transform,
    );
  }

  late final _obs_sceneitem_get_box_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<matrix4>)>>('obs_sceneitem_get_box_transform');
  late final _obs_sceneitem_get_box_transform =
      _obs_sceneitem_get_box_transformPtr.asFunction<
          void Function(ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<matrix4>)>();

  void obs_sceneitem_get_box_scale(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<vec2> scale,
  ) {
    return _obs_sceneitem_get_box_scale(
      item,
      scale,
    );
  }

  late final _obs_sceneitem_get_box_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<vec2>)>>('obs_sceneitem_get_box_scale');
  late final _obs_sceneitem_get_box_scale =
      _obs_sceneitem_get_box_scalePtr.asFunction<
          void Function(ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<vec2>)>();

  int obs_sceneitem_visible(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_visible(
      item,
    );
  }

  late final _obs_sceneitem_visiblePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_visible');
  late final _obs_sceneitem_visible = _obs_sceneitem_visiblePtr
      .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>)>();

  int obs_sceneitem_set_visible(
    ffi.Pointer<obs_sceneitem_t> item,
    int visible,
  ) {
    return _obs_sceneitem_set_visible(
      item,
      visible,
    );
  }

  late final _obs_sceneitem_set_visiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Uint8)>>('obs_sceneitem_set_visible');
  late final _obs_sceneitem_set_visible = _obs_sceneitem_set_visiblePtr
      .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  void obs_sceneitem_set_crop(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<obs_sceneitem_crop> crop,
  ) {
    return _obs_sceneitem_set_crop(
      item,
      crop,
    );
  }

  late final _obs_sceneitem_set_cropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<obs_sceneitem_crop>)>>('obs_sceneitem_set_crop');
  late final _obs_sceneitem_set_crop = _obs_sceneitem_set_cropPtr.asFunction<
      void Function(
          ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<obs_sceneitem_crop>)>();

  void obs_sceneitem_get_crop(
    ffi.Pointer<obs_sceneitem_t> item,
    ffi.Pointer<obs_sceneitem_crop> crop,
  ) {
    return _obs_sceneitem_get_crop(
      item,
      crop,
    );
  }

  late final _obs_sceneitem_get_cropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<obs_sceneitem_crop>)>>('obs_sceneitem_get_crop');
  late final _obs_sceneitem_get_crop = _obs_sceneitem_get_cropPtr.asFunction<
      void Function(
          ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<obs_sceneitem_crop>)>();

  void obs_sceneitem_set_scale_filter(
    ffi.Pointer<obs_sceneitem_t> item,
    int filter,
  ) {
    return _obs_sceneitem_set_scale_filter(
      item,
      filter,
    );
  }

  late final _obs_sceneitem_set_scale_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Int32)>>('obs_sceneitem_set_scale_filter');
  late final _obs_sceneitem_set_scale_filter =
      _obs_sceneitem_set_scale_filterPtr
          .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  int obs_sceneitem_get_scale_filter(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_scale_filter(
      item,
    );
  }

  late final _obs_sceneitem_get_scale_filterPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_get_scale_filter');
  late final _obs_sceneitem_get_scale_filter =
      _obs_sceneitem_get_scale_filterPtr
          .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_force_update_transform(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_force_update_transform(
      item,
    );
  }

  late final _obs_sceneitem_force_update_transformPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_force_update_transform');
  late final _obs_sceneitem_force_update_transform =
      _obs_sceneitem_force_update_transformPtr
          .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_defer_update_begin(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_defer_update_begin(
      item,
    );
  }

  late final _obs_sceneitem_defer_update_beginPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_defer_update_begin');
  late final _obs_sceneitem_defer_update_begin =
      _obs_sceneitem_defer_update_beginPtr
          .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_defer_update_end(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_defer_update_end(
      item,
    );
  }

  late final _obs_sceneitem_defer_update_endPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_defer_update_end');
  late final _obs_sceneitem_defer_update_end =
      _obs_sceneitem_defer_update_endPtr
          .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>)>();

  /// Gets private front-end settings data.  This data is saved/loaded
  /// automatically.  Returns an incremented reference.
  ffi.Pointer<obs_data_t> obs_sceneitem_get_private_settings(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_private_settings(
      item,
    );
  }

  late final _obs_sceneitem_get_private_settingsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_get_private_settings');
  late final _obs_sceneitem_get_private_settings =
      _obs_sceneitem_get_private_settingsPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_sceneitem_t>)>();

  ffi.Pointer<obs_sceneitem_t> obs_scene_add_group(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_scene_add_group(
      scene,
      name,
    );
  }

  late final _obs_scene_add_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(ffi.Pointer<obs_scene_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_scene_add_group');
  late final _obs_scene_add_group = _obs_scene_add_groupPtr.asFunction<
      ffi.Pointer<obs_sceneitem_t> Function(
          ffi.Pointer<obs_scene_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_sceneitem_t> obs_scene_insert_group(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<obs_sceneitem_t>> items,
    int count,
  ) {
    return _obs_scene_insert_group(
      scene,
      name,
      items,
      count,
    );
  }

  late final _obs_scene_insert_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(
              ffi.Pointer<obs_scene_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<obs_sceneitem_t>>,
              size_t)>>('obs_scene_insert_group');
  late final _obs_scene_insert_group = _obs_scene_insert_groupPtr.asFunction<
      ffi.Pointer<obs_sceneitem_t> Function(
          ffi.Pointer<obs_scene_t>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<obs_sceneitem_t>>,
          int)>();

  ffi.Pointer<obs_sceneitem_t> obs_scene_add_group2(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<ffi.Int8> name,
    int signal,
  ) {
    return _obs_scene_add_group2(
      scene,
      name,
      signal,
    );
  }

  late final _obs_scene_add_group2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(ffi.Pointer<obs_scene_t>,
              ffi.Pointer<ffi.Int8>, ffi.Uint8)>>('obs_scene_add_group2');
  late final _obs_scene_add_group2 = _obs_scene_add_group2Ptr.asFunction<
      ffi.Pointer<obs_sceneitem_t> Function(
          ffi.Pointer<obs_scene_t>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<obs_sceneitem_t> obs_scene_insert_group2(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<obs_sceneitem_t>> items,
    int count,
    int signal,
  ) {
    return _obs_scene_insert_group2(
      scene,
      name,
      items,
      count,
      signal,
    );
  }

  late final _obs_scene_insert_group2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(
              ffi.Pointer<obs_scene_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<obs_sceneitem_t>>,
              size_t,
              ffi.Uint8)>>('obs_scene_insert_group2');
  late final _obs_scene_insert_group2 = _obs_scene_insert_group2Ptr.asFunction<
      ffi.Pointer<obs_sceneitem_t> Function(
          ffi.Pointer<obs_scene_t>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<obs_sceneitem_t>>,
          int,
          int)>();

  ffi.Pointer<obs_sceneitem_t> obs_scene_get_group(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_scene_get_group(
      scene,
      name,
    );
  }

  late final _obs_scene_get_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(ffi.Pointer<obs_scene_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_scene_get_group');
  late final _obs_scene_get_group = _obs_scene_get_groupPtr.asFunction<
      ffi.Pointer<obs_sceneitem_t> Function(
          ffi.Pointer<obs_scene_t>, ffi.Pointer<ffi.Int8>)>();

  int obs_sceneitem_is_group(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_is_group(
      item,
    );
  }

  late final _obs_sceneitem_is_groupPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_is_group');
  late final _obs_sceneitem_is_group = _obs_sceneitem_is_groupPtr
      .asFunction<int Function(ffi.Pointer<obs_sceneitem_t>)>();

  ffi.Pointer<obs_scene_t> obs_sceneitem_group_get_scene(
    ffi.Pointer<obs_sceneitem_t> group,
  ) {
    return _obs_sceneitem_group_get_scene(
      group,
    );
  }

  late final _obs_sceneitem_group_get_scenePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_scene_t> Function(
              ffi.Pointer<obs_sceneitem_t>)>>('obs_sceneitem_group_get_scene');
  late final _obs_sceneitem_group_get_scene =
      _obs_sceneitem_group_get_scenePtr.asFunction<
          ffi.Pointer<obs_scene_t> Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_group_ungroup(
    ffi.Pointer<obs_sceneitem_t> group,
  ) {
    return _obs_sceneitem_group_ungroup(
      group,
    );
  }

  late final _obs_sceneitem_group_ungroupPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_group_ungroup');
  late final _obs_sceneitem_group_ungroup = _obs_sceneitem_group_ungroupPtr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_group_ungroup2(
    ffi.Pointer<obs_sceneitem_t> group,
    int signal,
  ) {
    return _obs_sceneitem_group_ungroup2(
      group,
      signal,
    );
  }

  late final _obs_sceneitem_group_ungroup2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Uint8)>>('obs_sceneitem_group_ungroup2');
  late final _obs_sceneitem_group_ungroup2 = _obs_sceneitem_group_ungroup2Ptr
      .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>, int)>();

  void obs_sceneitem_group_add_item(
    ffi.Pointer<obs_sceneitem_t> group,
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_group_add_item(
      group,
      item,
    );
  }

  late final _obs_sceneitem_group_add_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<obs_sceneitem_t>)>>('obs_sceneitem_group_add_item');
  late final _obs_sceneitem_group_add_item =
      _obs_sceneitem_group_add_itemPtr.asFunction<
          void Function(
              ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_group_remove_item(
    ffi.Pointer<obs_sceneitem_t> group,
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_group_remove_item(
      group,
      item,
    );
  }

  late final _obs_sceneitem_group_remove_itemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_group_remove_item');
  late final _obs_sceneitem_group_remove_item =
      _obs_sceneitem_group_remove_itemPtr.asFunction<
          void Function(
              ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<obs_sceneitem_t>)>();

  ffi.Pointer<obs_sceneitem_t> obs_sceneitem_get_group(
    ffi.Pointer<obs_scene_t> scene,
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_get_group(
      scene,
      item,
    );
  }

  late final _obs_sceneitem_get_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_sceneitem_t> Function(ffi.Pointer<obs_scene_t>,
              ffi.Pointer<obs_sceneitem_t>)>>('obs_sceneitem_get_group');
  late final _obs_sceneitem_get_group = _obs_sceneitem_get_groupPtr.asFunction<
      ffi.Pointer<obs_sceneitem_t> Function(
          ffi.Pointer<obs_scene_t>, ffi.Pointer<obs_sceneitem_t>)>();

  int obs_source_is_group(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_source_is_group(
      source,
    );
  }

  late final _obs_source_is_groupPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_source_t>)>>(
      'obs_source_is_group');
  late final _obs_source_is_group = _obs_source_is_groupPtr
      .asFunction<int Function(ffi.Pointer<obs_source_t>)>();

  int obs_scene_is_group(
    ffi.Pointer<obs_scene_t> scene,
  ) {
    return _obs_scene_is_group(
      scene,
    );
  }

  late final _obs_scene_is_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_scene_t>)>>(
          'obs_scene_is_group');
  late final _obs_scene_is_group = _obs_scene_is_groupPtr
      .asFunction<int Function(ffi.Pointer<obs_scene_t>)>();

  void obs_sceneitem_group_enum_items(
    ffi.Pointer<obs_sceneitem_t> group,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Uint8 Function(ffi.Pointer<obs_scene_t>,
                    ffi.Pointer<obs_sceneitem_t>, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_sceneitem_group_enum_items(
      group,
      callback,
      param,
    );
  }

  late final _obs_sceneitem_group_enum_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<obs_scene_t>,
                          ffi.Pointer<obs_sceneitem_t>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_sceneitem_group_enum_items');
  late final _obs_sceneitem_group_enum_items =
      _obs_sceneitem_group_enum_itemsPtr.asFunction<
          void Function(
              ffi.Pointer<obs_sceneitem_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<obs_scene_t>,
                          ffi.Pointer<obs_sceneitem_t>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  /// Gets the group from its source, or NULL if not a group
  ffi.Pointer<obs_scene_t> obs_group_from_source(
    ffi.Pointer<obs_source_t> source,
  ) {
    return _obs_group_from_source(
      source,
    );
  }

  late final _obs_group_from_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_scene_t> Function(
              ffi.Pointer<obs_source_t>)>>('obs_group_from_source');
  late final _obs_group_from_source = _obs_group_from_sourcePtr.asFunction<
      ffi.Pointer<obs_scene_t> Function(ffi.Pointer<obs_source_t>)>();

  void obs_sceneitem_defer_group_resize_begin(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_defer_group_resize_begin(
      item,
    );
  }

  late final _obs_sceneitem_defer_group_resize_beginPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_defer_group_resize_begin');
  late final _obs_sceneitem_defer_group_resize_begin =
      _obs_sceneitem_defer_group_resize_beginPtr
          .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>)>();

  void obs_sceneitem_defer_group_resize_end(
    ffi.Pointer<obs_sceneitem_t> item,
  ) {
    return _obs_sceneitem_defer_group_resize_end(
      item,
    );
  }

  late final _obs_sceneitem_defer_group_resize_endPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_sceneitem_t>)>>(
      'obs_sceneitem_defer_group_resize_end');
  late final _obs_sceneitem_defer_group_resize_end =
      _obs_sceneitem_defer_group_resize_endPtr
          .asFunction<void Function(ffi.Pointer<obs_sceneitem_t>)>();

  ffi.Pointer<ffi.Int8> obs_output_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_output_get_display_name(
      id,
    );
  }

  late final _obs_output_get_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_output_get_display_name');
  late final _obs_output_get_display_name = _obs_output_get_display_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  /// Creates an output.
  ///
  /// Outputs allow outputting to file, outputting to network, outputting to
  /// directshow, or other custom outputs.
  ffi.Pointer<obs_output_t> obs_output_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    return _obs_output_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  late final _obs_output_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_output_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<obs_data_t>)>>('obs_output_create');
  late final _obs_output_create = _obs_output_createPtr.asFunction<
      ffi.Pointer<obs_output_t> Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<obs_data_t>,
          ffi.Pointer<obs_data_t>)>();

  /// Adds/releases a reference to an output.  When the last reference is
  /// released, the output is destroyed.
  void obs_output_addref(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_addref(
      output,
    );
  }

  late final _obs_output_addrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_output_t>)>>(
          'obs_output_addref');
  late final _obs_output_addref = _obs_output_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>)>();

  void obs_output_release(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_release(
      output,
    );
  }

  late final _obs_output_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_output_t>)>>(
          'obs_output_release');
  late final _obs_output_release = _obs_output_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>)>();

  void obs_weak_output_addref(
    ffi.Pointer<obs_weak_output_t> weak,
  ) {
    return _obs_weak_output_addref(
      weak,
    );
  }

  late final _obs_weak_output_addrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_weak_output_t>)>>('obs_weak_output_addref');
  late final _obs_weak_output_addref = _obs_weak_output_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_weak_output_t>)>();

  void obs_weak_output_release(
    ffi.Pointer<obs_weak_output_t> weak,
  ) {
    return _obs_weak_output_release(
      weak,
    );
  }

  late final _obs_weak_output_releasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_weak_output_t>)>>('obs_weak_output_release');
  late final _obs_weak_output_release = _obs_weak_output_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_weak_output_t>)>();

  ffi.Pointer<obs_output_t> obs_output_get_ref(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_ref(
      output,
    );
  }

  late final _obs_output_get_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_output_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_ref');
  late final _obs_output_get_ref = _obs_output_get_refPtr.asFunction<
      ffi.Pointer<obs_output_t> Function(ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<obs_weak_output_t> obs_output_get_weak_output(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_weak_output(
      output,
    );
  }

  late final _obs_output_get_weak_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_weak_output_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_weak_output');
  late final _obs_output_get_weak_output =
      _obs_output_get_weak_outputPtr.asFunction<
          ffi.Pointer<obs_weak_output_t> Function(ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<obs_output_t> obs_weak_output_get_output(
    ffi.Pointer<obs_weak_output_t> weak,
  ) {
    return _obs_weak_output_get_output(
      weak,
    );
  }

  late final _obs_weak_output_get_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_output_t> Function(
              ffi.Pointer<obs_weak_output_t>)>>('obs_weak_output_get_output');
  late final _obs_weak_output_get_output =
      _obs_weak_output_get_outputPtr.asFunction<
          ffi.Pointer<obs_output_t> Function(ffi.Pointer<obs_weak_output_t>)>();

  int obs_weak_output_references_output(
    ffi.Pointer<obs_weak_output_t> weak,
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_weak_output_references_output(
      weak,
      output,
    );
  }

  late final _obs_weak_output_references_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_weak_output_t>,
              ffi.Pointer<obs_output_t>)>>('obs_weak_output_references_output');
  late final _obs_weak_output_references_output =
      _obs_weak_output_references_outputPtr.asFunction<
          int Function(
              ffi.Pointer<obs_weak_output_t>, ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<ffi.Int8> obs_output_get_name(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_name(
      output,
    );
  }

  late final _obs_output_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_name');
  late final _obs_output_get_name = _obs_output_get_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_output_t>)>();

  /// Starts the output.
  int obs_output_start(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_start(
      output,
    );
  }

  late final _obs_output_startPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_start');
  late final _obs_output_start = _obs_output_startPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// Stops the output.
  void obs_output_stop(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_stop(
      output,
    );
  }

  late final _obs_output_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_output_t>)>>(
          'obs_output_stop');
  late final _obs_output_stop = _obs_output_stopPtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>)>();

  /// Sets the current output delay, in seconds (if the output supports delay).
  ///
  /// If delay is currently active, it will set the delay value, but will not
  /// affect the current delay, it will only affect the next time the output is
  /// activated.
  void obs_output_set_delay(
    ffi.Pointer<obs_output_t> output,
    int delay_sec,
    int flags,
  ) {
    return _obs_output_set_delay(
      output,
      delay_sec,
      flags,
    );
  }

  late final _obs_output_set_delayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>, ffi.Uint32,
              ffi.Uint32)>>('obs_output_set_delay');
  late final _obs_output_set_delay = _obs_output_set_delayPtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>, int, int)>();

  /// Gets the currently set delay value, in seconds.
  int obs_output_get_delay(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_delay(
      output,
    );
  }

  late final _obs_output_get_delayPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_delay');
  late final _obs_output_get_delay = _obs_output_get_delayPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// If delay is active, gets the currently active delay value, in seconds.
  int obs_output_get_active_delay(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_active_delay(
      output,
    );
  }

  late final _obs_output_get_active_delayPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_active_delay');
  late final _obs_output_get_active_delay = _obs_output_get_active_delayPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// Forces the output to stop.  Usually only used with delay.
  void obs_output_force_stop(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_force_stop(
      output,
    );
  }

  late final _obs_output_force_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_output_t>)>>(
          'obs_output_force_stop');
  late final _obs_output_force_stop = _obs_output_force_stopPtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>)>();

  /// Returns whether the output is active
  int obs_output_active(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_active(
      output,
    );
  }

  late final _obs_output_activePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_active');
  late final _obs_output_active = _obs_output_activePtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// Returns output capability flags
  int obs_output_get_flags(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_flags(
      output,
    );
  }

  late final _obs_output_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_flags');
  late final _obs_output_get_flags = _obs_output_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// Returns output capability flags
  int obs_get_output_flags(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_get_output_flags(
      id,
    );
  }

  late final _obs_get_output_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_get_output_flags');
  late final _obs_get_output_flags = _obs_get_output_flagsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  /// Gets the default settings for an output type
  ffi.Pointer<obs_data_t> obs_output_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_output_defaults(
      id,
    );
  }

  late final _obs_output_defaultsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_output_defaults');
  late final _obs_output_defaults = _obs_output_defaultsPtr
      .asFunction<ffi.Pointer<obs_data_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_get_output_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_get_output_properties(
      id,
    );
  }

  late final _obs_get_output_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_output_properties');
  late final _obs_get_output_properties =
      _obs_get_output_propertiesPtr.asFunction<
          ffi.Pointer<obs_properties_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns the property list of an existing output, if any.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_output_properties(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_properties(
      output,
    );
  }

  late final _obs_output_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_properties');
  late final _obs_output_properties = _obs_output_propertiesPtr.asFunction<
      ffi.Pointer<obs_properties_t> Function(ffi.Pointer<obs_output_t>)>();

  /// Updates the settings for this output context
  void obs_output_update(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_output_update(
      output,
      settings,
    );
  }

  late final _obs_output_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>,
              ffi.Pointer<obs_data_t>)>>('obs_output_update');
  late final _obs_output_update = _obs_output_updatePtr.asFunction<
      void Function(ffi.Pointer<obs_output_t>, ffi.Pointer<obs_data_t>)>();

  /// Specifies whether the output can be paused
  int obs_output_can_pause(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_can_pause(
      output,
    );
  }

  late final _obs_output_can_pausePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_can_pause');
  late final _obs_output_can_pause = _obs_output_can_pausePtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// Pauses the output (if the functionality is allowed by the output
  int obs_output_pause(
    ffi.Pointer<obs_output_t> output,
    int pause,
  ) {
    return _obs_output_pause(
      output,
      pause,
    );
  }

  late final _obs_output_pausePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<obs_output_t>, ffi.Uint8)>>('obs_output_pause');
  late final _obs_output_pause = _obs_output_pausePtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>, int)>();

  /// Returns whether output is paused
  int obs_output_paused(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_paused(
      output,
    );
  }

  late final _obs_output_pausedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_paused');
  late final _obs_output_paused = _obs_output_pausedPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<obs_data_t> obs_output_get_settings(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_settings(
      output,
    );
  }

  late final _obs_output_get_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_settings');
  late final _obs_output_get_settings = _obs_output_get_settingsPtr.asFunction<
      ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_output_t>)>();

  /// Returns the signal handler for an output
  ffi.Pointer<signal_handler_t> obs_output_get_signal_handler(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_signal_handler(
      output,
    );
  }

  late final _obs_output_get_signal_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<signal_handler_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_signal_handler');
  late final _obs_output_get_signal_handler =
      _obs_output_get_signal_handlerPtr.asFunction<
          ffi.Pointer<signal_handler_t> Function(ffi.Pointer<obs_output_t>)>();

  /// Returns the procedure handler for an output
  ffi.Pointer<proc_handler_t> obs_output_get_proc_handler(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_proc_handler(
      output,
    );
  }

  late final _obs_output_get_proc_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<proc_handler_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_proc_handler');
  late final _obs_output_get_proc_handler =
      _obs_output_get_proc_handlerPtr.asFunction<
          ffi.Pointer<proc_handler_t> Function(ffi.Pointer<obs_output_t>)>();

  /// Sets the current audio/video media contexts associated with this output,
  /// required for non-encoded outputs.  Can be null.
  void obs_output_set_media(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<video_t> video,
    ffi.Pointer<audio_t> audio,
  ) {
    return _obs_output_set_media(
      output,
      video,
      audio,
    );
  }

  late final _obs_output_set_mediaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>, ffi.Pointer<video_t>,
              ffi.Pointer<audio_t>)>>('obs_output_set_media');
  late final _obs_output_set_media = _obs_output_set_mediaPtr.asFunction<
      void Function(ffi.Pointer<obs_output_t>, ffi.Pointer<video_t>,
          ffi.Pointer<audio_t>)>();

  /// Returns the video media context associated with this output
  ffi.Pointer<video_t> obs_output_video(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_video(
      output,
    );
  }

  late final _obs_output_videoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<video_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_video');
  late final _obs_output_video = _obs_output_videoPtr
      .asFunction<ffi.Pointer<video_t> Function(ffi.Pointer<obs_output_t>)>();

  /// Returns the audio media context associated with this output
  ffi.Pointer<audio_t> obs_output_audio(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_audio(
      output,
    );
  }

  late final _obs_output_audioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<audio_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_audio');
  late final _obs_output_audio = _obs_output_audioPtr
      .asFunction<ffi.Pointer<audio_t> Function(ffi.Pointer<obs_output_t>)>();

  /// Sets the current audio mixer for non-encoded outputs
  void obs_output_set_mixer(
    ffi.Pointer<obs_output_t> output,
    int mixer_idx,
  ) {
    return _obs_output_set_mixer(
      output,
      mixer_idx,
    );
  }

  late final _obs_output_set_mixerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_output_t>, size_t)>>('obs_output_set_mixer');
  late final _obs_output_set_mixer = _obs_output_set_mixerPtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>, int)>();

  /// Gets the current audio mixer for non-encoded outputs
  int obs_output_get_mixer(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_mixer(
      output,
    );
  }

  late final _obs_output_get_mixerPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<obs_output_t>)>>(
          'obs_output_get_mixer');
  late final _obs_output_get_mixer = _obs_output_get_mixerPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// Sets the current audio mixes (mask) for a non-encoded multi-track output
  void obs_output_set_mixers(
    ffi.Pointer<obs_output_t> output,
    int mixers,
  ) {
    return _obs_output_set_mixers(
      output,
      mixers,
    );
  }

  late final _obs_output_set_mixersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_output_t>, size_t)>>('obs_output_set_mixers');
  late final _obs_output_set_mixers = _obs_output_set_mixersPtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>, int)>();

  /// Gets the current audio mixes (mask) for a non-encoded multi-track output
  int obs_output_get_mixers(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_mixers(
      output,
    );
  }

  late final _obs_output_get_mixersPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<obs_output_t>)>>(
          'obs_output_get_mixers');
  late final _obs_output_get_mixers = _obs_output_get_mixersPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// Sets the current video encoder associated with this output,
  /// required for encoded outputs
  void obs_output_set_video_encoder(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_output_set_video_encoder(
      output,
      encoder,
    );
  }

  late final _obs_output_set_video_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>,
              ffi.Pointer<obs_encoder_t>)>>('obs_output_set_video_encoder');
  late final _obs_output_set_video_encoder =
      _obs_output_set_video_encoderPtr.asFunction<
          void Function(
              ffi.Pointer<obs_output_t>, ffi.Pointer<obs_encoder_t>)>();

  /// Sets the current audio encoder associated with this output,
  /// required for encoded outputs.
  ///
  /// The idx parameter specifies the audio encoder index to set the encoder to.
  /// Only used with outputs that have multiple audio outputs (RTMP typically),
  /// otherwise the parameter is ignored.
  void obs_output_set_audio_encoder(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<obs_encoder_t> encoder,
    int idx,
  ) {
    return _obs_output_set_audio_encoder(
      output,
      encoder,
      idx,
    );
  }

  late final _obs_output_set_audio_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_output_t>,
              ffi.Pointer<obs_encoder_t>,
              size_t)>>('obs_output_set_audio_encoder');
  late final _obs_output_set_audio_encoder =
      _obs_output_set_audio_encoderPtr.asFunction<
          void Function(
              ffi.Pointer<obs_output_t>, ffi.Pointer<obs_encoder_t>, int)>();

  /// Returns the current video encoder associated with this output
  ffi.Pointer<obs_encoder_t> obs_output_get_video_encoder(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_video_encoder(
      output,
    );
  }

  late final _obs_output_get_video_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_encoder_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_video_encoder');
  late final _obs_output_get_video_encoder =
      _obs_output_get_video_encoderPtr.asFunction<
          ffi.Pointer<obs_encoder_t> Function(ffi.Pointer<obs_output_t>)>();

  /// Returns the current audio encoder associated with this output
  ///
  /// The idx parameter specifies the audio encoder index.  Only used with
  /// outputs that have multiple audio outputs, otherwise the parameter is
  /// ignored.
  ffi.Pointer<obs_encoder_t> obs_output_get_audio_encoder(
    ffi.Pointer<obs_output_t> output,
    int idx,
  ) {
    return _obs_output_get_audio_encoder(
      output,
      idx,
    );
  }

  late final _obs_output_get_audio_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_encoder_t> Function(ffi.Pointer<obs_output_t>,
              size_t)>>('obs_output_get_audio_encoder');
  late final _obs_output_get_audio_encoder =
      _obs_output_get_audio_encoderPtr.asFunction<
          ffi.Pointer<obs_encoder_t> Function(
              ffi.Pointer<obs_output_t>, int)>();

  /// Sets the current service associated with this output.
  void obs_output_set_service(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_output_set_service(
      output,
      service,
    );
  }

  late final _obs_output_set_servicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>,
              ffi.Pointer<obs_service_t>)>>('obs_output_set_service');
  late final _obs_output_set_service = _obs_output_set_servicePtr.asFunction<
      void Function(ffi.Pointer<obs_output_t>, ffi.Pointer<obs_service_t>)>();

  /// Gets the current service associated with this output.
  ffi.Pointer<obs_service_t> obs_output_get_service(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_service(
      output,
    );
  }

  late final _obs_output_get_servicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_service_t> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_service');
  late final _obs_output_get_service = _obs_output_get_servicePtr.asFunction<
      ffi.Pointer<obs_service_t> Function(ffi.Pointer<obs_output_t>)>();

  /// Sets the reconnect settings.  Set retry_count to 0 to disable reconnecting.
  void obs_output_set_reconnect_settings(
    ffi.Pointer<obs_output_t> output,
    int retry_count,
    int retry_sec,
  ) {
    return _obs_output_set_reconnect_settings(
      output,
      retry_count,
      retry_sec,
    );
  }

  late final _obs_output_set_reconnect_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>, ffi.Int32,
              ffi.Int32)>>('obs_output_set_reconnect_settings');
  late final _obs_output_set_reconnect_settings =
      _obs_output_set_reconnect_settingsPtr
          .asFunction<void Function(ffi.Pointer<obs_output_t>, int, int)>();

  int obs_output_get_total_bytes(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_total_bytes(
      output,
    );
  }

  late final _obs_output_get_total_bytesPtr = _lookup<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_total_bytes');
  late final _obs_output_get_total_bytes = _obs_output_get_total_bytesPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  int obs_output_get_frames_dropped(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_frames_dropped(
      output,
    );
  }

  late final _obs_output_get_frames_droppedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_frames_dropped');
  late final _obs_output_get_frames_dropped = _obs_output_get_frames_droppedPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  int obs_output_get_total_frames(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_total_frames(
      output,
    );
  }

  late final _obs_output_get_total_framesPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_total_frames');
  late final _obs_output_get_total_frames = _obs_output_get_total_framesPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// Sets the preferred scaled resolution for this output.  Set width and height
  /// to 0 to disable scaling.
  ///
  /// If this output uses an encoder, it will call obs_encoder_set_scaled_size on
  /// the encoder before the stream is started.  If the encoder is already active,
  /// then this function will trigger a warning and do nothing.
  void obs_output_set_preferred_size(
    ffi.Pointer<obs_output_t> output,
    int width,
    int height,
  ) {
    return _obs_output_set_preferred_size(
      output,
      width,
      height,
    );
  }

  late final _obs_output_set_preferred_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>, ffi.Uint32,
              ffi.Uint32)>>('obs_output_set_preferred_size');
  late final _obs_output_set_preferred_size = _obs_output_set_preferred_sizePtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>, int, int)>();

  /// For video outputs, returns the width of the encoded image
  int obs_output_get_width(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_width(
      output,
    );
  }

  late final _obs_output_get_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_width');
  late final _obs_output_get_width = _obs_output_get_widthPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// For video outputs, returns the height of the encoded image
  int obs_output_get_height(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_height(
      output,
    );
  }

  late final _obs_output_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_height');
  late final _obs_output_get_height = _obs_output_get_heightPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<ffi.Int8> obs_output_get_id(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_id(
      output,
    );
  }

  late final _obs_output_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_id');
  late final _obs_output_get_id = _obs_output_get_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_output_t>)>();

  void obs_output_caption(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<obs_source_cea_708> captions,
  ) {
    return _obs_output_caption(
      output,
      captions,
    );
  }

  late final _obs_output_captionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>,
              ffi.Pointer<obs_source_cea_708>)>>('obs_output_caption');
  late final _obs_output_caption = _obs_output_captionPtr.asFunction<
      void Function(
          ffi.Pointer<obs_output_t>, ffi.Pointer<obs_source_cea_708>)>();

  void obs_output_output_caption_text1(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _obs_output_output_caption_text1(
      output,
      text,
    );
  }

  late final _obs_output_output_caption_text1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_output_output_caption_text1');
  late final _obs_output_output_caption_text1 =
      _obs_output_output_caption_text1Ptr.asFunction<
          void Function(ffi.Pointer<obs_output_t>, ffi.Pointer<ffi.Int8>)>();

  void obs_output_output_caption_text2(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<ffi.Int8> text,
    double display_duration,
  ) {
    return _obs_output_output_caption_text2(
      output,
      text,
      display_duration,
    );
  }

  late final _obs_output_output_caption_text2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>, ffi.Pointer<ffi.Int8>,
              ffi.Double)>>('obs_output_output_caption_text2');
  late final _obs_output_output_caption_text2 =
      _obs_output_output_caption_text2Ptr.asFunction<
          void Function(
              ffi.Pointer<obs_output_t>, ffi.Pointer<ffi.Int8>, double)>();

  double obs_output_get_congestion(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_congestion(
      output,
    );
  }

  late final _obs_output_get_congestionPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_congestion');
  late final _obs_output_get_congestion = _obs_output_get_congestionPtr
      .asFunction<double Function(ffi.Pointer<obs_output_t>)>();

  int obs_output_get_connect_time_ms(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_connect_time_ms(
      output,
    );
  }

  late final _obs_output_get_connect_time_msPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_connect_time_ms');
  late final _obs_output_get_connect_time_ms =
      _obs_output_get_connect_time_msPtr
          .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  int obs_output_reconnecting(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_reconnecting(
      output,
    );
  }

  late final _obs_output_reconnectingPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_reconnecting');
  late final _obs_output_reconnecting = _obs_output_reconnectingPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  /// Pass a string of the last output error, for UI use
  void obs_output_set_last_error(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<ffi.Int8> message,
  ) {
    return _obs_output_set_last_error(
      output,
      message,
    );
  }

  late final _obs_output_set_last_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_output_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_output_set_last_error');
  late final _obs_output_set_last_error =
      _obs_output_set_last_errorPtr.asFunction<
          void Function(ffi.Pointer<obs_output_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> obs_output_get_last_error(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_last_error(
      output,
    );
  }

  late final _obs_output_get_last_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_last_error');
  late final _obs_output_get_last_error = _obs_output_get_last_errorPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<ffi.Int8> obs_output_get_supported_video_codecs(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_supported_video_codecs(
      output,
    );
  }

  late final _obs_output_get_supported_video_codecsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_supported_video_codecs');
  late final _obs_output_get_supported_video_codecs =
      _obs_output_get_supported_video_codecsPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<ffi.Int8> obs_output_get_supported_audio_codecs(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_supported_audio_codecs(
      output,
    );
  }

  late final _obs_output_get_supported_audio_codecsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_supported_audio_codecs');
  late final _obs_output_get_supported_audio_codecs =
      _obs_output_get_supported_audio_codecsPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<ffi.Void> obs_output_get_type_data(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_type_data(
      output,
    );
  }

  late final _obs_output_get_type_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_output_t>)>>('obs_output_get_type_data');
  late final _obs_output_get_type_data = _obs_output_get_type_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<obs_output_t>)>();

  /// Optionally sets the video conversion info.  Used only for raw output
  void obs_output_set_video_conversion(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<video_scale_info> conversion,
  ) {
    return _obs_output_set_video_conversion(
      output,
      conversion,
    );
  }

  late final _obs_output_set_video_conversionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<obs_output_t>, ffi.Pointer<video_scale_info>)>>(
      'obs_output_set_video_conversion');
  late final _obs_output_set_video_conversion =
      _obs_output_set_video_conversionPtr.asFunction<
          void Function(
              ffi.Pointer<obs_output_t>, ffi.Pointer<video_scale_info>)>();

  /// Optionally sets the audio conversion info.  Used only for raw output
  void obs_output_set_audio_conversion(
    ffi.Pointer<obs_output_t> output,
    ffi.Pointer<audio_convert_info> conversion,
  ) {
    return _obs_output_set_audio_conversion(
      output,
      conversion,
    );
  }

  late final _obs_output_set_audio_conversionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<obs_output_t>, ffi.Pointer<audio_convert_info>)>>(
      'obs_output_set_audio_conversion');
  late final _obs_output_set_audio_conversion =
      _obs_output_set_audio_conversionPtr.asFunction<
          void Function(
              ffi.Pointer<obs_output_t>, ffi.Pointer<audio_convert_info>)>();

  /// Returns whether data capture can begin with the specified flags
  int obs_output_can_begin_data_capture(
    ffi.Pointer<obs_output_t> output,
    int flags,
  ) {
    return _obs_output_can_begin_data_capture(
      output,
      flags,
    );
  }

  late final _obs_output_can_begin_data_capturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_output_t>,
              ffi.Uint32)>>('obs_output_can_begin_data_capture');
  late final _obs_output_can_begin_data_capture =
      _obs_output_can_begin_data_capturePtr
          .asFunction<int Function(ffi.Pointer<obs_output_t>, int)>();

  /// Initializes encoders (if any)
  int obs_output_initialize_encoders(
    ffi.Pointer<obs_output_t> output,
    int flags,
  ) {
    return _obs_output_initialize_encoders(
      output,
      flags,
    );
  }

  late final _obs_output_initialize_encodersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_output_t>,
              ffi.Uint32)>>('obs_output_initialize_encoders');
  late final _obs_output_initialize_encoders =
      _obs_output_initialize_encodersPtr
          .asFunction<int Function(ffi.Pointer<obs_output_t>, int)>();

  /// Begins data capture from media/encoders.
  ///
  /// @param  output  Output context
  /// @param  flags   Set this to 0 to use default output flags set in the
  /// obs_output_info structure, otherwise set to a either
  /// OBS_OUTPUT_VIDEO or OBS_OUTPUT_AUDIO to specify whether to
  /// connect audio or video.  This is useful for things like
  /// ffmpeg which may or may not always want to use both audio
  /// and video.
  /// @return         true if successful, false otherwise.
  int obs_output_begin_data_capture(
    ffi.Pointer<obs_output_t> output,
    int flags,
  ) {
    return _obs_output_begin_data_capture(
      output,
      flags,
    );
  }

  late final _obs_output_begin_data_capturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<obs_output_t>,
              ffi.Uint32)>>('obs_output_begin_data_capture');
  late final _obs_output_begin_data_capture = _obs_output_begin_data_capturePtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>, int)>();

  /// Ends data capture from media/encoders
  void obs_output_end_data_capture(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_end_data_capture(
      output,
    );
  }

  late final _obs_output_end_data_capturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_output_t>)>>(
          'obs_output_end_data_capture');
  late final _obs_output_end_data_capture = _obs_output_end_data_capturePtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>)>();

  /// Signals that the output has stopped itself.
  ///
  /// @param  output  Output context
  /// @param  code    Error code (or OBS_OUTPUT_SUCCESS if not an error)
  void obs_output_signal_stop(
    ffi.Pointer<obs_output_t> output,
    int code,
  ) {
    return _obs_output_signal_stop(
      output,
      code,
    );
  }

  late final _obs_output_signal_stopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_output_t>, ffi.Int32)>>('obs_output_signal_stop');
  late final _obs_output_signal_stop = _obs_output_signal_stopPtr
      .asFunction<void Function(ffi.Pointer<obs_output_t>, int)>();

  int obs_output_get_pause_offset(
    ffi.Pointer<obs_output_t> output,
  ) {
    return _obs_output_get_pause_offset(
      output,
    );
  }

  late final _obs_output_get_pause_offsetPtr = _lookup<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<obs_output_t>)>>(
      'obs_output_get_pause_offset');
  late final _obs_output_get_pause_offset = _obs_output_get_pause_offsetPtr
      .asFunction<int Function(ffi.Pointer<obs_output_t>)>();

  ffi.Pointer<ffi.Int8> obs_encoder_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_encoder_get_display_name(
      id,
    );
  }

  late final _obs_encoder_get_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_encoder_get_display_name');
  late final _obs_encoder_get_display_name = _obs_encoder_get_display_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  /// Creates a video encoder context
  ///
  /// @param  id        Video encoder ID
  /// @param  name      Name to assign to this context
  /// @param  settings  Settings
  /// @return           The video encoder context, or NULL if failed or not found.
  ffi.Pointer<obs_encoder_t> obs_video_encoder_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    return _obs_video_encoder_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  late final _obs_video_encoder_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_encoder_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<obs_data_t>)>>('obs_video_encoder_create');
  late final _obs_video_encoder_create =
      _obs_video_encoder_createPtr.asFunction<
          ffi.Pointer<obs_encoder_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<obs_data_t>)>();

  /// Creates an audio encoder context
  ///
  /// @param  id        Audio Encoder ID
  /// @param  name      Name to assign to this context
  /// @param  settings  Settings
  /// @param  mixer_idx Index of the mixer to use for this audio encoder
  /// @return           The video encoder context, or NULL if failed or not found.
  ffi.Pointer<obs_encoder_t> obs_audio_encoder_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    int mixer_idx,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    return _obs_audio_encoder_create(
      id,
      name,
      settings,
      mixer_idx,
      hotkey_data,
    );
  }

  late final _obs_audio_encoder_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_encoder_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>,
              size_t,
              ffi.Pointer<obs_data_t>)>>('obs_audio_encoder_create');
  late final _obs_audio_encoder_create =
      _obs_audio_encoder_createPtr.asFunction<
          ffi.Pointer<obs_encoder_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>,
              int,
              ffi.Pointer<obs_data_t>)>();

  /// Adds/releases a reference to an encoder.  When the last reference is
  /// released, the encoder is destroyed.
  void obs_encoder_addref(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_addref(
      encoder,
    );
  }

  late final _obs_encoder_addrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_addref');
  late final _obs_encoder_addref = _obs_encoder_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_encoder_t>)>();

  void obs_encoder_release(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_release(
      encoder,
    );
  }

  late final _obs_encoder_releasePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_release');
  late final _obs_encoder_release = _obs_encoder_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_encoder_t>)>();

  void obs_weak_encoder_addref(
    ffi.Pointer<obs_weak_encoder_t> weak,
  ) {
    return _obs_weak_encoder_addref(
      weak,
    );
  }

  late final _obs_weak_encoder_addrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_weak_encoder_t>)>>('obs_weak_encoder_addref');
  late final _obs_weak_encoder_addref = _obs_weak_encoder_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_weak_encoder_t>)>();

  void obs_weak_encoder_release(
    ffi.Pointer<obs_weak_encoder_t> weak,
  ) {
    return _obs_weak_encoder_release(
      weak,
    );
  }

  late final _obs_weak_encoder_releasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_weak_encoder_t>)>>('obs_weak_encoder_release');
  late final _obs_weak_encoder_release = _obs_weak_encoder_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_weak_encoder_t>)>();

  ffi.Pointer<obs_encoder_t> obs_encoder_get_ref(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_ref(
      encoder,
    );
  }

  late final _obs_encoder_get_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_encoder_t> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_get_ref');
  late final _obs_encoder_get_ref = _obs_encoder_get_refPtr.asFunction<
      ffi.Pointer<obs_encoder_t> Function(ffi.Pointer<obs_encoder_t>)>();

  ffi.Pointer<obs_weak_encoder_t> obs_encoder_get_weak_encoder(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_weak_encoder(
      encoder,
    );
  }

  late final _obs_encoder_get_weak_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_weak_encoder_t> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_get_weak_encoder');
  late final _obs_encoder_get_weak_encoder =
      _obs_encoder_get_weak_encoderPtr.asFunction<
          ffi.Pointer<obs_weak_encoder_t> Function(
              ffi.Pointer<obs_encoder_t>)>();

  ffi.Pointer<obs_encoder_t> obs_weak_encoder_get_encoder(
    ffi.Pointer<obs_weak_encoder_t> weak,
  ) {
    return _obs_weak_encoder_get_encoder(
      weak,
    );
  }

  late final _obs_weak_encoder_get_encoderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<obs_encoder_t> Function(
                  ffi.Pointer<obs_weak_encoder_t>)>>(
      'obs_weak_encoder_get_encoder');
  late final _obs_weak_encoder_get_encoder =
      _obs_weak_encoder_get_encoderPtr.asFunction<
          ffi.Pointer<obs_encoder_t> Function(
              ffi.Pointer<obs_weak_encoder_t>)>();

  int obs_weak_encoder_references_encoder(
    ffi.Pointer<obs_weak_encoder_t> weak,
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_weak_encoder_references_encoder(
      weak,
      encoder,
    );
  }

  late final _obs_weak_encoder_references_encoderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<obs_weak_encoder_t>,
                  ffi.Pointer<obs_encoder_t>)>>(
      'obs_weak_encoder_references_encoder');
  late final _obs_weak_encoder_references_encoder =
      _obs_weak_encoder_references_encoderPtr.asFunction<
          int Function(
              ffi.Pointer<obs_weak_encoder_t>, ffi.Pointer<obs_encoder_t>)>();

  void obs_encoder_set_name(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _obs_encoder_set_name(
      encoder,
      name,
    );
  }

  late final _obs_encoder_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_encoder_set_name');
  late final _obs_encoder_set_name = _obs_encoder_set_namePtr.asFunction<
      void Function(ffi.Pointer<obs_encoder_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> obs_encoder_get_name(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_name(
      encoder,
    );
  }

  late final _obs_encoder_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_get_name');
  late final _obs_encoder_get_name = _obs_encoder_get_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_encoder_t>)>();

  /// Returns the codec of an encoder by the id
  ffi.Pointer<ffi.Int8> obs_get_encoder_codec(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_get_encoder_codec(
      id,
    );
  }

  late final _obs_get_encoder_codecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_encoder_codec');
  late final _obs_get_encoder_codec = _obs_get_encoder_codecPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns the type of an encoder by the id
  int obs_get_encoder_type(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_get_encoder_type(
      id,
    );
  }

  late final _obs_get_encoder_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_get_encoder_type');
  late final _obs_get_encoder_type = _obs_get_encoder_typePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns the codec of the encoder
  ffi.Pointer<ffi.Int8> obs_encoder_get_codec(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_codec(
      encoder,
    );
  }

  late final _obs_encoder_get_codecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_get_codec');
  late final _obs_encoder_get_codec = _obs_encoder_get_codecPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_encoder_t>)>();

  /// Returns the type of an encoder
  int obs_encoder_get_type(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_type(
      encoder,
    );
  }

  late final _obs_encoder_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_get_type');
  late final _obs_encoder_get_type = _obs_encoder_get_typePtr
      .asFunction<int Function(ffi.Pointer<obs_encoder_t>)>();

  /// Sets the scaled resolution for a video encoder.  Set width and height to 0
  /// to disable scaling.  If the encoder is active, this function will trigger
  /// a warning, and do nothing.
  void obs_encoder_set_scaled_size(
    ffi.Pointer<obs_encoder_t> encoder,
    int width,
    int height,
  ) {
    return _obs_encoder_set_scaled_size(
      encoder,
      width,
      height,
    );
  }

  late final _obs_encoder_set_scaled_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_encoder_t>, ffi.Uint32,
              ffi.Uint32)>>('obs_encoder_set_scaled_size');
  late final _obs_encoder_set_scaled_size = _obs_encoder_set_scaled_sizePtr
      .asFunction<void Function(ffi.Pointer<obs_encoder_t>, int, int)>();

  /// For video encoders, returns true if pre-encode scaling is enabled
  int obs_encoder_scaling_enabled(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_scaling_enabled(
      encoder,
    );
  }

  late final _obs_encoder_scaling_enabledPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_scaling_enabled');
  late final _obs_encoder_scaling_enabled = _obs_encoder_scaling_enabledPtr
      .asFunction<int Function(ffi.Pointer<obs_encoder_t>)>();

  /// For video encoders, returns the width of the encoded image
  int obs_encoder_get_width(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_width(
      encoder,
    );
  }

  late final _obs_encoder_get_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_get_width');
  late final _obs_encoder_get_width = _obs_encoder_get_widthPtr
      .asFunction<int Function(ffi.Pointer<obs_encoder_t>)>();

  /// For video encoders, returns the height of the encoded image
  int obs_encoder_get_height(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_height(
      encoder,
    );
  }

  late final _obs_encoder_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_get_height');
  late final _obs_encoder_get_height = _obs_encoder_get_heightPtr
      .asFunction<int Function(ffi.Pointer<obs_encoder_t>)>();

  /// For audio encoders, returns the sample rate of the audio
  int obs_encoder_get_sample_rate(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_sample_rate(
      encoder,
    );
  }

  late final _obs_encoder_get_sample_ratePtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_get_sample_rate');
  late final _obs_encoder_get_sample_rate = _obs_encoder_get_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<obs_encoder_t>)>();

  /// Sets the preferred video format for a video encoder.  If the encoder can use
  /// the format specified, it will force a conversion to that format if the
  /// obs output format does not match the preferred format.
  ///
  /// If the format is set to VIDEO_FORMAT_NONE, will revert to the default
  /// functionality of converting only when absolutely necessary.
  void obs_encoder_set_preferred_video_format(
    ffi.Pointer<obs_encoder_t> encoder,
    int format,
  ) {
    return _obs_encoder_set_preferred_video_format(
      encoder,
      format,
    );
  }

  late final _obs_encoder_set_preferred_video_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_encoder_t>,
              ffi.Int32)>>('obs_encoder_set_preferred_video_format');
  late final _obs_encoder_set_preferred_video_format =
      _obs_encoder_set_preferred_video_formatPtr
          .asFunction<void Function(ffi.Pointer<obs_encoder_t>, int)>();

  int obs_encoder_get_preferred_video_format(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_preferred_video_format(
      encoder,
    );
  }

  late final _obs_encoder_get_preferred_video_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_get_preferred_video_format');
  late final _obs_encoder_get_preferred_video_format =
      _obs_encoder_get_preferred_video_formatPtr
          .asFunction<int Function(ffi.Pointer<obs_encoder_t>)>();

  /// Gets the default settings for an encoder type
  ffi.Pointer<obs_data_t> obs_encoder_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_encoder_defaults(
      id,
    );
  }

  late final _obs_encoder_defaultsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_encoder_defaults');
  late final _obs_encoder_defaults = _obs_encoder_defaultsPtr
      .asFunction<ffi.Pointer<obs_data_t> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_data_t> obs_encoder_get_defaults(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_defaults(
      encoder,
    );
  }

  late final _obs_encoder_get_defaultsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_get_defaults');
  late final _obs_encoder_get_defaults =
      _obs_encoder_get_defaultsPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_encoder_t>)>();

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_get_encoder_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_get_encoder_properties(
      id,
    );
  }

  late final _obs_get_encoder_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_encoder_properties');
  late final _obs_get_encoder_properties =
      _obs_get_encoder_propertiesPtr.asFunction<
          ffi.Pointer<obs_properties_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns the property list of an existing encoder, if any.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_encoder_properties(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_properties(
      encoder,
    );
  }

  late final _obs_encoder_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_properties');
  late final _obs_encoder_properties = _obs_encoder_propertiesPtr.asFunction<
      ffi.Pointer<obs_properties_t> Function(ffi.Pointer<obs_encoder_t>)>();

  /// Updates the settings of the encoder context.  Usually used for changing
  /// bitrate while active
  void obs_encoder_update(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_encoder_update(
      encoder,
      settings,
    );
  }

  late final _obs_encoder_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<obs_data_t>)>>('obs_encoder_update');
  late final _obs_encoder_update = _obs_encoder_updatePtr.asFunction<
      void Function(ffi.Pointer<obs_encoder_t>, ffi.Pointer<obs_data_t>)>();

  /// Gets extra data (headers) associated with this context
  int obs_encoder_get_extra_data(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> extra_data,
    ffi.Pointer<size_t> size,
  ) {
    return _obs_encoder_get_extra_data(
      encoder,
      extra_data,
      size,
    );
  }

  late final _obs_encoder_get_extra_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<size_t>)>>('obs_encoder_get_extra_data');
  late final _obs_encoder_get_extra_data =
      _obs_encoder_get_extra_dataPtr.asFunction<
          int Function(ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<size_t>)>();

  /// Returns the current settings for this encoder
  ffi.Pointer<obs_data_t> obs_encoder_get_settings(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_settings(
      encoder,
    );
  }

  late final _obs_encoder_get_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_get_settings');
  late final _obs_encoder_get_settings =
      _obs_encoder_get_settingsPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_encoder_t>)>();

  /// Sets the video output context to be used with this encoder
  void obs_encoder_set_video(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<video_t> video,
  ) {
    return _obs_encoder_set_video(
      encoder,
      video,
    );
  }

  late final _obs_encoder_set_videoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<video_t>)>>('obs_encoder_set_video');
  late final _obs_encoder_set_video = _obs_encoder_set_videoPtr.asFunction<
      void Function(ffi.Pointer<obs_encoder_t>, ffi.Pointer<video_t>)>();

  /// Sets the audio output context to be used with this encoder
  void obs_encoder_set_audio(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<audio_t> audio,
  ) {
    return _obs_encoder_set_audio(
      encoder,
      audio,
    );
  }

  late final _obs_encoder_set_audioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<audio_t>)>>('obs_encoder_set_audio');
  late final _obs_encoder_set_audio = _obs_encoder_set_audioPtr.asFunction<
      void Function(ffi.Pointer<obs_encoder_t>, ffi.Pointer<audio_t>)>();

  /// Returns the video output context used with this encoder, or NULL if not
  /// a video context
  ffi.Pointer<video_t> obs_encoder_video(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_video(
      encoder,
    );
  }

  late final _obs_encoder_videoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<video_t> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_video');
  late final _obs_encoder_video = _obs_encoder_videoPtr
      .asFunction<ffi.Pointer<video_t> Function(ffi.Pointer<obs_encoder_t>)>();

  /// Returns the audio output context used with this encoder, or NULL if not
  /// a audio context
  ffi.Pointer<audio_t> obs_encoder_audio(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_audio(
      encoder,
    );
  }

  late final _obs_encoder_audioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<audio_t> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_audio');
  late final _obs_encoder_audio = _obs_encoder_audioPtr
      .asFunction<ffi.Pointer<audio_t> Function(ffi.Pointer<obs_encoder_t>)>();

  /// Returns true if encoder is active, false otherwise
  int obs_encoder_active(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_active(
      encoder,
    );
  }

  late final _obs_encoder_activePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_active');
  late final _obs_encoder_active = _obs_encoder_activePtr
      .asFunction<int Function(ffi.Pointer<obs_encoder_t>)>();

  ffi.Pointer<ffi.Void> obs_encoder_get_type_data(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_type_data(
      encoder,
    );
  }

  late final _obs_encoder_get_type_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_get_type_data');
  late final _obs_encoder_get_type_data = _obs_encoder_get_type_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<obs_encoder_t>)>();

  ffi.Pointer<ffi.Int8> obs_encoder_get_id(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_id(
      encoder,
    );
  }

  late final _obs_encoder_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_get_id');
  late final _obs_encoder_get_id = _obs_encoder_get_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_encoder_t>)>();

  int obs_get_encoder_caps(
    ffi.Pointer<ffi.Int8> encoder_id,
  ) {
    return _obs_get_encoder_caps(
      encoder_id,
    );
  }

  late final _obs_get_encoder_capsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_get_encoder_caps');
  late final _obs_get_encoder_caps = _obs_get_encoder_capsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int obs_encoder_get_caps(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_caps(
      encoder,
    );
  }

  late final _obs_encoder_get_capsPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_get_caps');
  late final _obs_encoder_get_caps = _obs_encoder_get_capsPtr
      .asFunction<int Function(ffi.Pointer<obs_encoder_t>)>();

  /// Duplicates an encoder packet
  void obs_duplicate_encoder_packet(
    ffi.Pointer<encoder_packet> dst,
    ffi.Pointer<encoder_packet> src,
  ) {
    return _obs_duplicate_encoder_packet(
      dst,
      src,
    );
  }

  late final _obs_duplicate_encoder_packetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<encoder_packet>,
              ffi.Pointer<encoder_packet>)>>('obs_duplicate_encoder_packet');
  late final _obs_duplicate_encoder_packet =
      _obs_duplicate_encoder_packetPtr.asFunction<
          void Function(
              ffi.Pointer<encoder_packet>, ffi.Pointer<encoder_packet>)>();

  void obs_free_encoder_packet(
    ffi.Pointer<encoder_packet> packet,
  ) {
    return _obs_free_encoder_packet(
      packet,
    );
  }

  late final _obs_free_encoder_packetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<encoder_packet>)>>(
      'obs_free_encoder_packet');
  late final _obs_free_encoder_packet = _obs_free_encoder_packetPtr
      .asFunction<void Function(ffi.Pointer<encoder_packet>)>();

  void obs_encoder_packet_ref(
    ffi.Pointer<encoder_packet> dst,
    ffi.Pointer<encoder_packet> src,
  ) {
    return _obs_encoder_packet_ref(
      dst,
      src,
    );
  }

  late final _obs_encoder_packet_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<encoder_packet>,
              ffi.Pointer<encoder_packet>)>>('obs_encoder_packet_ref');
  late final _obs_encoder_packet_ref = _obs_encoder_packet_refPtr.asFunction<
      void Function(
          ffi.Pointer<encoder_packet>, ffi.Pointer<encoder_packet>)>();

  void obs_encoder_packet_release(
    ffi.Pointer<encoder_packet> packet,
  ) {
    return _obs_encoder_packet_release(
      packet,
    );
  }

  late final _obs_encoder_packet_releasePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<encoder_packet>)>>(
      'obs_encoder_packet_release');
  late final _obs_encoder_packet_release = _obs_encoder_packet_releasePtr
      .asFunction<void Function(ffi.Pointer<encoder_packet>)>();

  ffi.Pointer<ffi.Void> obs_encoder_create_rerouted(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<ffi.Int8> reroute_id,
  ) {
    return _obs_encoder_create_rerouted(
      encoder,
      reroute_id,
    );
  }

  late final _obs_encoder_create_reroutedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_encoder_create_rerouted');
  late final _obs_encoder_create_rerouted =
      _obs_encoder_create_reroutedPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_encoder_t>, ffi.Pointer<ffi.Int8>)>();

  /// Returns whether encoder is paused
  int obs_encoder_paused(
    ffi.Pointer<obs_encoder_t> output,
  ) {
    return _obs_encoder_paused(
      output,
    );
  }

  late final _obs_encoder_pausedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<obs_encoder_t>)>>(
      'obs_encoder_paused');
  late final _obs_encoder_paused = _obs_encoder_pausedPtr
      .asFunction<int Function(ffi.Pointer<obs_encoder_t>)>();

  ffi.Pointer<ffi.Int8> obs_encoder_get_last_error(
    ffi.Pointer<obs_encoder_t> encoder,
  ) {
    return _obs_encoder_get_last_error(
      encoder,
    );
  }

  late final _obs_encoder_get_last_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_encoder_t>)>>('obs_encoder_get_last_error');
  late final _obs_encoder_get_last_error = _obs_encoder_get_last_errorPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_encoder_t>)>();

  void obs_encoder_set_last_error(
    ffi.Pointer<obs_encoder_t> encoder,
    ffi.Pointer<ffi.Int8> message,
  ) {
    return _obs_encoder_set_last_error(
      encoder,
      message,
    );
  }

  late final _obs_encoder_set_last_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_encoder_t>,
              ffi.Pointer<ffi.Int8>)>>('obs_encoder_set_last_error');
  late final _obs_encoder_set_last_error =
      _obs_encoder_set_last_errorPtr.asFunction<
          void Function(ffi.Pointer<obs_encoder_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> obs_service_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_service_get_display_name(
      id,
    );
  }

  late final _obs_service_get_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_service_get_display_name');
  late final _obs_service_get_display_name = _obs_service_get_display_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<obs_service_t> obs_service_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    return _obs_service_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  late final _obs_service_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_service_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>,
              ffi.Pointer<obs_data_t>)>>('obs_service_create');
  late final _obs_service_create = _obs_service_createPtr.asFunction<
      ffi.Pointer<obs_service_t> Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<obs_data_t>,
          ffi.Pointer<obs_data_t>)>();

  ffi.Pointer<obs_service_t> obs_service_create_private(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_service_create_private(
      id,
      name,
      settings,
    );
  }

  late final _obs_service_create_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_service_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_data_t>)>>('obs_service_create_private');
  late final _obs_service_create_private =
      _obs_service_create_privatePtr.asFunction<
          ffi.Pointer<obs_service_t> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<obs_data_t>)>();

  /// Adds/releases a reference to a service.  When the last reference is
  /// released, the service is destroyed.
  void obs_service_addref(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_addref(
      service,
    );
  }

  late final _obs_service_addrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_service_t>)>>(
      'obs_service_addref');
  late final _obs_service_addref = _obs_service_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_service_t>)>();

  void obs_service_release(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_release(
      service,
    );
  }

  late final _obs_service_releasePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_service_t>)>>(
      'obs_service_release');
  late final _obs_service_release = _obs_service_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_service_t>)>();

  void obs_weak_service_addref(
    ffi.Pointer<obs_weak_service_t> weak,
  ) {
    return _obs_weak_service_addref(
      weak,
    );
  }

  late final _obs_weak_service_addrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_weak_service_t>)>>('obs_weak_service_addref');
  late final _obs_weak_service_addref = _obs_weak_service_addrefPtr
      .asFunction<void Function(ffi.Pointer<obs_weak_service_t>)>();

  void obs_weak_service_release(
    ffi.Pointer<obs_weak_service_t> weak,
  ) {
    return _obs_weak_service_release(
      weak,
    );
  }

  late final _obs_weak_service_releasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_weak_service_t>)>>('obs_weak_service_release');
  late final _obs_weak_service_release = _obs_weak_service_releasePtr
      .asFunction<void Function(ffi.Pointer<obs_weak_service_t>)>();

  ffi.Pointer<obs_service_t> obs_service_get_ref(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_ref(
      service,
    );
  }

  late final _obs_service_get_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_service_t> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_ref');
  late final _obs_service_get_ref = _obs_service_get_refPtr.asFunction<
      ffi.Pointer<obs_service_t> Function(ffi.Pointer<obs_service_t>)>();

  ffi.Pointer<obs_weak_service_t> obs_service_get_weak_service(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_weak_service(
      service,
    );
  }

  late final _obs_service_get_weak_servicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_weak_service_t> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_weak_service');
  late final _obs_service_get_weak_service =
      _obs_service_get_weak_servicePtr.asFunction<
          ffi.Pointer<obs_weak_service_t> Function(
              ffi.Pointer<obs_service_t>)>();

  ffi.Pointer<obs_service_t> obs_weak_service_get_service(
    ffi.Pointer<obs_weak_service_t> weak,
  ) {
    return _obs_weak_service_get_service(
      weak,
    );
  }

  late final _obs_weak_service_get_servicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<obs_service_t> Function(
                  ffi.Pointer<obs_weak_service_t>)>>(
      'obs_weak_service_get_service');
  late final _obs_weak_service_get_service =
      _obs_weak_service_get_servicePtr.asFunction<
          ffi.Pointer<obs_service_t> Function(
              ffi.Pointer<obs_weak_service_t>)>();

  int obs_weak_service_references_service(
    ffi.Pointer<obs_weak_service_t> weak,
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_weak_service_references_service(
      weak,
      service,
    );
  }

  late final _obs_weak_service_references_servicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<obs_weak_service_t>,
                  ffi.Pointer<obs_service_t>)>>(
      'obs_weak_service_references_service');
  late final _obs_weak_service_references_service =
      _obs_weak_service_references_servicePtr.asFunction<
          int Function(
              ffi.Pointer<obs_weak_service_t>, ffi.Pointer<obs_service_t>)>();

  ffi.Pointer<ffi.Int8> obs_service_get_name(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_name(
      service,
    );
  }

  late final _obs_service_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_name');
  late final _obs_service_get_name = _obs_service_get_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_service_t>)>();

  /// Gets the default settings for a service
  ffi.Pointer<obs_data_t> obs_service_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_service_defaults(
      id,
    );
  }

  late final _obs_service_defaultsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_service_defaults');
  late final _obs_service_defaults = _obs_service_defaultsPtr
      .asFunction<ffi.Pointer<obs_data_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_get_service_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_get_service_properties(
      id,
    );
  }

  late final _obs_get_service_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<ffi.Int8>)>>('obs_get_service_properties');
  late final _obs_get_service_properties =
      _obs_get_service_propertiesPtr.asFunction<
          ffi.Pointer<obs_properties_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Returns the property list of an existing service context, if any.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_service_properties(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_properties(
      service,
    );
  }

  late final _obs_service_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_properties');
  late final _obs_service_properties = _obs_service_propertiesPtr.asFunction<
      ffi.Pointer<obs_properties_t> Function(ffi.Pointer<obs_service_t>)>();

  /// Gets the service type
  ffi.Pointer<ffi.Int8> obs_service_get_type(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_type(
      service,
    );
  }

  late final _obs_service_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_type');
  late final _obs_service_get_type = _obs_service_get_typePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_service_t>)>();

  /// Updates the settings of the service context
  void obs_service_update(
    ffi.Pointer<obs_service_t> service,
    ffi.Pointer<obs_data_t> settings,
  ) {
    return _obs_service_update(
      service,
      settings,
    );
  }

  late final _obs_service_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_service_t>,
              ffi.Pointer<obs_data_t>)>>('obs_service_update');
  late final _obs_service_update = _obs_service_updatePtr.asFunction<
      void Function(ffi.Pointer<obs_service_t>, ffi.Pointer<obs_data_t>)>();

  /// Returns the current settings for this service
  ffi.Pointer<obs_data_t> obs_service_get_settings(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_settings(
      service,
    );
  }

  late final _obs_service_get_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<obs_data_t> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_settings');
  late final _obs_service_get_settings =
      _obs_service_get_settingsPtr.asFunction<
          ffi.Pointer<obs_data_t> Function(ffi.Pointer<obs_service_t>)>();

  /// Returns the URL for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_url(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_url(
      service,
    );
  }

  late final _obs_service_get_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_url');
  late final _obs_service_get_url = _obs_service_get_urlPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_service_t>)>();

  /// Returns the stream key (if any) for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_key(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_key(
      service,
    );
  }

  late final _obs_service_get_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_key');
  late final _obs_service_get_key = _obs_service_get_keyPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_service_t>)>();

  /// Returns the username (if any) for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_username(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_username(
      service,
    );
  }

  late final _obs_service_get_usernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_username');
  late final _obs_service_get_username = _obs_service_get_usernamePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_service_t>)>();

  /// Returns the password (if any) for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_password(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_password(
      service,
    );
  }

  late final _obs_service_get_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_password');
  late final _obs_service_get_password = _obs_service_get_passwordPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_service_t>)>();

  /// Applies service-specific video encoder settings.
  ///
  /// @param  video_encoder_settings  Video encoder settings.  Optional.
  /// @param  audio_encoder_settings  Audio encoder settings.  Optional.
  void obs_service_apply_encoder_settings(
    ffi.Pointer<obs_service_t> service,
    ffi.Pointer<obs_data_t> video_encoder_settings,
    ffi.Pointer<obs_data_t> audio_encoder_settings,
  ) {
    return _obs_service_apply_encoder_settings(
      service,
      video_encoder_settings,
      audio_encoder_settings,
    );
  }

  late final _obs_service_apply_encoder_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_service_t>, ffi.Pointer<obs_data_t>,
              ffi.Pointer<obs_data_t>)>>('obs_service_apply_encoder_settings');
  late final _obs_service_apply_encoder_settings =
      _obs_service_apply_encoder_settingsPtr.asFunction<
          void Function(ffi.Pointer<obs_service_t>, ffi.Pointer<obs_data_t>,
              ffi.Pointer<obs_data_t>)>();

  ffi.Pointer<ffi.Void> obs_service_get_type_data(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_type_data(
      service,
    );
  }

  late final _obs_service_get_type_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_type_data');
  late final _obs_service_get_type_data = _obs_service_get_type_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<obs_service_t>)>();

  ffi.Pointer<ffi.Int8> obs_service_get_id(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_id(
      service,
    );
  }

  late final _obs_service_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_id');
  late final _obs_service_get_id = _obs_service_get_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_service_t>)>();

  void obs_service_get_supported_resolutions(
    ffi.Pointer<obs_service_t> service,
    ffi.Pointer<ffi.Pointer<obs_service_resolution>> resolutions,
    ffi.Pointer<size_t> count,
  ) {
    return _obs_service_get_supported_resolutions(
      service,
      resolutions,
      count,
    );
  }

  late final _obs_service_get_supported_resolutionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_service_t>,
              ffi.Pointer<ffi.Pointer<obs_service_resolution>>,
              ffi.Pointer<size_t>)>>('obs_service_get_supported_resolutions');
  late final _obs_service_get_supported_resolutions =
      _obs_service_get_supported_resolutionsPtr.asFunction<
          void Function(
              ffi.Pointer<obs_service_t>,
              ffi.Pointer<ffi.Pointer<obs_service_resolution>>,
              ffi.Pointer<size_t>)>();

  void obs_service_get_max_fps(
    ffi.Pointer<obs_service_t> service,
    ffi.Pointer<ffi.Int32> fps,
  ) {
    return _obs_service_get_max_fps(
      service,
      fps,
    );
  }

  late final _obs_service_get_max_fpsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_service_t>,
              ffi.Pointer<ffi.Int32>)>>('obs_service_get_max_fps');
  late final _obs_service_get_max_fps = _obs_service_get_max_fpsPtr.asFunction<
      void Function(ffi.Pointer<obs_service_t>, ffi.Pointer<ffi.Int32>)>();

  void obs_service_get_max_bitrate(
    ffi.Pointer<obs_service_t> service,
    ffi.Pointer<ffi.Int32> video_bitrate,
    ffi.Pointer<ffi.Int32> audio_bitrate,
  ) {
    return _obs_service_get_max_bitrate(
      service,
      video_bitrate,
      audio_bitrate,
    );
  }

  late final _obs_service_get_max_bitratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_service_t>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('obs_service_get_max_bitrate');
  late final _obs_service_get_max_bitrate =
      _obs_service_get_max_bitratePtr.asFunction<
          void Function(ffi.Pointer<obs_service_t>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> obs_service_get_output_type(
    ffi.Pointer<obs_service_t> service,
  ) {
    return _obs_service_get_output_type(
      service,
    );
  }

  late final _obs_service_get_output_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<obs_service_t>)>>('obs_service_get_output_type');
  late final _obs_service_get_output_type = _obs_service_get_output_typePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<obs_service_t>)>();

  void obs_source_frame_init(
    ffi.Pointer<obs_source_frame> frame,
    int format,
    int width,
    int height,
  ) {
    return _obs_source_frame_init(
      frame,
      format,
      width,
      height,
    );
  }

  late final _obs_source_frame_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_frame>, ffi.Int32,
              ffi.Uint32, ffi.Uint32)>>('obs_source_frame_init');
  late final _obs_source_frame_init = _obs_source_frame_initPtr.asFunction<
      void Function(ffi.Pointer<obs_source_frame>, int, int, int)>();

  void obs_source_frame_copy(
    ffi.Pointer<obs_source_frame> dst,
    ffi.Pointer<obs_source_frame> src,
  ) {
    return _obs_source_frame_copy(
      dst,
      src,
    );
  }

  late final _obs_source_frame_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<obs_source_frame>,
              ffi.Pointer<obs_source_frame>)>>('obs_source_frame_copy');
  late final _obs_source_frame_copy = _obs_source_frame_copyPtr.asFunction<
      void Function(
          ffi.Pointer<obs_source_frame>, ffi.Pointer<obs_source_frame>)>();

  /// Adds a frame callback for this source.
  ///
  /// @param  source   The source.
  /// @param  frame    The frame callback which is called each time a frame
  /// updates.
  /// @param  param    The user data to be associated with this frame callback.
  void obs_source_add_frame_callback(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>,
                    ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_frame>)>>
        frame,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_source_add_frame_callback(
      source,
      frame,
      param,
    );
  }

  late final _obs_source_add_frame_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<obs_source_t>,
                          ffi.Pointer<obs_source_frame>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_source_add_frame_callback');
  late final _obs_source_add_frame_callback =
      _obs_source_add_frame_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<obs_source_t>,
                          ffi.Pointer<obs_source_frame>)>>,
              ffi.Pointer<ffi.Void>)>();

  /// Removes a frame callback for this source
  void obs_source_remove_frame_callback(
    ffi.Pointer<obs_source_t> source,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>,
                    ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_frame>)>>
        frame,
    ffi.Pointer<ffi.Void> param,
  ) {
    return _obs_source_remove_frame_callback(
      source,
      frame,
      param,
    );
  }

  late final _obs_source_remove_frame_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<obs_source_t>,
                          ffi.Pointer<obs_source_frame>)>>,
              ffi.Pointer<ffi.Void>)>>('obs_source_remove_frame_callback');
  late final _obs_source_remove_frame_callback =
      _obs_source_remove_frame_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<obs_source_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<obs_source_t>,
                          ffi.Pointer<obs_source_frame>)>>,
              ffi.Pointer<ffi.Void>)>();

  int obs_source_get_icon_type(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _obs_source_get_icon_type(
      id,
    );
  }

  late final _obs_source_get_icon_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'obs_source_get_icon_type');
  late final _obs_source_get_icon_type = _obs_source_get_icon_typePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> os_wfopen(
    ffi.Pointer<wchar_t> path,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _os_wfopen(
      path,
      mode,
    );
  }

  late final _os_wfopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>)>>('os_wfopen');
  late final _os_wfopen = _os_wfopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> os_fopen(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _os_fopen(
      path,
      mode,
    );
  }

  late final _os_fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('os_fopen');
  late final _os_fopen = _os_fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int os_fgetsize(
    ffi.Pointer<FILE> file,
  ) {
    return _os_fgetsize(
      file,
    );
  }

  late final _os_fgetsizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'os_fgetsize');
  late final _os_fgetsize =
      _os_fgetsizePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int os_fseeki64(
    ffi.Pointer<FILE> file,
    int offset,
    int origin,
  ) {
    return _os_fseeki64(
      file,
      offset,
      origin,
    );
  }

  late final _os_fseeki64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('os_fseeki64');
  late final _os_fseeki64 =
      _os_fseeki64Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int os_ftelli64(
    ffi.Pointer<FILE> file,
  ) {
    return _os_ftelli64(
      file,
    );
  }

  late final _os_ftelli64Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'os_ftelli64');
  late final _os_ftelli64 =
      _os_ftelli64Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int os_fread_mbs(
    ffi.Pointer<FILE> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pstr,
  ) {
    return _os_fread_mbs(
      file,
      pstr,
    );
  }

  late final _os_fread_mbsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('os_fread_mbs');
  late final _os_fread_mbs = _os_fread_mbsPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int os_fread_utf8(
    ffi.Pointer<FILE> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pstr,
  ) {
    return _os_fread_utf8(
      file,
      pstr,
    );
  }

  late final _os_fread_utf8Ptr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('os_fread_utf8');
  late final _os_fread_utf8 = _os_fread_utf8Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<ffi.Int8> os_quick_read_utf8_file(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_quick_read_utf8_file(
      path,
    );
  }

  late final _os_quick_read_utf8_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('os_quick_read_utf8_file');
  late final _os_quick_read_utf8_file = _os_quick_read_utf8_filePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int os_quick_write_utf8_file(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> str,
    int len,
    int marker,
  ) {
    return _os_quick_write_utf8_file(
      path,
      str,
      len,
      marker,
    );
  }

  late final _os_quick_write_utf8_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t, ffi.Uint8)>>('os_quick_write_utf8_file');
  late final _os_quick_write_utf8_file =
      _os_quick_write_utf8_filePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int)>();

  int os_quick_write_utf8_file_safe(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> str,
    int len,
    int marker,
    ffi.Pointer<ffi.Int8> temp_ext,
    ffi.Pointer<ffi.Int8> backup_ext,
  ) {
    return _os_quick_write_utf8_file_safe(
      path,
      str,
      len,
      marker,
      temp_ext,
      backup_ext,
    );
  }

  late final _os_quick_write_utf8_file_safePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Uint8,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('os_quick_write_utf8_file_safe');
  late final _os_quick_write_utf8_file_safe =
      _os_quick_write_utf8_file_safePtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> os_quick_read_mbs_file(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_quick_read_mbs_file(
      path,
    );
  }

  late final _os_quick_read_mbs_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('os_quick_read_mbs_file');
  late final _os_quick_read_mbs_file = _os_quick_read_mbs_filePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int os_quick_write_mbs_file(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> str,
    int len,
  ) {
    return _os_quick_write_mbs_file(
      path,
      str,
      len,
    );
  }

  late final _os_quick_write_mbs_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('os_quick_write_mbs_file');
  late final _os_quick_write_mbs_file = _os_quick_write_mbs_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int os_get_file_size(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_get_file_size(
      path,
    );
  }

  late final _os_get_file_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_get_file_size');
  late final _os_get_file_size =
      _os_get_file_sizePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int os_get_free_space(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_get_free_space(
      path,
    );
  }

  late final _os_get_free_spacePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_get_free_space');
  late final _os_get_free_space =
      _os_get_free_spacePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int os_mbs_to_wcs(
    ffi.Pointer<ffi.Int8> str,
    int str_len,
    ffi.Pointer<wchar_t> dst,
    int dst_size,
  ) {
    return _os_mbs_to_wcs(
      str,
      str_len,
      dst,
      dst_size,
    );
  }

  late final _os_mbs_to_wcsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t, ffi.Pointer<wchar_t>,
              size_t)>>('os_mbs_to_wcs');
  late final _os_mbs_to_wcs = _os_mbs_to_wcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<wchar_t>, int)>();

  int os_utf8_to_wcs(
    ffi.Pointer<ffi.Int8> str,
    int len,
    ffi.Pointer<wchar_t> dst,
    int dst_size,
  ) {
    return _os_utf8_to_wcs(
      str,
      len,
      dst,
      dst_size,
    );
  }

  late final _os_utf8_to_wcsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t, ffi.Pointer<wchar_t>,
              size_t)>>('os_utf8_to_wcs');
  late final _os_utf8_to_wcs = _os_utf8_to_wcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<wchar_t>, int)>();

  int os_wcs_to_mbs(
    ffi.Pointer<wchar_t> str,
    int len,
    ffi.Pointer<ffi.Int8> dst,
    int dst_size,
  ) {
    return _os_wcs_to_mbs(
      str,
      len,
      dst,
      dst_size,
    );
  }

  late final _os_wcs_to_mbsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, size_t, ffi.Pointer<ffi.Int8>,
              size_t)>>('os_wcs_to_mbs');
  late final _os_wcs_to_mbs = _os_wcs_to_mbsPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<ffi.Int8>, int)>();

  int os_wcs_to_utf8(
    ffi.Pointer<wchar_t> str,
    int len,
    ffi.Pointer<ffi.Int8> dst,
    int dst_size,
  ) {
    return _os_wcs_to_utf8(
      str,
      len,
      dst,
      dst_size,
    );
  }

  late final _os_wcs_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, size_t, ffi.Pointer<ffi.Int8>,
              size_t)>>('os_wcs_to_utf8');
  late final _os_wcs_to_utf8 = _os_wcs_to_utf8Ptr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<ffi.Int8>, int)>();

  int os_mbs_to_wcs_ptr(
    ffi.Pointer<ffi.Int8> str,
    int len,
    ffi.Pointer<ffi.Pointer<wchar_t>> pstr,
  ) {
    return _os_mbs_to_wcs_ptr(
      str,
      len,
      pstr,
    );
  }

  late final _os_mbs_to_wcs_ptrPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('os_mbs_to_wcs_ptr');
  late final _os_mbs_to_wcs_ptr = _os_mbs_to_wcs_ptrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int os_utf8_to_wcs_ptr(
    ffi.Pointer<ffi.Int8> str,
    int len,
    ffi.Pointer<ffi.Pointer<wchar_t>> pstr,
  ) {
    return _os_utf8_to_wcs_ptr(
      str,
      len,
      pstr,
    );
  }

  late final _os_utf8_to_wcs_ptrPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('os_utf8_to_wcs_ptr');
  late final _os_utf8_to_wcs_ptr = _os_utf8_to_wcs_ptrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int os_wcs_to_mbs_ptr(
    ffi.Pointer<wchar_t> str,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pstr,
  ) {
    return _os_wcs_to_mbs_ptr(
      str,
      len,
      pstr,
    );
  }

  late final _os_wcs_to_mbs_ptrPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('os_wcs_to_mbs_ptr');
  late final _os_wcs_to_mbs_ptr = _os_wcs_to_mbs_ptrPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int os_wcs_to_utf8_ptr(
    ffi.Pointer<wchar_t> str,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pstr,
  ) {
    return _os_wcs_to_utf8_ptr(
      str,
      len,
      pstr,
    );
  }

  late final _os_wcs_to_utf8_ptrPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('os_wcs_to_utf8_ptr');
  late final _os_wcs_to_utf8_ptr = _os_wcs_to_utf8_ptrPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int os_utf8_to_mbs_ptr(
    ffi.Pointer<ffi.Int8> str,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pstr,
  ) {
    return _os_utf8_to_mbs_ptr(
      str,
      len,
      pstr,
    );
  }

  late final _os_utf8_to_mbs_ptrPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('os_utf8_to_mbs_ptr');
  late final _os_utf8_to_mbs_ptr = _os_utf8_to_mbs_ptrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int os_mbs_to_utf8_ptr(
    ffi.Pointer<ffi.Int8> str,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pstr,
  ) {
    return _os_mbs_to_utf8_ptr(
      str,
      len,
      pstr,
    );
  }

  late final _os_mbs_to_utf8_ptrPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('os_mbs_to_utf8_ptr');
  late final _os_mbs_to_utf8_ptr = _os_mbs_to_utf8_ptrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double os_strtod(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _os_strtod(
      str,
    );
  }

  late final _os_strtodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'os_strtod');
  late final _os_strtod =
      _os_strtodPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int os_dtostr(
    double value,
    ffi.Pointer<ffi.Int8> dst,
    int size,
  ) {
    return _os_dtostr(
      value,
      dst,
      size,
    );
  }

  late final _os_dtostrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<ffi.Int8>, size_t)>>('os_dtostr');
  late final _os_dtostr = _os_dtostrPtr
      .asFunction<int Function(double, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Void> os_dlopen(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_dlopen(
      path,
    );
  }

  late final _os_dlopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Int8>)>>('os_dlopen');
  late final _os_dlopen = _os_dlopenPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> os_dlsym(
    ffi.Pointer<ffi.Void> module,
    ffi.Pointer<ffi.Int8> func,
  ) {
    return _os_dlsym(
      module,
      func,
    );
  }

  late final _os_dlsymPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>)>>('os_dlsym');
  late final _os_dlsym = _os_dlsymPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>)>();

  void os_dlclose(
    ffi.Pointer<ffi.Void> module,
  ) {
    return _os_dlclose(
      module,
    );
  }

  late final _os_dlclosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'os_dlclose');
  late final _os_dlclose =
      _os_dlclosePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int os_is_obs_plugin(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_is_obs_plugin(
      path,
    );
  }

  late final _os_is_obs_pluginPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_is_obs_plugin');
  late final _os_is_obs_plugin =
      _os_is_obs_pluginPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<os_cpu_usage_info_t> os_cpu_usage_info_start() {
    return _os_cpu_usage_info_start();
  }

  late final _os_cpu_usage_info_startPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<os_cpu_usage_info_t> Function()>>(
          'os_cpu_usage_info_start');
  late final _os_cpu_usage_info_start = _os_cpu_usage_info_startPtr
      .asFunction<ffi.Pointer<os_cpu_usage_info_t> Function()>();

  double os_cpu_usage_info_query(
    ffi.Pointer<os_cpu_usage_info_t> info,
  ) {
    return _os_cpu_usage_info_query(
      info,
    );
  }

  late final _os_cpu_usage_info_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<os_cpu_usage_info_t>)>>('os_cpu_usage_info_query');
  late final _os_cpu_usage_info_query = _os_cpu_usage_info_queryPtr
      .asFunction<double Function(ffi.Pointer<os_cpu_usage_info_t>)>();

  void os_cpu_usage_info_destroy(
    ffi.Pointer<os_cpu_usage_info_t> info,
  ) {
    return _os_cpu_usage_info_destroy(
      info,
    );
  }

  late final _os_cpu_usage_info_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<os_cpu_usage_info_t>)>>('os_cpu_usage_info_destroy');
  late final _os_cpu_usage_info_destroy = _os_cpu_usage_info_destroyPtr
      .asFunction<void Function(ffi.Pointer<os_cpu_usage_info_t>)>();

  ffi.Pointer<os_performance_token_t> os_request_high_performance(
    ffi.Pointer<ffi.Int8> reason,
  ) {
    return _os_request_high_performance(
      reason,
    );
  }

  late final _os_request_high_performancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<os_performance_token_t> Function(
              ffi.Pointer<ffi.Int8>)>>('os_request_high_performance');
  late final _os_request_high_performance =
      _os_request_high_performancePtr.asFunction<
          ffi.Pointer<os_performance_token_t> Function(
              ffi.Pointer<ffi.Int8>)>();

  void os_end_high_performance(
    ffi.Pointer<os_performance_token_t> arg0,
  ) {
    return _os_end_high_performance(
      arg0,
    );
  }

  late final _os_end_high_performancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<os_performance_token_t>)>>('os_end_high_performance');
  late final _os_end_high_performance = _os_end_high_performancePtr
      .asFunction<void Function(ffi.Pointer<os_performance_token_t>)>();

  /// Sleeps to a specific time (in nanoseconds).  Doesn't have to be super
  /// accurate in terms of actual slept time because the target time is ensured.
  /// Returns false if already at or past target time.
  int os_sleepto_ns(
    int time_target,
  ) {
    return _os_sleepto_ns(
      time_target,
    );
  }

  late final _os_sleepto_nsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Uint64)>>(
          'os_sleepto_ns');
  late final _os_sleepto_ns = _os_sleepto_nsPtr.asFunction<int Function(int)>();

  void os_sleep_ms(
    int duration,
  ) {
    return _os_sleep_ms(
      duration,
    );
  }

  late final _os_sleep_msPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('os_sleep_ms');
  late final _os_sleep_ms = _os_sleep_msPtr.asFunction<void Function(int)>();

  int os_gettime_ns() {
    return _os_gettime_ns();
  }

  late final _os_gettime_nsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>('os_gettime_ns');
  late final _os_gettime_ns = _os_gettime_nsPtr.asFunction<int Function()>();

  int os_get_config_path(
    ffi.Pointer<ffi.Int8> dst,
    int size,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _os_get_config_path(
      dst,
      size,
      name,
    );
  }

  late final _os_get_config_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>)>>('os_get_config_path');
  late final _os_get_config_path = _os_get_config_pathPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> os_get_config_path_ptr(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _os_get_config_path_ptr(
      name,
    );
  }

  late final _os_get_config_path_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('os_get_config_path_ptr');
  late final _os_get_config_path_ptr = _os_get_config_path_ptrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int os_get_program_data_path(
    ffi.Pointer<ffi.Int8> dst,
    int size,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _os_get_program_data_path(
      dst,
      size,
      name,
    );
  }

  late final _os_get_program_data_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>)>>('os_get_program_data_path');
  late final _os_get_program_data_path =
      _os_get_program_data_pathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> os_get_program_data_path_ptr(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _os_get_program_data_path_ptr(
      name,
    );
  }

  late final _os_get_program_data_path_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('os_get_program_data_path_ptr');
  late final _os_get_program_data_path_ptr = _os_get_program_data_path_ptrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> os_get_executable_path_ptr(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _os_get_executable_path_ptr(
      name,
    );
  }

  late final _os_get_executable_path_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('os_get_executable_path_ptr');
  late final _os_get_executable_path_ptr = _os_get_executable_path_ptrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int os_file_exists(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_file_exists(
      path,
    );
  }

  late final _os_file_existsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_file_exists');
  late final _os_file_exists =
      _os_file_existsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int os_get_abs_path(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> abspath,
    int size,
  ) {
    return _os_get_abs_path(
      path,
      abspath,
      size,
    );
  }

  late final _os_get_abs_pathPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('os_get_abs_path');
  late final _os_get_abs_path = _os_get_abs_pathPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> os_get_abs_path_ptr(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_get_abs_path_ptr(
      path,
    );
  }

  late final _os_get_abs_path_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('os_get_abs_path_ptr');
  late final _os_get_abs_path_ptr = _os_get_abs_path_ptrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> os_get_path_extension(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_get_path_extension(
      path,
    );
  }

  late final _os_get_path_extensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('os_get_path_extension');
  late final _os_get_path_extension = _os_get_path_extensionPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<os_dir_t> os_opendir(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_opendir(
      path,
    );
  }

  late final _os_opendirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<os_dir_t> Function(ffi.Pointer<ffi.Int8>)>>('os_opendir');
  late final _os_opendir = _os_opendirPtr
      .asFunction<ffi.Pointer<os_dir_t> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<os_dirent> os_readdir(
    ffi.Pointer<os_dir_t> dir,
  ) {
    return _os_readdir(
      dir,
    );
  }

  late final _os_readdirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<os_dirent> Function(
              ffi.Pointer<os_dir_t>)>>('os_readdir');
  late final _os_readdir = _os_readdirPtr
      .asFunction<ffi.Pointer<os_dirent> Function(ffi.Pointer<os_dir_t>)>();

  void os_closedir(
    ffi.Pointer<os_dir_t> dir,
  ) {
    return _os_closedir(
      dir,
    );
  }

  late final _os_closedirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<os_dir_t>)>>(
          'os_closedir');
  late final _os_closedir =
      _os_closedirPtr.asFunction<void Function(ffi.Pointer<os_dir_t>)>();

  int os_glob(
    ffi.Pointer<ffi.Int8> pattern,
    int flags,
    ffi.Pointer<ffi.Pointer<os_glob_t>> pglob,
  ) {
    return _os_glob(
      pattern,
      flags,
      pglob,
    );
  }

  late final _os_globPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<os_glob_t>>)>>('os_glob');
  late final _os_glob = _os_globPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Pointer<os_glob_t>>)>();

  void os_globfree(
    ffi.Pointer<os_glob_t> pglob,
  ) {
    return _os_globfree(
      pglob,
    );
  }

  late final _os_globfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<os_glob_t>)>>(
          'os_globfree');
  late final _os_globfree =
      _os_globfreePtr.asFunction<void Function(ffi.Pointer<os_glob_t>)>();

  int os_unlink(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_unlink(
      path,
    );
  }

  late final _os_unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_unlink');
  late final _os_unlink =
      _os_unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int os_rmdir(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_rmdir(
      path,
    );
  }

  late final _os_rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_rmdir');
  late final _os_rmdir =
      _os_rmdirPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> os_getcwd(
    ffi.Pointer<ffi.Int8> path,
    int size,
  ) {
    return _os_getcwd(
      path,
      size,
    );
  }

  late final _os_getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, size_t)>>('os_getcwd');
  late final _os_getcwd = _os_getcwdPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int os_chdir(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_chdir(
      path,
    );
  }

  late final _os_chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_chdir');
  late final _os_chdir =
      _os_chdirPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int os_get_free_disk_space(
    ffi.Pointer<ffi.Int8> dir,
  ) {
    return _os_get_free_disk_space(
      dir,
    );
  }

  late final _os_get_free_disk_spacePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_get_free_disk_space');
  late final _os_get_free_disk_space = _os_get_free_disk_spacePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int os_mkdir(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_mkdir(
      path,
    );
  }

  late final _os_mkdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_mkdir');
  late final _os_mkdir =
      _os_mkdirPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int os_mkdirs(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _os_mkdirs(
      path,
    );
  }

  late final _os_mkdirsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'os_mkdirs');
  late final _os_mkdirs =
      _os_mkdirsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int os_rename(
    ffi.Pointer<ffi.Int8> old_path,
    ffi.Pointer<ffi.Int8> new_path,
  ) {
    return _os_rename(
      old_path,
      new_path,
    );
  }

  late final _os_renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('os_rename');
  late final _os_rename = _os_renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int os_copyfile(
    ffi.Pointer<ffi.Int8> file_in,
    ffi.Pointer<ffi.Int8> file_out,
  ) {
    return _os_copyfile(
      file_in,
      file_out,
    );
  }

  late final _os_copyfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('os_copyfile');
  late final _os_copyfile = _os_copyfilePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int os_safe_replace(
    ffi.Pointer<ffi.Int8> target_path,
    ffi.Pointer<ffi.Int8> from_path,
    ffi.Pointer<ffi.Int8> backup_path,
  ) {
    return _os_safe_replace(
      target_path,
      from_path,
      backup_path,
    );
  }

  late final _os_safe_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('os_safe_replace');
  late final _os_safe_replace = _os_safe_replacePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> os_generate_formatted_filename(
    ffi.Pointer<ffi.Int8> extension1,
    int space,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _os_generate_formatted_filename(
      extension1,
      space,
      format,
    );
  }

  late final _os_generate_formatted_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Uint8,
              ffi.Pointer<ffi.Int8>)>>('os_generate_formatted_filename');
  late final _os_generate_formatted_filename =
      _os_generate_formatted_filenamePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<os_inhibit_t> os_inhibit_sleep_create(
    ffi.Pointer<ffi.Int8> reason,
  ) {
    return _os_inhibit_sleep_create(
      reason,
    );
  }

  late final _os_inhibit_sleep_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<os_inhibit_t> Function(
              ffi.Pointer<ffi.Int8>)>>('os_inhibit_sleep_create');
  late final _os_inhibit_sleep_create = _os_inhibit_sleep_createPtr
      .asFunction<ffi.Pointer<os_inhibit_t> Function(ffi.Pointer<ffi.Int8>)>();

  int os_inhibit_sleep_set_active(
    ffi.Pointer<os_inhibit_t> info,
    int active,
  ) {
    return _os_inhibit_sleep_set_active(
      info,
      active,
    );
  }

  late final _os_inhibit_sleep_set_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<os_inhibit_t>,
              ffi.Uint8)>>('os_inhibit_sleep_set_active');
  late final _os_inhibit_sleep_set_active = _os_inhibit_sleep_set_activePtr
      .asFunction<int Function(ffi.Pointer<os_inhibit_t>, int)>();

  void os_inhibit_sleep_destroy(
    ffi.Pointer<os_inhibit_t> info,
  ) {
    return _os_inhibit_sleep_destroy(
      info,
    );
  }

  late final _os_inhibit_sleep_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<os_inhibit_t>)>>(
          'os_inhibit_sleep_destroy');
  late final _os_inhibit_sleep_destroy = _os_inhibit_sleep_destroyPtr
      .asFunction<void Function(ffi.Pointer<os_inhibit_t>)>();

  void os_breakpoint() {
    return _os_breakpoint();
  }

  late final _os_breakpointPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('os_breakpoint');
  late final _os_breakpoint = _os_breakpointPtr.asFunction<void Function()>();

  int os_get_physical_cores() {
    return _os_get_physical_cores();
  }

  late final _os_get_physical_coresPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'os_get_physical_cores');
  late final _os_get_physical_cores =
      _os_get_physical_coresPtr.asFunction<int Function()>();

  int os_get_logical_cores() {
    return _os_get_logical_cores();
  }

  late final _os_get_logical_coresPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('os_get_logical_cores');
  late final _os_get_logical_cores =
      _os_get_logical_coresPtr.asFunction<int Function()>();

  int os_get_sys_free_size() {
    return _os_get_sys_free_size();
  }

  late final _os_get_sys_free_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'os_get_sys_free_size');
  late final _os_get_sys_free_size =
      _os_get_sys_free_sizePtr.asFunction<int Function()>();

  int os_get_proc_memory_usage(
    ffi.Pointer<os_proc_memory_usage_t> usage,
  ) {
    return _os_get_proc_memory_usage(
      usage,
    );
  }

  late final _os_get_proc_memory_usagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<os_proc_memory_usage_t>)>>(
      'os_get_proc_memory_usage');
  late final _os_get_proc_memory_usage = _os_get_proc_memory_usagePtr
      .asFunction<int Function(ffi.Pointer<os_proc_memory_usage_t>)>();

  int os_get_proc_resident_size() {
    return _os_get_proc_resident_size();
  }

  late final _os_get_proc_resident_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'os_get_proc_resident_size');
  late final _os_get_proc_resident_size =
      _os_get_proc_resident_sizePtr.asFunction<int Function()>();

  int os_get_proc_virtual_size() {
    return _os_get_proc_virtual_size();
  }

  late final _os_get_proc_virtual_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'os_get_proc_virtual_size');
  late final _os_get_proc_virtual_size =
      _os_get_proc_virtual_sizePtr.asFunction<int Function()>();
}

class base_allocator extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>
      malloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, size_t)>>
      realloc;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

typedef size_t = __darwin_size_t;
typedef __darwin_size_t = ffi.Uint64;

class profiler_snapshot extends ffi.Opaque {}

class profiler_snapshot_entry extends ffi.Opaque {}

class profiler_time_entry extends ffi.Struct {
  @ffi.Uint64()
  external int time_delta;

  @ffi.Uint64()
  external int count;
}

typedef profiler_snapshot_t = profiler_snapshot;

class profiler_name_store extends ffi.Opaque {}

typedef profiler_name_store_t = profiler_name_store;

class profiler_time_entries_t extends ffi.Union {
  external darray da;
}

class darray extends ffi.Struct {
  external ffi.Pointer<ffi.Void> array;

  @size_t()
  external int num;

  @size_t()
  external int capacity;
}

typedef profiler_entry_enum_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<profiler_snapshot_entry_t>)>>;
typedef profiler_snapshot_entry_t = profiler_snapshot_entry;
typedef profiler_name_filter_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Uint8>)>>;

class text_lookup extends ffi.Opaque {}

typedef lookup_t = text_lookup;

class vec2 extends ffi.Opaque {}

class vec3 extends ffi.Opaque {}

class vec4 extends ffi.Opaque {}

class quat extends ffi.Opaque {}

class axisang extends ffi.Opaque {}

class plane extends ffi.Opaque {}

class matrix3 extends ffi.Opaque {}

class matrix4 extends ffi.Opaque {}

abstract class gs_draw_mode {
  static const int GS_POINTS = 0;
  static const int GS_LINES = 1;
  static const int GS_LINESTRIP = 2;
  static const int GS_TRIS = 3;
  static const int GS_TRISTRIP = 4;
}

abstract class gs_color_format {
  static const int GS_UNKNOWN = 0;
  static const int GS_A8 = 1;
  static const int GS_R8 = 2;
  static const int GS_RGBA = 3;
  static const int GS_BGRX = 4;
  static const int GS_BGRA = 5;
  static const int GS_R10G10B10A2 = 6;
  static const int GS_RGBA16 = 7;
  static const int GS_R16 = 8;
  static const int GS_RGBA16F = 9;
  static const int GS_RGBA32F = 10;
  static const int GS_RG16F = 11;
  static const int GS_RG32F = 12;
  static const int GS_R16F = 13;
  static const int GS_R32F = 14;
  static const int GS_DXT1 = 15;
  static const int GS_DXT3 = 16;
  static const int GS_DXT5 = 17;
  static const int GS_R8G8 = 18;
  static const int GS_RGBA_UNORM = 19;
  static const int GS_BGRX_UNORM = 20;
  static const int GS_BGRA_UNORM = 21;
}

abstract class gs_zstencil_format {
  static const int GS_ZS_NONE = 0;
  static const int GS_Z16 = 1;
  static const int GS_Z24_S8 = 2;
  static const int GS_Z32F = 3;
  static const int GS_Z32F_S8X24 = 4;
}

abstract class gs_index_type {
  static const int GS_UNSIGNED_SHORT = 0;
  static const int GS_UNSIGNED_LONG = 1;
}

abstract class gs_cull_mode {
  static const int GS_BACK = 0;
  static const int GS_FRONT = 1;
  static const int GS_NEITHER = 2;
}

abstract class gs_blend_type {
  static const int GS_BLEND_ZERO = 0;
  static const int GS_BLEND_ONE = 1;
  static const int GS_BLEND_SRCCOLOR = 2;
  static const int GS_BLEND_INVSRCCOLOR = 3;
  static const int GS_BLEND_SRCALPHA = 4;
  static const int GS_BLEND_INVSRCALPHA = 5;
  static const int GS_BLEND_DSTCOLOR = 6;
  static const int GS_BLEND_INVDSTCOLOR = 7;
  static const int GS_BLEND_DSTALPHA = 8;
  static const int GS_BLEND_INVDSTALPHA = 9;
  static const int GS_BLEND_SRCALPHASAT = 10;
}

abstract class gs_depth_test {
  static const int GS_NEVER = 0;
  static const int GS_LESS = 1;
  static const int GS_LEQUAL = 2;
  static const int GS_EQUAL = 3;
  static const int GS_GEQUAL = 4;
  static const int GS_GREATER = 5;
  static const int GS_NOTEQUAL = 6;
  static const int GS_ALWAYS = 7;
}

abstract class gs_stencil_side {
  static const int GS_STENCIL_FRONT = 1;
  static const int GS_STENCIL_BACK = 2;
  static const int GS_STENCIL_BOTH = 3;
}

abstract class gs_stencil_op_type {
  static const int GS_KEEP = 0;
  static const int GS_ZERO = 1;
  static const int GS_REPLACE = 2;
  static const int GS_INCR = 3;
  static const int GS_DECR = 4;
  static const int GS_INVERT = 5;
}

abstract class gs_cube_sides {
  static const int GS_POSITIVE_X = 0;
  static const int GS_NEGATIVE_X = 1;
  static const int GS_POSITIVE_Y = 2;
  static const int GS_NEGATIVE_Y = 3;
  static const int GS_POSITIVE_Z = 4;
  static const int GS_NEGATIVE_Z = 5;
}

abstract class gs_sample_filter {
  static const int GS_FILTER_POINT = 0;
  static const int GS_FILTER_LINEAR = 1;
  static const int GS_FILTER_ANISOTROPIC = 2;
  static const int GS_FILTER_MIN_MAG_POINT_MIP_LINEAR = 3;
  static const int GS_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4;
  static const int GS_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5;
  static const int GS_FILTER_MIN_LINEAR_MAG_MIP_POINT = 6;
  static const int GS_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 7;
  static const int GS_FILTER_MIN_MAG_LINEAR_MIP_POINT = 8;
}

abstract class gs_address_mode {
  static const int GS_ADDRESS_CLAMP = 0;
  static const int GS_ADDRESS_WRAP = 1;
  static const int GS_ADDRESS_MIRROR = 2;
  static const int GS_ADDRESS_BORDER = 3;
  static const int GS_ADDRESS_MIRRORONCE = 4;
}

abstract class gs_texture_type {
  static const int GS_TEXTURE_2D = 0;
  static const int GS_TEXTURE_3D = 1;
  static const int GS_TEXTURE_CUBE = 2;
}

class gs_device_loss extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      device_loss_release;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      device_loss_rebuild;

  external ffi.Pointer<ffi.Void> data;
}

class gs_monitor_info extends ffi.Struct {
  @ffi.Int32()
  external int rotation_degrees;

  @ffi.Int64()
  external int x;

  @ffi.Int64()
  external int y;

  @ffi.Int64()
  external int cx;

  @ffi.Int64()
  external int cy;
}

class gs_tvertarray extends ffi.Struct {
  @size_t()
  external int width;

  external ffi.Pointer<ffi.Void> array;
}

class gs_vb_data extends ffi.Struct {
  @size_t()
  external int num;

  external ffi.Pointer<vec3> points;

  external ffi.Pointer<vec3> normals;

  external ffi.Pointer<vec3> tangents;

  external ffi.Pointer<ffi.Uint32> colors;

  @size_t()
  external int num_tex;

  external ffi.Pointer<gs_tvertarray> tvarray;
}

class gs_sampler_info extends ffi.Struct {
  @ffi.Int32()
  external int filter;

  @ffi.Int32()
  external int address_u;

  @ffi.Int32()
  external int address_v;

  @ffi.Int32()
  external int address_w;

  @ffi.Int32()
  external int max_anisotropy;

  @ffi.Uint32()
  external int border_color;
}

class gs_display_mode extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int bits;

  @ffi.Uint32()
  external int freq;
}

class gs_rect extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int cx;

  @ffi.Int32()
  external int cy;
}

class gs_texture extends ffi.Opaque {}

class gs_stage_surface extends ffi.Opaque {}

class gs_zstencil_buffer extends ffi.Opaque {}

class gs_vertex_buffer extends ffi.Opaque {}

class gs_index_buffer extends ffi.Opaque {}

class gs_sampler_state extends ffi.Opaque {}

class gs_shader extends ffi.Opaque {}

class gs_swap_chain extends ffi.Opaque {}

class gs_timer extends ffi.Opaque {}

class gs_texrender extends ffi.Opaque {}

class gs_shader_param extends ffi.Opaque {}

class gs_effect extends ffi.Opaque {}

class gs_effect_technique extends ffi.Opaque {}

class gs_effect_pass extends ffi.Opaque {}

class gs_effect_param extends ffi.Opaque {}

class gs_device extends ffi.Opaque {}

class graphics_subsystem extends ffi.Opaque {}

class gs_timer_range extends ffi.Opaque {}

class gs_texture_render extends ffi.Opaque {}

abstract class gs_shader_param_type {
  static const int GS_SHADER_PARAM_UNKNOWN = 0;
  static const int GS_SHADER_PARAM_BOOL = 1;
  static const int GS_SHADER_PARAM_FLOAT = 2;
  static const int GS_SHADER_PARAM_INT = 3;
  static const int GS_SHADER_PARAM_STRING = 4;
  static const int GS_SHADER_PARAM_VEC2 = 5;
  static const int GS_SHADER_PARAM_VEC3 = 6;
  static const int GS_SHADER_PARAM_VEC4 = 7;
  static const int GS_SHADER_PARAM_INT2 = 8;
  static const int GS_SHADER_PARAM_INT3 = 9;
  static const int GS_SHADER_PARAM_INT4 = 10;
  static const int GS_SHADER_PARAM_MATRIX4X4 = 11;
  static const int GS_SHADER_PARAM_TEXTURE = 12;
}

class gs_shader_texture extends ffi.Struct {
  external ffi.Pointer<gs_texture_t> tex;

  @ffi.Uint8()
  external int srgb;
}

typedef gs_texture_t = gs_texture;

class gs_shader_param_info extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Int8> name;
}

abstract class gs_shader_type {
  static const int GS_SHADER_VERTEX = 0;
  static const int GS_SHADER_PIXEL = 1;
}

typedef gs_shader_t = gs_shader;
typedef gs_sparam_t = gs_shader_param;
typedef gs_samplerstate_t = gs_sampler_state;

class gs_effect_param_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int type;
}

typedef gs_effect_t = gs_effect;
typedef gs_technique_t = gs_effect_technique;
typedef gs_epass_t = gs_effect_pass;
typedef gs_eparam_t = gs_effect_param;
typedef gs_texrender_t = gs_texture_render;

class gs_window extends ffi.Struct {
  external id view;
}

/// A pointer to an instance of a class.
typedef id = ffi.Pointer<objc_object>;

/// Represents an instance of a class.
class objc_object extends ffi.Struct {
  external Class isa;
}

/// An opaque type that represents an Objective-C class.
typedef Class = ffi.Pointer<objc_class>;

class objc_class extends ffi.Opaque {}

class gs_init_data extends ffi.Struct {
  external gs_window window;

  @ffi.Uint32()
  external int cx;

  @ffi.Uint32()
  external int cy;

  @ffi.Uint32()
  external int num_backbuffers;

  @ffi.Int32()
  external int format;

  @ffi.Int32()
  external int zsformat;

  @ffi.Uint32()
  external int adapter;
}

typedef graphics_t = graphics_subsystem;
typedef gs_vertbuffer_t = gs_vertex_buffer;
typedef input_t = input_subsystem;

class input_subsystem extends ffi.Opaque {}

typedef gs_swapchain_t = gs_swap_chain;
typedef gs_zstencil_t = gs_zstencil_buffer;
typedef gs_stagesurf_t = gs_stage_surface;
typedef gs_indexbuffer_t = gs_index_buffer;
typedef gs_timer_t = gs_timer;
typedef gs_timer_range_t = gs_timer_range;

class audio_output extends ffi.Opaque {}

abstract class audio_format {
  static const int AUDIO_FORMAT_UNKNOWN = 0;
  static const int AUDIO_FORMAT_U8BIT = 1;
  static const int AUDIO_FORMAT_16BIT = 2;
  static const int AUDIO_FORMAT_32BIT = 3;
  static const int AUDIO_FORMAT_FLOAT = 4;
  static const int AUDIO_FORMAT_U8BIT_PLANAR = 5;
  static const int AUDIO_FORMAT_16BIT_PLANAR = 6;
  static const int AUDIO_FORMAT_32BIT_PLANAR = 7;
  static const int AUDIO_FORMAT_FLOAT_PLANAR = 8;
}

/// The speaker layout describes where the speakers are located in the room.
/// For OBS it dictates:
/// *  how many channels are available and
/// *  which channels are used for which speakers.
///
/// Standard channel layouts where retrieved from ffmpeg documentation at:
/// https://trac.ffmpeg.org/wiki/AudioChannelManipulation
abstract class speaker_layout {
  /// < Unknown setting, fallback is stereo.
  static const int SPEAKERS_UNKNOWN = 0;

  /// < Channels: MONO
  static const int SPEAKERS_MONO = 1;

  /// < Channels: FL, FR
  static const int SPEAKERS_STEREO = 2;

  /// < Channels: FL, FR, LFE
  static const int SPEAKERS_2POINT1 = 3;

  /// < Channels: FL, FR, FC, RC
  static const int SPEAKERS_4POINT0 = 4;

  /// < Channels: FL, FR, FC, LFE, RC
  static const int SPEAKERS_4POINT1 = 5;

  /// < Channels: FL, FR, FC, LFE, RL, RR
  static const int SPEAKERS_5POINT1 = 6;

  /// < Channels: FL, FR, FC, LFE, RL, RR, SL, SR
  static const int SPEAKERS_7POINT1 = 8;
}

class audio_data extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> data;

  @ffi.Uint32()
  external int frames;

  @ffi.Uint64()
  external int timestamp;
}

class audio_output_data extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<ffi.Float>> data;
}

class audio_output_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int samples_per_sec;

  @ffi.Int32()
  external int format;

  @ffi.Int32()
  external int speakers;

  external audio_input_callback_t input_callback;

  external ffi.Pointer<ffi.Void> input_param;
}

typedef audio_input_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Void>,
            ffi.Uint64,
            ffi.Uint64,
            ffi.Pointer<ffi.Uint64>,
            ffi.Uint32,
            ffi.Pointer<audio_output_data>)>>;

class audio_convert_info extends ffi.Struct {
  @ffi.Uint32()
  external int samples_per_sec;

  @ffi.Int32()
  external int format;

  @ffi.Int32()
  external int speakers;
}

typedef audio_t = audio_output;
typedef audio_output_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, size_t, ffi.Pointer<audio_data>)>>;

class video_frame extends ffi.Opaque {}

class video_output extends ffi.Opaque {}

abstract class video_format {
  static const int VIDEO_FORMAT_NONE = 0;
  static const int VIDEO_FORMAT_I420 = 1;
  static const int VIDEO_FORMAT_NV12 = 2;
  static const int VIDEO_FORMAT_YVYU = 3;
  static const int VIDEO_FORMAT_YUY2 = 4;
  static const int VIDEO_FORMAT_UYVY = 5;
  static const int VIDEO_FORMAT_RGBA = 6;
  static const int VIDEO_FORMAT_BGRA = 7;
  static const int VIDEO_FORMAT_BGRX = 8;
  static const int VIDEO_FORMAT_Y800 = 9;
  static const int VIDEO_FORMAT_I444 = 10;
  static const int VIDEO_FORMAT_BGR3 = 11;
  static const int VIDEO_FORMAT_I422 = 12;
  static const int VIDEO_FORMAT_I40A = 13;
  static const int VIDEO_FORMAT_I42A = 14;
  static const int VIDEO_FORMAT_YUVA = 15;
  static const int VIDEO_FORMAT_AYUV = 16;
}

abstract class video_colorspace {
  static const int VIDEO_CS_DEFAULT = 0;
  static const int VIDEO_CS_601 = 1;
  static const int VIDEO_CS_709 = 2;
  static const int VIDEO_CS_SRGB = 3;
}

abstract class video_range_type {
  static const int VIDEO_RANGE_DEFAULT = 0;
  static const int VIDEO_RANGE_PARTIAL = 1;
  static const int VIDEO_RANGE_FULL = 2;
}

class video_data extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> data;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> linesize;

  @ffi.Uint64()
  external int timestamp;
}

class video_output_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int fps_num;

  @ffi.Uint32()
  external int fps_den;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @size_t()
  external int cache_size;

  @ffi.Int32()
  external int colorspace;

  @ffi.Int32()
  external int range;
}

abstract class video_scale_type {
  static const int VIDEO_SCALE_DEFAULT = 0;
  static const int VIDEO_SCALE_POINT = 1;
  static const int VIDEO_SCALE_FAST_BILINEAR = 2;
  static const int VIDEO_SCALE_BILINEAR = 3;
  static const int VIDEO_SCALE_BICUBIC = 4;
}

class video_scale_info extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Int32()
  external int range;

  @ffi.Int32()
  external int colorspace;
}

typedef video_t = video_output;

class signal_handler extends ffi.Opaque {}

typedef signal_handler_t = signal_handler;
typedef signal_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<calldata_t>)>>;
typedef calldata_t = calldata;

class calldata extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> stack;

  @size_t()
  external int size;

  @size_t()
  external int capacity;

  @ffi.Uint8()
  external int fixed;
}

typedef global_signal_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<calldata_t>)>>;

class proc_handler extends ffi.Opaque {}

typedef proc_handler_t = proc_handler;
typedef proc_handler_proc_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<calldata_t>)>>;

class obs_data extends ffi.Opaque {}

class obs_data_item extends ffi.Opaque {}

class obs_data_array extends ffi.Opaque {}

abstract class obs_data_type {
  static const int OBS_DATA_NULL = 0;
  static const int OBS_DATA_STRING = 1;
  static const int OBS_DATA_NUMBER = 2;
  static const int OBS_DATA_BOOLEAN = 3;
  static const int OBS_DATA_OBJECT = 4;
  static const int OBS_DATA_ARRAY = 5;
}

abstract class obs_data_number_type {
  static const int OBS_DATA_NUM_INVALID = 0;
  static const int OBS_DATA_NUM_INT = 1;
  static const int OBS_DATA_NUM_DOUBLE = 2;
}

typedef obs_data_t = obs_data;
typedef obs_data_array_t = obs_data_array;
typedef obs_data_item_t = obs_data_item;

class media_frames_per_second extends ffi.Struct {
  @ffi.Uint32()
  external int numerator;

  @ffi.Uint32()
  external int denominator;
}

/// Modal UI definition structure
class obs_modal_ui extends ffi.Struct {
  /// < Identifier associated with this UI
  external ffi.Pointer<ffi.Int8> id;

  /// < Task of the UI
  external ffi.Pointer<ffi.Int8> task;

  /// < UI target (UI toolkit or program name)
  external ffi.Pointer<ffi.Int8> target;

  /// Callback to execute modal interface.
  ///
  /// The @b object variable points to the input/output/encoder/etc.  The
  /// @b ui_data variable points to the UI parent or UI-specific data to
  /// be used with the custom user interface.
  ///
  /// What @b ui_data points to differs depending on the target, and you
  /// should use discretion and consistency when using this variable to
  /// relay information to the UI function.  For example, it would be
  /// ideal to have @b ui_data point to a parent, QWidget for Qt, or a
  /// wxWindow for wxWidgets, etc., though it's up to the discretion of
  /// the developer to define that value.  Because of the nature of void
  /// pointers, discretion and consistency is advised.
  ///
  /// @param  object   Pointer/handle to the data associated with this
  /// call.
  /// @param  ui_data  UI data to pass associated with this specific
  /// target, if any.
  /// @return          @b true if user completed the task, or
  /// @b false if user cancelled the task.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      exec;

  external ffi.Pointer<ffi.Void> type_data;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free_type_data;
}

/// Modeless UI definition structure
class obs_modeless_ui extends ffi.Struct {
  /// < Identifier associated with this UI
  external ffi.Pointer<ffi.Int8> id;

  /// < Task of the UI
  external ffi.Pointer<ffi.Int8> task;

  /// < UI target (UI toolkit or program name)
  external ffi.Pointer<ffi.Int8> target;

  /// Callback to create modeless interface.
  ///
  /// This function is almost identical to the modal exec function,
  /// except modeless UI calls return immediately, and typically are
  /// supposed to return a pointer or handle to the specific UI object
  /// that was created.  For example, a Qt object would ideally return a
  /// pointer to a QWidget.  Again, discretion and consistency is advised
  /// for the return value.
  ///
  /// @param   object  Pointer/handle to the data associated with this
  /// call.
  /// @param  ui_data  UI data to pass associated with this specific
  /// target, if any.
  /// @return          Pointer/handle to the modeless UI associated with
  /// the specific target.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> create;

  external ffi.Pointer<ffi.Void> type_data;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free_type_data;
}

abstract class obs_property_type {
  static const int OBS_PROPERTY_INVALID = 0;
  static const int OBS_PROPERTY_BOOL = 1;
  static const int OBS_PROPERTY_INT = 2;
  static const int OBS_PROPERTY_FLOAT = 3;
  static const int OBS_PROPERTY_TEXT = 4;
  static const int OBS_PROPERTY_PATH = 5;
  static const int OBS_PROPERTY_LIST = 6;
  static const int OBS_PROPERTY_COLOR = 7;
  static const int OBS_PROPERTY_BUTTON = 8;
  static const int OBS_PROPERTY_FONT = 9;
  static const int OBS_PROPERTY_EDITABLE_LIST = 10;
  static const int OBS_PROPERTY_FRAME_RATE = 11;
  static const int OBS_PROPERTY_GROUP = 12;
  static const int OBS_PROPERTY_COLOR_ALPHA = 13;
}

abstract class obs_combo_format {
  static const int OBS_COMBO_FORMAT_INVALID = 0;
  static const int OBS_COMBO_FORMAT_INT = 1;
  static const int OBS_COMBO_FORMAT_FLOAT = 2;
  static const int OBS_COMBO_FORMAT_STRING = 3;
}

abstract class obs_combo_type {
  static const int OBS_COMBO_TYPE_INVALID = 0;
  static const int OBS_COMBO_TYPE_EDITABLE = 1;
  static const int OBS_COMBO_TYPE_LIST = 2;
}

abstract class obs_editable_list_type {
  static const int OBS_EDITABLE_LIST_TYPE_STRINGS = 0;
  static const int OBS_EDITABLE_LIST_TYPE_FILES = 1;
  static const int OBS_EDITABLE_LIST_TYPE_FILES_AND_URLS = 2;
}

abstract class obs_path_type {
  static const int OBS_PATH_FILE = 0;
  static const int OBS_PATH_FILE_SAVE = 1;
  static const int OBS_PATH_DIRECTORY = 2;
}

abstract class obs_text_type {
  static const int OBS_TEXT_DEFAULT = 0;
  static const int OBS_TEXT_PASSWORD = 1;
  static const int OBS_TEXT_MULTILINE = 2;
}

abstract class obs_number_type {
  static const int OBS_NUMBER_SCROLLER = 0;
  static const int OBS_NUMBER_SLIDER = 1;
}

abstract class obs_group_type {
  static const int OBS_COMBO_INVALID = 0;
  static const int OBS_GROUP_NORMAL = 1;
  static const int OBS_GROUP_CHECKABLE = 2;
}

class obs_properties extends ffi.Opaque {}

class obs_property extends ffi.Opaque {}

typedef obs_properties_t = obs_properties;
typedef obs_property_t = obs_property;

/// Callback for when a button property is clicked.  If the properties
/// need to be refreshed due to changes to the property layout, return true,
/// otherwise return false.
typedef obs_property_clicked_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<obs_properties_t>,
            ffi.Pointer<obs_property_t>, ffi.Pointer<ffi.Void>)>>;

/// Optional callback for when a property is modified.  If the properties
/// need to be refreshed due to changes to the property layout, return true,
/// otherwise return false.
typedef obs_property_modified_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<obs_properties_t>,
            ffi.Pointer<obs_property_t>, ffi.Pointer<obs_data_t>)>>;
typedef obs_property_modified2_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_properties_t>,
            ffi.Pointer<obs_property_t>, ffi.Pointer<obs_data_t>)>>;

abstract class obs_interaction_flags {
  static const int INTERACT_NONE = 0;
  static const int INTERACT_CAPS_KEY = 1;
  static const int INTERACT_SHIFT_KEY = 2;
  static const int INTERACT_CONTROL_KEY = 4;
  static const int INTERACT_ALT_KEY = 8;
  static const int INTERACT_MOUSE_LEFT = 16;
  static const int INTERACT_MOUSE_MIDDLE = 32;
  static const int INTERACT_MOUSE_RIGHT = 64;
  static const int INTERACT_COMMAND_KEY = 128;
  static const int INTERACT_NUMLOCK_KEY = 256;
  static const int INTERACT_IS_KEY_PAD = 512;
  static const int INTERACT_IS_LEFT = 1024;
  static const int INTERACT_IS_RIGHT = 2048;
}

abstract class obs_mouse_button_type {
  static const int MOUSE_LEFT = 0;
  static const int MOUSE_MIDDLE = 1;
  static const int MOUSE_RIGHT = 2;
}

class obs_mouse_event extends ffi.Struct {
  @ffi.Uint32()
  external int modifiers;

  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;
}

class obs_key_event extends ffi.Struct {
  @ffi.Uint32()
  external int modifiers;

  external ffi.Pointer<ffi.Int8> text;

  @ffi.Uint32()
  external int native_modifiers;

  @ffi.Uint32()
  external int native_scancode;

  @ffi.Uint32()
  external int native_vkey;
}

class obs_display extends ffi.Opaque {}

class obs_view extends ffi.Opaque {}

class obs_source extends ffi.Opaque {}

class obs_scene extends ffi.Opaque {}

class obs_scene_item extends ffi.Opaque {}

class obs_output extends ffi.Opaque {}

class obs_encoder extends ffi.Opaque {}

class obs_service extends ffi.Opaque {}

class obs_module extends ffi.Opaque {}

class obs_fader extends ffi.Opaque {}

class obs_volmeter extends ffi.Opaque {}

class obs_weak_source extends ffi.Opaque {}

class obs_weak_output extends ffi.Opaque {}

class obs_weak_encoder extends ffi.Opaque {}

class obs_weak_service extends ffi.Opaque {}

abstract class obs_source_type {
  static const int OBS_SOURCE_TYPE_INPUT = 0;
  static const int OBS_SOURCE_TYPE_FILTER = 1;
  static const int OBS_SOURCE_TYPE_TRANSITION = 2;
  static const int OBS_SOURCE_TYPE_SCENE = 3;
}

abstract class obs_balance_type {
  static const int OBS_BALANCE_TYPE_SINE_LAW = 0;
  static const int OBS_BALANCE_TYPE_SQUARE_LAW = 1;
  static const int OBS_BALANCE_TYPE_LINEAR = 2;
}

abstract class obs_icon_type {
  static const int OBS_ICON_TYPE_UNKNOWN = 0;
  static const int OBS_ICON_TYPE_IMAGE = 1;
  static const int OBS_ICON_TYPE_COLOR = 2;
  static const int OBS_ICON_TYPE_SLIDESHOW = 3;
  static const int OBS_ICON_TYPE_AUDIO_INPUT = 4;
  static const int OBS_ICON_TYPE_AUDIO_OUTPUT = 5;
  static const int OBS_ICON_TYPE_DESKTOP_CAPTURE = 6;
  static const int OBS_ICON_TYPE_WINDOW_CAPTURE = 7;
  static const int OBS_ICON_TYPE_GAME_CAPTURE = 8;
  static const int OBS_ICON_TYPE_CAMERA = 9;
  static const int OBS_ICON_TYPE_TEXT = 10;
  static const int OBS_ICON_TYPE_MEDIA = 11;
  static const int OBS_ICON_TYPE_BROWSER = 12;
  static const int OBS_ICON_TYPE_CUSTOM = 13;
}

abstract class obs_media_state {
  static const int OBS_MEDIA_STATE_NONE = 0;
  static const int OBS_MEDIA_STATE_PLAYING = 1;
  static const int OBS_MEDIA_STATE_OPENING = 2;
  static const int OBS_MEDIA_STATE_BUFFERING = 3;
  static const int OBS_MEDIA_STATE_PAUSED = 4;
  static const int OBS_MEDIA_STATE_STOPPED = 5;
  static const int OBS_MEDIA_STATE_ENDED = 6;
  static const int OBS_MEDIA_STATE_ERROR = 7;
}

class obs_source_audio_mix extends ffi.Struct {
  @ffi.Array.multi([6])
  external ffi.Array<audio_output_data> output;
}

/// Source definition structure
class obs_source_info extends ffi.Struct {
  /// Unique string identifier for the source
  external ffi.Pointer<ffi.Int8> id;

  /// Type of source.
  ///
  /// OBS_SOURCE_TYPE_INPUT for input sources,
  /// OBS_SOURCE_TYPE_FILTER for filter sources, and
  /// OBS_SOURCE_TYPE_TRANSITION for transition sources.
  @ffi.Int32()
  external int type;

  /// Source output flags
  @ffi.Uint32()
  external int output_flags;

  /// Get the translated name of the source type
  ///
  /// @param  type_data  The type_data variable of this structure
  /// @return               The translated name of the source type
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>> get_name;

  /// Creates the source data for the source
  ///
  /// @param  settings  Settings to initialize the source with
  /// @param  source    Source that this data is associated with
  /// @return           The data associated with this source
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<obs_source_t>)>> create;

  /// Destroys the private data for the source
  ///
  /// Async sources must not call obs_source_output_video after returning
  /// from destroy
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  /// Returns the width of the source.  Required if this is an input
  /// source and has non-async video
  external ffi.Pointer<
      ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>> get_width;

  /// Returns the height of the source.  Required if this is an input
  /// source and has non-async video
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>>
      get_height;

  /// Gets the default settings for this source
  ///
  /// @param[out]  settings  Data to assign default settings to
  /// @deprecated            Use get_defaults2 if type_data is needed
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_t>)>>
      get_defaults;

  /// Gets the property information of this source
  ///
  /// @return         The properties data
  /// @deprecated     Use get_properties2 if type_data is needed
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<obs_properties_t> Function(ffi.Pointer<ffi.Void>)>>
      get_properties;

  /// Updates the settings for this source
  ///
  /// @param data      Source data
  /// @param settings  New settings for this source
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_data_t>)>> update;

  /// Called when the source has been activated in the main view
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      activate;

  /// Called when the source has been deactivated from the main view
  /// (no longer being played/displayed)
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      deactivate;

  /// Called when the source is visible
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      show1;

  /// Called when the source is no longer visible
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      hide1;

  /// Called each video frame with the time elapsed
  ///
  /// @param  data     Source data
  /// @param  seconds  Seconds elapsed since the last frame
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>> video_tick;

  /// Called when rendering the source with the graphics subsystem.
  ///
  /// If this is an input/transition source, this is called to draw the
  /// source texture with the graphics subsystem using the specified
  /// effect.
  ///
  /// If this is a filter source, it wraps source draw calls (for
  /// example applying a custom effect with custom parameters to a
  /// source).  In this case, it's highly recommended to use the
  /// obs_source_process_filter function to automatically handle
  /// effect-based filter processing.  However, you can implement custom
  /// draw handling as desired as well.
  ///
  /// If the source output flags do not include SOURCE_CUSTOM_DRAW, all
  /// a source needs to do is set the "image" parameter of the effect to
  /// the desired texture, and then draw.  If the output flags include
  /// SOURCE_COLOR_MATRIX, you may optionally set the "color_matrix"
  /// parameter of the effect to a custom 4x4 conversion matrix (by
  /// default it will be set to an YUV->RGB conversion matrix)
  ///
  /// @param data    Source data
  /// @param effect  Effect to be used with this source.  If the source
  /// output flags include SOURCE_CUSTOM_DRAW, this will
  /// be NULL, and the source is expected to process with
  /// an effect manually.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<gs_effect_t>)>> video_render;

  /// Called to filter raw async video data.
  ///
  /// @note          This function is only used with filter sources.
  ///
  /// @param  data   Filter data
  /// @param  frame  Video frame to filter
  /// @return        New video frame data.  This can defer video data to
  /// be drawn later if time is needed for processing
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<obs_source_frame> Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_frame>)>>
      filter_video;

  /// Called to filter raw audio data.
  ///
  /// @note          This function is only used with filter sources.
  ///
  /// @param  data   Filter data
  /// @param  audio  Audio data to filter.
  /// @return        Modified or new audio data.  You can directly modify
  /// the data passed and return it, or you can defer audio
  /// data for later if time is needed for processing.  If
  /// you are returning new data, that data must exist
  /// until the next call to the filter_audio callback or
  /// until the filter is removed/destroyed.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<obs_audio_data> Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<obs_audio_data>)>>
      filter_audio;

  /// Called to enumerate all active sources being used within this
  /// source.  If the source has children that render audio/video it must
  /// implement this callback.
  ///
  /// @param  data           Filter data
  /// @param  enum_callback  Enumeration callback
  /// @param  param          User data to pass to callback
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, obs_source_enum_proc_t,
              ffi.Pointer<ffi.Void>)>> enum_active_sources;

  /// Called when saving a source.  This is a separate function because
  /// sometimes a source needs to know when it is being saved so it
  /// doesn't always have to update the current settings until a certain
  /// point.
  ///
  /// @param  data      Source data
  /// @param  settings  Settings
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_data_t>)>> save;

  /// Called when loading a source from saved data.  This should be called
  /// after all the loading sources have actually been created because
  /// sometimes there are sources that depend on each other.
  ///
  /// @param  data      Source data
  /// @param  settings  Settings
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_data_t>)>> load;

  /// Called when interacting with a source and a mouse-down or mouse-up
  /// occurs.
  ///
  /// @param data         Source data
  /// @param event        Mouse event properties
  /// @param type         Mouse button pushed
  /// @param mouse_up     Mouse event type (true if mouse-up)
  /// @param click_count  Mouse click count (1 for single click, etc.)
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_mouse_event>,
              ffi.Int32, ffi.Uint8, ffi.Uint32)>> mouse_click;

  /// Called when interacting with a source and a mouse-move occurs.
  ///
  /// @param data         Source data
  /// @param event        Mouse event properties
  /// @param mouse_leave  Mouse leave state (true if mouse left source)
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_mouse_event>,
              ffi.Uint8)>> mouse_move;

  /// Called when interacting with a source and a mouse-wheel occurs.
  ///
  /// @param data         Source data
  /// @param event        Mouse event properties
  /// @param x_delta      Movement delta in the horizontal direction
  /// @param y_delta      Movement delta in the vertical direction
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_mouse_event>,
              ffi.Int32, ffi.Int32)>> mouse_wheel;

  /// Called when interacting with a source and gain focus/lost focus event
  /// occurs.
  ///
  /// @param data         Source data
  /// @param focus        Focus state (true if focus gained)
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>> focus;

  /// Called when interacting with a source and a key-up or key-down
  /// occurs.
  ///
  /// @param data         Source data
  /// @param event        Key event properties
  /// @param focus        Key event type (true if mouse-up)
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_key_event>,
              ffi.Uint8)>> key_click;

  /// Called when the filter is removed from a source
  ///
  /// @param  data    Filter data
  /// @param  source  Source that the filter being removed from
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>)>> filter_remove;

  /// Private data associated with this entry
  external ffi.Pointer<ffi.Void> type_data;

  /// If defined, called to free private data on shutdown
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free_type_data;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<obs_source_audio_mix>,
              ffi.Uint32,
              size_t,
              size_t)>> audio_render;

  /// Called to enumerate all active and inactive sources being used
  /// within this source.  If this callback isn't implemented,
  /// enum_active_sources will be called instead.
  ///
  /// This is typically used if a source can have inactive child sources.
  ///
  /// @param  data           Filter data
  /// @param  enum_callback  Enumeration callback
  /// @param  param          User data to pass to callback
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, obs_source_enum_proc_t,
              ffi.Pointer<ffi.Void>)>> enum_all_sources;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      transition_start;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      transition_stop;

  /// Gets the default settings for this source
  ///
  /// If get_defaults is also defined both will be called, and the first
  /// call will be to get_defaults, then to get_defaults2.
  ///
  /// @param       type_data The type_data variable of this structure
  /// @param[out]  settings  Data to assign default settings to
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_data_t>)>> get_defaults2;

  /// Gets the property information of this source
  ///
  /// @param data      Source data
  /// @param type_data The type_data variable of this structure
  /// @return          The properties data
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> get_properties2;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<audio_output_data>, size_t, size_t)>> audio_mix;

  /// Icon type for the source
  @ffi.Int32()
  external int icon_type;

  /// Media controls
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>>
      media_play_pause;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      media_restart;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      media_stop;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      media_next;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      media_previous;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>
      media_get_duration;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>
      media_get_time;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int64)>> media_set_time;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>
      media_get_state;

  @ffi.Uint32()
  external int version;

  external ffi.Pointer<ffi.Int8> unversioned_id;
}

typedef obs_source_t = obs_source;

/// Source asynchronous video output structure.  Used with
/// obs_source_output_video to output asynchronous video.  Video is buffered as
/// necessary to play according to timestamps.  When used with audio output,
/// audio is synced to video as it is played.
///
/// If a YUV format is specified, it will be automatically upsampled and
/// converted to RGB via shader on the graphics processor.
///
/// NOTE: Non-YUV formats will always be treated as full range with this
/// structure!  Use obs_source_frame2 along with obs_source_output_video2
/// instead if partial range support is desired for non-YUV video formats.
class obs_source_frame extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> data;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> linesize;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Int32()
  external int format;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Float> color_matrix;

  @ffi.Uint8()
  external int full_range;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> color_range_min;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> color_range_max;

  @ffi.Uint8()
  external int flip;

  @ffi.Int64()
  external int refs;

  @ffi.Uint8()
  external int prev_frame;
}

/// Sent to source filters via the filter_audio callback to allow filtering of
/// audio data
class obs_audio_data extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> data;

  @ffi.Uint32()
  external int frames;

  @ffi.Uint64()
  external int timestamp;
}

/// @}
typedef obs_source_enum_proc_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<obs_source_t>, ffi.Pointer<obs_source_t>,
            ffi.Pointer<ffi.Void>)>>;

/// Specifies the encoder type
abstract class obs_encoder_type {
  /// < The encoder provides an audio codec
  static const int OBS_ENCODER_AUDIO = 0;

  /// < The encoder provides a video codec
  static const int OBS_ENCODER_VIDEO = 1;
}

/// Encoder output packet
class encoder_packet extends ffi.Struct {
  /// < Packet data
  external ffi.Pointer<ffi.Uint8> data;

  /// < Packet size
  @size_t()
  external int size;

  /// < Presentation timestamp
  @ffi.Int64()
  external int pts;

  /// < Decode timestamp
  @ffi.Int64()
  external int dts;

  /// < Timebase numerator
  @ffi.Int32()
  external int timebase_num;

  /// < Timebase denominator
  @ffi.Int32()
  external int timebase_den;

  /// < Encoder type
  @ffi.Int32()
  external int type;

  /// < Is a keyframe
  @ffi.Uint8()
  external int keyframe;

  @ffi.Int64()
  external int dts_usec;

  @ffi.Int64()
  external int sys_dts_usec;

  /// Packet priority
  ///
  /// This is generally use by video encoders to specify the priority
  /// of the packet.
  @ffi.Int32()
  external int priority;

  /// Dropped packet priority
  ///
  /// If this packet needs to be dropped, the next packet must be of this
  /// priority or higher to continue transmission.
  @ffi.Int32()
  external int drop_priority;

  /// Audio track index (used with outputs)
  @size_t()
  external int track_idx;

  /// Encoder from which the track originated from
  external ffi.Pointer<obs_encoder_t> encoder;
}

typedef obs_encoder_t = obs_encoder;

/// Encoder input frame
class encoder_frame extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> data;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> linesize;

  /// Number of frames (audio only)
  @ffi.Uint32()
  external int frames;

  /// Presentation timestamp
  @ffi.Int64()
  external int pts;
}

/// Encoder interface
///
/// Encoders have a limited usage with OBS.  You are not generally supposed to
/// implement every encoder out there.  Generally, these are limited or specific
/// encoders for h264/aac for streaming and recording.  It doesn't have to be
/// *just* h264 or aac of course, but generally those are the expected encoders.
///
/// That being said, other encoders will be kept in mind for future use.
class obs_encoder_info extends ffi.Struct {
  /// Specifies the named identifier of this encoder
  external ffi.Pointer<ffi.Int8> id;

  /// Specifies the encoder type (video or audio)
  @ffi.Int32()
  external int type;

  /// Specifies the codec
  external ffi.Pointer<ffi.Int8> codec;

  /// Gets the full translated name of this encoder
  ///
  /// @param  type_data  The type_data variable of this structure
  /// @return            Translated name of the encoder
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>> get_name;

  /// Creates the encoder with the specified settings
  ///
  /// @param  settings  Settings for the encoder
  /// @param  encoder   OBS encoder context
  /// @return           Data associated with this encoder context, or
  /// NULL if initialization failed.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<obs_encoder_t>)>> create;

  /// Destroys the encoder data
  ///
  /// @param  data  Data associated with this encoder context
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  /// Encodes frame(s), and outputs encoded packets as they become
  /// available.
  ///
  /// @param       data             Data associated with this encoder
  /// context
  /// @param[in]   frame            Raw audio/video data to encode
  /// @param[out]  packet           Encoder packet output, if any
  /// @param[out]  received_packet  Set to true if a packet was received,
  /// false otherwise
  /// @return                       true if successful, false otherwise.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<encoder_frame>,
              ffi.Pointer<encoder_packet>, ffi.Pointer<ffi.Uint8>)>> encode;

  /// Audio encoder only:  Returns the frame size for this encoder
  external ffi
          .Pointer<ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Void>)>>
      get_frame_size;

  /// Gets the default settings for this encoder
  ///
  /// @param[out]  settings  Data to assign default settings to
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_t>)>>
      get_defaults;

  /// Gets the property information of this encoder
  ///
  /// @return         The properties data
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<obs_properties_t> Function(ffi.Pointer<ffi.Void>)>>
      get_properties;

  /// Updates the settings for this encoder (usually used for things like
  /// changing bitrate while active)
  ///
  /// @param  data      Data associated with this encoder context
  /// @param  settings  New settings for this encoder
  /// @return           true if successful, false otherwise
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_data_t>)>> update;

  /// Returns extra data associated with this encoder (usually header)
  ///
  /// @param  data             Data associated with this encoder context
  /// @param[out]  extra_data  Pointer to receive the extra data
  /// @param[out]  size        Pointer to receive the size of the extra
  /// data
  /// @return                  true if extra data available, false
  /// otherwise
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<size_t>)>> get_extra_data;

  /// Gets the SEI data, if any
  ///
  /// @param       data      Data associated with this encoder context
  /// @param[out]  sei_data  Pointer to receive the SEI data
  /// @param[out]  size      Pointer to receive the SEI data size
  /// @return                true if SEI data available, false otherwise
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<size_t>)>> get_sei_data;

  /// Returns desired audio format and sample information
  ///
  /// @param          data  Data associated with this encoder context
  /// @param[in/out]  info  Audio format information
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<audio_convert_info>)>>
      get_audio_info;

  /// Returns desired video format information
  ///
  /// @param          data  Data associated with this encoder context
  /// @param[in/out]  info  Video format information
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<video_scale_info>)>>
      get_video_info;

  external ffi.Pointer<ffi.Void> type_data;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free_type_data;

  @ffi.Uint32()
  external int caps;

  /// Gets the default settings for this encoder
  ///
  /// If get_defaults is also defined both will be called, and the first
  /// call will be to get_defaults, then to get_defaults2.
  ///
  /// @param[out]  settings  Data to assign default settings to
  /// @param[in]   typedata  Type Data
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<ffi.Void>)>> get_defaults2;

  /// Gets the property information of this encoder
  ///
  /// @param[in]   data      Pointer from create (or null)
  /// @param[in]   typedata  Type Data
  /// @return                The properties data
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<obs_properties_t> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> get_properties2;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Int64,
              ffi.Uint64,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<encoder_packet>,
              ffi.Pointer<ffi.Uint8>)>> encode_texture;
}

class obs_output_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> id;

  @ffi.Uint32()
  external int flags;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>> get_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<obs_output_t>)>> create;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>> start;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint64)>> stop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<video_data>)>> raw_video;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<audio_data>)>> raw_audio;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<encoder_packet>)>>
      encoded_packet;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_data_t>)>> update;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_t>)>>
      get_defaults;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<obs_properties_t> Function(ffi.Pointer<ffi.Void>)>>
      get_properties;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      unused1;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>
      get_total_bytes;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>
      get_dropped_frames;

  external ffi.Pointer<ffi.Void> type_data;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free_type_data;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Void>)>>
      get_congestion;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>
      get_connect_time_ms;

  external ffi.Pointer<ffi.Int8> encoded_video_codecs;

  external ffi.Pointer<ffi.Int8> encoded_audio_codecs;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, size_t, ffi.Pointer<audio_data>)>>
      raw_audio2;
}

typedef obs_output_t = obs_output;

class obs_service_resolution extends ffi.Struct {
  @ffi.Int32()
  external int cx;

  @ffi.Int32()
  external int cy;
}

class obs_service_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> id;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>> get_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<obs_data_t>, ffi.Pointer<obs_service_t>)>> create;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_data_t>)>> activate;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      deactivate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_data_t>)>> update;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_data_t>)>>
      get_defaults;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<obs_properties_t> Function(ffi.Pointer<ffi.Void>)>>
      get_properties;

  /// Called when getting ready to start up an output, before the encoders
  /// and output are initialized
  ///
  /// @param  data    Internal service data
  /// @param  output  Output context
  /// @return         true to allow the output to start up,
  /// false to prevent output from starting up
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<obs_output_t>)>> initialize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>> get_url;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>> get_key;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>> get_username;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>> get_password;

  external ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function()>> deprecated_1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_data_t>,
              ffi.Pointer<obs_data_t>)>> apply_encoder_settings;

  external ffi.Pointer<ffi.Void> type_data;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free_type_data;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>>
      get_output_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<obs_service_resolution>>,
              ffi.Pointer<size_t>)>> get_supported_resolutions;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int32>)>>
      get_max_fps;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>> get_max_bitrate;
}

typedef obs_service_t = obs_service;

/// @brief Fader types
abstract class obs_fader_type {
  /// @brief A simple cubic fader for controlling audio levels
  ///
  /// This is a very common type of software fader since it yields good
  /// results while being quite performant.
  /// The input value is mapped to mul values with the simple formula x^3.
  static const int OBS_FADER_CUBIC = 0;

  /// @brief A fader compliant to IEC 60-268-18
  ///
  /// This type of fader has several segments with different slopes that
  /// map deflection linearly to dB values. The segments are defined as
  /// in the following table:
  ///
  /// @code
  /// Deflection           | Volume
  /// ------------------------------------------
  /// [ 100   %, 75   % ]  | [   0 dB,   -9 dB ]
  /// [  75   %, 50   % ]  | [  -9 dB,  -20 dB ]
  /// [  50   %, 30   % ]  | [ -20 dB,  -30 dB ]
  /// [  30   %, 15   % ]  | [ -30 dB,  -40 dB ]
  /// [  15   %,  7.5 % ]  | [ -40 dB,  -50 dB ]
  /// [   7.5 %,  2.5 % ]  | [ -50 dB,  -60 dB ]
  /// [   2.5 %,  0   % ]  | [ -60 dB, -inf dB ]
  /// @endcode
  static const int OBS_FADER_IEC = 1;

  /// @brief Logarithmic fader
  static const int OBS_FADER_LOG = 2;
}

/// @brief Peak meter types
abstract class obs_peak_meter_type {
  /// @brief A simple peak meter measuring the maximum of all samples.
  ///
  /// This was a very common type of peak meter used for audio, but
  /// is not very accurate with regards to further audio processing.
  static const int SAMPLE_PEAK_METER = 0;

  /// @brief An accurate peak meter measure the maximum of inter-samples.
  ///
  /// This meter is more computational intensive due to 4x oversampling
  /// to determine the true peak to an accuracy of +/- 0.5 dB.
  static const int TRUE_PEAK_METER = 1;
}

typedef obs_fader_t = obs_fader;
typedef obs_fader_changed_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>>;
typedef obs_volmeter_t = obs_volmeter;
typedef obs_volmeter_updated_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>>;

abstract class obs_key {
  static const int OBS_KEY_NONE = 0;
  static const int OBS_KEY_RETURN = 1;
  static const int OBS_KEY_ENTER = 2;
  static const int OBS_KEY_ESCAPE = 3;
  static const int OBS_KEY_TAB = 4;
  static const int OBS_KEY_BACKTAB = 5;
  static const int OBS_KEY_BACKSPACE = 6;
  static const int OBS_KEY_INSERT = 7;
  static const int OBS_KEY_DELETE = 8;
  static const int OBS_KEY_PAUSE = 9;
  static const int OBS_KEY_PRINT = 10;
  static const int OBS_KEY_SYSREQ = 11;
  static const int OBS_KEY_CLEAR = 12;
  static const int OBS_KEY_HOME = 13;
  static const int OBS_KEY_END = 14;
  static const int OBS_KEY_LEFT = 15;
  static const int OBS_KEY_UP = 16;
  static const int OBS_KEY_RIGHT = 17;
  static const int OBS_KEY_DOWN = 18;
  static const int OBS_KEY_PAGEUP = 19;
  static const int OBS_KEY_PAGEDOWN = 20;
  static const int OBS_KEY_SHIFT = 21;
  static const int OBS_KEY_CONTROL = 22;
  static const int OBS_KEY_META = 23;
  static const int OBS_KEY_ALT = 24;
  static const int OBS_KEY_ALTGR = 25;
  static const int OBS_KEY_CAPSLOCK = 26;
  static const int OBS_KEY_NUMLOCK = 27;
  static const int OBS_KEY_SCROLLLOCK = 28;
  static const int OBS_KEY_F1 = 29;
  static const int OBS_KEY_F2 = 30;
  static const int OBS_KEY_F3 = 31;
  static const int OBS_KEY_F4 = 32;
  static const int OBS_KEY_F5 = 33;
  static const int OBS_KEY_F6 = 34;
  static const int OBS_KEY_F7 = 35;
  static const int OBS_KEY_F8 = 36;
  static const int OBS_KEY_F9 = 37;
  static const int OBS_KEY_F10 = 38;
  static const int OBS_KEY_F11 = 39;
  static const int OBS_KEY_F12 = 40;
  static const int OBS_KEY_F13 = 41;
  static const int OBS_KEY_F14 = 42;
  static const int OBS_KEY_F15 = 43;
  static const int OBS_KEY_F16 = 44;
  static const int OBS_KEY_F17 = 45;
  static const int OBS_KEY_F18 = 46;
  static const int OBS_KEY_F19 = 47;
  static const int OBS_KEY_F20 = 48;
  static const int OBS_KEY_F21 = 49;
  static const int OBS_KEY_F22 = 50;
  static const int OBS_KEY_F23 = 51;
  static const int OBS_KEY_F24 = 52;
  static const int OBS_KEY_F25 = 53;
  static const int OBS_KEY_F26 = 54;
  static const int OBS_KEY_F27 = 55;
  static const int OBS_KEY_F28 = 56;
  static const int OBS_KEY_F29 = 57;
  static const int OBS_KEY_F30 = 58;
  static const int OBS_KEY_F31 = 59;
  static const int OBS_KEY_F32 = 60;
  static const int OBS_KEY_F33 = 61;
  static const int OBS_KEY_F34 = 62;
  static const int OBS_KEY_F35 = 63;
  static const int OBS_KEY_MENU = 64;
  static const int OBS_KEY_HYPER_L = 65;
  static const int OBS_KEY_HYPER_R = 66;
  static const int OBS_KEY_HELP = 67;
  static const int OBS_KEY_DIRECTION_L = 68;
  static const int OBS_KEY_DIRECTION_R = 69;
  static const int OBS_KEY_SPACE = 70;
  static const int OBS_KEY_EXCLAM = 71;
  static const int OBS_KEY_QUOTEDBL = 72;
  static const int OBS_KEY_NUMBERSIGN = 73;
  static const int OBS_KEY_DOLLAR = 74;
  static const int OBS_KEY_PERCENT = 75;
  static const int OBS_KEY_AMPERSAND = 76;
  static const int OBS_KEY_APOSTROPHE = 77;
  static const int OBS_KEY_PARENLEFT = 78;
  static const int OBS_KEY_PARENRIGHT = 79;
  static const int OBS_KEY_ASTERISK = 80;
  static const int OBS_KEY_PLUS = 81;
  static const int OBS_KEY_COMMA = 82;
  static const int OBS_KEY_MINUS = 83;
  static const int OBS_KEY_PERIOD = 84;
  static const int OBS_KEY_SLASH = 85;
  static const int OBS_KEY_0 = 86;
  static const int OBS_KEY_1 = 87;
  static const int OBS_KEY_2 = 88;
  static const int OBS_KEY_3 = 89;
  static const int OBS_KEY_4 = 90;
  static const int OBS_KEY_5 = 91;
  static const int OBS_KEY_6 = 92;
  static const int OBS_KEY_7 = 93;
  static const int OBS_KEY_8 = 94;
  static const int OBS_KEY_9 = 95;
  static const int OBS_KEY_NUMEQUAL = 96;
  static const int OBS_KEY_NUMASTERISK = 97;
  static const int OBS_KEY_NUMPLUS = 98;
  static const int OBS_KEY_NUMCOMMA = 99;
  static const int OBS_KEY_NUMMINUS = 100;
  static const int OBS_KEY_NUMPERIOD = 101;
  static const int OBS_KEY_NUMSLASH = 102;
  static const int OBS_KEY_NUM0 = 103;
  static const int OBS_KEY_NUM1 = 104;
  static const int OBS_KEY_NUM2 = 105;
  static const int OBS_KEY_NUM3 = 106;
  static const int OBS_KEY_NUM4 = 107;
  static const int OBS_KEY_NUM5 = 108;
  static const int OBS_KEY_NUM6 = 109;
  static const int OBS_KEY_NUM7 = 110;
  static const int OBS_KEY_NUM8 = 111;
  static const int OBS_KEY_NUM9 = 112;
  static const int OBS_KEY_COLON = 113;
  static const int OBS_KEY_SEMICOLON = 114;
  static const int OBS_KEY_QUOTE = 115;
  static const int OBS_KEY_LESS = 116;
  static const int OBS_KEY_EQUAL = 117;
  static const int OBS_KEY_GREATER = 118;
  static const int OBS_KEY_QUESTION = 119;
  static const int OBS_KEY_AT = 120;
  static const int OBS_KEY_A = 121;
  static const int OBS_KEY_B = 122;
  static const int OBS_KEY_C = 123;
  static const int OBS_KEY_D = 124;
  static const int OBS_KEY_E = 125;
  static const int OBS_KEY_F = 126;
  static const int OBS_KEY_G = 127;
  static const int OBS_KEY_H = 128;
  static const int OBS_KEY_I = 129;
  static const int OBS_KEY_J = 130;
  static const int OBS_KEY_K = 131;
  static const int OBS_KEY_L = 132;
  static const int OBS_KEY_M = 133;
  static const int OBS_KEY_N = 134;
  static const int OBS_KEY_O = 135;
  static const int OBS_KEY_P = 136;
  static const int OBS_KEY_Q = 137;
  static const int OBS_KEY_R = 138;
  static const int OBS_KEY_S = 139;
  static const int OBS_KEY_T = 140;
  static const int OBS_KEY_U = 141;
  static const int OBS_KEY_V = 142;
  static const int OBS_KEY_W = 143;
  static const int OBS_KEY_X = 144;
  static const int OBS_KEY_Y = 145;
  static const int OBS_KEY_Z = 146;
  static const int OBS_KEY_BRACKETLEFT = 147;
  static const int OBS_KEY_BACKSLASH = 148;
  static const int OBS_KEY_BRACKETRIGHT = 149;
  static const int OBS_KEY_ASCIICIRCUM = 150;
  static const int OBS_KEY_UNDERSCORE = 151;
  static const int OBS_KEY_QUOTELEFT = 152;
  static const int OBS_KEY_BRACELEFT = 153;
  static const int OBS_KEY_BAR = 154;
  static const int OBS_KEY_BRACERIGHT = 155;
  static const int OBS_KEY_ASCIITILDE = 156;
  static const int OBS_KEY_NOBREAKSPACE = 157;
  static const int OBS_KEY_EXCLAMDOWN = 158;
  static const int OBS_KEY_CENT = 159;
  static const int OBS_KEY_STERLING = 160;
  static const int OBS_KEY_CURRENCY = 161;
  static const int OBS_KEY_YEN = 162;
  static const int OBS_KEY_BROKENBAR = 163;
  static const int OBS_KEY_SECTION = 164;
  static const int OBS_KEY_DIAERESIS = 165;
  static const int OBS_KEY_COPYRIGHT = 166;
  static const int OBS_KEY_ORDFEMININE = 167;
  static const int OBS_KEY_GUILLEMOTLEFT = 168;
  static const int OBS_KEY_NOTSIGN = 169;
  static const int OBS_KEY_HYPHEN = 170;
  static const int OBS_KEY_REGISTERED = 171;
  static const int OBS_KEY_MACRON = 172;
  static const int OBS_KEY_DEGREE = 173;
  static const int OBS_KEY_PLUSMINUS = 174;
  static const int OBS_KEY_TWOSUPERIOR = 175;
  static const int OBS_KEY_THREESUPERIOR = 176;
  static const int OBS_KEY_ACUTE = 177;
  static const int OBS_KEY_MU = 178;
  static const int OBS_KEY_PARAGRAPH = 179;
  static const int OBS_KEY_PERIODCENTERED = 180;
  static const int OBS_KEY_CEDILLA = 181;
  static const int OBS_KEY_ONESUPERIOR = 182;
  static const int OBS_KEY_MASCULINE = 183;
  static const int OBS_KEY_GUILLEMOTRIGHT = 184;
  static const int OBS_KEY_ONEQUARTER = 185;
  static const int OBS_KEY_ONEHALF = 186;
  static const int OBS_KEY_THREEQUARTERS = 187;
  static const int OBS_KEY_QUESTIONDOWN = 188;
  static const int OBS_KEY_AGRAVE = 189;
  static const int OBS_KEY_AACUTE = 190;
  static const int OBS_KEY_ACIRCUMFLEX = 191;
  static const int OBS_KEY_ATILDE = 192;
  static const int OBS_KEY_ADIAERESIS = 193;
  static const int OBS_KEY_ARING = 194;
  static const int OBS_KEY_AE = 195;
  static const int OBS_KEY_CCEDILLA = 196;
  static const int OBS_KEY_EGRAVE = 197;
  static const int OBS_KEY_EACUTE = 198;
  static const int OBS_KEY_ECIRCUMFLEX = 199;
  static const int OBS_KEY_EDIAERESIS = 200;
  static const int OBS_KEY_IGRAVE = 201;
  static const int OBS_KEY_IACUTE = 202;
  static const int OBS_KEY_ICIRCUMFLEX = 203;
  static const int OBS_KEY_IDIAERESIS = 204;
  static const int OBS_KEY_ETH = 205;
  static const int OBS_KEY_NTILDE = 206;
  static const int OBS_KEY_OGRAVE = 207;
  static const int OBS_KEY_OACUTE = 208;
  static const int OBS_KEY_OCIRCUMFLEX = 209;
  static const int OBS_KEY_OTILDE = 210;
  static const int OBS_KEY_ODIAERESIS = 211;
  static const int OBS_KEY_MULTIPLY = 212;
  static const int OBS_KEY_OOBLIQUE = 213;
  static const int OBS_KEY_UGRAVE = 214;
  static const int OBS_KEY_UACUTE = 215;
  static const int OBS_KEY_UCIRCUMFLEX = 216;
  static const int OBS_KEY_UDIAERESIS = 217;
  static const int OBS_KEY_YACUTE = 218;
  static const int OBS_KEY_THORN = 219;
  static const int OBS_KEY_SSHARP = 220;
  static const int OBS_KEY_DIVISION = 221;
  static const int OBS_KEY_YDIAERESIS = 222;
  static const int OBS_KEY_MULTI_KEY = 223;
  static const int OBS_KEY_CODEINPUT = 224;
  static const int OBS_KEY_SINGLECANDIDATE = 225;
  static const int OBS_KEY_MULTIPLECANDIDATE = 226;
  static const int OBS_KEY_PREVIOUSCANDIDATE = 227;
  static const int OBS_KEY_MODE_SWITCH = 228;
  static const int OBS_KEY_KANJI = 229;
  static const int OBS_KEY_MUHENKAN = 230;
  static const int OBS_KEY_HENKAN = 231;
  static const int OBS_KEY_ROMAJI = 232;
  static const int OBS_KEY_HIRAGANA = 233;
  static const int OBS_KEY_KATAKANA = 234;
  static const int OBS_KEY_HIRAGANA_KATAKANA = 235;
  static const int OBS_KEY_ZENKAKU = 236;
  static const int OBS_KEY_HANKAKU = 237;
  static const int OBS_KEY_ZENKAKU_HANKAKU = 238;
  static const int OBS_KEY_TOUROKU = 239;
  static const int OBS_KEY_MASSYO = 240;
  static const int OBS_KEY_KANA_LOCK = 241;
  static const int OBS_KEY_KANA_SHIFT = 242;
  static const int OBS_KEY_EISU_SHIFT = 243;
  static const int OBS_KEY_EISU_TOGGLE = 244;
  static const int OBS_KEY_HANGUL = 245;
  static const int OBS_KEY_HANGUL_START = 246;
  static const int OBS_KEY_HANGUL_END = 247;
  static const int OBS_KEY_HANGUL_HANJA = 248;
  static const int OBS_KEY_HANGUL_JAMO = 249;
  static const int OBS_KEY_HANGUL_ROMAJA = 250;
  static const int OBS_KEY_HANGUL_JEONJA = 251;
  static const int OBS_KEY_HANGUL_BANJA = 252;
  static const int OBS_KEY_HANGUL_PREHANJA = 253;
  static const int OBS_KEY_HANGUL_POSTHANJA = 254;
  static const int OBS_KEY_HANGUL_SPECIAL = 255;
  static const int OBS_KEY_DEAD_GRAVE = 256;
  static const int OBS_KEY_DEAD_ACUTE = 257;
  static const int OBS_KEY_DEAD_CIRCUMFLEX = 258;
  static const int OBS_KEY_DEAD_TILDE = 259;
  static const int OBS_KEY_DEAD_MACRON = 260;
  static const int OBS_KEY_DEAD_BREVE = 261;
  static const int OBS_KEY_DEAD_ABOVEDOT = 262;
  static const int OBS_KEY_DEAD_DIAERESIS = 263;
  static const int OBS_KEY_DEAD_ABOVERING = 264;
  static const int OBS_KEY_DEAD_DOUBLEACUTE = 265;
  static const int OBS_KEY_DEAD_CARON = 266;
  static const int OBS_KEY_DEAD_CEDILLA = 267;
  static const int OBS_KEY_DEAD_OGONEK = 268;
  static const int OBS_KEY_DEAD_IOTA = 269;
  static const int OBS_KEY_DEAD_VOICED_SOUND = 270;
  static const int OBS_KEY_DEAD_SEMIVOICED_SOUND = 271;
  static const int OBS_KEY_DEAD_BELOWDOT = 272;
  static const int OBS_KEY_DEAD_HOOK = 273;
  static const int OBS_KEY_DEAD_HORN = 274;
  static const int OBS_KEY_BACK = 275;
  static const int OBS_KEY_FORWARD = 276;
  static const int OBS_KEY_STOP = 277;
  static const int OBS_KEY_REFRESH = 278;
  static const int OBS_KEY_VOLUMEDOWN = 279;
  static const int OBS_KEY_VOLUMEMUTE = 280;
  static const int OBS_KEY_VOLUMEUP = 281;
  static const int OBS_KEY_BASSBOOST = 282;
  static const int OBS_KEY_BASSUP = 283;
  static const int OBS_KEY_BASSDOWN = 284;
  static const int OBS_KEY_TREBLEUP = 285;
  static const int OBS_KEY_TREBLEDOWN = 286;
  static const int OBS_KEY_MEDIAPLAY = 287;
  static const int OBS_KEY_MEDIASTOP = 288;
  static const int OBS_KEY_MEDIAPREVIOUS = 289;
  static const int OBS_KEY_MEDIANEXT = 290;
  static const int OBS_KEY_MEDIARECORD = 291;
  static const int OBS_KEY_MEDIAPAUSE = 292;
  static const int OBS_KEY_MEDIATOGGLEPLAYPAUSE = 293;
  static const int OBS_KEY_HOMEPAGE = 294;
  static const int OBS_KEY_FAVORITES = 295;
  static const int OBS_KEY_SEARCH = 296;
  static const int OBS_KEY_STANDBY = 297;
  static const int OBS_KEY_OPENURL = 298;
  static const int OBS_KEY_LAUNCHMAIL = 299;
  static const int OBS_KEY_LAUNCHMEDIA = 300;
  static const int OBS_KEY_LAUNCH0 = 301;
  static const int OBS_KEY_LAUNCH1 = 302;
  static const int OBS_KEY_LAUNCH2 = 303;
  static const int OBS_KEY_LAUNCH3 = 304;
  static const int OBS_KEY_LAUNCH4 = 305;
  static const int OBS_KEY_LAUNCH5 = 306;
  static const int OBS_KEY_LAUNCH6 = 307;
  static const int OBS_KEY_LAUNCH7 = 308;
  static const int OBS_KEY_LAUNCH8 = 309;
  static const int OBS_KEY_LAUNCH9 = 310;
  static const int OBS_KEY_LAUNCHA = 311;
  static const int OBS_KEY_LAUNCHB = 312;
  static const int OBS_KEY_LAUNCHC = 313;
  static const int OBS_KEY_LAUNCHD = 314;
  static const int OBS_KEY_LAUNCHE = 315;
  static const int OBS_KEY_LAUNCHF = 316;
  static const int OBS_KEY_LAUNCHG = 317;
  static const int OBS_KEY_LAUNCHH = 318;
  static const int OBS_KEY_MONBRIGHTNESSUP = 319;
  static const int OBS_KEY_MONBRIGHTNESSDOWN = 320;
  static const int OBS_KEY_KEYBOARDLIGHTONOFF = 321;
  static const int OBS_KEY_KEYBOARDBRIGHTNESSUP = 322;
  static const int OBS_KEY_KEYBOARDBRIGHTNESSDOWN = 323;
  static const int OBS_KEY_POWEROFF = 324;
  static const int OBS_KEY_WAKEUP = 325;
  static const int OBS_KEY_EJECT = 326;
  static const int OBS_KEY_SCREENSAVER = 327;
  static const int OBS_KEY_WWW = 328;
  static const int OBS_KEY_MEMO = 329;
  static const int OBS_KEY_LIGHTBULB = 330;
  static const int OBS_KEY_SHOP = 331;
  static const int OBS_KEY_HISTORY = 332;
  static const int OBS_KEY_ADDFAVORITE = 333;
  static const int OBS_KEY_HOTLINKS = 334;
  static const int OBS_KEY_BRIGHTNESSADJUST = 335;
  static const int OBS_KEY_FINANCE = 336;
  static const int OBS_KEY_COMMUNITY = 337;
  static const int OBS_KEY_AUDIOREWIND = 338;
  static const int OBS_KEY_BACKFORWARD = 339;
  static const int OBS_KEY_APPLICATIONLEFT = 340;
  static const int OBS_KEY_APPLICATIONRIGHT = 341;
  static const int OBS_KEY_BOOK = 342;
  static const int OBS_KEY_CD = 343;
  static const int OBS_KEY_CALCULATOR = 344;
  static const int OBS_KEY_TODOLIST = 345;
  static const int OBS_KEY_CLEARGRAB = 346;
  static const int OBS_KEY_CLOSE = 347;
  static const int OBS_KEY_COPY = 348;
  static const int OBS_KEY_CUT = 349;
  static const int OBS_KEY_DISPLAY = 350;
  static const int OBS_KEY_DOS = 351;
  static const int OBS_KEY_DOCUMENTS = 352;
  static const int OBS_KEY_EXCEL = 353;
  static const int OBS_KEY_EXPLORER = 354;
  static const int OBS_KEY_GAME = 355;
  static const int OBS_KEY_GO = 356;
  static const int OBS_KEY_ITOUCH = 357;
  static const int OBS_KEY_LOGOFF = 358;
  static const int OBS_KEY_MARKET = 359;
  static const int OBS_KEY_MEETING = 360;
  static const int OBS_KEY_MENUKB = 361;
  static const int OBS_KEY_MENUPB = 362;
  static const int OBS_KEY_MYSITES = 363;
  static const int OBS_KEY_NEWS = 364;
  static const int OBS_KEY_OFFICEHOME = 365;
  static const int OBS_KEY_OPTION = 366;
  static const int OBS_KEY_PASTE = 367;
  static const int OBS_KEY_PHONE = 368;
  static const int OBS_KEY_CALENDAR = 369;
  static const int OBS_KEY_REPLY = 370;
  static const int OBS_KEY_RELOAD = 371;
  static const int OBS_KEY_ROTATEWINDOWS = 372;
  static const int OBS_KEY_ROTATIONPB = 373;
  static const int OBS_KEY_ROTATIONKB = 374;
  static const int OBS_KEY_SAVE = 375;
  static const int OBS_KEY_SEND = 376;
  static const int OBS_KEY_SPELL = 377;
  static const int OBS_KEY_SPLITSCREEN = 378;
  static const int OBS_KEY_SUPPORT = 379;
  static const int OBS_KEY_TASKPANE = 380;
  static const int OBS_KEY_TERMINAL = 381;
  static const int OBS_KEY_TOOLS = 382;
  static const int OBS_KEY_TRAVEL = 383;
  static const int OBS_KEY_VIDEO = 384;
  static const int OBS_KEY_WORD = 385;
  static const int OBS_KEY_XFER = 386;
  static const int OBS_KEY_ZOOMIN = 387;
  static const int OBS_KEY_ZOOMOUT = 388;
  static const int OBS_KEY_AWAY = 389;
  static const int OBS_KEY_MESSENGER = 390;
  static const int OBS_KEY_WEBCAM = 391;
  static const int OBS_KEY_MAILFORWARD = 392;
  static const int OBS_KEY_PICTURES = 393;
  static const int OBS_KEY_MUSIC = 394;
  static const int OBS_KEY_BATTERY = 395;
  static const int OBS_KEY_BLUETOOTH = 396;
  static const int OBS_KEY_WLAN = 397;
  static const int OBS_KEY_UWB = 398;
  static const int OBS_KEY_AUDIOFORWARD = 399;
  static const int OBS_KEY_AUDIOREPEAT = 400;
  static const int OBS_KEY_AUDIORANDOMPLAY = 401;
  static const int OBS_KEY_SUBTITLE = 402;
  static const int OBS_KEY_AUDIOCYCLETRACK = 403;
  static const int OBS_KEY_TIME = 404;
  static const int OBS_KEY_HIBERNATE = 405;
  static const int OBS_KEY_VIEW = 406;
  static const int OBS_KEY_TOPMENU = 407;
  static const int OBS_KEY_POWERDOWN = 408;
  static const int OBS_KEY_SUSPEND = 409;
  static const int OBS_KEY_CONTRASTADJUST = 410;
  static const int OBS_KEY_MEDIALAST = 411;
  static const int OBS_KEY_CALL = 412;
  static const int OBS_KEY_CAMERA = 413;
  static const int OBS_KEY_CAMERAFOCUS = 414;
  static const int OBS_KEY_CONTEXT1 = 415;
  static const int OBS_KEY_CONTEXT2 = 416;
  static const int OBS_KEY_CONTEXT3 = 417;
  static const int OBS_KEY_CONTEXT4 = 418;
  static const int OBS_KEY_FLIP = 419;
  static const int OBS_KEY_HANGUP = 420;
  static const int OBS_KEY_NO = 421;
  static const int OBS_KEY_SELECT = 422;
  static const int OBS_KEY_YES = 423;
  static const int OBS_KEY_TOGGLECALLHANGUP = 424;
  static const int OBS_KEY_VOICEDIAL = 425;
  static const int OBS_KEY_LASTNUMBERREDIAL = 426;
  static const int OBS_KEY_EXECUTE = 427;
  static const int OBS_KEY_PRINTER = 428;
  static const int OBS_KEY_PLAY = 429;
  static const int OBS_KEY_SLEEP = 430;
  static const int OBS_KEY_ZOOM = 431;
  static const int OBS_KEY_CANCEL = 432;
  static const int OBS_KEY_MOUSE1 = 433;
  static const int OBS_KEY_MOUSE2 = 434;
  static const int OBS_KEY_MOUSE3 = 435;
  static const int OBS_KEY_MOUSE4 = 436;
  static const int OBS_KEY_MOUSE5 = 437;
  static const int OBS_KEY_MOUSE6 = 438;
  static const int OBS_KEY_MOUSE7 = 439;
  static const int OBS_KEY_MOUSE8 = 440;
  static const int OBS_KEY_MOUSE9 = 441;
  static const int OBS_KEY_MOUSE10 = 442;
  static const int OBS_KEY_MOUSE11 = 443;
  static const int OBS_KEY_MOUSE12 = 444;
  static const int OBS_KEY_MOUSE13 = 445;
  static const int OBS_KEY_MOUSE14 = 446;
  static const int OBS_KEY_MOUSE15 = 447;
  static const int OBS_KEY_MOUSE16 = 448;
  static const int OBS_KEY_MOUSE17 = 449;
  static const int OBS_KEY_MOUSE18 = 450;
  static const int OBS_KEY_MOUSE19 = 451;
  static const int OBS_KEY_MOUSE20 = 452;
  static const int OBS_KEY_MOUSE21 = 453;
  static const int OBS_KEY_MOUSE22 = 454;
  static const int OBS_KEY_MOUSE23 = 455;
  static const int OBS_KEY_MOUSE24 = 456;
  static const int OBS_KEY_MOUSE25 = 457;
  static const int OBS_KEY_MOUSE26 = 458;
  static const int OBS_KEY_MOUSE27 = 459;
  static const int OBS_KEY_MOUSE28 = 460;
  static const int OBS_KEY_MOUSE29 = 461;
  static const int OBS_KEY_BACKSLASH_RT102 = 462;
  static const int OBS_KEY_OPEN = 463;
  static const int OBS_KEY_FIND = 464;
  static const int OBS_KEY_REDO = 465;
  static const int OBS_KEY_UNDO = 466;
  static const int OBS_KEY_FRONT = 467;
  static const int OBS_KEY_PROPS = 468;
  static const int OBS_KEY_VK_CANCEL = 469;
  static const int OBS_KEY_0x07 = 470;
  static const int OBS_KEY_0x0A = 471;
  static const int OBS_KEY_0x0B = 472;
  static const int OBS_KEY_0x0E = 473;
  static const int OBS_KEY_0x0F = 474;
  static const int OBS_KEY_0x16 = 475;
  static const int OBS_KEY_VK_JUNJA = 476;
  static const int OBS_KEY_VK_FINAL = 477;
  static const int OBS_KEY_0x1A = 478;
  static const int OBS_KEY_VK_ACCEPT = 479;
  static const int OBS_KEY_VK_MODECHANGE = 480;
  static const int OBS_KEY_VK_SELECT = 481;
  static const int OBS_KEY_VK_PRINT = 482;
  static const int OBS_KEY_VK_EXECUTE = 483;
  static const int OBS_KEY_VK_HELP = 484;
  static const int OBS_KEY_0x30 = 485;
  static const int OBS_KEY_0x31 = 486;
  static const int OBS_KEY_0x32 = 487;
  static const int OBS_KEY_0x33 = 488;
  static const int OBS_KEY_0x34 = 489;
  static const int OBS_KEY_0x35 = 490;
  static const int OBS_KEY_0x36 = 491;
  static const int OBS_KEY_0x37 = 492;
  static const int OBS_KEY_0x38 = 493;
  static const int OBS_KEY_0x39 = 494;
  static const int OBS_KEY_0x3A = 495;
  static const int OBS_KEY_0x3B = 496;
  static const int OBS_KEY_0x3C = 497;
  static const int OBS_KEY_0x3D = 498;
  static const int OBS_KEY_0x3E = 499;
  static const int OBS_KEY_0x3F = 500;
  static const int OBS_KEY_0x40 = 501;
  static const int OBS_KEY_0x41 = 502;
  static const int OBS_KEY_0x42 = 503;
  static const int OBS_KEY_0x43 = 504;
  static const int OBS_KEY_0x44 = 505;
  static const int OBS_KEY_0x45 = 506;
  static const int OBS_KEY_0x46 = 507;
  static const int OBS_KEY_0x47 = 508;
  static const int OBS_KEY_0x48 = 509;
  static const int OBS_KEY_0x49 = 510;
  static const int OBS_KEY_0x4A = 511;
  static const int OBS_KEY_0x4B = 512;
  static const int OBS_KEY_0x4C = 513;
  static const int OBS_KEY_0x4D = 514;
  static const int OBS_KEY_0x4E = 515;
  static const int OBS_KEY_0x4F = 516;
  static const int OBS_KEY_0x50 = 517;
  static const int OBS_KEY_0x51 = 518;
  static const int OBS_KEY_0x52 = 519;
  static const int OBS_KEY_0x53 = 520;
  static const int OBS_KEY_0x54 = 521;
  static const int OBS_KEY_0x55 = 522;
  static const int OBS_KEY_0x56 = 523;
  static const int OBS_KEY_0x57 = 524;
  static const int OBS_KEY_0x58 = 525;
  static const int OBS_KEY_0x59 = 526;
  static const int OBS_KEY_0x5A = 527;
  static const int OBS_KEY_VK_LWIN = 528;
  static const int OBS_KEY_VK_RWIN = 529;
  static const int OBS_KEY_VK_APPS = 530;
  static const int OBS_KEY_0x5E = 531;
  static const int OBS_KEY_VK_SLEEP = 532;
  static const int OBS_KEY_VK_SEPARATOR = 533;
  static const int OBS_KEY_0x88 = 534;
  static const int OBS_KEY_0x89 = 535;
  static const int OBS_KEY_0x8A = 536;
  static const int OBS_KEY_0x8B = 537;
  static const int OBS_KEY_0x8C = 538;
  static const int OBS_KEY_0x8D = 539;
  static const int OBS_KEY_0x8E = 540;
  static const int OBS_KEY_0x8F = 541;
  static const int OBS_KEY_VK_OEM_FJ_JISHO = 542;
  static const int OBS_KEY_VK_OEM_FJ_LOYA = 543;
  static const int OBS_KEY_VK_OEM_FJ_ROYA = 544;
  static const int OBS_KEY_0x97 = 545;
  static const int OBS_KEY_0x98 = 546;
  static const int OBS_KEY_0x99 = 547;
  static const int OBS_KEY_0x9A = 548;
  static const int OBS_KEY_0x9B = 549;
  static const int OBS_KEY_0x9C = 550;
  static const int OBS_KEY_0x9D = 551;
  static const int OBS_KEY_0x9E = 552;
  static const int OBS_KEY_0x9F = 553;
  static const int OBS_KEY_VK_LSHIFT = 554;
  static const int OBS_KEY_VK_RSHIFT = 555;
  static const int OBS_KEY_VK_LCONTROL = 556;
  static const int OBS_KEY_VK_RCONTROL = 557;
  static const int OBS_KEY_VK_LMENU = 558;
  static const int OBS_KEY_VK_RMENU = 559;
  static const int OBS_KEY_VK_BROWSER_BACK = 560;
  static const int OBS_KEY_VK_BROWSER_FORWARD = 561;
  static const int OBS_KEY_VK_BROWSER_REFRESH = 562;
  static const int OBS_KEY_VK_BROWSER_STOP = 563;
  static const int OBS_KEY_VK_BROWSER_SEARCH = 564;
  static const int OBS_KEY_VK_BROWSER_FAVORITES = 565;
  static const int OBS_KEY_VK_BROWSER_HOME = 566;
  static const int OBS_KEY_VK_VOLUME_MUTE = 567;
  static const int OBS_KEY_VK_VOLUME_DOWN = 568;
  static const int OBS_KEY_VK_VOLUME_UP = 569;
  static const int OBS_KEY_VK_MEDIA_NEXT_TRACK = 570;
  static const int OBS_KEY_VK_MEDIA_PREV_TRACK = 571;
  static const int OBS_KEY_VK_MEDIA_STOP = 572;
  static const int OBS_KEY_VK_MEDIA_PLAY_PAUSE = 573;
  static const int OBS_KEY_VK_LAUNCH_MAIL = 574;
  static const int OBS_KEY_VK_LAUNCH_MEDIA_SELECT = 575;
  static const int OBS_KEY_VK_LAUNCH_APP1 = 576;
  static const int OBS_KEY_VK_LAUNCH_APP2 = 577;
  static const int OBS_KEY_0xB8 = 578;
  static const int OBS_KEY_0xB9 = 579;
  static const int OBS_KEY_0xC1 = 580;
  static const int OBS_KEY_0xC2 = 581;
  static const int OBS_KEY_0xC3 = 582;
  static const int OBS_KEY_0xC4 = 583;
  static const int OBS_KEY_0xC5 = 584;
  static const int OBS_KEY_0xC6 = 585;
  static const int OBS_KEY_0xC7 = 586;
  static const int OBS_KEY_0xC8 = 587;
  static const int OBS_KEY_0xC9 = 588;
  static const int OBS_KEY_0xCA = 589;
  static const int OBS_KEY_0xCB = 590;
  static const int OBS_KEY_0xCC = 591;
  static const int OBS_KEY_0xCD = 592;
  static const int OBS_KEY_0xCE = 593;
  static const int OBS_KEY_0xCF = 594;
  static const int OBS_KEY_0xD0 = 595;
  static const int OBS_KEY_0xD1 = 596;
  static const int OBS_KEY_0xD2 = 597;
  static const int OBS_KEY_0xD3 = 598;
  static const int OBS_KEY_0xD4 = 599;
  static const int OBS_KEY_0xD5 = 600;
  static const int OBS_KEY_0xD6 = 601;
  static const int OBS_KEY_0xD7 = 602;
  static const int OBS_KEY_0xD8 = 603;
  static const int OBS_KEY_0xD9 = 604;
  static const int OBS_KEY_0xDA = 605;
  static const int OBS_KEY_VK_OEM_8 = 606;
  static const int OBS_KEY_0xE0 = 607;
  static const int OBS_KEY_VK_OEM_AX = 608;
  static const int OBS_KEY_VK_ICO_HELP = 609;
  static const int OBS_KEY_VK_ICO_00 = 610;
  static const int OBS_KEY_VK_PROCESSKEY = 611;
  static const int OBS_KEY_VK_ICO_CLEAR = 612;
  static const int OBS_KEY_VK_PACKET = 613;
  static const int OBS_KEY_0xE8 = 614;
  static const int OBS_KEY_VK_OEM_RESET = 615;
  static const int OBS_KEY_VK_OEM_JUMP = 616;
  static const int OBS_KEY_VK_OEM_PA1 = 617;
  static const int OBS_KEY_VK_OEM_PA2 = 618;
  static const int OBS_KEY_VK_OEM_PA3 = 619;
  static const int OBS_KEY_VK_OEM_WSCTRL = 620;
  static const int OBS_KEY_VK_OEM_CUSEL = 621;
  static const int OBS_KEY_VK_OEM_ATTN = 622;
  static const int OBS_KEY_VK_OEM_FINISH = 623;
  static const int OBS_KEY_VK_OEM_COPY = 624;
  static const int OBS_KEY_VK_OEM_AUTO = 625;
  static const int OBS_KEY_VK_OEM_ENLW = 626;
  static const int OBS_KEY_VK_ATTN = 627;
  static const int OBS_KEY_VK_CRSEL = 628;
  static const int OBS_KEY_VK_EXSEL = 629;
  static const int OBS_KEY_VK_EREOF = 630;
  static const int OBS_KEY_VK_PLAY = 631;
  static const int OBS_KEY_VK_ZOOM = 632;
  static const int OBS_KEY_VK_NONAME = 633;
  static const int OBS_KEY_VK_PA1 = 634;
  static const int OBS_KEY_VK_OEM_CLEAR = 635;
  static const int OBS_KEY_LAST_VALUE = 636;
}

class obs_key_combination extends ffi.Struct {
  @ffi.Uint32()
  external int modifiers;

  @ffi.Int32()
  external int key;
}

class obs_hotkey extends ffi.Opaque {}

class obs_hotkey_binding extends ffi.Opaque {}

abstract class obs_hotkey_registerer_type {
  static const int OBS_HOTKEY_REGISTERER_FRONTEND = 0;
  static const int OBS_HOTKEY_REGISTERER_SOURCE = 1;
  static const int OBS_HOTKEY_REGISTERER_OUTPUT = 2;
  static const int OBS_HOTKEY_REGISTERER_ENCODER = 3;
  static const int OBS_HOTKEY_REGISTERER_SERVICE = 4;
}

typedef obs_hotkey_id = size_t;
typedef obs_hotkey_t = obs_hotkey;
typedef obs_key_combination_t = obs_key_combination;
typedef obs_hotkey_binding_t = obs_hotkey_binding;
typedef obs_hotkey_pair_id = size_t;

class obs_hotkeys_translations extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> insert;

  external ffi.Pointer<ffi.Int8> del;

  external ffi.Pointer<ffi.Int8> home;

  external ffi.Pointer<ffi.Int8> end;

  external ffi.Pointer<ffi.Int8> page_up;

  external ffi.Pointer<ffi.Int8> page_down;

  external ffi.Pointer<ffi.Int8> num_lock;

  external ffi.Pointer<ffi.Int8> scroll_lock;

  external ffi.Pointer<ffi.Int8> caps_lock;

  external ffi.Pointer<ffi.Int8> backspace;

  external ffi.Pointer<ffi.Int8> tab;

  external ffi.Pointer<ffi.Int8> print;

  external ffi.Pointer<ffi.Int8> pause;

  external ffi.Pointer<ffi.Int8> left;

  external ffi.Pointer<ffi.Int8> right;

  external ffi.Pointer<ffi.Int8> up;

  external ffi.Pointer<ffi.Int8> down;

  external ffi.Pointer<ffi.Int8> shift;

  external ffi.Pointer<ffi.Int8> alt;

  external ffi.Pointer<ffi.Int8> control;

  external ffi.Pointer<ffi.Int8> meta;

  external ffi.Pointer<ffi.Int8> menu;

  external ffi.Pointer<ffi.Int8> space;

  external ffi.Pointer<ffi.Int8> numpad_num;

  external ffi.Pointer<ffi.Int8> numpad_divide;

  external ffi.Pointer<ffi.Int8> numpad_multiply;

  external ffi.Pointer<ffi.Int8> numpad_minus;

  external ffi.Pointer<ffi.Int8> numpad_plus;

  external ffi.Pointer<ffi.Int8> numpad_decimal;

  external ffi.Pointer<ffi.Int8> apple_keypad_num;

  external ffi.Pointer<ffi.Int8> apple_keypad_divide;

  external ffi.Pointer<ffi.Int8> apple_keypad_multiply;

  external ffi.Pointer<ffi.Int8> apple_keypad_minus;

  external ffi.Pointer<ffi.Int8> apple_keypad_plus;

  external ffi.Pointer<ffi.Int8> apple_keypad_decimal;

  external ffi.Pointer<ffi.Int8> apple_keypad_equal;

  external ffi.Pointer<ffi.Int8> mouse_num;

  external ffi.Pointer<ffi.Int8> escape;
}

typedef obs_hotkey_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, obs_hotkey_id,
            ffi.Pointer<obs_hotkey_t>, ffi.Uint8)>>;
typedef obs_hotkey_active_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Void>, obs_hotkey_pair_id,
            ffi.Pointer<obs_hotkey_t>, ffi.Uint8)>>;
typedef obs_hotkey_enum_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Void>, obs_hotkey_id, ffi.Pointer<obs_hotkey_t>)>>;
typedef obs_hotkey_binding_enum_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Void>, size_t, ffi.Pointer<obs_hotkey_binding_t>)>>;
typedef obs_hotkey_callback_router_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, obs_hotkey_id, ffi.Uint8)>>;
typedef obs_hotkey_atomic_update_func
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

class dstr extends ffi.Opaque {}

/// Used for changing the order of items (for example, filters in a source,
/// or items in a scene)
abstract class obs_order_movement {
  static const int OBS_ORDER_MOVE_UP = 0;
  static const int OBS_ORDER_MOVE_DOWN = 1;
  static const int OBS_ORDER_MOVE_TOP = 2;
  static const int OBS_ORDER_MOVE_BOTTOM = 3;
}

/// Used with obs_source_process_filter to specify whether the filter should
/// render the source directly with the specified effect, or whether it should
/// render it to a texture
abstract class obs_allow_direct_render {
  static const int OBS_NO_DIRECT_RENDERING = 0;
  static const int OBS_ALLOW_DIRECT_RENDERING = 1;
}

abstract class obs_scale_type {
  static const int OBS_SCALE_DISABLE = 0;
  static const int OBS_SCALE_POINT = 1;
  static const int OBS_SCALE_BICUBIC = 2;
  static const int OBS_SCALE_BILINEAR = 3;
  static const int OBS_SCALE_LANCZOS = 4;
  static const int OBS_SCALE_AREA = 5;
}

/// Used with scene items to indicate the type of bounds to use for scene items.
/// Mostly determines how the image will be scaled within those bounds, or
/// whether to use bounds at all.
abstract class obs_bounds_type {
  /// < no bounds
  static const int OBS_BOUNDS_NONE = 0;

  /// < stretch (ignores base scale)
  static const int OBS_BOUNDS_STRETCH = 1;

  /// < scales to inner rectangle
  static const int OBS_BOUNDS_SCALE_INNER = 2;

  /// < scales to outer rectangle
  static const int OBS_BOUNDS_SCALE_OUTER = 3;

  /// < scales to the width
  static const int OBS_BOUNDS_SCALE_TO_WIDTH = 4;

  /// < scales to the height
  static const int OBS_BOUNDS_SCALE_TO_HEIGHT = 5;

  /// < no scaling, maximum size only
  static const int OBS_BOUNDS_MAX_ONLY = 6;
}

class obs_transform_info extends ffi.Opaque {}

/// Video initialization structure
class obs_video_info extends ffi.Struct {
  /// Graphics module to use (usually "libobs-opengl" or "libobs-d3d11")
  external ffi.Pointer<ffi.Int8> graphics_module;

  /// < Output FPS numerator
  @ffi.Uint32()
  external int fps_num;

  /// < Output FPS denominator
  @ffi.Uint32()
  external int fps_den;

  /// < Base compositing width
  @ffi.Uint32()
  external int base_width;

  /// < Base compositing height
  @ffi.Uint32()
  external int base_height;

  /// < Output width
  @ffi.Uint32()
  external int output_width;

  /// < Output height
  @ffi.Uint32()
  external int output_height;

  /// < Output format
  @ffi.Int32()
  external int output_format;

  /// Video adapter index to use (NOTE: avoid for optimus laptops)
  @ffi.Uint32()
  external int adapter;

  /// Use shaders to convert to different color formats
  @ffi.Uint8()
  external int gpu_conversion;

  /// < YUV type (if YUV)
  @ffi.Int32()
  external int colorspace;

  /// < YUV range (if YUV)
  @ffi.Int32()
  external int range;

  /// < How to scale if scaling
  @ffi.Int32()
  external int scale_type;
}

/// Audio initialization structure
class obs_audio_info extends ffi.Struct {
  @ffi.Uint32()
  external int samples_per_sec;

  @ffi.Int32()
  external int speakers;
}

/// Source audio output structure.  Used with obs_source_output_audio to output
/// source audio.  Audio is automatically resampled and remixed as necessary.
class obs_source_audio extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> data;

  @ffi.Uint32()
  external int frames;

  @ffi.Int32()
  external int speakers;

  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int samples_per_sec;

  @ffi.Uint64()
  external int timestamp;
}

class obs_source_cea_708 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Uint32()
  external int packets;

  @ffi.Uint64()
  external int timestamp;
}

class obs_source_frame2 extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> data;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> linesize;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Int32()
  external int format;

  @ffi.Int32()
  external int range;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Float> color_matrix;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> color_range_min;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> color_range_max;

  @ffi.Uint8()
  external int flip;
}

/// Access to the argc/argv used to start OBS. What you see is what you get.
class obs_cmdline_args extends ffi.Struct {
  @ffi.Int32()
  external int argc;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> argv;
}

typedef obs_module_t = obs_module;

class obs_module_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> bin_path;

  external ffi.Pointer<ffi.Int8> data_path;
}

typedef obs_find_module_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<obs_module_info>)>>;
typedef obs_enum_module_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_module_t>)>>;

abstract class obs_base_effect {
  /// < RGB/YUV
  static const int OBS_EFFECT_DEFAULT = 0;

  /// < RGB/YUV (using texture_rect)
  static const int OBS_EFFECT_DEFAULT_RECT = 1;

  /// < RGB/YUV (alpha set to 1.0)
  static const int OBS_EFFECT_OPAQUE = 2;

  /// < RGB/YUV (solid color only)
  static const int OBS_EFFECT_SOLID = 3;

  /// < Bicubic downscale
  static const int OBS_EFFECT_BICUBIC = 4;

  /// < Lanczos downscale
  static const int OBS_EFFECT_LANCZOS = 5;

  /// < Bilinear low resolution downscale
  static const int OBS_EFFECT_BILINEAR_LOWRES = 6;

  /// < Premultiplied alpha
  static const int OBS_EFFECT_PREMULTIPLIED_ALPHA = 7;

  /// < RGB/YUV (repeating)
  static const int OBS_EFFECT_REPEAT = 8;

  /// < Area rescale
  static const int OBS_EFFECT_AREA = 9;
}

typedef obs_load_source_cb = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>)>>;
typedef obs_save_source_filter_cb = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>)>>;

abstract class obs_obj_type {
  static const int OBS_OBJ_TYPE_INVALID = 0;
  static const int OBS_OBJ_TYPE_SOURCE = 1;
  static const int OBS_OBJ_TYPE_OUTPUT = 2;
  static const int OBS_OBJ_TYPE_ENCODER = 3;
  static const int OBS_OBJ_TYPE_SERVICE = 4;
}

typedef obs_enum_audio_device_cb = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Int8>)>>;

abstract class obs_task_type {
  static const int OBS_TASK_UI = 0;
  static const int OBS_TASK_GRAPHICS = 1;
}

typedef obs_task_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef obs_task_handler_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(obs_task_t, ffi.Pointer<ffi.Void>, ffi.Uint8)>>;
typedef obs_view_t = obs_view;
typedef obs_display_t = obs_display;
typedef obs_weak_source_t = obs_weak_source;
typedef obs_source_audio_capture_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>,
            ffi.Pointer<audio_data>, ffi.Uint8)>>;
typedef obs_source_caption_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_source_t>,
            ffi.Pointer<obs_source_cea_708>)>>;

abstract class obs_deinterlace_mode {
  static const int OBS_DEINTERLACE_MODE_DISABLE = 0;
  static const int OBS_DEINTERLACE_MODE_DISCARD = 1;
  static const int OBS_DEINTERLACE_MODE_RETRO = 2;
  static const int OBS_DEINTERLACE_MODE_BLEND = 3;
  static const int OBS_DEINTERLACE_MODE_BLEND_2X = 4;
  static const int OBS_DEINTERLACE_MODE_LINEAR = 5;
  static const int OBS_DEINTERLACE_MODE_LINEAR_2X = 6;
  static const int OBS_DEINTERLACE_MODE_YADIF = 7;
  static const int OBS_DEINTERLACE_MODE_YADIF_2X = 8;
}

abstract class obs_deinterlace_field_order {
  static const int OBS_DEINTERLACE_FIELD_ORDER_TOP = 0;
  static const int OBS_DEINTERLACE_FIELD_ORDER_BOTTOM = 1;
}

abstract class obs_monitoring_type {
  static const int OBS_MONITORING_TYPE_NONE = 0;
  static const int OBS_MONITORING_TYPE_MONITOR_ONLY = 1;
  static const int OBS_MONITORING_TYPE_MONITOR_AND_OUTPUT = 2;
}

abstract class obs_transition_target {
  static const int OBS_TRANSITION_SOURCE_A = 0;
  static const int OBS_TRANSITION_SOURCE_B = 1;
}

abstract class obs_transition_mode {
  static const int OBS_TRANSITION_MODE_AUTO = 0;
  static const int OBS_TRANSITION_MODE_MANUAL = 1;
}

abstract class obs_transition_scale_type {
  static const int OBS_TRANSITION_SCALE_MAX_ONLY = 0;
  static const int OBS_TRANSITION_SCALE_ASPECT = 1;
  static const int OBS_TRANSITION_SCALE_STRETCH = 2;
}

typedef obs_transition_video_render_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<gs_texture_t>,
            ffi.Pointer<gs_texture_t>, ffi.Float, ffi.Uint32, ffi.Uint32)>>;
typedef obs_transition_audio_mix_callback_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Void>, ffi.Float)>>;
typedef obs_scene_t = obs_scene;

abstract class obs_scene_duplicate_type {
  /// < Source refs only
  static const int OBS_SCENE_DUP_REFS = 0;

  /// < Fully duplicate
  static const int OBS_SCENE_DUP_COPY = 1;

  /// < Source refs only (as private)
  static const int OBS_SCENE_DUP_PRIVATE_REFS = 2;

  /// < Fully duplicate (as private)
  static const int OBS_SCENE_DUP_PRIVATE_COPY = 3;
}

typedef obs_sceneitem_t = obs_scene_item;

class obs_sceneitem_order_info extends ffi.Struct {
  external ffi.Pointer<obs_sceneitem_t> group;

  external ffi.Pointer<obs_sceneitem_t> item;
}

typedef obs_scene_atomic_update_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<obs_scene_t>)>>;

class obs_sceneitem_crop extends ffi.Struct {
  @ffi.Int32()
  external int left;

  @ffi.Int32()
  external int top;

  @ffi.Int32()
  external int right;

  @ffi.Int32()
  external int bottom;
}

typedef obs_weak_output_t = obs_weak_output;
typedef obs_weak_encoder_t = obs_weak_encoder;
typedef obs_weak_service_t = obs_weak_service;
typedef FILE = __sFILE;

class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _p;

  @ffi.Int32()
  external int _r;

  @ffi.Int32()
  external int _w;

  @ffi.Int16()
  external int _flags;

  @ffi.Int16()
  external int _file;

  external __sbuf _bf;

  @ffi.Int32()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>> _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Int32)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int32)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Int32)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int32()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Uint8> _nbuf;

  external __sbuf _lb;

  @ffi.Int32()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _base;

  @ffi.Int32()
  external int _size;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.Int64;

class __sFILEX extends ffi.Opaque {}

typedef wchar_t = __darwin_wchar_t;
typedef __darwin_wchar_t = ffi.Int32;

class os_cpu_usage_info extends ffi.Opaque {}

typedef os_cpu_usage_info_t = os_cpu_usage_info;
typedef os_performance_token_t = ffi.Void;

class os_dir extends ffi.Opaque {}

class os_dirent extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> d_name;

  @ffi.Uint8()
  external int directory;
}

typedef os_dir_t = os_dir;

class os_globent extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> path;

  @ffi.Uint8()
  external int directory;
}

class os_glob_info extends ffi.Struct {
  @size_t()
  external int gl_pathc;

  external ffi.Pointer<os_globent> gl_pathv;
}

typedef os_glob_t = os_glob_info;

class os_inhibit_info extends ffi.Opaque {}

typedef os_inhibit_t = os_inhibit_info;

class os_proc_memory_usage extends ffi.Struct {
  @ffi.Uint64()
  external int resident_size;

  @ffi.Uint64()
  external int virtual_size;
}

typedef os_proc_memory_usage_t = os_proc_memory_usage;

const int GS_MAX_TEXTURES = 8;

const int GS_BUILD_MIPMAPS = 1;

const int GS_DYNAMIC = 2;

const int GS_RENDER_TARGET = 4;

const int GS_GL_DUMMYTEX = 8;

const int GS_DUP_BUFFER = 16;

const int GS_SHARED_TEX = 32;

const int GS_SHARED_KM_TEX = 64;

const int GS_SUCCESS = 0;

const int GS_ERROR_FAIL = -1;

const int GS_ERROR_MODULE_NOT_FOUND = -2;

const int GS_ERROR_NOT_SUPPORTED = -3;

const int GS_DEVICE_OPENGL = 1;

const int GS_DEVICE_DIRECT3D_11 = 2;

const int GS_FLIP_U = 1;

const int GS_FLIP_V = 2;

const int GS_CLEAR_COLOR = 1;

const int GS_CLEAR_DEPTH = 2;

const int GS_CLEAR_STENCIL = 4;

const int GS_USE_DEBUG_MARKERS = 0;

const int MAX_AUDIO_MIXES = 6;

const int MAX_AUDIO_CHANNELS = 8;

const int AUDIO_OUTPUT_FRAMES = 1024;

const int TOTAL_AUDIO_SIZE = 196608;

const int AUDIO_OUTPUT_SUCCESS = 0;

const int AUDIO_OUTPUT_INVALIDPARAM = -1;

const int AUDIO_OUTPUT_FAIL = -2;

const int VIDEO_OUTPUT_SUCCESS = 0;

const int VIDEO_OUTPUT_INVALIDPARAM = -1;

const int VIDEO_OUTPUT_FAIL = -2;

const int LIBOBS_API_MAJOR_VER = 26;

const int LIBOBS_API_MINOR_VER = 1;

const int LIBOBS_API_PATCH_VER = 2;

const int LIBOBS_API_VER = 436273154;

const String OBS_VERSION = 'unknown';

const String OBS_DATA_PATH = '../../data';

const String OBS_INSTALL_PREFIX = '';

const String OBS_PLUGIN_DESTINATION = 'obs-plugins';

const String OBS_RELATIVE_PREFIX = '../../';

const int OBS_RELEASE_CANDIDATE_MAJOR = 0;

const int OBS_RELEASE_CANDIDATE_MINOR = 0;

const int OBS_RELEASE_CANDIDATE_PATCH = 0;

const int OBS_RELEASE_CANDIDATE_VER = 0;

const int OBS_RELEASE_CANDIDATE = 0;

const String OBS_INSTALL_DATA_PATH = '../../data';

const int MAX_CHANNELS = 64;

const int OBS_ALIGN_CENTER = 0;

const int OBS_ALIGN_LEFT = 1;

const int OBS_ALIGN_RIGHT = 2;

const int OBS_ALIGN_TOP = 4;

const int OBS_ALIGN_BOTTOM = 8;

const int MODULE_SUCCESS = 0;

const int MODULE_ERROR = -1;

const int MODULE_FILE_NOT_FOUND = -2;

const int MODULE_MISSING_EXPORTS = -3;

const int MODULE_INCOMPATIBLE_VER = -4;

const int OBS_OUTPUT_SUCCESS = 0;

const int OBS_OUTPUT_BAD_PATH = -1;

const int OBS_OUTPUT_CONNECT_FAILED = -2;

const int OBS_OUTPUT_INVALID_STREAM = -3;

const int OBS_OUTPUT_ERROR = -4;

const int OBS_OUTPUT_DISCONNECTED = -5;

const int OBS_OUTPUT_UNSUPPORTED = -6;

const int OBS_OUTPUT_NO_SPACE = -7;

const int OBS_OUTPUT_ENCODE_ERROR = -8;

const int OBS_VIDEO_SUCCESS = 0;

const int OBS_VIDEO_FAIL = -1;

const int OBS_VIDEO_NOT_SUPPORTED = -2;

const int OBS_VIDEO_INVALID_PARAM = -3;

const int OBS_VIDEO_CURRENTLY_ACTIVE = -4;

const int OBS_VIDEO_MODULE_NOT_FOUND = -5;

const int OBS_UI_SUCCESS = 0;

const int OBS_UI_CANCEL = -1;

const int OBS_UI_NOTFOUND = -2;

const int OBS_PROPERTIES_DEFER_UPDATE = 1;

const int OBS_FONT_BOLD = 1;

const int OBS_FONT_ITALIC = 2;

const int OBS_FONT_UNDERLINE = 4;

const int OBS_FONT_STRIKEOUT = 8;

const int OBS_SOURCE_VIDEO = 1;

const int OBS_SOURCE_AUDIO = 2;

const int OBS_SOURCE_ASYNC = 4;

const int OBS_SOURCE_ASYNC_VIDEO = 5;

const int OBS_SOURCE_CUSTOM_DRAW = 8;

const int OBS_SOURCE_INTERACTION = 32;

const int OBS_SOURCE_COMPOSITE = 64;

const int OBS_SOURCE_DO_NOT_DUPLICATE = 128;

const int OBS_SOURCE_DEPRECATED = 256;

const int OBS_SOURCE_DO_NOT_SELF_MONITOR = 512;

const int OBS_SOURCE_CAP_DISABLED = 1024;

const int OBS_SOURCE_CAP_OBSOLETE = 1024;

const int OBS_SOURCE_MONITOR_BY_DEFAULT = 2048;

const int OBS_SOURCE_SUBMIX = 4096;

const int OBS_SOURCE_CONTROLLABLE_MEDIA = 8192;

const int OBS_SOURCE_CEA_708 = 16384;

const int OBS_ENCODER_CAP_DEPRECATED = 1;

const int OBS_ENCODER_CAP_PASS_TEXTURE = 2;

const int OBS_ENCODER_CAP_DYN_BITRATE = 4;

const int OBS_ENCODER_CAP_INTERNAL = 8;

const int OBS_OUTPUT_VIDEO = 1;

const int OBS_OUTPUT_AUDIO = 2;

const int OBS_OUTPUT_AV = 3;

const int OBS_OUTPUT_ENCODED = 4;

const int OBS_OUTPUT_SERVICE = 8;

const int OBS_OUTPUT_MULTI_TRACK = 16;

const int OBS_OUTPUT_CAN_PAUSE = 32;

const int OBS_INVALID_HOTKEY_ID = -1;

const int OBS_INVALID_HOTKEY_PAIR_ID = -1;

const int XINPUT_MOUSE_LEN = 33;

const int OBS_SOURCE_FLAG_UNUSED_1 = 1;

const int OBS_SOURCE_FLAG_FORCE_MONO = 2;

const int OBS_OUTPUT_DELAY_PRESERVE = 1;

const int MKDIR_EXISTS = 1;

const int MKDIR_SUCCESS = 0;

const int MKDIR_ERROR = -1;

const int ARCH_BITS = 64;

