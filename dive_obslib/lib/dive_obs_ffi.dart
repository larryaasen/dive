// ignore: slash_for_doc_comments
/******************************************************************************
  Copyright (C) 2013-2021 by Hugh Bailey <jim@obsproject.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
******************************************************************************/

// The package ffigen generates code that generates warnings with the Dart
// analyzer, so ignore some of the rules.
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: unused_element
// ignore_for_file: unused_field

// ignore_for_file: empty_struct_warning

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings to obslib
class DiveObslibFFI {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  DiveObslibFFI(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  void base_set_allocator(
    ffi.Pointer<base_allocator> defs,
  ) {
    _base_set_allocator ??=
        _dylib.lookupFunction<_c_base_set_allocator, _dart_base_set_allocator>(
            'base_set_allocator');
    return _base_set_allocator(
      defs,
    );
  }

  _dart_base_set_allocator _base_set_allocator;

  ffi.Pointer<ffi.Void> bmalloc(
    int size,
  ) {
    _bmalloc ??= _dylib.lookupFunction<_c_bmalloc, _dart_bmalloc>('bmalloc');
    return _bmalloc(
      size,
    );
  }

  _dart_bmalloc _bmalloc;

  ffi.Pointer<ffi.Void> brealloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    _brealloc ??=
        _dylib.lookupFunction<_c_brealloc, _dart_brealloc>('brealloc');
    return _brealloc(
      ptr,
      size,
    );
  }

  _dart_brealloc _brealloc;

  void bfree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _bfree ??= _dylib.lookupFunction<_c_bfree, _dart_bfree>('bfree');
    return _bfree(
      ptr,
    );
  }

  _dart_bfree _bfree;

  int base_get_alignment() {
    _base_get_alignment ??=
        _dylib.lookupFunction<_c_base_get_alignment, _dart_base_get_alignment>(
            'base_get_alignment');
    return _base_get_alignment();
  }

  _dart_base_get_alignment _base_get_alignment;

  int bnum_allocs() {
    _bnum_allocs ??=
        _dylib.lookupFunction<_c_bnum_allocs, _dart_bnum_allocs>('bnum_allocs');
    return _bnum_allocs();
  }

  _dart_bnum_allocs _bnum_allocs;

  ffi.Pointer<ffi.Void> bmemdup(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    _bmemdup ??= _dylib.lookupFunction<_c_bmemdup, _dart_bmemdup>('bmemdup');
    return _bmemdup(
      ptr,
      size,
    );
  }

  _dart_bmemdup _bmemdup;

  ffi.Pointer<ffi.Void> bzalloc(
    int size,
  ) {
    _bzalloc ??= _dylib.lookupFunction<_c_bzalloc, _dart_bzalloc>('bzalloc');
    return _bzalloc(
      size,
    );
  }

  _dart_bzalloc _bzalloc;

  ffi.Pointer<ffi.Int8> bstrdup_n(
    ffi.Pointer<ffi.Int8> str,
    int n,
  ) {
    _bstrdup_n ??=
        _dylib.lookupFunction<_c_bstrdup_n, _dart_bstrdup_n>('bstrdup_n');
    return _bstrdup_n(
      str,
      n,
    );
  }

  _dart_bstrdup_n _bstrdup_n;

  ffi.Pointer<ffi.Int32> bwstrdup_n(
    ffi.Pointer<ffi.Int32> str,
    int n,
  ) {
    _bwstrdup_n ??=
        _dylib.lookupFunction<_c_bwstrdup_n, _dart_bwstrdup_n>('bwstrdup_n');
    return _bwstrdup_n(
      str,
      n,
    );
  }

  _dart_bwstrdup_n _bwstrdup_n;

  ffi.Pointer<ffi.Int8> bstrdup(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _bstrdup ??= _dylib.lookupFunction<_c_bstrdup, _dart_bstrdup>('bstrdup');
    return _bstrdup(
      str,
    );
  }

  _dart_bstrdup _bstrdup;

  ffi.Pointer<ffi.Int32> bwstrdup(
    ffi.Pointer<ffi.Int32> str,
  ) {
    _bwstrdup ??=
        _dylib.lookupFunction<_c_bwstrdup, _dart_bwstrdup>('bwstrdup');
    return _bwstrdup(
      str,
    );
  }

  _dart_bwstrdup _bwstrdup;

  void profile_register_root(
    ffi.Pointer<ffi.Int8> name,
    int expected_time_between_calls,
  ) {
    _profile_register_root ??= _dylib.lookupFunction<_c_profile_register_root,
        _dart_profile_register_root>('profile_register_root');
    return _profile_register_root(
      name,
      expected_time_between_calls,
    );
  }

  _dart_profile_register_root _profile_register_root;

  void profile_start(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _profile_start ??= _dylib
        .lookupFunction<_c_profile_start, _dart_profile_start>('profile_start');
    return _profile_start(
      name,
    );
  }

  _dart_profile_start _profile_start;

  void profile_end(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _profile_end ??=
        _dylib.lookupFunction<_c_profile_end, _dart_profile_end>('profile_end');
    return _profile_end(
      name,
    );
  }

  _dart_profile_end _profile_end;

  void profile_reenable_thread() {
    _profile_reenable_thread ??= _dylib.lookupFunction<
        _c_profile_reenable_thread,
        _dart_profile_reenable_thread>('profile_reenable_thread');
    return _profile_reenable_thread();
  }

  _dart_profile_reenable_thread _profile_reenable_thread;

  void profiler_start() {
    _profiler_start ??=
        _dylib.lookupFunction<_c_profiler_start, _dart_profiler_start>(
            'profiler_start');
    return _profiler_start();
  }

  _dart_profiler_start _profiler_start;

  void profiler_stop() {
    _profiler_stop ??= _dylib
        .lookupFunction<_c_profiler_stop, _dart_profiler_stop>('profiler_stop');
    return _profiler_stop();
  }

  _dart_profiler_stop _profiler_stop;

  void profiler_print(
    ffi.Pointer<profiler_snapshot> snap,
  ) {
    _profiler_print ??=
        _dylib.lookupFunction<_c_profiler_print, _dart_profiler_print>(
            'profiler_print');
    return _profiler_print(
      snap,
    );
  }

  _dart_profiler_print _profiler_print;

  void profiler_print_time_between_calls(
    ffi.Pointer<profiler_snapshot> snap,
  ) {
    _profiler_print_time_between_calls ??= _dylib.lookupFunction<
            _c_profiler_print_time_between_calls,
            _dart_profiler_print_time_between_calls>(
        'profiler_print_time_between_calls');
    return _profiler_print_time_between_calls(
      snap,
    );
  }

  _dart_profiler_print_time_between_calls _profiler_print_time_between_calls;

  void profiler_free() {
    _profiler_free ??= _dylib
        .lookupFunction<_c_profiler_free, _dart_profiler_free>('profiler_free');
    return _profiler_free();
  }

  _dart_profiler_free _profiler_free;

  ffi.Pointer<profiler_name_store> profiler_name_store_create() {
    _profiler_name_store_create ??= _dylib.lookupFunction<
        _c_profiler_name_store_create,
        _dart_profiler_name_store_create>('profiler_name_store_create');
    return _profiler_name_store_create();
  }

  _dart_profiler_name_store_create _profiler_name_store_create;

  void profiler_name_store_free(
    ffi.Pointer<profiler_name_store> store,
  ) {
    _profiler_name_store_free ??= _dylib.lookupFunction<
        _c_profiler_name_store_free,
        _dart_profiler_name_store_free>('profiler_name_store_free');
    return _profiler_name_store_free(
      store,
    );
  }

  _dart_profiler_name_store_free _profiler_name_store_free;

  ffi.Pointer<ffi.Int8> profile_store_name(
    ffi.Pointer<profiler_name_store> store,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _profile_store_name ??=
        _dylib.lookupFunction<_c_profile_store_name, _dart_profile_store_name>(
            'profile_store_name');
    return _profile_store_name(
      store,
      format,
    );
  }

  _dart_profile_store_name _profile_store_name;

  ffi.Pointer<profiler_snapshot> profile_snapshot_create() {
    _profile_snapshot_create ??= _dylib.lookupFunction<
        _c_profile_snapshot_create,
        _dart_profile_snapshot_create>('profile_snapshot_create');
    return _profile_snapshot_create();
  }

  _dart_profile_snapshot_create _profile_snapshot_create;

  void profile_snapshot_free(
    ffi.Pointer<profiler_snapshot> snap,
  ) {
    _profile_snapshot_free ??= _dylib.lookupFunction<_c_profile_snapshot_free,
        _dart_profile_snapshot_free>('profile_snapshot_free');
    return _profile_snapshot_free(
      snap,
    );
  }

  _dart_profile_snapshot_free _profile_snapshot_free;

  int profiler_snapshot_dump_csv(
    ffi.Pointer<profiler_snapshot> snap,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _profiler_snapshot_dump_csv ??= _dylib.lookupFunction<
        _c_profiler_snapshot_dump_csv,
        _dart_profiler_snapshot_dump_csv>('profiler_snapshot_dump_csv');
    return _profiler_snapshot_dump_csv(
      snap,
      filename,
    );
  }

  _dart_profiler_snapshot_dump_csv _profiler_snapshot_dump_csv;

  int profiler_snapshot_dump_csv_gz(
    ffi.Pointer<profiler_snapshot> snap,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _profiler_snapshot_dump_csv_gz ??= _dylib.lookupFunction<
        _c_profiler_snapshot_dump_csv_gz,
        _dart_profiler_snapshot_dump_csv_gz>('profiler_snapshot_dump_csv_gz');
    return _profiler_snapshot_dump_csv_gz(
      snap,
      filename,
    );
  }

  _dart_profiler_snapshot_dump_csv_gz _profiler_snapshot_dump_csv_gz;

  int profiler_snapshot_num_roots(
    ffi.Pointer<profiler_snapshot> snap,
  ) {
    _profiler_snapshot_num_roots ??= _dylib.lookupFunction<
        _c_profiler_snapshot_num_roots,
        _dart_profiler_snapshot_num_roots>('profiler_snapshot_num_roots');
    return _profiler_snapshot_num_roots(
      snap,
    );
  }

  _dart_profiler_snapshot_num_roots _profiler_snapshot_num_roots;

  void profiler_snapshot_enumerate_roots(
    ffi.Pointer<profiler_snapshot> snap,
    ffi.Pointer<ffi.NativeFunction<profiler_entry_enum_func>> func,
    ffi.Pointer<ffi.Void> context,
  ) {
    _profiler_snapshot_enumerate_roots ??= _dylib.lookupFunction<
            _c_profiler_snapshot_enumerate_roots,
            _dart_profiler_snapshot_enumerate_roots>(
        'profiler_snapshot_enumerate_roots');
    return _profiler_snapshot_enumerate_roots(
      snap,
      func,
      context,
    );
  }

  _dart_profiler_snapshot_enumerate_roots _profiler_snapshot_enumerate_roots;

  void profiler_snapshot_filter_roots(
    ffi.Pointer<profiler_snapshot> snap,
    ffi.Pointer<ffi.NativeFunction<profiler_name_filter_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _profiler_snapshot_filter_roots ??= _dylib.lookupFunction<
        _c_profiler_snapshot_filter_roots,
        _dart_profiler_snapshot_filter_roots>('profiler_snapshot_filter_roots');
    return _profiler_snapshot_filter_roots(
      snap,
      func,
      data,
    );
  }

  _dart_profiler_snapshot_filter_roots _profiler_snapshot_filter_roots;

  int profiler_snapshot_num_children(
    ffi.Pointer<profiler_snapshot_entry> entry,
  ) {
    _profiler_snapshot_num_children ??= _dylib.lookupFunction<
        _c_profiler_snapshot_num_children,
        _dart_profiler_snapshot_num_children>('profiler_snapshot_num_children');
    return _profiler_snapshot_num_children(
      entry,
    );
  }

  _dart_profiler_snapshot_num_children _profiler_snapshot_num_children;

  void profiler_snapshot_enumerate_children(
    ffi.Pointer<profiler_snapshot_entry> entry,
    ffi.Pointer<ffi.NativeFunction<profiler_entry_enum_func>> func,
    ffi.Pointer<ffi.Void> context,
  ) {
    _profiler_snapshot_enumerate_children ??= _dylib.lookupFunction<
            _c_profiler_snapshot_enumerate_children,
            _dart_profiler_snapshot_enumerate_children>(
        'profiler_snapshot_enumerate_children');
    return _profiler_snapshot_enumerate_children(
      entry,
      func,
      context,
    );
  }

  _dart_profiler_snapshot_enumerate_children
      _profiler_snapshot_enumerate_children;

  ffi.Pointer<ffi.Int8> profiler_snapshot_entry_name(
    ffi.Pointer<profiler_snapshot_entry> entry,
  ) {
    _profiler_snapshot_entry_name ??= _dylib.lookupFunction<
        _c_profiler_snapshot_entry_name,
        _dart_profiler_snapshot_entry_name>('profiler_snapshot_entry_name');
    return _profiler_snapshot_entry_name(
      entry,
    );
  }

  _dart_profiler_snapshot_entry_name _profiler_snapshot_entry_name;

  int profiler_snapshot_entry_min_time(
    ffi.Pointer<profiler_snapshot_entry> entry,
  ) {
    _profiler_snapshot_entry_min_time ??= _dylib.lookupFunction<
            _c_profiler_snapshot_entry_min_time,
            _dart_profiler_snapshot_entry_min_time>(
        'profiler_snapshot_entry_min_time');
    return _profiler_snapshot_entry_min_time(
      entry,
    );
  }

  _dart_profiler_snapshot_entry_min_time _profiler_snapshot_entry_min_time;

  int profiler_snapshot_entry_max_time(
    ffi.Pointer<profiler_snapshot_entry> entry,
  ) {
    _profiler_snapshot_entry_max_time ??= _dylib.lookupFunction<
            _c_profiler_snapshot_entry_max_time,
            _dart_profiler_snapshot_entry_max_time>(
        'profiler_snapshot_entry_max_time');
    return _profiler_snapshot_entry_max_time(
      entry,
    );
  }

  _dart_profiler_snapshot_entry_max_time _profiler_snapshot_entry_max_time;

  int profiler_snapshot_entry_overall_count(
    ffi.Pointer<profiler_snapshot_entry> entry,
  ) {
    _profiler_snapshot_entry_overall_count ??= _dylib.lookupFunction<
            _c_profiler_snapshot_entry_overall_count,
            _dart_profiler_snapshot_entry_overall_count>(
        'profiler_snapshot_entry_overall_count');
    return _profiler_snapshot_entry_overall_count(
      entry,
    );
  }

  _dart_profiler_snapshot_entry_overall_count
      _profiler_snapshot_entry_overall_count;

  int profiler_snapshot_entry_expected_time_between_calls(
    ffi.Pointer<profiler_snapshot_entry> entry,
  ) {
    _profiler_snapshot_entry_expected_time_between_calls ??=
        _dylib.lookupFunction<
                _c_profiler_snapshot_entry_expected_time_between_calls,
                _dart_profiler_snapshot_entry_expected_time_between_calls>(
            'profiler_snapshot_entry_expected_time_between_calls');
    return _profiler_snapshot_entry_expected_time_between_calls(
      entry,
    );
  }

  _dart_profiler_snapshot_entry_expected_time_between_calls
      _profiler_snapshot_entry_expected_time_between_calls;

  int profiler_snapshot_entry_min_time_between_calls(
    ffi.Pointer<profiler_snapshot_entry> entry,
  ) {
    _profiler_snapshot_entry_min_time_between_calls ??= _dylib.lookupFunction<
            _c_profiler_snapshot_entry_min_time_between_calls,
            _dart_profiler_snapshot_entry_min_time_between_calls>(
        'profiler_snapshot_entry_min_time_between_calls');
    return _profiler_snapshot_entry_min_time_between_calls(
      entry,
    );
  }

  _dart_profiler_snapshot_entry_min_time_between_calls
      _profiler_snapshot_entry_min_time_between_calls;

  int profiler_snapshot_entry_max_time_between_calls(
    ffi.Pointer<profiler_snapshot_entry> entry,
  ) {
    _profiler_snapshot_entry_max_time_between_calls ??= _dylib.lookupFunction<
            _c_profiler_snapshot_entry_max_time_between_calls,
            _dart_profiler_snapshot_entry_max_time_between_calls>(
        'profiler_snapshot_entry_max_time_between_calls');
    return _profiler_snapshot_entry_max_time_between_calls(
      entry,
    );
  }

  _dart_profiler_snapshot_entry_max_time_between_calls
      _profiler_snapshot_entry_max_time_between_calls;

  int profiler_snapshot_entry_overall_between_calls_count(
    ffi.Pointer<profiler_snapshot_entry> entry,
  ) {
    _profiler_snapshot_entry_overall_between_calls_count ??=
        _dylib.lookupFunction<
                _c_profiler_snapshot_entry_overall_between_calls_count,
                _dart_profiler_snapshot_entry_overall_between_calls_count>(
            'profiler_snapshot_entry_overall_between_calls_count');
    return _profiler_snapshot_entry_overall_between_calls_count(
      entry,
    );
  }

  _dart_profiler_snapshot_entry_overall_between_calls_count
      _profiler_snapshot_entry_overall_between_calls_count;

  ffi.Pointer<text_lookup> text_lookup_create(
    ffi.Pointer<ffi.Int8> path,
  ) {
    _text_lookup_create ??=
        _dylib.lookupFunction<_c_text_lookup_create, _dart_text_lookup_create>(
            'text_lookup_create');
    return _text_lookup_create(
      path,
    );
  }

  _dart_text_lookup_create _text_lookup_create;

  int text_lookup_add(
    ffi.Pointer<text_lookup> lookup,
    ffi.Pointer<ffi.Int8> path,
  ) {
    _text_lookup_add ??=
        _dylib.lookupFunction<_c_text_lookup_add, _dart_text_lookup_add>(
            'text_lookup_add');
    return _text_lookup_add(
      lookup,
      path,
    );
  }

  _dart_text_lookup_add _text_lookup_add;

  void text_lookup_destroy(
    ffi.Pointer<text_lookup> lookup,
  ) {
    _text_lookup_destroy ??= _dylib.lookupFunction<_c_text_lookup_destroy,
        _dart_text_lookup_destroy>('text_lookup_destroy');
    return _text_lookup_destroy(
      lookup,
    );
  }

  _dart_text_lookup_destroy _text_lookup_destroy;

  int text_lookup_getstr(
    ffi.Pointer<text_lookup> lookup,
    ffi.Pointer<ffi.Int8> lookup_val,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> out,
  ) {
    _text_lookup_getstr ??=
        _dylib.lookupFunction<_c_text_lookup_getstr, _dart_text_lookup_getstr>(
            'text_lookup_getstr');
    return _text_lookup_getstr(
      lookup,
      lookup_val,
      out,
    );
  }

  _dart_text_lookup_getstr _text_lookup_getstr;

  ffi.Pointer<gs_vb_data> gs_vbdata_create() {
    _gs_vbdata_create ??=
        _dylib.lookupFunction<_c_gs_vbdata_create, _dart_gs_vbdata_create>(
            'gs_vbdata_create');
    return _gs_vbdata_create();
  }

  _dart_gs_vbdata_create _gs_vbdata_create;

  void gs_vbdata_destroy(
    ffi.Pointer<gs_vb_data> data,
  ) {
    _gs_vbdata_destroy ??=
        _dylib.lookupFunction<_c_gs_vbdata_destroy, _dart_gs_vbdata_destroy>(
            'gs_vbdata_destroy');
    return _gs_vbdata_destroy(
      data,
    );
  }

  _dart_gs_vbdata_destroy _gs_vbdata_destroy;

  void gs_shader_destroy(
    ffi.Pointer<gs_shader> shader,
  ) {
    _gs_shader_destroy ??=
        _dylib.lookupFunction<_c_gs_shader_destroy, _dart_gs_shader_destroy>(
            'gs_shader_destroy');
    return _gs_shader_destroy(
      shader,
    );
  }

  _dart_gs_shader_destroy _gs_shader_destroy;

  int gs_shader_get_num_params(
    ffi.Pointer<gs_shader> shader,
  ) {
    _gs_shader_get_num_params ??= _dylib.lookupFunction<
        _c_gs_shader_get_num_params,
        _dart_gs_shader_get_num_params>('gs_shader_get_num_params');
    return _gs_shader_get_num_params(
      shader,
    );
  }

  _dart_gs_shader_get_num_params _gs_shader_get_num_params;

  ffi.Pointer<gs_shader_param> gs_shader_get_param_by_idx(
    ffi.Pointer<gs_shader> shader,
    int param,
  ) {
    _gs_shader_get_param_by_idx ??= _dylib.lookupFunction<
        _c_gs_shader_get_param_by_idx,
        _dart_gs_shader_get_param_by_idx>('gs_shader_get_param_by_idx');
    return _gs_shader_get_param_by_idx(
      shader,
      param,
    );
  }

  _dart_gs_shader_get_param_by_idx _gs_shader_get_param_by_idx;

  ffi.Pointer<gs_shader_param> gs_shader_get_param_by_name(
    ffi.Pointer<gs_shader> shader,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gs_shader_get_param_by_name ??= _dylib.lookupFunction<
        _c_gs_shader_get_param_by_name,
        _dart_gs_shader_get_param_by_name>('gs_shader_get_param_by_name');
    return _gs_shader_get_param_by_name(
      shader,
      name,
    );
  }

  _dart_gs_shader_get_param_by_name _gs_shader_get_param_by_name;

  ffi.Pointer<gs_shader_param> gs_shader_get_viewproj_matrix(
    ffi.Pointer<gs_shader> shader,
  ) {
    _gs_shader_get_viewproj_matrix ??= _dylib.lookupFunction<
        _c_gs_shader_get_viewproj_matrix,
        _dart_gs_shader_get_viewproj_matrix>('gs_shader_get_viewproj_matrix');
    return _gs_shader_get_viewproj_matrix(
      shader,
    );
  }

  _dart_gs_shader_get_viewproj_matrix _gs_shader_get_viewproj_matrix;

  ffi.Pointer<gs_shader_param> gs_shader_get_world_matrix(
    ffi.Pointer<gs_shader> shader,
  ) {
    _gs_shader_get_world_matrix ??= _dylib.lookupFunction<
        _c_gs_shader_get_world_matrix,
        _dart_gs_shader_get_world_matrix>('gs_shader_get_world_matrix');
    return _gs_shader_get_world_matrix(
      shader,
    );
  }

  _dart_gs_shader_get_world_matrix _gs_shader_get_world_matrix;

  void gs_shader_get_param_info(
    ffi.Pointer<gs_shader_param> param,
    ffi.Pointer<gs_shader_param_info> info,
  ) {
    _gs_shader_get_param_info ??= _dylib.lookupFunction<
        _c_gs_shader_get_param_info,
        _dart_gs_shader_get_param_info>('gs_shader_get_param_info');
    return _gs_shader_get_param_info(
      param,
      info,
    );
  }

  _dart_gs_shader_get_param_info _gs_shader_get_param_info;

  void gs_shader_set_bool(
    ffi.Pointer<gs_shader_param> param,
    int val,
  ) {
    _gs_shader_set_bool ??=
        _dylib.lookupFunction<_c_gs_shader_set_bool, _dart_gs_shader_set_bool>(
            'gs_shader_set_bool');
    return _gs_shader_set_bool(
      param,
      val,
    );
  }

  _dart_gs_shader_set_bool _gs_shader_set_bool;

  void gs_shader_set_float(
    ffi.Pointer<gs_shader_param> param,
    double val,
  ) {
    _gs_shader_set_float ??= _dylib.lookupFunction<_c_gs_shader_set_float,
        _dart_gs_shader_set_float>('gs_shader_set_float');
    return _gs_shader_set_float(
      param,
      val,
    );
  }

  _dart_gs_shader_set_float _gs_shader_set_float;

  void gs_shader_set_int(
    ffi.Pointer<gs_shader_param> param,
    int val,
  ) {
    _gs_shader_set_int ??=
        _dylib.lookupFunction<_c_gs_shader_set_int, _dart_gs_shader_set_int>(
            'gs_shader_set_int');
    return _gs_shader_set_int(
      param,
      val,
    );
  }

  _dart_gs_shader_set_int _gs_shader_set_int;

  void gs_shader_set_matrix3(
    ffi.Pointer<gs_shader_param> param,
    ffi.Pointer<matrix3> val,
  ) {
    _gs_shader_set_matrix3 ??= _dylib.lookupFunction<_c_gs_shader_set_matrix3,
        _dart_gs_shader_set_matrix3>('gs_shader_set_matrix3');
    return _gs_shader_set_matrix3(
      param,
      val,
    );
  }

  _dart_gs_shader_set_matrix3 _gs_shader_set_matrix3;

  void gs_shader_set_matrix4(
    ffi.Pointer<gs_shader_param> param,
    ffi.Pointer<matrix4> val,
  ) {
    _gs_shader_set_matrix4 ??= _dylib.lookupFunction<_c_gs_shader_set_matrix4,
        _dart_gs_shader_set_matrix4>('gs_shader_set_matrix4');
    return _gs_shader_set_matrix4(
      param,
      val,
    );
  }

  _dart_gs_shader_set_matrix4 _gs_shader_set_matrix4;

  void gs_shader_set_vec2(
    ffi.Pointer<gs_shader_param> param,
    ffi.Pointer<vec2> val,
  ) {
    _gs_shader_set_vec2 ??=
        _dylib.lookupFunction<_c_gs_shader_set_vec2, _dart_gs_shader_set_vec2>(
            'gs_shader_set_vec2');
    return _gs_shader_set_vec2(
      param,
      val,
    );
  }

  _dart_gs_shader_set_vec2 _gs_shader_set_vec2;

  void gs_shader_set_vec3(
    ffi.Pointer<gs_shader_param> param,
    ffi.Pointer<vec3> val,
  ) {
    _gs_shader_set_vec3 ??=
        _dylib.lookupFunction<_c_gs_shader_set_vec3, _dart_gs_shader_set_vec3>(
            'gs_shader_set_vec3');
    return _gs_shader_set_vec3(
      param,
      val,
    );
  }

  _dart_gs_shader_set_vec3 _gs_shader_set_vec3;

  void gs_shader_set_vec4(
    ffi.Pointer<gs_shader_param> param,
    ffi.Pointer<vec4> val,
  ) {
    _gs_shader_set_vec4 ??=
        _dylib.lookupFunction<_c_gs_shader_set_vec4, _dart_gs_shader_set_vec4>(
            'gs_shader_set_vec4');
    return _gs_shader_set_vec4(
      param,
      val,
    );
  }

  _dart_gs_shader_set_vec4 _gs_shader_set_vec4;

  void gs_shader_set_texture(
    ffi.Pointer<gs_shader_param> param,
    ffi.Pointer<gs_texture> val,
  ) {
    _gs_shader_set_texture ??= _dylib.lookupFunction<_c_gs_shader_set_texture,
        _dart_gs_shader_set_texture>('gs_shader_set_texture');
    return _gs_shader_set_texture(
      param,
      val,
    );
  }

  _dart_gs_shader_set_texture _gs_shader_set_texture;

  void gs_shader_set_val(
    ffi.Pointer<gs_shader_param> param,
    ffi.Pointer<ffi.Void> val,
    int size,
  ) {
    _gs_shader_set_val ??=
        _dylib.lookupFunction<_c_gs_shader_set_val, _dart_gs_shader_set_val>(
            'gs_shader_set_val');
    return _gs_shader_set_val(
      param,
      val,
      size,
    );
  }

  _dart_gs_shader_set_val _gs_shader_set_val;

  void gs_shader_set_default(
    ffi.Pointer<gs_shader_param> param,
  ) {
    _gs_shader_set_default ??= _dylib.lookupFunction<_c_gs_shader_set_default,
        _dart_gs_shader_set_default>('gs_shader_set_default');
    return _gs_shader_set_default(
      param,
    );
  }

  _dart_gs_shader_set_default _gs_shader_set_default;

  void gs_shader_set_next_sampler(
    ffi.Pointer<gs_shader_param> param,
    ffi.Pointer<gs_sampler_state> sampler,
  ) {
    _gs_shader_set_next_sampler ??= _dylib.lookupFunction<
        _c_gs_shader_set_next_sampler,
        _dart_gs_shader_set_next_sampler>('gs_shader_set_next_sampler');
    return _gs_shader_set_next_sampler(
      param,
      sampler,
    );
  }

  _dart_gs_shader_set_next_sampler _gs_shader_set_next_sampler;

  void gs_effect_destroy(
    ffi.Pointer<gs_effect> effect,
  ) {
    _gs_effect_destroy ??=
        _dylib.lookupFunction<_c_gs_effect_destroy, _dart_gs_effect_destroy>(
            'gs_effect_destroy');
    return _gs_effect_destroy(
      effect,
    );
  }

  _dart_gs_effect_destroy _gs_effect_destroy;

  ffi.Pointer<gs_effect_technique> gs_effect_get_technique(
    ffi.Pointer<gs_effect> effect,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gs_effect_get_technique ??= _dylib.lookupFunction<
        _c_gs_effect_get_technique,
        _dart_gs_effect_get_technique>('gs_effect_get_technique');
    return _gs_effect_get_technique(
      effect,
      name,
    );
  }

  _dart_gs_effect_get_technique _gs_effect_get_technique;

  ffi.Pointer<gs_effect_technique> gs_effect_get_current_technique(
    ffi.Pointer<gs_effect> effect,
  ) {
    _gs_effect_get_current_technique ??= _dylib.lookupFunction<
            _c_gs_effect_get_current_technique,
            _dart_gs_effect_get_current_technique>(
        'gs_effect_get_current_technique');
    return _gs_effect_get_current_technique(
      effect,
    );
  }

  _dart_gs_effect_get_current_technique _gs_effect_get_current_technique;

  int gs_technique_begin(
    ffi.Pointer<gs_effect_technique> technique,
  ) {
    _gs_technique_begin ??=
        _dylib.lookupFunction<_c_gs_technique_begin, _dart_gs_technique_begin>(
            'gs_technique_begin');
    return _gs_technique_begin(
      technique,
    );
  }

  _dart_gs_technique_begin _gs_technique_begin;

  void gs_technique_end(
    ffi.Pointer<gs_effect_technique> technique,
  ) {
    _gs_technique_end ??=
        _dylib.lookupFunction<_c_gs_technique_end, _dart_gs_technique_end>(
            'gs_technique_end');
    return _gs_technique_end(
      technique,
    );
  }

  _dart_gs_technique_end _gs_technique_end;

  int gs_technique_begin_pass(
    ffi.Pointer<gs_effect_technique> technique,
    int pass,
  ) {
    _gs_technique_begin_pass ??= _dylib.lookupFunction<
        _c_gs_technique_begin_pass,
        _dart_gs_technique_begin_pass>('gs_technique_begin_pass');
    return _gs_technique_begin_pass(
      technique,
      pass,
    );
  }

  _dart_gs_technique_begin_pass _gs_technique_begin_pass;

  int gs_technique_begin_pass_by_name(
    ffi.Pointer<gs_effect_technique> technique,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gs_technique_begin_pass_by_name ??= _dylib.lookupFunction<
            _c_gs_technique_begin_pass_by_name,
            _dart_gs_technique_begin_pass_by_name>(
        'gs_technique_begin_pass_by_name');
    return _gs_technique_begin_pass_by_name(
      technique,
      name,
    );
  }

  _dart_gs_technique_begin_pass_by_name _gs_technique_begin_pass_by_name;

  void gs_technique_end_pass(
    ffi.Pointer<gs_effect_technique> technique,
  ) {
    _gs_technique_end_pass ??= _dylib.lookupFunction<_c_gs_technique_end_pass,
        _dart_gs_technique_end_pass>('gs_technique_end_pass');
    return _gs_technique_end_pass(
      technique,
    );
  }

  _dart_gs_technique_end_pass _gs_technique_end_pass;

  ffi.Pointer<gs_effect_pass> gs_technique_get_pass_by_idx(
    ffi.Pointer<gs_effect_technique> technique,
    int pass,
  ) {
    _gs_technique_get_pass_by_idx ??= _dylib.lookupFunction<
        _c_gs_technique_get_pass_by_idx,
        _dart_gs_technique_get_pass_by_idx>('gs_technique_get_pass_by_idx');
    return _gs_technique_get_pass_by_idx(
      technique,
      pass,
    );
  }

  _dart_gs_technique_get_pass_by_idx _gs_technique_get_pass_by_idx;

  ffi.Pointer<gs_effect_pass> gs_technique_get_pass_by_name(
    ffi.Pointer<gs_effect_technique> technique,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gs_technique_get_pass_by_name ??= _dylib.lookupFunction<
        _c_gs_technique_get_pass_by_name,
        _dart_gs_technique_get_pass_by_name>('gs_technique_get_pass_by_name');
    return _gs_technique_get_pass_by_name(
      technique,
      name,
    );
  }

  _dart_gs_technique_get_pass_by_name _gs_technique_get_pass_by_name;

  int gs_effect_get_num_params(
    ffi.Pointer<gs_effect> effect,
  ) {
    _gs_effect_get_num_params ??= _dylib.lookupFunction<
        _c_gs_effect_get_num_params,
        _dart_gs_effect_get_num_params>('gs_effect_get_num_params');
    return _gs_effect_get_num_params(
      effect,
    );
  }

  _dart_gs_effect_get_num_params _gs_effect_get_num_params;

  ffi.Pointer<gs_effect_param> gs_effect_get_param_by_idx(
    ffi.Pointer<gs_effect> effect,
    int param,
  ) {
    _gs_effect_get_param_by_idx ??= _dylib.lookupFunction<
        _c_gs_effect_get_param_by_idx,
        _dart_gs_effect_get_param_by_idx>('gs_effect_get_param_by_idx');
    return _gs_effect_get_param_by_idx(
      effect,
      param,
    );
  }

  _dart_gs_effect_get_param_by_idx _gs_effect_get_param_by_idx;

  ffi.Pointer<gs_effect_param> gs_effect_get_param_by_name(
    ffi.Pointer<gs_effect> effect,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gs_effect_get_param_by_name ??= _dylib.lookupFunction<
        _c_gs_effect_get_param_by_name,
        _dart_gs_effect_get_param_by_name>('gs_effect_get_param_by_name');
    return _gs_effect_get_param_by_name(
      effect,
      name,
    );
  }

  _dart_gs_effect_get_param_by_name _gs_effect_get_param_by_name;

  int gs_param_get_num_annotations(
    ffi.Pointer<gs_effect_param> param,
  ) {
    _gs_param_get_num_annotations ??= _dylib.lookupFunction<
        _c_gs_param_get_num_annotations,
        _dart_gs_param_get_num_annotations>('gs_param_get_num_annotations');
    return _gs_param_get_num_annotations(
      param,
    );
  }

  _dart_gs_param_get_num_annotations _gs_param_get_num_annotations;

  ffi.Pointer<gs_effect_param> gs_param_get_annotation_by_idx(
    ffi.Pointer<gs_effect_param> param,
    int annotation,
  ) {
    _gs_param_get_annotation_by_idx ??= _dylib.lookupFunction<
        _c_gs_param_get_annotation_by_idx,
        _dart_gs_param_get_annotation_by_idx>('gs_param_get_annotation_by_idx');
    return _gs_param_get_annotation_by_idx(
      param,
      annotation,
    );
  }

  _dart_gs_param_get_annotation_by_idx _gs_param_get_annotation_by_idx;

  ffi.Pointer<gs_effect_param> gs_param_get_annotation_by_name(
    ffi.Pointer<gs_effect_param> param,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gs_param_get_annotation_by_name ??= _dylib.lookupFunction<
            _c_gs_param_get_annotation_by_name,
            _dart_gs_param_get_annotation_by_name>(
        'gs_param_get_annotation_by_name');
    return _gs_param_get_annotation_by_name(
      param,
      name,
    );
  }

  _dart_gs_param_get_annotation_by_name _gs_param_get_annotation_by_name;

  /// Helper function to simplify effect usage.  Use with a while loop that
  /// contains drawing functions.  Automatically handles techniques, passes, and
  /// unloading.
  int gs_effect_loop(
    ffi.Pointer<gs_effect> effect,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _gs_effect_loop ??=
        _dylib.lookupFunction<_c_gs_effect_loop, _dart_gs_effect_loop>(
            'gs_effect_loop');
    return _gs_effect_loop(
      effect,
      name,
    );
  }

  _dart_gs_effect_loop _gs_effect_loop;

  /// used internally
  void gs_effect_update_params(
    ffi.Pointer<gs_effect> effect,
  ) {
    _gs_effect_update_params ??= _dylib.lookupFunction<
        _c_gs_effect_update_params,
        _dart_gs_effect_update_params>('gs_effect_update_params');
    return _gs_effect_update_params(
      effect,
    );
  }

  _dart_gs_effect_update_params _gs_effect_update_params;

  ffi.Pointer<gs_effect_param> gs_effect_get_viewproj_matrix(
    ffi.Pointer<gs_effect> effect,
  ) {
    _gs_effect_get_viewproj_matrix ??= _dylib.lookupFunction<
        _c_gs_effect_get_viewproj_matrix,
        _dart_gs_effect_get_viewproj_matrix>('gs_effect_get_viewproj_matrix');
    return _gs_effect_get_viewproj_matrix(
      effect,
    );
  }

  _dart_gs_effect_get_viewproj_matrix _gs_effect_get_viewproj_matrix;

  ffi.Pointer<gs_effect_param> gs_effect_get_world_matrix(
    ffi.Pointer<gs_effect> effect,
  ) {
    _gs_effect_get_world_matrix ??= _dylib.lookupFunction<
        _c_gs_effect_get_world_matrix,
        _dart_gs_effect_get_world_matrix>('gs_effect_get_world_matrix');
    return _gs_effect_get_world_matrix(
      effect,
    );
  }

  _dart_gs_effect_get_world_matrix _gs_effect_get_world_matrix;

  void gs_effect_get_param_info(
    ffi.Pointer<gs_effect_param> param,
    ffi.Pointer<gs_effect_param_info> info,
  ) {
    _gs_effect_get_param_info ??= _dylib.lookupFunction<
        _c_gs_effect_get_param_info,
        _dart_gs_effect_get_param_info>('gs_effect_get_param_info');
    return _gs_effect_get_param_info(
      param,
      info,
    );
  }

  _dart_gs_effect_get_param_info _gs_effect_get_param_info;

  void gs_effect_set_bool(
    ffi.Pointer<gs_effect_param> param,
    int val,
  ) {
    _gs_effect_set_bool ??=
        _dylib.lookupFunction<_c_gs_effect_set_bool, _dart_gs_effect_set_bool>(
            'gs_effect_set_bool');
    return _gs_effect_set_bool(
      param,
      val,
    );
  }

  _dart_gs_effect_set_bool _gs_effect_set_bool;

  void gs_effect_set_float(
    ffi.Pointer<gs_effect_param> param,
    double val,
  ) {
    _gs_effect_set_float ??= _dylib.lookupFunction<_c_gs_effect_set_float,
        _dart_gs_effect_set_float>('gs_effect_set_float');
    return _gs_effect_set_float(
      param,
      val,
    );
  }

  _dart_gs_effect_set_float _gs_effect_set_float;

  void gs_effect_set_int(
    ffi.Pointer<gs_effect_param> param,
    int val,
  ) {
    _gs_effect_set_int ??=
        _dylib.lookupFunction<_c_gs_effect_set_int, _dart_gs_effect_set_int>(
            'gs_effect_set_int');
    return _gs_effect_set_int(
      param,
      val,
    );
  }

  _dart_gs_effect_set_int _gs_effect_set_int;

  void gs_effect_set_matrix4(
    ffi.Pointer<gs_effect_param> param,
    ffi.Pointer<matrix4> val,
  ) {
    _gs_effect_set_matrix4 ??= _dylib.lookupFunction<_c_gs_effect_set_matrix4,
        _dart_gs_effect_set_matrix4>('gs_effect_set_matrix4');
    return _gs_effect_set_matrix4(
      param,
      val,
    );
  }

  _dart_gs_effect_set_matrix4 _gs_effect_set_matrix4;

  void gs_effect_set_vec2(
    ffi.Pointer<gs_effect_param> param,
    ffi.Pointer<vec2> val,
  ) {
    _gs_effect_set_vec2 ??=
        _dylib.lookupFunction<_c_gs_effect_set_vec2, _dart_gs_effect_set_vec2>(
            'gs_effect_set_vec2');
    return _gs_effect_set_vec2(
      param,
      val,
    );
  }

  _dart_gs_effect_set_vec2 _gs_effect_set_vec2;

  void gs_effect_set_vec3(
    ffi.Pointer<gs_effect_param> param,
    ffi.Pointer<vec3> val,
  ) {
    _gs_effect_set_vec3 ??=
        _dylib.lookupFunction<_c_gs_effect_set_vec3, _dart_gs_effect_set_vec3>(
            'gs_effect_set_vec3');
    return _gs_effect_set_vec3(
      param,
      val,
    );
  }

  _dart_gs_effect_set_vec3 _gs_effect_set_vec3;

  void gs_effect_set_vec4(
    ffi.Pointer<gs_effect_param> param,
    ffi.Pointer<vec4> val,
  ) {
    _gs_effect_set_vec4 ??=
        _dylib.lookupFunction<_c_gs_effect_set_vec4, _dart_gs_effect_set_vec4>(
            'gs_effect_set_vec4');
    return _gs_effect_set_vec4(
      param,
      val,
    );
  }

  _dart_gs_effect_set_vec4 _gs_effect_set_vec4;

  void gs_effect_set_texture(
    ffi.Pointer<gs_effect_param> param,
    ffi.Pointer<gs_texture> val,
  ) {
    _gs_effect_set_texture ??= _dylib.lookupFunction<_c_gs_effect_set_texture,
        _dart_gs_effect_set_texture>('gs_effect_set_texture');
    return _gs_effect_set_texture(
      param,
      val,
    );
  }

  _dart_gs_effect_set_texture _gs_effect_set_texture;

  void gs_effect_set_val(
    ffi.Pointer<gs_effect_param> param,
    ffi.Pointer<ffi.Void> val,
    int size,
  ) {
    _gs_effect_set_val ??=
        _dylib.lookupFunction<_c_gs_effect_set_val, _dart_gs_effect_set_val>(
            'gs_effect_set_val');
    return _gs_effect_set_val(
      param,
      val,
      size,
    );
  }

  _dart_gs_effect_set_val _gs_effect_set_val;

  void gs_effect_set_default(
    ffi.Pointer<gs_effect_param> param,
  ) {
    _gs_effect_set_default ??= _dylib.lookupFunction<_c_gs_effect_set_default,
        _dart_gs_effect_set_default>('gs_effect_set_default');
    return _gs_effect_set_default(
      param,
    );
  }

  _dart_gs_effect_set_default _gs_effect_set_default;

  int gs_effect_get_val_size(
    ffi.Pointer<gs_effect_param> param,
  ) {
    _gs_effect_get_val_size ??= _dylib.lookupFunction<_c_gs_effect_get_val_size,
        _dart_gs_effect_get_val_size>('gs_effect_get_val_size');
    return _gs_effect_get_val_size(
      param,
    );
  }

  _dart_gs_effect_get_val_size _gs_effect_get_val_size;

  ffi.Pointer<ffi.Void> gs_effect_get_val(
    ffi.Pointer<gs_effect_param> param,
  ) {
    _gs_effect_get_val ??=
        _dylib.lookupFunction<_c_gs_effect_get_val, _dart_gs_effect_get_val>(
            'gs_effect_get_val');
    return _gs_effect_get_val(
      param,
    );
  }

  _dart_gs_effect_get_val _gs_effect_get_val;

  int gs_effect_get_default_val_size(
    ffi.Pointer<gs_effect_param> param,
  ) {
    _gs_effect_get_default_val_size ??= _dylib.lookupFunction<
        _c_gs_effect_get_default_val_size,
        _dart_gs_effect_get_default_val_size>('gs_effect_get_default_val_size');
    return _gs_effect_get_default_val_size(
      param,
    );
  }

  _dart_gs_effect_get_default_val_size _gs_effect_get_default_val_size;

  ffi.Pointer<ffi.Void> gs_effect_get_default_val(
    ffi.Pointer<gs_effect_param> param,
  ) {
    _gs_effect_get_default_val ??= _dylib.lookupFunction<
        _c_gs_effect_get_default_val,
        _dart_gs_effect_get_default_val>('gs_effect_get_default_val');
    return _gs_effect_get_default_val(
      param,
    );
  }

  _dart_gs_effect_get_default_val _gs_effect_get_default_val;

  void gs_effect_set_next_sampler(
    ffi.Pointer<gs_effect_param> param,
    ffi.Pointer<gs_sampler_state> sampler,
  ) {
    _gs_effect_set_next_sampler ??= _dylib.lookupFunction<
        _c_gs_effect_set_next_sampler,
        _dart_gs_effect_set_next_sampler>('gs_effect_set_next_sampler');
    return _gs_effect_set_next_sampler(
      param,
      sampler,
    );
  }

  _dart_gs_effect_set_next_sampler _gs_effect_set_next_sampler;

  void gs_effect_set_color(
    ffi.Pointer<gs_effect_param> param,
    int argb,
  ) {
    _gs_effect_set_color ??= _dylib.lookupFunction<_c_gs_effect_set_color,
        _dart_gs_effect_set_color>('gs_effect_set_color');
    return _gs_effect_set_color(
      param,
      argb,
    );
  }

  _dart_gs_effect_set_color _gs_effect_set_color;

  ffi.Pointer<gs_texture_render> gs_texrender_create(
    int format,
    int zsformat,
  ) {
    _gs_texrender_create ??= _dylib.lookupFunction<_c_gs_texrender_create,
        _dart_gs_texrender_create>('gs_texrender_create');
    return _gs_texrender_create(
      format,
      zsformat,
    );
  }

  _dart_gs_texrender_create _gs_texrender_create;

  void gs_texrender_destroy(
    ffi.Pointer<gs_texture_render> texrender,
  ) {
    _gs_texrender_destroy ??= _dylib.lookupFunction<_c_gs_texrender_destroy,
        _dart_gs_texrender_destroy>('gs_texrender_destroy');
    return _gs_texrender_destroy(
      texrender,
    );
  }

  _dart_gs_texrender_destroy _gs_texrender_destroy;

  int gs_texrender_begin(
    ffi.Pointer<gs_texture_render> texrender,
    int cx,
    int cy,
  ) {
    _gs_texrender_begin ??=
        _dylib.lookupFunction<_c_gs_texrender_begin, _dart_gs_texrender_begin>(
            'gs_texrender_begin');
    return _gs_texrender_begin(
      texrender,
      cx,
      cy,
    );
  }

  _dart_gs_texrender_begin _gs_texrender_begin;

  void gs_texrender_end(
    ffi.Pointer<gs_texture_render> texrender,
  ) {
    _gs_texrender_end ??=
        _dylib.lookupFunction<_c_gs_texrender_end, _dart_gs_texrender_end>(
            'gs_texrender_end');
    return _gs_texrender_end(
      texrender,
    );
  }

  _dart_gs_texrender_end _gs_texrender_end;

  void gs_texrender_reset(
    ffi.Pointer<gs_texture_render> texrender,
  ) {
    _gs_texrender_reset ??=
        _dylib.lookupFunction<_c_gs_texrender_reset, _dart_gs_texrender_reset>(
            'gs_texrender_reset');
    return _gs_texrender_reset(
      texrender,
    );
  }

  _dart_gs_texrender_reset _gs_texrender_reset;

  ffi.Pointer<gs_texture> gs_texrender_get_texture(
    ffi.Pointer<gs_texture_render> texrender,
  ) {
    _gs_texrender_get_texture ??= _dylib.lookupFunction<
        _c_gs_texrender_get_texture,
        _dart_gs_texrender_get_texture>('gs_texrender_get_texture');
    return _gs_texrender_get_texture(
      texrender,
    );
  }

  _dart_gs_texrender_get_texture _gs_texrender_get_texture;

  ffi.Pointer<ffi.Int8> gs_get_device_name() {
    _gs_get_device_name ??=
        _dylib.lookupFunction<_c_gs_get_device_name, _dart_gs_get_device_name>(
            'gs_get_device_name');
    return _gs_get_device_name();
  }

  _dart_gs_get_device_name _gs_get_device_name;

  int gs_get_device_type() {
    _gs_get_device_type ??=
        _dylib.lookupFunction<_c_gs_get_device_type, _dart_gs_get_device_type>(
            'gs_get_device_type');
    return _gs_get_device_type();
  }

  _dart_gs_get_device_type _gs_get_device_type;

  void gs_enum_adapters(
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _gs_enum_adapters ??=
        _dylib.lookupFunction<_c_gs_enum_adapters, _dart_gs_enum_adapters>(
            'gs_enum_adapters');
    return _gs_enum_adapters(
      callback,
      param,
    );
  }

  _dart_gs_enum_adapters _gs_enum_adapters;

  int gs_create(
    ffi.Pointer<ffi.Pointer<graphics_subsystem>> graphics,
    ffi.Pointer<ffi.Int8> module,
    int adapter,
  ) {
    _gs_create ??=
        _dylib.lookupFunction<_c_gs_create, _dart_gs_create>('gs_create');
    return _gs_create(
      graphics,
      module,
      adapter,
    );
  }

  _dart_gs_create _gs_create;

  void gs_destroy(
    ffi.Pointer<graphics_subsystem> graphics,
  ) {
    _gs_destroy ??=
        _dylib.lookupFunction<_c_gs_destroy, _dart_gs_destroy>('gs_destroy');
    return _gs_destroy(
      graphics,
    );
  }

  _dart_gs_destroy _gs_destroy;

  void gs_enter_context(
    ffi.Pointer<graphics_subsystem> graphics,
  ) {
    _gs_enter_context ??=
        _dylib.lookupFunction<_c_gs_enter_context, _dart_gs_enter_context>(
            'gs_enter_context');
    return _gs_enter_context(
      graphics,
    );
  }

  _dart_gs_enter_context _gs_enter_context;

  void gs_leave_context() {
    _gs_leave_context ??=
        _dylib.lookupFunction<_c_gs_leave_context, _dart_gs_leave_context>(
            'gs_leave_context');
    return _gs_leave_context();
  }

  _dart_gs_leave_context _gs_leave_context;

  ffi.Pointer<graphics_subsystem> gs_get_context() {
    _gs_get_context ??=
        _dylib.lookupFunction<_c_gs_get_context, _dart_gs_get_context>(
            'gs_get_context');
    return _gs_get_context();
  }

  _dart_gs_get_context _gs_get_context;

  ffi.Pointer<ffi.Void> gs_get_device_obj() {
    _gs_get_device_obj ??=
        _dylib.lookupFunction<_c_gs_get_device_obj, _dart_gs_get_device_obj>(
            'gs_get_device_obj');
    return _gs_get_device_obj();
  }

  _dart_gs_get_device_obj _gs_get_device_obj;

  void gs_matrix_push() {
    _gs_matrix_push ??=
        _dylib.lookupFunction<_c_gs_matrix_push, _dart_gs_matrix_push>(
            'gs_matrix_push');
    return _gs_matrix_push();
  }

  _dart_gs_matrix_push _gs_matrix_push;

  void gs_matrix_pop() {
    _gs_matrix_pop ??= _dylib
        .lookupFunction<_c_gs_matrix_pop, _dart_gs_matrix_pop>('gs_matrix_pop');
    return _gs_matrix_pop();
  }

  _dart_gs_matrix_pop _gs_matrix_pop;

  void gs_matrix_identity() {
    _gs_matrix_identity ??=
        _dylib.lookupFunction<_c_gs_matrix_identity, _dart_gs_matrix_identity>(
            'gs_matrix_identity');
    return _gs_matrix_identity();
  }

  _dart_gs_matrix_identity _gs_matrix_identity;

  void gs_matrix_transpose() {
    _gs_matrix_transpose ??= _dylib.lookupFunction<_c_gs_matrix_transpose,
        _dart_gs_matrix_transpose>('gs_matrix_transpose');
    return _gs_matrix_transpose();
  }

  _dart_gs_matrix_transpose _gs_matrix_transpose;

  void gs_matrix_set(
    ffi.Pointer<matrix4> matrix,
  ) {
    _gs_matrix_set ??= _dylib
        .lookupFunction<_c_gs_matrix_set, _dart_gs_matrix_set>('gs_matrix_set');
    return _gs_matrix_set(
      matrix,
    );
  }

  _dart_gs_matrix_set _gs_matrix_set;

  void gs_matrix_get(
    ffi.Pointer<matrix4> dst,
  ) {
    _gs_matrix_get ??= _dylib
        .lookupFunction<_c_gs_matrix_get, _dart_gs_matrix_get>('gs_matrix_get');
    return _gs_matrix_get(
      dst,
    );
  }

  _dart_gs_matrix_get _gs_matrix_get;

  void gs_matrix_mul(
    ffi.Pointer<matrix4> matrix,
  ) {
    _gs_matrix_mul ??= _dylib
        .lookupFunction<_c_gs_matrix_mul, _dart_gs_matrix_mul>('gs_matrix_mul');
    return _gs_matrix_mul(
      matrix,
    );
  }

  _dart_gs_matrix_mul _gs_matrix_mul;

  void gs_matrix_rotquat(
    ffi.Pointer<quat> rot,
  ) {
    _gs_matrix_rotquat ??=
        _dylib.lookupFunction<_c_gs_matrix_rotquat, _dart_gs_matrix_rotquat>(
            'gs_matrix_rotquat');
    return _gs_matrix_rotquat(
      rot,
    );
  }

  _dart_gs_matrix_rotquat _gs_matrix_rotquat;

  void gs_matrix_rotaa(
    ffi.Pointer<axisang> rot,
  ) {
    _gs_matrix_rotaa ??=
        _dylib.lookupFunction<_c_gs_matrix_rotaa, _dart_gs_matrix_rotaa>(
            'gs_matrix_rotaa');
    return _gs_matrix_rotaa(
      rot,
    );
  }

  _dart_gs_matrix_rotaa _gs_matrix_rotaa;

  void gs_matrix_translate(
    ffi.Pointer<vec3> pos,
  ) {
    _gs_matrix_translate ??= _dylib.lookupFunction<_c_gs_matrix_translate,
        _dart_gs_matrix_translate>('gs_matrix_translate');
    return _gs_matrix_translate(
      pos,
    );
  }

  _dart_gs_matrix_translate _gs_matrix_translate;

  void gs_matrix_scale(
    ffi.Pointer<vec3> scale,
  ) {
    _gs_matrix_scale ??=
        _dylib.lookupFunction<_c_gs_matrix_scale, _dart_gs_matrix_scale>(
            'gs_matrix_scale');
    return _gs_matrix_scale(
      scale,
    );
  }

  _dart_gs_matrix_scale _gs_matrix_scale;

  void gs_matrix_rotaa4f(
    double x,
    double y,
    double z,
    double angle,
  ) {
    _gs_matrix_rotaa4f ??=
        _dylib.lookupFunction<_c_gs_matrix_rotaa4f, _dart_gs_matrix_rotaa4f>(
            'gs_matrix_rotaa4f');
    return _gs_matrix_rotaa4f(
      x,
      y,
      z,
      angle,
    );
  }

  _dart_gs_matrix_rotaa4f _gs_matrix_rotaa4f;

  void gs_matrix_translate3f(
    double x,
    double y,
    double z,
  ) {
    _gs_matrix_translate3f ??= _dylib.lookupFunction<_c_gs_matrix_translate3f,
        _dart_gs_matrix_translate3f>('gs_matrix_translate3f');
    return _gs_matrix_translate3f(
      x,
      y,
      z,
    );
  }

  _dart_gs_matrix_translate3f _gs_matrix_translate3f;

  void gs_matrix_scale3f(
    double x,
    double y,
    double z,
  ) {
    _gs_matrix_scale3f ??=
        _dylib.lookupFunction<_c_gs_matrix_scale3f, _dart_gs_matrix_scale3f>(
            'gs_matrix_scale3f');
    return _gs_matrix_scale3f(
      x,
      y,
      z,
    );
  }

  _dart_gs_matrix_scale3f _gs_matrix_scale3f;

  void gs_render_start(
    int b_new,
  ) {
    _gs_render_start ??=
        _dylib.lookupFunction<_c_gs_render_start, _dart_gs_render_start>(
            'gs_render_start');
    return _gs_render_start(
      b_new,
    );
  }

  _dart_gs_render_start _gs_render_start;

  void gs_render_stop(
    int mode,
  ) {
    _gs_render_stop ??=
        _dylib.lookupFunction<_c_gs_render_stop, _dart_gs_render_stop>(
            'gs_render_stop');
    return _gs_render_stop(
      mode,
    );
  }

  _dart_gs_render_stop _gs_render_stop;

  ffi.Pointer<gs_vertex_buffer> gs_render_save() {
    _gs_render_save ??=
        _dylib.lookupFunction<_c_gs_render_save, _dart_gs_render_save>(
            'gs_render_save');
    return _gs_render_save();
  }

  _dart_gs_render_save _gs_render_save;

  void gs_vertex2f(
    double x,
    double y,
  ) {
    _gs_vertex2f ??=
        _dylib.lookupFunction<_c_gs_vertex2f, _dart_gs_vertex2f>('gs_vertex2f');
    return _gs_vertex2f(
      x,
      y,
    );
  }

  _dart_gs_vertex2f _gs_vertex2f;

  void gs_vertex3f(
    double x,
    double y,
    double z,
  ) {
    _gs_vertex3f ??=
        _dylib.lookupFunction<_c_gs_vertex3f, _dart_gs_vertex3f>('gs_vertex3f');
    return _gs_vertex3f(
      x,
      y,
      z,
    );
  }

  _dart_gs_vertex3f _gs_vertex3f;

  void gs_normal3f(
    double x,
    double y,
    double z,
  ) {
    _gs_normal3f ??=
        _dylib.lookupFunction<_c_gs_normal3f, _dart_gs_normal3f>('gs_normal3f');
    return _gs_normal3f(
      x,
      y,
      z,
    );
  }

  _dart_gs_normal3f _gs_normal3f;

  void gs_color(
    int color,
  ) {
    _gs_color ??=
        _dylib.lookupFunction<_c_gs_color, _dart_gs_color>('gs_color');
    return _gs_color(
      color,
    );
  }

  _dart_gs_color _gs_color;

  void gs_texcoord(
    double x,
    double y,
    int unit,
  ) {
    _gs_texcoord ??=
        _dylib.lookupFunction<_c_gs_texcoord, _dart_gs_texcoord>('gs_texcoord');
    return _gs_texcoord(
      x,
      y,
      unit,
    );
  }

  _dart_gs_texcoord _gs_texcoord;

  void gs_vertex2v(
    ffi.Pointer<vec2> v,
  ) {
    _gs_vertex2v ??=
        _dylib.lookupFunction<_c_gs_vertex2v, _dart_gs_vertex2v>('gs_vertex2v');
    return _gs_vertex2v(
      v,
    );
  }

  _dart_gs_vertex2v _gs_vertex2v;

  void gs_vertex3v(
    ffi.Pointer<vec3> v,
  ) {
    _gs_vertex3v ??=
        _dylib.lookupFunction<_c_gs_vertex3v, _dart_gs_vertex3v>('gs_vertex3v');
    return _gs_vertex3v(
      v,
    );
  }

  _dart_gs_vertex3v _gs_vertex3v;

  void gs_normal3v(
    ffi.Pointer<vec3> v,
  ) {
    _gs_normal3v ??=
        _dylib.lookupFunction<_c_gs_normal3v, _dart_gs_normal3v>('gs_normal3v');
    return _gs_normal3v(
      v,
    );
  }

  _dart_gs_normal3v _gs_normal3v;

  void gs_color4v(
    ffi.Pointer<vec4> v,
  ) {
    _gs_color4v ??=
        _dylib.lookupFunction<_c_gs_color4v, _dart_gs_color4v>('gs_color4v');
    return _gs_color4v(
      v,
    );
  }

  _dart_gs_color4v _gs_color4v;

  void gs_texcoord2v(
    ffi.Pointer<vec2> v,
    int unit,
  ) {
    _gs_texcoord2v ??= _dylib
        .lookupFunction<_c_gs_texcoord2v, _dart_gs_texcoord2v>('gs_texcoord2v');
    return _gs_texcoord2v(
      v,
      unit,
    );
  }

  _dart_gs_texcoord2v _gs_texcoord2v;

  ffi.Pointer<input_t> gs_get_input() {
    _gs_get_input ??= _dylib
        .lookupFunction<_c_gs_get_input, _dart_gs_get_input>('gs_get_input');
    return _gs_get_input();
  }

  _dart_gs_get_input _gs_get_input;

  ffi.Pointer<gs_effect> gs_get_effect() {
    _gs_get_effect ??= _dylib
        .lookupFunction<_c_gs_get_effect, _dart_gs_get_effect>('gs_get_effect');
    return _gs_get_effect();
  }

  _dart_gs_get_effect _gs_get_effect;

  ffi.Pointer<gs_effect> gs_effect_create_from_file(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    _gs_effect_create_from_file ??= _dylib.lookupFunction<
        _c_gs_effect_create_from_file,
        _dart_gs_effect_create_from_file>('gs_effect_create_from_file');
    return _gs_effect_create_from_file(
      file,
      error_string,
    );
  }

  _dart_gs_effect_create_from_file _gs_effect_create_from_file;

  ffi.Pointer<gs_effect> gs_effect_create(
    ffi.Pointer<ffi.Int8> effect_string,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    _gs_effect_create ??=
        _dylib.lookupFunction<_c_gs_effect_create, _dart_gs_effect_create>(
            'gs_effect_create');
    return _gs_effect_create(
      effect_string,
      filename,
      error_string,
    );
  }

  _dart_gs_effect_create _gs_effect_create;

  ffi.Pointer<gs_shader> gs_vertexshader_create_from_file(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    _gs_vertexshader_create_from_file ??= _dylib.lookupFunction<
            _c_gs_vertexshader_create_from_file,
            _dart_gs_vertexshader_create_from_file>(
        'gs_vertexshader_create_from_file');
    return _gs_vertexshader_create_from_file(
      file,
      error_string,
    );
  }

  _dart_gs_vertexshader_create_from_file _gs_vertexshader_create_from_file;

  ffi.Pointer<gs_shader> gs_pixelshader_create_from_file(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    _gs_pixelshader_create_from_file ??= _dylib.lookupFunction<
            _c_gs_pixelshader_create_from_file,
            _dart_gs_pixelshader_create_from_file>(
        'gs_pixelshader_create_from_file');
    return _gs_pixelshader_create_from_file(
      file,
      error_string,
    );
  }

  _dart_gs_pixelshader_create_from_file _gs_pixelshader_create_from_file;

  ffi.Pointer<gs_texture> gs_texture_create_from_file(
    ffi.Pointer<ffi.Int8> file,
  ) {
    _gs_texture_create_from_file ??= _dylib.lookupFunction<
        _c_gs_texture_create_from_file,
        _dart_gs_texture_create_from_file>('gs_texture_create_from_file');
    return _gs_texture_create_from_file(
      file,
    );
  }

  _dart_gs_texture_create_from_file _gs_texture_create_from_file;

  ffi.Pointer<ffi.Uint8> gs_create_texture_file_data(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<ffi.Uint32> cx,
    ffi.Pointer<ffi.Uint32> cy,
  ) {
    _gs_create_texture_file_data ??= _dylib.lookupFunction<
        _c_gs_create_texture_file_data,
        _dart_gs_create_texture_file_data>('gs_create_texture_file_data');
    return _gs_create_texture_file_data(
      file,
      format,
      cx,
      cy,
    );
  }

  _dart_gs_create_texture_file_data _gs_create_texture_file_data;

  /// Draws a 2D sprite
  ///
  /// If width or height is 0, the width or height of the texture will be used.
  /// The flip value specifies whether the texture should be flipped on the U or V
  /// axis with GS_FLIP_U and GS_FLIP_V.
  void gs_draw_sprite(
    ffi.Pointer<gs_texture> tex,
    int flip,
    int width,
    int height,
  ) {
    _gs_draw_sprite ??=
        _dylib.lookupFunction<_c_gs_draw_sprite, _dart_gs_draw_sprite>(
            'gs_draw_sprite');
    return _gs_draw_sprite(
      tex,
      flip,
      width,
      height,
    );
  }

  _dart_gs_draw_sprite _gs_draw_sprite;

  void gs_draw_sprite_subregion(
    ffi.Pointer<gs_texture> tex,
    int flip,
    int x,
    int y,
    int cx,
    int cy,
  ) {
    _gs_draw_sprite_subregion ??= _dylib.lookupFunction<
        _c_gs_draw_sprite_subregion,
        _dart_gs_draw_sprite_subregion>('gs_draw_sprite_subregion');
    return _gs_draw_sprite_subregion(
      tex,
      flip,
      x,
      y,
      cx,
      cy,
    );
  }

  _dart_gs_draw_sprite_subregion _gs_draw_sprite_subregion;

  void gs_draw_cube_backdrop(
    ffi.Pointer<gs_texture> cubetex,
    ffi.Pointer<quat> rot,
    double left,
    double right,
    double top,
    double bottom,
    double znear,
  ) {
    _gs_draw_cube_backdrop ??= _dylib.lookupFunction<_c_gs_draw_cube_backdrop,
        _dart_gs_draw_cube_backdrop>('gs_draw_cube_backdrop');
    return _gs_draw_cube_backdrop(
      cubetex,
      rot,
      left,
      right,
      top,
      bottom,
      znear,
    );
  }

  _dart_gs_draw_cube_backdrop _gs_draw_cube_backdrop;

  /// sets the viewport to current swap chain size
  void gs_reset_viewport() {
    _gs_reset_viewport ??=
        _dylib.lookupFunction<_c_gs_reset_viewport, _dart_gs_reset_viewport>(
            'gs_reset_viewport');
    return _gs_reset_viewport();
  }

  _dart_gs_reset_viewport _gs_reset_viewport;

  /// sets default screen-sized orthographic mode
  void gs_set_2d_mode() {
    _gs_set_2d_mode ??=
        _dylib.lookupFunction<_c_gs_set_2d_mode, _dart_gs_set_2d_mode>(
            'gs_set_2d_mode');
    return _gs_set_2d_mode();
  }

  _dart_gs_set_2d_mode _gs_set_2d_mode;

  /// sets default screen-sized perspective mode
  void gs_set_3d_mode(
    double fovy,
    double znear,
    double zvar,
  ) {
    _gs_set_3d_mode ??=
        _dylib.lookupFunction<_c_gs_set_3d_mode, _dart_gs_set_3d_mode>(
            'gs_set_3d_mode');
    return _gs_set_3d_mode(
      fovy,
      znear,
      zvar,
    );
  }

  _dart_gs_set_3d_mode _gs_set_3d_mode;

  void gs_viewport_push() {
    _gs_viewport_push ??=
        _dylib.lookupFunction<_c_gs_viewport_push, _dart_gs_viewport_push>(
            'gs_viewport_push');
    return _gs_viewport_push();
  }

  _dart_gs_viewport_push _gs_viewport_push;

  void gs_viewport_pop() {
    _gs_viewport_pop ??=
        _dylib.lookupFunction<_c_gs_viewport_pop, _dart_gs_viewport_pop>(
            'gs_viewport_pop');
    return _gs_viewport_pop();
  }

  _dart_gs_viewport_pop _gs_viewport_pop;

  void gs_texture_set_image(
    ffi.Pointer<gs_texture> tex,
    ffi.Pointer<ffi.Uint8> data,
    int linesize,
    int invert,
  ) {
    _gs_texture_set_image ??= _dylib.lookupFunction<_c_gs_texture_set_image,
        _dart_gs_texture_set_image>('gs_texture_set_image');
    return _gs_texture_set_image(
      tex,
      data,
      linesize,
      invert,
    );
  }

  _dart_gs_texture_set_image _gs_texture_set_image;

  void gs_cubetexture_set_image(
    ffi.Pointer<gs_texture> cubetex,
    int side,
    ffi.Pointer<ffi.Void> data,
    int linesize,
    int invert,
  ) {
    _gs_cubetexture_set_image ??= _dylib.lookupFunction<
        _c_gs_cubetexture_set_image,
        _dart_gs_cubetexture_set_image>('gs_cubetexture_set_image');
    return _gs_cubetexture_set_image(
      cubetex,
      side,
      data,
      linesize,
      invert,
    );
  }

  _dart_gs_cubetexture_set_image _gs_cubetexture_set_image;

  void gs_perspective(
    double fovy,
    double aspect,
    double znear,
    double zfar,
  ) {
    _gs_perspective ??=
        _dylib.lookupFunction<_c_gs_perspective, _dart_gs_perspective>(
            'gs_perspective');
    return _gs_perspective(
      fovy,
      aspect,
      znear,
      zfar,
    );
  }

  _dart_gs_perspective _gs_perspective;

  void gs_blend_state_push() {
    _gs_blend_state_push ??= _dylib.lookupFunction<_c_gs_blend_state_push,
        _dart_gs_blend_state_push>('gs_blend_state_push');
    return _gs_blend_state_push();
  }

  _dart_gs_blend_state_push _gs_blend_state_push;

  void gs_blend_state_pop() {
    _gs_blend_state_pop ??=
        _dylib.lookupFunction<_c_gs_blend_state_pop, _dart_gs_blend_state_pop>(
            'gs_blend_state_pop');
    return _gs_blend_state_pop();
  }

  _dart_gs_blend_state_pop _gs_blend_state_pop;

  void gs_reset_blend_state() {
    _gs_reset_blend_state ??= _dylib.lookupFunction<_c_gs_reset_blend_state,
        _dart_gs_reset_blend_state>('gs_reset_blend_state');
    return _gs_reset_blend_state();
  }

  _dart_gs_reset_blend_state _gs_reset_blend_state;

  ffi.Pointer<gs_swap_chain> gs_swapchain_create(
    ffi.Pointer<gs_init_data> data,
  ) {
    _gs_swapchain_create ??= _dylib.lookupFunction<_c_gs_swapchain_create,
        _dart_gs_swapchain_create>('gs_swapchain_create');
    return _gs_swapchain_create(
      data,
    );
  }

  _dart_gs_swapchain_create _gs_swapchain_create;

  void gs_resize(
    int x,
    int y,
  ) {
    _gs_resize ??=
        _dylib.lookupFunction<_c_gs_resize, _dart_gs_resize>('gs_resize');
    return _gs_resize(
      x,
      y,
    );
  }

  _dart_gs_resize _gs_resize;

  void gs_get_size(
    ffi.Pointer<ffi.Uint32> x,
    ffi.Pointer<ffi.Uint32> y,
  ) {
    _gs_get_size ??=
        _dylib.lookupFunction<_c_gs_get_size, _dart_gs_get_size>('gs_get_size');
    return _gs_get_size(
      x,
      y,
    );
  }

  _dart_gs_get_size _gs_get_size;

  int gs_get_width() {
    _gs_get_width ??= _dylib
        .lookupFunction<_c_gs_get_width, _dart_gs_get_width>('gs_get_width');
    return _gs_get_width();
  }

  _dart_gs_get_width _gs_get_width;

  int gs_get_height() {
    _gs_get_height ??= _dylib
        .lookupFunction<_c_gs_get_height, _dart_gs_get_height>('gs_get_height');
    return _gs_get_height();
  }

  _dart_gs_get_height _gs_get_height;

  ffi.Pointer<gs_texture> gs_texture_create(
    int width,
    int height,
    int color_format,
    int levels,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    int flags,
  ) {
    _gs_texture_create ??=
        _dylib.lookupFunction<_c_gs_texture_create, _dart_gs_texture_create>(
            'gs_texture_create');
    return _gs_texture_create(
      width,
      height,
      color_format,
      levels,
      data,
      flags,
    );
  }

  _dart_gs_texture_create _gs_texture_create;

  ffi.Pointer<gs_texture> gs_cubetexture_create(
    int size,
    int color_format,
    int levels,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    int flags,
  ) {
    _gs_cubetexture_create ??= _dylib.lookupFunction<_c_gs_cubetexture_create,
        _dart_gs_cubetexture_create>('gs_cubetexture_create');
    return _gs_cubetexture_create(
      size,
      color_format,
      levels,
      data,
      flags,
    );
  }

  _dart_gs_cubetexture_create _gs_cubetexture_create;

  ffi.Pointer<gs_texture> gs_voltexture_create(
    int width,
    int height,
    int depth,
    int color_format,
    int levels,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    int flags,
  ) {
    _gs_voltexture_create ??= _dylib.lookupFunction<_c_gs_voltexture_create,
        _dart_gs_voltexture_create>('gs_voltexture_create');
    return _gs_voltexture_create(
      width,
      height,
      depth,
      color_format,
      levels,
      data,
      flags,
    );
  }

  _dart_gs_voltexture_create _gs_voltexture_create;

  ffi.Pointer<gs_zstencil_buffer> gs_zstencil_create(
    int width,
    int height,
    int format,
  ) {
    _gs_zstencil_create ??=
        _dylib.lookupFunction<_c_gs_zstencil_create, _dart_gs_zstencil_create>(
            'gs_zstencil_create');
    return _gs_zstencil_create(
      width,
      height,
      format,
    );
  }

  _dart_gs_zstencil_create _gs_zstencil_create;

  ffi.Pointer<gs_stage_surface> gs_stagesurface_create(
    int width,
    int height,
    int color_format,
  ) {
    _gs_stagesurface_create ??= _dylib.lookupFunction<_c_gs_stagesurface_create,
        _dart_gs_stagesurface_create>('gs_stagesurface_create');
    return _gs_stagesurface_create(
      width,
      height,
      color_format,
    );
  }

  _dart_gs_stagesurface_create _gs_stagesurface_create;

  ffi.Pointer<gs_sampler_state> gs_samplerstate_create(
    ffi.Pointer<gs_sampler_info> info,
  ) {
    _gs_samplerstate_create ??= _dylib.lookupFunction<_c_gs_samplerstate_create,
        _dart_gs_samplerstate_create>('gs_samplerstate_create');
    return _gs_samplerstate_create(
      info,
    );
  }

  _dart_gs_samplerstate_create _gs_samplerstate_create;

  ffi.Pointer<gs_shader> gs_vertexshader_create(
    ffi.Pointer<ffi.Int8> shader,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    _gs_vertexshader_create ??= _dylib.lookupFunction<_c_gs_vertexshader_create,
        _dart_gs_vertexshader_create>('gs_vertexshader_create');
    return _gs_vertexshader_create(
      shader,
      file,
      error_string,
    );
  }

  _dart_gs_vertexshader_create _gs_vertexshader_create;

  ffi.Pointer<gs_shader> gs_pixelshader_create(
    ffi.Pointer<ffi.Int8> shader,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
  ) {
    _gs_pixelshader_create ??= _dylib.lookupFunction<_c_gs_pixelshader_create,
        _dart_gs_pixelshader_create>('gs_pixelshader_create');
    return _gs_pixelshader_create(
      shader,
      file,
      error_string,
    );
  }

  _dart_gs_pixelshader_create _gs_pixelshader_create;

  ffi.Pointer<gs_vertex_buffer> gs_vertexbuffer_create(
    ffi.Pointer<gs_vb_data> data,
    int flags,
  ) {
    _gs_vertexbuffer_create ??= _dylib.lookupFunction<_c_gs_vertexbuffer_create,
        _dart_gs_vertexbuffer_create>('gs_vertexbuffer_create');
    return _gs_vertexbuffer_create(
      data,
      flags,
    );
  }

  _dart_gs_vertexbuffer_create _gs_vertexbuffer_create;

  ffi.Pointer<gs_index_buffer> gs_indexbuffer_create(
    int type,
    ffi.Pointer<ffi.Void> indices,
    int num,
    int flags,
  ) {
    _gs_indexbuffer_create ??= _dylib.lookupFunction<_c_gs_indexbuffer_create,
        _dart_gs_indexbuffer_create>('gs_indexbuffer_create');
    return _gs_indexbuffer_create(
      type,
      indices,
      num,
      flags,
    );
  }

  _dart_gs_indexbuffer_create _gs_indexbuffer_create;

  ffi.Pointer<gs_timer> gs_timer_create() {
    _gs_timer_create ??=
        _dylib.lookupFunction<_c_gs_timer_create, _dart_gs_timer_create>(
            'gs_timer_create');
    return _gs_timer_create();
  }

  _dart_gs_timer_create _gs_timer_create;

  ffi.Pointer<gs_timer_range> gs_timer_range_create() {
    _gs_timer_range_create ??= _dylib.lookupFunction<_c_gs_timer_range_create,
        _dart_gs_timer_range_create>('gs_timer_range_create');
    return _gs_timer_range_create();
  }

  _dart_gs_timer_range_create _gs_timer_range_create;

  int gs_get_texture_type(
    ffi.Pointer<gs_texture> texture,
  ) {
    _gs_get_texture_type ??= _dylib.lookupFunction<_c_gs_get_texture_type,
        _dart_gs_get_texture_type>('gs_get_texture_type');
    return _gs_get_texture_type(
      texture,
    );
  }

  _dart_gs_get_texture_type _gs_get_texture_type;

  void gs_load_vertexbuffer(
    ffi.Pointer<gs_vertex_buffer> vertbuffer,
  ) {
    _gs_load_vertexbuffer ??= _dylib.lookupFunction<_c_gs_load_vertexbuffer,
        _dart_gs_load_vertexbuffer>('gs_load_vertexbuffer');
    return _gs_load_vertexbuffer(
      vertbuffer,
    );
  }

  _dart_gs_load_vertexbuffer _gs_load_vertexbuffer;

  void gs_load_indexbuffer(
    ffi.Pointer<gs_index_buffer> indexbuffer,
  ) {
    _gs_load_indexbuffer ??= _dylib.lookupFunction<_c_gs_load_indexbuffer,
        _dart_gs_load_indexbuffer>('gs_load_indexbuffer');
    return _gs_load_indexbuffer(
      indexbuffer,
    );
  }

  _dart_gs_load_indexbuffer _gs_load_indexbuffer;

  void gs_load_texture(
    ffi.Pointer<gs_texture> tex,
    int unit,
  ) {
    _gs_load_texture ??=
        _dylib.lookupFunction<_c_gs_load_texture, _dart_gs_load_texture>(
            'gs_load_texture');
    return _gs_load_texture(
      tex,
      unit,
    );
  }

  _dart_gs_load_texture _gs_load_texture;

  void gs_load_samplerstate(
    ffi.Pointer<gs_sampler_state> samplerstate,
    int unit,
  ) {
    _gs_load_samplerstate ??= _dylib.lookupFunction<_c_gs_load_samplerstate,
        _dart_gs_load_samplerstate>('gs_load_samplerstate');
    return _gs_load_samplerstate(
      samplerstate,
      unit,
    );
  }

  _dart_gs_load_samplerstate _gs_load_samplerstate;

  void gs_load_vertexshader(
    ffi.Pointer<gs_shader> vertshader,
  ) {
    _gs_load_vertexshader ??= _dylib.lookupFunction<_c_gs_load_vertexshader,
        _dart_gs_load_vertexshader>('gs_load_vertexshader');
    return _gs_load_vertexshader(
      vertshader,
    );
  }

  _dart_gs_load_vertexshader _gs_load_vertexshader;

  void gs_load_pixelshader(
    ffi.Pointer<gs_shader> pixelshader,
  ) {
    _gs_load_pixelshader ??= _dylib.lookupFunction<_c_gs_load_pixelshader,
        _dart_gs_load_pixelshader>('gs_load_pixelshader');
    return _gs_load_pixelshader(
      pixelshader,
    );
  }

  _dart_gs_load_pixelshader _gs_load_pixelshader;

  void gs_load_default_samplerstate(
    int b_3d,
    int unit,
  ) {
    _gs_load_default_samplerstate ??= _dylib.lookupFunction<
        _c_gs_load_default_samplerstate,
        _dart_gs_load_default_samplerstate>('gs_load_default_samplerstate');
    return _gs_load_default_samplerstate(
      b_3d,
      unit,
    );
  }

  _dart_gs_load_default_samplerstate _gs_load_default_samplerstate;

  ffi.Pointer<gs_shader> gs_get_vertex_shader() {
    _gs_get_vertex_shader ??= _dylib.lookupFunction<_c_gs_get_vertex_shader,
        _dart_gs_get_vertex_shader>('gs_get_vertex_shader');
    return _gs_get_vertex_shader();
  }

  _dart_gs_get_vertex_shader _gs_get_vertex_shader;

  ffi.Pointer<gs_shader> gs_get_pixel_shader() {
    _gs_get_pixel_shader ??= _dylib.lookupFunction<_c_gs_get_pixel_shader,
        _dart_gs_get_pixel_shader>('gs_get_pixel_shader');
    return _gs_get_pixel_shader();
  }

  _dart_gs_get_pixel_shader _gs_get_pixel_shader;

  ffi.Pointer<gs_texture> gs_get_render_target() {
    _gs_get_render_target ??= _dylib.lookupFunction<_c_gs_get_render_target,
        _dart_gs_get_render_target>('gs_get_render_target');
    return _gs_get_render_target();
  }

  _dart_gs_get_render_target _gs_get_render_target;

  ffi.Pointer<gs_zstencil_buffer> gs_get_zstencil_target() {
    _gs_get_zstencil_target ??= _dylib.lookupFunction<_c_gs_get_zstencil_target,
        _dart_gs_get_zstencil_target>('gs_get_zstencil_target');
    return _gs_get_zstencil_target();
  }

  _dart_gs_get_zstencil_target _gs_get_zstencil_target;

  void gs_set_render_target(
    ffi.Pointer<gs_texture> tex,
    ffi.Pointer<gs_zstencil_buffer> zstencil,
  ) {
    _gs_set_render_target ??= _dylib.lookupFunction<_c_gs_set_render_target,
        _dart_gs_set_render_target>('gs_set_render_target');
    return _gs_set_render_target(
      tex,
      zstencil,
    );
  }

  _dart_gs_set_render_target _gs_set_render_target;

  void gs_set_cube_render_target(
    ffi.Pointer<gs_texture> cubetex,
    int side,
    ffi.Pointer<gs_zstencil_buffer> zstencil,
  ) {
    _gs_set_cube_render_target ??= _dylib.lookupFunction<
        _c_gs_set_cube_render_target,
        _dart_gs_set_cube_render_target>('gs_set_cube_render_target');
    return _gs_set_cube_render_target(
      cubetex,
      side,
      zstencil,
    );
  }

  _dart_gs_set_cube_render_target _gs_set_cube_render_target;

  void gs_copy_texture(
    ffi.Pointer<gs_texture> dst,
    ffi.Pointer<gs_texture> src,
  ) {
    _gs_copy_texture ??=
        _dylib.lookupFunction<_c_gs_copy_texture, _dart_gs_copy_texture>(
            'gs_copy_texture');
    return _gs_copy_texture(
      dst,
      src,
    );
  }

  _dart_gs_copy_texture _gs_copy_texture;

  void gs_copy_texture_region(
    ffi.Pointer<gs_texture> dst,
    int dst_x,
    int dst_y,
    ffi.Pointer<gs_texture> src,
    int src_x,
    int src_y,
    int src_w,
    int src_h,
  ) {
    _gs_copy_texture_region ??= _dylib.lookupFunction<_c_gs_copy_texture_region,
        _dart_gs_copy_texture_region>('gs_copy_texture_region');
    return _gs_copy_texture_region(
      dst,
      dst_x,
      dst_y,
      src,
      src_x,
      src_y,
      src_w,
      src_h,
    );
  }

  _dart_gs_copy_texture_region _gs_copy_texture_region;

  void gs_stage_texture(
    ffi.Pointer<gs_stage_surface> dst,
    ffi.Pointer<gs_texture> src,
  ) {
    _gs_stage_texture ??=
        _dylib.lookupFunction<_c_gs_stage_texture, _dart_gs_stage_texture>(
            'gs_stage_texture');
    return _gs_stage_texture(
      dst,
      src,
    );
  }

  _dart_gs_stage_texture _gs_stage_texture;

  void gs_begin_frame() {
    _gs_begin_frame ??=
        _dylib.lookupFunction<_c_gs_begin_frame, _dart_gs_begin_frame>(
            'gs_begin_frame');
    return _gs_begin_frame();
  }

  _dart_gs_begin_frame _gs_begin_frame;

  void gs_begin_scene() {
    _gs_begin_scene ??=
        _dylib.lookupFunction<_c_gs_begin_scene, _dart_gs_begin_scene>(
            'gs_begin_scene');
    return _gs_begin_scene();
  }

  _dart_gs_begin_scene _gs_begin_scene;

  void gs_draw(
    int draw_mode,
    int start_vert,
    int num_verts,
  ) {
    _gs_draw ??= _dylib.lookupFunction<_c_gs_draw, _dart_gs_draw>('gs_draw');
    return _gs_draw(
      draw_mode,
      start_vert,
      num_verts,
    );
  }

  _dart_gs_draw _gs_draw;

  void gs_end_scene() {
    _gs_end_scene ??= _dylib
        .lookupFunction<_c_gs_end_scene, _dart_gs_end_scene>('gs_end_scene');
    return _gs_end_scene();
  }

  _dart_gs_end_scene _gs_end_scene;

  void gs_load_swapchain(
    ffi.Pointer<gs_swap_chain> swapchain,
  ) {
    _gs_load_swapchain ??=
        _dylib.lookupFunction<_c_gs_load_swapchain, _dart_gs_load_swapchain>(
            'gs_load_swapchain');
    return _gs_load_swapchain(
      swapchain,
    );
  }

  _dart_gs_load_swapchain _gs_load_swapchain;

  void gs_clear(
    int clear_flags,
    ffi.Pointer<vec4> color,
    double depth,
    int stencil,
  ) {
    _gs_clear ??=
        _dylib.lookupFunction<_c_gs_clear, _dart_gs_clear>('gs_clear');
    return _gs_clear(
      clear_flags,
      color,
      depth,
      stencil,
    );
  }

  _dart_gs_clear _gs_clear;

  void gs_present() {
    _gs_present ??=
        _dylib.lookupFunction<_c_gs_present, _dart_gs_present>('gs_present');
    return _gs_present();
  }

  _dart_gs_present _gs_present;

  void gs_flush() {
    _gs_flush ??=
        _dylib.lookupFunction<_c_gs_flush, _dart_gs_flush>('gs_flush');
    return _gs_flush();
  }

  _dart_gs_flush _gs_flush;

  void gs_set_cull_mode(
    int mode,
  ) {
    _gs_set_cull_mode ??=
        _dylib.lookupFunction<_c_gs_set_cull_mode, _dart_gs_set_cull_mode>(
            'gs_set_cull_mode');
    return _gs_set_cull_mode(
      mode,
    );
  }

  _dart_gs_set_cull_mode _gs_set_cull_mode;

  int gs_get_cull_mode() {
    _gs_get_cull_mode ??=
        _dylib.lookupFunction<_c_gs_get_cull_mode, _dart_gs_get_cull_mode>(
            'gs_get_cull_mode');
    return _gs_get_cull_mode();
  }

  _dart_gs_get_cull_mode _gs_get_cull_mode;

  void gs_enable_blending(
    int enable,
  ) {
    _gs_enable_blending ??=
        _dylib.lookupFunction<_c_gs_enable_blending, _dart_gs_enable_blending>(
            'gs_enable_blending');
    return _gs_enable_blending(
      enable,
    );
  }

  _dart_gs_enable_blending _gs_enable_blending;

  void gs_enable_depth_test(
    int enable,
  ) {
    _gs_enable_depth_test ??= _dylib.lookupFunction<_c_gs_enable_depth_test,
        _dart_gs_enable_depth_test>('gs_enable_depth_test');
    return _gs_enable_depth_test(
      enable,
    );
  }

  _dart_gs_enable_depth_test _gs_enable_depth_test;

  void gs_enable_stencil_test(
    int enable,
  ) {
    _gs_enable_stencil_test ??= _dylib.lookupFunction<_c_gs_enable_stencil_test,
        _dart_gs_enable_stencil_test>('gs_enable_stencil_test');
    return _gs_enable_stencil_test(
      enable,
    );
  }

  _dart_gs_enable_stencil_test _gs_enable_stencil_test;

  void gs_enable_stencil_write(
    int enable,
  ) {
    _gs_enable_stencil_write ??= _dylib.lookupFunction<
        _c_gs_enable_stencil_write,
        _dart_gs_enable_stencil_write>('gs_enable_stencil_write');
    return _gs_enable_stencil_write(
      enable,
    );
  }

  _dart_gs_enable_stencil_write _gs_enable_stencil_write;

  void gs_enable_color(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    _gs_enable_color ??=
        _dylib.lookupFunction<_c_gs_enable_color, _dart_gs_enable_color>(
            'gs_enable_color');
    return _gs_enable_color(
      red,
      green,
      blue,
      alpha,
    );
  }

  _dart_gs_enable_color _gs_enable_color;

  void gs_blend_function(
    int src,
    int dest,
  ) {
    _gs_blend_function ??=
        _dylib.lookupFunction<_c_gs_blend_function, _dart_gs_blend_function>(
            'gs_blend_function');
    return _gs_blend_function(
      src,
      dest,
    );
  }

  _dart_gs_blend_function _gs_blend_function;

  void gs_blend_function_separate(
    int src_c,
    int dest_c,
    int src_a,
    int dest_a,
  ) {
    _gs_blend_function_separate ??= _dylib.lookupFunction<
        _c_gs_blend_function_separate,
        _dart_gs_blend_function_separate>('gs_blend_function_separate');
    return _gs_blend_function_separate(
      src_c,
      dest_c,
      src_a,
      dest_a,
    );
  }

  _dart_gs_blend_function_separate _gs_blend_function_separate;

  void gs_depth_function(
    int test,
  ) {
    _gs_depth_function ??=
        _dylib.lookupFunction<_c_gs_depth_function, _dart_gs_depth_function>(
            'gs_depth_function');
    return _gs_depth_function(
      test,
    );
  }

  _dart_gs_depth_function _gs_depth_function;

  void gs_stencil_function(
    int side,
    int test,
  ) {
    _gs_stencil_function ??= _dylib.lookupFunction<_c_gs_stencil_function,
        _dart_gs_stencil_function>('gs_stencil_function');
    return _gs_stencil_function(
      side,
      test,
    );
  }

  _dart_gs_stencil_function _gs_stencil_function;

  void gs_stencil_op(
    int side,
    int fail,
    int zfail,
    int zpass,
  ) {
    _gs_stencil_op ??= _dylib
        .lookupFunction<_c_gs_stencil_op, _dart_gs_stencil_op>('gs_stencil_op');
    return _gs_stencil_op(
      side,
      fail,
      zfail,
      zpass,
    );
  }

  _dart_gs_stencil_op _gs_stencil_op;

  void gs_set_viewport(
    int x,
    int y,
    int width,
    int height,
  ) {
    _gs_set_viewport ??=
        _dylib.lookupFunction<_c_gs_set_viewport, _dart_gs_set_viewport>(
            'gs_set_viewport');
    return _gs_set_viewport(
      x,
      y,
      width,
      height,
    );
  }

  _dart_gs_set_viewport _gs_set_viewport;

  void gs_get_viewport(
    ffi.Pointer<gs_rect> rect,
  ) {
    _gs_get_viewport ??=
        _dylib.lookupFunction<_c_gs_get_viewport, _dart_gs_get_viewport>(
            'gs_get_viewport');
    return _gs_get_viewport(
      rect,
    );
  }

  _dart_gs_get_viewport _gs_get_viewport;

  void gs_set_scissor_rect(
    ffi.Pointer<gs_rect> rect,
  ) {
    _gs_set_scissor_rect ??= _dylib.lookupFunction<_c_gs_set_scissor_rect,
        _dart_gs_set_scissor_rect>('gs_set_scissor_rect');
    return _gs_set_scissor_rect(
      rect,
    );
  }

  _dart_gs_set_scissor_rect _gs_set_scissor_rect;

  void gs_ortho(
    double left,
    double right,
    double top,
    double bottom,
    double znear,
    double zfar,
  ) {
    _gs_ortho ??=
        _dylib.lookupFunction<_c_gs_ortho, _dart_gs_ortho>('gs_ortho');
    return _gs_ortho(
      left,
      right,
      top,
      bottom,
      znear,
      zfar,
    );
  }

  _dart_gs_ortho _gs_ortho;

  void gs_frustum(
    double left,
    double right,
    double top,
    double bottom,
    double znear,
    double zfar,
  ) {
    _gs_frustum ??=
        _dylib.lookupFunction<_c_gs_frustum, _dart_gs_frustum>('gs_frustum');
    return _gs_frustum(
      left,
      right,
      top,
      bottom,
      znear,
      zfar,
    );
  }

  _dart_gs_frustum _gs_frustum;

  void gs_projection_push() {
    _gs_projection_push ??=
        _dylib.lookupFunction<_c_gs_projection_push, _dart_gs_projection_push>(
            'gs_projection_push');
    return _gs_projection_push();
  }

  _dart_gs_projection_push _gs_projection_push;

  void gs_projection_pop() {
    _gs_projection_pop ??=
        _dylib.lookupFunction<_c_gs_projection_pop, _dart_gs_projection_pop>(
            'gs_projection_pop');
    return _gs_projection_pop();
  }

  _dart_gs_projection_pop _gs_projection_pop;

  void gs_swapchain_destroy(
    ffi.Pointer<gs_swap_chain> swapchain,
  ) {
    _gs_swapchain_destroy ??= _dylib.lookupFunction<_c_gs_swapchain_destroy,
        _dart_gs_swapchain_destroy>('gs_swapchain_destroy');
    return _gs_swapchain_destroy(
      swapchain,
    );
  }

  _dart_gs_swapchain_destroy _gs_swapchain_destroy;

  void gs_texture_destroy(
    ffi.Pointer<gs_texture> tex,
  ) {
    _gs_texture_destroy ??=
        _dylib.lookupFunction<_c_gs_texture_destroy, _dart_gs_texture_destroy>(
            'gs_texture_destroy');
    return _gs_texture_destroy(
      tex,
    );
  }

  _dart_gs_texture_destroy _gs_texture_destroy;

  int gs_texture_get_width(
    ffi.Pointer<gs_texture> tex,
  ) {
    _gs_texture_get_width ??= _dylib.lookupFunction<_c_gs_texture_get_width,
        _dart_gs_texture_get_width>('gs_texture_get_width');
    return _gs_texture_get_width(
      tex,
    );
  }

  _dart_gs_texture_get_width _gs_texture_get_width;

  int gs_texture_get_height(
    ffi.Pointer<gs_texture> tex,
  ) {
    _gs_texture_get_height ??= _dylib.lookupFunction<_c_gs_texture_get_height,
        _dart_gs_texture_get_height>('gs_texture_get_height');
    return _gs_texture_get_height(
      tex,
    );
  }

  _dart_gs_texture_get_height _gs_texture_get_height;

  int gs_texture_get_color_format(
    ffi.Pointer<gs_texture> tex,
  ) {
    _gs_texture_get_color_format ??= _dylib.lookupFunction<
        _c_gs_texture_get_color_format,
        _dart_gs_texture_get_color_format>('gs_texture_get_color_format');
    return _gs_texture_get_color_format(
      tex,
    );
  }

  _dart_gs_texture_get_color_format _gs_texture_get_color_format;

  int gs_texture_map(
    ffi.Pointer<gs_texture> tex,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> ptr,
    ffi.Pointer<ffi.Uint32> linesize,
  ) {
    _gs_texture_map ??=
        _dylib.lookupFunction<_c_gs_texture_map, _dart_gs_texture_map>(
            'gs_texture_map');
    return _gs_texture_map(
      tex,
      ptr,
      linesize,
    );
  }

  _dart_gs_texture_map _gs_texture_map;

  void gs_texture_unmap(
    ffi.Pointer<gs_texture> tex,
  ) {
    _gs_texture_unmap ??=
        _dylib.lookupFunction<_c_gs_texture_unmap, _dart_gs_texture_unmap>(
            'gs_texture_unmap');
    return _gs_texture_unmap(
      tex,
    );
  }

  _dart_gs_texture_unmap _gs_texture_unmap;

  /// special-case function (GL only) - specifies whether the texture is a
  /// GL_TEXTURE_RECTANGLE type, which doesn't use normalized texture
  /// coordinates, doesn't support mipmapping, and requires address clamping
  int gs_texture_is_rect(
    ffi.Pointer<gs_texture> tex,
  ) {
    _gs_texture_is_rect ??=
        _dylib.lookupFunction<_c_gs_texture_is_rect, _dart_gs_texture_is_rect>(
            'gs_texture_is_rect');
    return _gs_texture_is_rect(
      tex,
    );
  }

  _dart_gs_texture_is_rect _gs_texture_is_rect;

  /// Gets a pointer to the context-specific object associated with the texture.
  /// For example, for GL, this is a GLuint*.  For D3D11, ID3D11Texture2D*.
  ffi.Pointer<ffi.Void> gs_texture_get_obj(
    ffi.Pointer<gs_texture> tex,
  ) {
    _gs_texture_get_obj ??=
        _dylib.lookupFunction<_c_gs_texture_get_obj, _dart_gs_texture_get_obj>(
            'gs_texture_get_obj');
    return _gs_texture_get_obj(
      tex,
    );
  }

  _dart_gs_texture_get_obj _gs_texture_get_obj;

  void gs_cubetexture_destroy(
    ffi.Pointer<gs_texture> cubetex,
  ) {
    _gs_cubetexture_destroy ??= _dylib.lookupFunction<_c_gs_cubetexture_destroy,
        _dart_gs_cubetexture_destroy>('gs_cubetexture_destroy');
    return _gs_cubetexture_destroy(
      cubetex,
    );
  }

  _dart_gs_cubetexture_destroy _gs_cubetexture_destroy;

  int gs_cubetexture_get_size(
    ffi.Pointer<gs_texture> cubetex,
  ) {
    _gs_cubetexture_get_size ??= _dylib.lookupFunction<
        _c_gs_cubetexture_get_size,
        _dart_gs_cubetexture_get_size>('gs_cubetexture_get_size');
    return _gs_cubetexture_get_size(
      cubetex,
    );
  }

  _dart_gs_cubetexture_get_size _gs_cubetexture_get_size;

  int gs_cubetexture_get_color_format(
    ffi.Pointer<gs_texture> cubetex,
  ) {
    _gs_cubetexture_get_color_format ??= _dylib.lookupFunction<
            _c_gs_cubetexture_get_color_format,
            _dart_gs_cubetexture_get_color_format>(
        'gs_cubetexture_get_color_format');
    return _gs_cubetexture_get_color_format(
      cubetex,
    );
  }

  _dart_gs_cubetexture_get_color_format _gs_cubetexture_get_color_format;

  void gs_voltexture_destroy(
    ffi.Pointer<gs_texture> voltex,
  ) {
    _gs_voltexture_destroy ??= _dylib.lookupFunction<_c_gs_voltexture_destroy,
        _dart_gs_voltexture_destroy>('gs_voltexture_destroy');
    return _gs_voltexture_destroy(
      voltex,
    );
  }

  _dart_gs_voltexture_destroy _gs_voltexture_destroy;

  int gs_voltexture_get_width(
    ffi.Pointer<gs_texture> voltex,
  ) {
    _gs_voltexture_get_width ??= _dylib.lookupFunction<
        _c_gs_voltexture_get_width,
        _dart_gs_voltexture_get_width>('gs_voltexture_get_width');
    return _gs_voltexture_get_width(
      voltex,
    );
  }

  _dart_gs_voltexture_get_width _gs_voltexture_get_width;

  int gs_voltexture_get_height(
    ffi.Pointer<gs_texture> voltex,
  ) {
    _gs_voltexture_get_height ??= _dylib.lookupFunction<
        _c_gs_voltexture_get_height,
        _dart_gs_voltexture_get_height>('gs_voltexture_get_height');
    return _gs_voltexture_get_height(
      voltex,
    );
  }

  _dart_gs_voltexture_get_height _gs_voltexture_get_height;

  int gs_voltexture_get_depth(
    ffi.Pointer<gs_texture> voltex,
  ) {
    _gs_voltexture_get_depth ??= _dylib.lookupFunction<
        _c_gs_voltexture_get_depth,
        _dart_gs_voltexture_get_depth>('gs_voltexture_get_depth');
    return _gs_voltexture_get_depth(
      voltex,
    );
  }

  _dart_gs_voltexture_get_depth _gs_voltexture_get_depth;

  int gs_voltexture_get_color_format(
    ffi.Pointer<gs_texture> voltex,
  ) {
    _gs_voltexture_get_color_format ??= _dylib.lookupFunction<
        _c_gs_voltexture_get_color_format,
        _dart_gs_voltexture_get_color_format>('gs_voltexture_get_color_format');
    return _gs_voltexture_get_color_format(
      voltex,
    );
  }

  _dart_gs_voltexture_get_color_format _gs_voltexture_get_color_format;

  void gs_stagesurface_destroy(
    ffi.Pointer<gs_stage_surface> stagesurf,
  ) {
    _gs_stagesurface_destroy ??= _dylib.lookupFunction<
        _c_gs_stagesurface_destroy,
        _dart_gs_stagesurface_destroy>('gs_stagesurface_destroy');
    return _gs_stagesurface_destroy(
      stagesurf,
    );
  }

  _dart_gs_stagesurface_destroy _gs_stagesurface_destroy;

  int gs_stagesurface_get_width(
    ffi.Pointer<gs_stage_surface> stagesurf,
  ) {
    _gs_stagesurface_get_width ??= _dylib.lookupFunction<
        _c_gs_stagesurface_get_width,
        _dart_gs_stagesurface_get_width>('gs_stagesurface_get_width');
    return _gs_stagesurface_get_width(
      stagesurf,
    );
  }

  _dart_gs_stagesurface_get_width _gs_stagesurface_get_width;

  int gs_stagesurface_get_height(
    ffi.Pointer<gs_stage_surface> stagesurf,
  ) {
    _gs_stagesurface_get_height ??= _dylib.lookupFunction<
        _c_gs_stagesurface_get_height,
        _dart_gs_stagesurface_get_height>('gs_stagesurface_get_height');
    return _gs_stagesurface_get_height(
      stagesurf,
    );
  }

  _dart_gs_stagesurface_get_height _gs_stagesurface_get_height;

  int gs_stagesurface_get_color_format(
    ffi.Pointer<gs_stage_surface> stagesurf,
  ) {
    _gs_stagesurface_get_color_format ??= _dylib.lookupFunction<
            _c_gs_stagesurface_get_color_format,
            _dart_gs_stagesurface_get_color_format>(
        'gs_stagesurface_get_color_format');
    return _gs_stagesurface_get_color_format(
      stagesurf,
    );
  }

  _dart_gs_stagesurface_get_color_format _gs_stagesurface_get_color_format;

  int gs_stagesurface_map(
    ffi.Pointer<gs_stage_surface> stagesurf,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    ffi.Pointer<ffi.Uint32> linesize,
  ) {
    _gs_stagesurface_map ??= _dylib.lookupFunction<_c_gs_stagesurface_map,
        _dart_gs_stagesurface_map>('gs_stagesurface_map');
    return _gs_stagesurface_map(
      stagesurf,
      data,
      linesize,
    );
  }

  _dart_gs_stagesurface_map _gs_stagesurface_map;

  void gs_stagesurface_unmap(
    ffi.Pointer<gs_stage_surface> stagesurf,
  ) {
    _gs_stagesurface_unmap ??= _dylib.lookupFunction<_c_gs_stagesurface_unmap,
        _dart_gs_stagesurface_unmap>('gs_stagesurface_unmap');
    return _gs_stagesurface_unmap(
      stagesurf,
    );
  }

  _dart_gs_stagesurface_unmap _gs_stagesurface_unmap;

  void gs_zstencil_destroy(
    ffi.Pointer<gs_zstencil_buffer> zstencil,
  ) {
    _gs_zstencil_destroy ??= _dylib.lookupFunction<_c_gs_zstencil_destroy,
        _dart_gs_zstencil_destroy>('gs_zstencil_destroy');
    return _gs_zstencil_destroy(
      zstencil,
    );
  }

  _dart_gs_zstencil_destroy _gs_zstencil_destroy;

  void gs_samplerstate_destroy(
    ffi.Pointer<gs_sampler_state> samplerstate,
  ) {
    _gs_samplerstate_destroy ??= _dylib.lookupFunction<
        _c_gs_samplerstate_destroy,
        _dart_gs_samplerstate_destroy>('gs_samplerstate_destroy');
    return _gs_samplerstate_destroy(
      samplerstate,
    );
  }

  _dart_gs_samplerstate_destroy _gs_samplerstate_destroy;

  void gs_vertexbuffer_destroy(
    ffi.Pointer<gs_vertex_buffer> vertbuffer,
  ) {
    _gs_vertexbuffer_destroy ??= _dylib.lookupFunction<
        _c_gs_vertexbuffer_destroy,
        _dart_gs_vertexbuffer_destroy>('gs_vertexbuffer_destroy');
    return _gs_vertexbuffer_destroy(
      vertbuffer,
    );
  }

  _dart_gs_vertexbuffer_destroy _gs_vertexbuffer_destroy;

  void gs_vertexbuffer_flush(
    ffi.Pointer<gs_vertex_buffer> vertbuffer,
  ) {
    _gs_vertexbuffer_flush ??= _dylib.lookupFunction<_c_gs_vertexbuffer_flush,
        _dart_gs_vertexbuffer_flush>('gs_vertexbuffer_flush');
    return _gs_vertexbuffer_flush(
      vertbuffer,
    );
  }

  _dart_gs_vertexbuffer_flush _gs_vertexbuffer_flush;

  void gs_vertexbuffer_flush_direct(
    ffi.Pointer<gs_vertex_buffer> vertbuffer,
    ffi.Pointer<gs_vb_data> data,
  ) {
    _gs_vertexbuffer_flush_direct ??= _dylib.lookupFunction<
        _c_gs_vertexbuffer_flush_direct,
        _dart_gs_vertexbuffer_flush_direct>('gs_vertexbuffer_flush_direct');
    return _gs_vertexbuffer_flush_direct(
      vertbuffer,
      data,
    );
  }

  _dart_gs_vertexbuffer_flush_direct _gs_vertexbuffer_flush_direct;

  ffi.Pointer<gs_vb_data> gs_vertexbuffer_get_data(
    ffi.Pointer<gs_vertex_buffer> vertbuffer,
  ) {
    _gs_vertexbuffer_get_data ??= _dylib.lookupFunction<
        _c_gs_vertexbuffer_get_data,
        _dart_gs_vertexbuffer_get_data>('gs_vertexbuffer_get_data');
    return _gs_vertexbuffer_get_data(
      vertbuffer,
    );
  }

  _dart_gs_vertexbuffer_get_data _gs_vertexbuffer_get_data;

  void gs_indexbuffer_destroy(
    ffi.Pointer<gs_index_buffer> indexbuffer,
  ) {
    _gs_indexbuffer_destroy ??= _dylib.lookupFunction<_c_gs_indexbuffer_destroy,
        _dart_gs_indexbuffer_destroy>('gs_indexbuffer_destroy');
    return _gs_indexbuffer_destroy(
      indexbuffer,
    );
  }

  _dart_gs_indexbuffer_destroy _gs_indexbuffer_destroy;

  void gs_indexbuffer_flush(
    ffi.Pointer<gs_index_buffer> indexbuffer,
  ) {
    _gs_indexbuffer_flush ??= _dylib.lookupFunction<_c_gs_indexbuffer_flush,
        _dart_gs_indexbuffer_flush>('gs_indexbuffer_flush');
    return _gs_indexbuffer_flush(
      indexbuffer,
    );
  }

  _dart_gs_indexbuffer_flush _gs_indexbuffer_flush;

  void gs_indexbuffer_flush_direct(
    ffi.Pointer<gs_index_buffer> indexbuffer,
    ffi.Pointer<ffi.Void> data,
  ) {
    _gs_indexbuffer_flush_direct ??= _dylib.lookupFunction<
        _c_gs_indexbuffer_flush_direct,
        _dart_gs_indexbuffer_flush_direct>('gs_indexbuffer_flush_direct');
    return _gs_indexbuffer_flush_direct(
      indexbuffer,
      data,
    );
  }

  _dart_gs_indexbuffer_flush_direct _gs_indexbuffer_flush_direct;

  ffi.Pointer<ffi.Void> gs_indexbuffer_get_data(
    ffi.Pointer<gs_index_buffer> indexbuffer,
  ) {
    _gs_indexbuffer_get_data ??= _dylib.lookupFunction<
        _c_gs_indexbuffer_get_data,
        _dart_gs_indexbuffer_get_data>('gs_indexbuffer_get_data');
    return _gs_indexbuffer_get_data(
      indexbuffer,
    );
  }

  _dart_gs_indexbuffer_get_data _gs_indexbuffer_get_data;

  int gs_indexbuffer_get_num_indices(
    ffi.Pointer<gs_index_buffer> indexbuffer,
  ) {
    _gs_indexbuffer_get_num_indices ??= _dylib.lookupFunction<
        _c_gs_indexbuffer_get_num_indices,
        _dart_gs_indexbuffer_get_num_indices>('gs_indexbuffer_get_num_indices');
    return _gs_indexbuffer_get_num_indices(
      indexbuffer,
    );
  }

  _dart_gs_indexbuffer_get_num_indices _gs_indexbuffer_get_num_indices;

  int gs_indexbuffer_get_type(
    ffi.Pointer<gs_index_buffer> indexbuffer,
  ) {
    _gs_indexbuffer_get_type ??= _dylib.lookupFunction<
        _c_gs_indexbuffer_get_type,
        _dart_gs_indexbuffer_get_type>('gs_indexbuffer_get_type');
    return _gs_indexbuffer_get_type(
      indexbuffer,
    );
  }

  _dart_gs_indexbuffer_get_type _gs_indexbuffer_get_type;

  void gs_timer_destroy(
    ffi.Pointer<gs_timer> timer,
  ) {
    _gs_timer_destroy ??=
        _dylib.lookupFunction<_c_gs_timer_destroy, _dart_gs_timer_destroy>(
            'gs_timer_destroy');
    return _gs_timer_destroy(
      timer,
    );
  }

  _dart_gs_timer_destroy _gs_timer_destroy;

  void gs_timer_begin(
    ffi.Pointer<gs_timer> timer,
  ) {
    _gs_timer_begin ??=
        _dylib.lookupFunction<_c_gs_timer_begin, _dart_gs_timer_begin>(
            'gs_timer_begin');
    return _gs_timer_begin(
      timer,
    );
  }

  _dart_gs_timer_begin _gs_timer_begin;

  void gs_timer_end(
    ffi.Pointer<gs_timer> timer,
  ) {
    _gs_timer_end ??= _dylib
        .lookupFunction<_c_gs_timer_end, _dart_gs_timer_end>('gs_timer_end');
    return _gs_timer_end(
      timer,
    );
  }

  _dart_gs_timer_end _gs_timer_end;

  int gs_timer_get_data(
    ffi.Pointer<gs_timer> timer,
    ffi.Pointer<ffi.Uint64> ticks,
  ) {
    _gs_timer_get_data ??=
        _dylib.lookupFunction<_c_gs_timer_get_data, _dart_gs_timer_get_data>(
            'gs_timer_get_data');
    return _gs_timer_get_data(
      timer,
      ticks,
    );
  }

  _dart_gs_timer_get_data _gs_timer_get_data;

  void gs_timer_range_destroy(
    ffi.Pointer<gs_timer_range> timer,
  ) {
    _gs_timer_range_destroy ??= _dylib.lookupFunction<_c_gs_timer_range_destroy,
        _dart_gs_timer_range_destroy>('gs_timer_range_destroy');
    return _gs_timer_range_destroy(
      timer,
    );
  }

  _dart_gs_timer_range_destroy _gs_timer_range_destroy;

  void gs_timer_range_begin(
    ffi.Pointer<gs_timer_range> range,
  ) {
    _gs_timer_range_begin ??= _dylib.lookupFunction<_c_gs_timer_range_begin,
        _dart_gs_timer_range_begin>('gs_timer_range_begin');
    return _gs_timer_range_begin(
      range,
    );
  }

  _dart_gs_timer_range_begin _gs_timer_range_begin;

  void gs_timer_range_end(
    ffi.Pointer<gs_timer_range> range,
  ) {
    _gs_timer_range_end ??=
        _dylib.lookupFunction<_c_gs_timer_range_end, _dart_gs_timer_range_end>(
            'gs_timer_range_end');
    return _gs_timer_range_end(
      range,
    );
  }

  _dart_gs_timer_range_end _gs_timer_range_end;

  int gs_timer_range_get_data(
    ffi.Pointer<gs_timer_range> range,
    ffi.Pointer<ffi.Uint8> disjoint,
    ffi.Pointer<ffi.Uint64> frequency,
  ) {
    _gs_timer_range_get_data ??= _dylib.lookupFunction<
        _c_gs_timer_range_get_data,
        _dart_gs_timer_range_get_data>('gs_timer_range_get_data');
    return _gs_timer_range_get_data(
      range,
      disjoint,
      frequency,
    );
  }

  _dart_gs_timer_range_get_data _gs_timer_range_get_data;

  int gs_nv12_available() {
    _gs_nv12_available ??=
        _dylib.lookupFunction<_c_gs_nv12_available, _dart_gs_nv12_available>(
            'gs_nv12_available');
    return _gs_nv12_available();
  }

  _dart_gs_nv12_available _gs_nv12_available;

  void gs_debug_marker_begin(
    ffi.Pointer<ffi.Float> color,
    ffi.Pointer<ffi.Int8> markername,
  ) {
    _gs_debug_marker_begin ??= _dylib.lookupFunction<_c_gs_debug_marker_begin,
        _dart_gs_debug_marker_begin>('gs_debug_marker_begin');
    return _gs_debug_marker_begin(
      color,
      markername,
    );
  }

  _dart_gs_debug_marker_begin _gs_debug_marker_begin;

  void gs_debug_marker_begin_format(
    ffi.Pointer<ffi.Float> color,
    ffi.Pointer<ffi.Int8> format,
  ) {
    _gs_debug_marker_begin_format ??= _dylib.lookupFunction<
        _c_gs_debug_marker_begin_format,
        _dart_gs_debug_marker_begin_format>('gs_debug_marker_begin_format');
    return _gs_debug_marker_begin_format(
      color,
      format,
    );
  }

  _dart_gs_debug_marker_begin_format _gs_debug_marker_begin_format;

  void gs_debug_marker_end() {
    _gs_debug_marker_end ??= _dylib.lookupFunction<_c_gs_debug_marker_end,
        _dart_gs_debug_marker_end>('gs_debug_marker_end');
    return _gs_debug_marker_end();
  }

  _dart_gs_debug_marker_end _gs_debug_marker_end;

  /// platform specific function for creating (GL_TEXTURE_RECTANGLE) textures
  /// from shared surface resources
  ffi.Pointer<gs_texture> gs_texture_create_from_iosurface(
    ffi.Pointer<ffi.Void> iosurf,
  ) {
    _gs_texture_create_from_iosurface ??= _dylib.lookupFunction<
            _c_gs_texture_create_from_iosurface,
            _dart_gs_texture_create_from_iosurface>(
        'gs_texture_create_from_iosurface');
    return _gs_texture_create_from_iosurface(
      iosurf,
    );
  }

  _dart_gs_texture_create_from_iosurface _gs_texture_create_from_iosurface;

  int gs_texture_rebind_iosurface(
    ffi.Pointer<gs_texture> texture,
    ffi.Pointer<ffi.Void> iosurf,
  ) {
    _gs_texture_rebind_iosurface ??= _dylib.lookupFunction<
        _c_gs_texture_rebind_iosurface,
        _dart_gs_texture_rebind_iosurface>('gs_texture_rebind_iosurface');
    return _gs_texture_rebind_iosurface(
      texture,
      iosurf,
    );
  }

  _dart_gs_texture_rebind_iosurface _gs_texture_rebind_iosurface;

  int gs_get_format_bpp(
    int format,
  ) {
    _gs_get_format_bpp ??=
        _dylib.lookupFunction<_c_gs_get_format_bpp, _dart_gs_get_format_bpp>(
            'gs_get_format_bpp');
    return _gs_get_format_bpp(
      format,
    );
  }

  _dart_gs_get_format_bpp _gs_get_format_bpp;

  int gs_is_compressed_format(
    int format,
  ) {
    _gs_is_compressed_format ??= _dylib.lookupFunction<
        _c_gs_is_compressed_format,
        _dart_gs_is_compressed_format>('gs_is_compressed_format');
    return _gs_is_compressed_format(
      format,
    );
  }

  _dart_gs_is_compressed_format _gs_is_compressed_format;

  int gs_get_total_levels(
    int width,
    int height,
    int depth,
  ) {
    _gs_get_total_levels ??= _dylib.lookupFunction<_c_gs_get_total_levels,
        _dart_gs_get_total_levels>('gs_get_total_levels');
    return _gs_get_total_levels(
      width,
      height,
      depth,
    );
  }

  _dart_gs_get_total_levels _gs_get_total_levels;

  void vec2_zero(
    ffi.Pointer<vec2> dst,
  ) {
    _vec2_zero ??=
        _dylib.lookupFunction<_c_vec2_zero, _dart_vec2_zero>('vec2_zero');
    return _vec2_zero(
      dst,
    );
  }

  _dart_vec2_zero _vec2_zero;

  void vec2_set(
    ffi.Pointer<vec2> dst,
    double x,
    double y,
  ) {
    _vec2_set ??=
        _dylib.lookupFunction<_c_vec2_set, _dart_vec2_set>('vec2_set');
    return _vec2_set(
      dst,
      x,
      y,
    );
  }

  _dart_vec2_set _vec2_set;

  void vec2_copy(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    _vec2_copy ??=
        _dylib.lookupFunction<_c_vec2_copy, _dart_vec2_copy>('vec2_copy');
    return _vec2_copy(
      dst,
      v,
    );
  }

  _dart_vec2_copy _vec2_copy;

  void vec2_add(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v1,
    ffi.Pointer<vec2> v2,
  ) {
    _vec2_add ??=
        _dylib.lookupFunction<_c_vec2_add, _dart_vec2_add>('vec2_add');
    return _vec2_add(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec2_add _vec2_add;

  void vec2_sub(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v1,
    ffi.Pointer<vec2> v2,
  ) {
    _vec2_sub ??=
        _dylib.lookupFunction<_c_vec2_sub, _dart_vec2_sub>('vec2_sub');
    return _vec2_sub(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec2_sub _vec2_sub;

  void vec2_mul(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v1,
    ffi.Pointer<vec2> v2,
  ) {
    _vec2_mul ??=
        _dylib.lookupFunction<_c_vec2_mul, _dart_vec2_mul>('vec2_mul');
    return _vec2_mul(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec2_mul _vec2_mul;

  void vec2_div(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v1,
    ffi.Pointer<vec2> v2,
  ) {
    _vec2_div ??=
        _dylib.lookupFunction<_c_vec2_div, _dart_vec2_div>('vec2_div');
    return _vec2_div(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec2_div _vec2_div;

  void vec2_addf(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
    double f,
  ) {
    _vec2_addf ??=
        _dylib.lookupFunction<_c_vec2_addf, _dart_vec2_addf>('vec2_addf');
    return _vec2_addf(
      dst,
      v,
      f,
    );
  }

  _dart_vec2_addf _vec2_addf;

  void vec2_subf(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
    double f,
  ) {
    _vec2_subf ??=
        _dylib.lookupFunction<_c_vec2_subf, _dart_vec2_subf>('vec2_subf');
    return _vec2_subf(
      dst,
      v,
      f,
    );
  }

  _dart_vec2_subf _vec2_subf;

  void vec2_mulf(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
    double f,
  ) {
    _vec2_mulf ??=
        _dylib.lookupFunction<_c_vec2_mulf, _dart_vec2_mulf>('vec2_mulf');
    return _vec2_mulf(
      dst,
      v,
      f,
    );
  }

  _dart_vec2_mulf _vec2_mulf;

  void vec2_divf(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
    double f,
  ) {
    _vec2_divf ??=
        _dylib.lookupFunction<_c_vec2_divf, _dart_vec2_divf>('vec2_divf');
    return _vec2_divf(
      dst,
      v,
      f,
    );
  }

  _dart_vec2_divf _vec2_divf;

  void vec2_neg(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    _vec2_neg ??=
        _dylib.lookupFunction<_c_vec2_neg, _dart_vec2_neg>('vec2_neg');
    return _vec2_neg(
      dst,
      v,
    );
  }

  _dart_vec2_neg _vec2_neg;

  double vec2_dot(
    ffi.Pointer<vec2> v1,
    ffi.Pointer<vec2> v2,
  ) {
    _vec2_dot ??=
        _dylib.lookupFunction<_c_vec2_dot, _dart_vec2_dot>('vec2_dot');
    return _vec2_dot(
      v1,
      v2,
    );
  }

  _dart_vec2_dot _vec2_dot;

  double vec2_len(
    ffi.Pointer<vec2> v,
  ) {
    _vec2_len ??=
        _dylib.lookupFunction<_c_vec2_len, _dart_vec2_len>('vec2_len');
    return _vec2_len(
      v,
    );
  }

  _dart_vec2_len _vec2_len;

  double vec2_dist(
    ffi.Pointer<vec2> v1,
    ffi.Pointer<vec2> v2,
  ) {
    _vec2_dist ??=
        _dylib.lookupFunction<_c_vec2_dist, _dart_vec2_dist>('vec2_dist');
    return _vec2_dist(
      v1,
      v2,
    );
  }

  _dart_vec2_dist _vec2_dist;

  void vec2_minf(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
    double val,
  ) {
    _vec2_minf ??=
        _dylib.lookupFunction<_c_vec2_minf, _dart_vec2_minf>('vec2_minf');
    return _vec2_minf(
      dst,
      v,
      val,
    );
  }

  _dart_vec2_minf _vec2_minf;

  void vec2_min(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
    ffi.Pointer<vec2> min_v,
  ) {
    _vec2_min ??=
        _dylib.lookupFunction<_c_vec2_min, _dart_vec2_min>('vec2_min');
    return _vec2_min(
      dst,
      v,
      min_v,
    );
  }

  _dart_vec2_min _vec2_min;

  void vec2_maxf(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
    double val,
  ) {
    _vec2_maxf ??=
        _dylib.lookupFunction<_c_vec2_maxf, _dart_vec2_maxf>('vec2_maxf');
    return _vec2_maxf(
      dst,
      v,
      val,
    );
  }

  _dart_vec2_maxf _vec2_maxf;

  void vec2_max(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
    ffi.Pointer<vec2> max_v,
  ) {
    _vec2_max ??=
        _dylib.lookupFunction<_c_vec2_max, _dart_vec2_max>('vec2_max');
    return _vec2_max(
      dst,
      v,
      max_v,
    );
  }

  _dart_vec2_max _vec2_max;

  void vec2_abs(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    _vec2_abs ??=
        _dylib.lookupFunction<_c_vec2_abs, _dart_vec2_abs>('vec2_abs');
    return _vec2_abs(
      dst,
      v,
    );
  }

  _dart_vec2_abs _vec2_abs;

  void vec2_floor(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    _vec2_floor ??=
        _dylib.lookupFunction<_c_vec2_floor, _dart_vec2_floor>('vec2_floor');
    return _vec2_floor(
      dst,
      v,
    );
  }

  _dart_vec2_floor _vec2_floor;

  void vec2_ceil(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    _vec2_ceil ??=
        _dylib.lookupFunction<_c_vec2_ceil, _dart_vec2_ceil>('vec2_ceil');
    return _vec2_ceil(
      dst,
      v,
    );
  }

  _dart_vec2_ceil _vec2_ceil;

  int vec2_close(
    ffi.Pointer<vec2> v1,
    ffi.Pointer<vec2> v2,
    double epsilon,
  ) {
    _vec2_close ??=
        _dylib.lookupFunction<_c_vec2_close, _dart_vec2_close>('vec2_close');
    return _vec2_close(
      v1,
      v2,
      epsilon,
    );
  }

  _dart_vec2_close _vec2_close;

  void vec2_norm(
    ffi.Pointer<vec2> dst,
    ffi.Pointer<vec2> v,
  ) {
    _vec2_norm ??=
        _dylib.lookupFunction<_c_vec2_norm, _dart_vec2_norm>('vec2_norm');
    return _vec2_norm(
      dst,
      v,
    );
  }

  _dart_vec2_norm _vec2_norm;

  void vec3_zero(
    ffi.Pointer<vec3> v,
  ) {
    _vec3_zero ??=
        _dylib.lookupFunction<_c_vec3_zero, _dart_vec3_zero>('vec3_zero');
    return _vec3_zero(
      v,
    );
  }

  _dart_vec3_zero _vec3_zero;

  void vec3_set(
    ffi.Pointer<vec3> dst,
    double x,
    double y,
    double z,
  ) {
    _vec3_set ??=
        _dylib.lookupFunction<_c_vec3_set, _dart_vec3_set>('vec3_set');
    return _vec3_set(
      dst,
      x,
      y,
      z,
    );
  }

  _dart_vec3_set _vec3_set;

  void vec3_copy(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
  ) {
    _vec3_copy ??=
        _dylib.lookupFunction<_c_vec3_copy, _dart_vec3_copy>('vec3_copy');
    return _vec3_copy(
      dst,
      v,
    );
  }

  _dart_vec3_copy _vec3_copy;

  void vec3_from_vec4(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec4> v,
  ) {
    _vec3_from_vec4 ??=
        _dylib.lookupFunction<_c_vec3_from_vec4, _dart_vec3_from_vec4>(
            'vec3_from_vec4');
    return _vec3_from_vec4(
      dst,
      v,
    );
  }

  _dart_vec3_from_vec4 _vec3_from_vec4;

  void vec3_add(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
  ) {
    _vec3_add ??=
        _dylib.lookupFunction<_c_vec3_add, _dart_vec3_add>('vec3_add');
    return _vec3_add(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec3_add _vec3_add;

  void vec3_sub(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
  ) {
    _vec3_sub ??=
        _dylib.lookupFunction<_c_vec3_sub, _dart_vec3_sub>('vec3_sub');
    return _vec3_sub(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec3_sub _vec3_sub;

  void vec3_mul(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
  ) {
    _vec3_mul ??=
        _dylib.lookupFunction<_c_vec3_mul, _dart_vec3_mul>('vec3_mul');
    return _vec3_mul(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec3_mul _vec3_mul;

  void vec3_div(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
  ) {
    _vec3_div ??=
        _dylib.lookupFunction<_c_vec3_div, _dart_vec3_div>('vec3_div');
    return _vec3_div(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec3_div _vec3_div;

  void vec3_addf(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    double f,
  ) {
    _vec3_addf ??=
        _dylib.lookupFunction<_c_vec3_addf, _dart_vec3_addf>('vec3_addf');
    return _vec3_addf(
      dst,
      v,
      f,
    );
  }

  _dart_vec3_addf _vec3_addf;

  void vec3_subf(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    double f,
  ) {
    _vec3_subf ??=
        _dylib.lookupFunction<_c_vec3_subf, _dart_vec3_subf>('vec3_subf');
    return _vec3_subf(
      dst,
      v,
      f,
    );
  }

  _dart_vec3_subf _vec3_subf;

  void vec3_mulf(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    double f,
  ) {
    _vec3_mulf ??=
        _dylib.lookupFunction<_c_vec3_mulf, _dart_vec3_mulf>('vec3_mulf');
    return _vec3_mulf(
      dst,
      v,
      f,
    );
  }

  _dart_vec3_mulf _vec3_mulf;

  void vec3_divf(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    double f,
  ) {
    _vec3_divf ??=
        _dylib.lookupFunction<_c_vec3_divf, _dart_vec3_divf>('vec3_divf');
    return _vec3_divf(
      dst,
      v,
      f,
    );
  }

  _dart_vec3_divf _vec3_divf;

  double vec3_dot(
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
  ) {
    _vec3_dot ??=
        _dylib.lookupFunction<_c_vec3_dot, _dart_vec3_dot>('vec3_dot');
    return _vec3_dot(
      v1,
      v2,
    );
  }

  _dart_vec3_dot _vec3_dot;

  void vec3_cross(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
  ) {
    _vec3_cross ??=
        _dylib.lookupFunction<_c_vec3_cross, _dart_vec3_cross>('vec3_cross');
    return _vec3_cross(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec3_cross _vec3_cross;

  void vec3_neg(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
  ) {
    _vec3_neg ??=
        _dylib.lookupFunction<_c_vec3_neg, _dart_vec3_neg>('vec3_neg');
    return _vec3_neg(
      dst,
      v,
    );
  }

  _dart_vec3_neg _vec3_neg;

  double vec3_len(
    ffi.Pointer<vec3> v,
  ) {
    _vec3_len ??=
        _dylib.lookupFunction<_c_vec3_len, _dart_vec3_len>('vec3_len');
    return _vec3_len(
      v,
    );
  }

  _dart_vec3_len _vec3_len;

  double vec3_dist(
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
  ) {
    _vec3_dist ??=
        _dylib.lookupFunction<_c_vec3_dist, _dart_vec3_dist>('vec3_dist');
    return _vec3_dist(
      v1,
      v2,
    );
  }

  _dart_vec3_dist _vec3_dist;

  void vec3_norm(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
  ) {
    _vec3_norm ??=
        _dylib.lookupFunction<_c_vec3_norm, _dart_vec3_norm>('vec3_norm');
    return _vec3_norm(
      dst,
      v,
    );
  }

  _dart_vec3_norm _vec3_norm;

  int vec3_close(
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
    double epsilon,
  ) {
    _vec3_close ??=
        _dylib.lookupFunction<_c_vec3_close, _dart_vec3_close>('vec3_close');
    return _vec3_close(
      v1,
      v2,
      epsilon,
    );
  }

  _dart_vec3_close _vec3_close;

  void vec3_min(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
  ) {
    _vec3_min ??=
        _dylib.lookupFunction<_c_vec3_min, _dart_vec3_min>('vec3_min');
    return _vec3_min(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec3_min _vec3_min;

  void vec3_minf(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    double f,
  ) {
    _vec3_minf ??=
        _dylib.lookupFunction<_c_vec3_minf, _dart_vec3_minf>('vec3_minf');
    return _vec3_minf(
      dst,
      v,
      f,
    );
  }

  _dart_vec3_minf _vec3_minf;

  void vec3_max(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v1,
    ffi.Pointer<vec3> v2,
  ) {
    _vec3_max ??=
        _dylib.lookupFunction<_c_vec3_max, _dart_vec3_max>('vec3_max');
    return _vec3_max(
      dst,
      v1,
      v2,
    );
  }

  _dart_vec3_max _vec3_max;

  void vec3_maxf(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    double f,
  ) {
    _vec3_maxf ??=
        _dylib.lookupFunction<_c_vec3_maxf, _dart_vec3_maxf>('vec3_maxf');
    return _vec3_maxf(
      dst,
      v,
      f,
    );
  }

  _dart_vec3_maxf _vec3_maxf;

  void vec3_abs(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
  ) {
    _vec3_abs ??=
        _dylib.lookupFunction<_c_vec3_abs, _dart_vec3_abs>('vec3_abs');
    return _vec3_abs(
      dst,
      v,
    );
  }

  _dart_vec3_abs _vec3_abs;

  void vec3_floor(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
  ) {
    _vec3_floor ??=
        _dylib.lookupFunction<_c_vec3_floor, _dart_vec3_floor>('vec3_floor');
    return _vec3_floor(
      dst,
      v,
    );
  }

  _dart_vec3_floor _vec3_floor;

  void vec3_ceil(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
  ) {
    _vec3_ceil ??=
        _dylib.lookupFunction<_c_vec3_ceil, _dart_vec3_ceil>('vec3_ceil');
    return _vec3_ceil(
      dst,
      v,
    );
  }

  _dart_vec3_ceil _vec3_ceil;

  double vec3_plane_dist(
    ffi.Pointer<vec3> v,
    ffi.Pointer<plane> p,
  ) {
    _vec3_plane_dist ??=
        _dylib.lookupFunction<_c_vec3_plane_dist, _dart_vec3_plane_dist>(
            'vec3_plane_dist');
    return _vec3_plane_dist(
      v,
      p,
    );
  }

  _dart_vec3_plane_dist _vec3_plane_dist;

  void vec3_transform(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<matrix4> m,
  ) {
    _vec3_transform ??=
        _dylib.lookupFunction<_c_vec3_transform, _dart_vec3_transform>(
            'vec3_transform');
    return _vec3_transform(
      dst,
      v,
      m,
    );
  }

  _dart_vec3_transform _vec3_transform;

  void vec3_rotate(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<matrix3> m,
  ) {
    _vec3_rotate ??=
        _dylib.lookupFunction<_c_vec3_rotate, _dart_vec3_rotate>('vec3_rotate');
    return _vec3_rotate(
      dst,
      v,
      m,
    );
  }

  _dart_vec3_rotate _vec3_rotate;

  void vec3_transform3x4(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<matrix3> m,
  ) {
    _vec3_transform3x4 ??=
        _dylib.lookupFunction<_c_vec3_transform3x4, _dart_vec3_transform3x4>(
            'vec3_transform3x4');
    return _vec3_transform3x4(
      dst,
      v,
      m,
    );
  }

  _dart_vec3_transform3x4 _vec3_transform3x4;

  void vec3_mirror(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<plane> p,
  ) {
    _vec3_mirror ??=
        _dylib.lookupFunction<_c_vec3_mirror, _dart_vec3_mirror>('vec3_mirror');
    return _vec3_mirror(
      dst,
      v,
      p,
    );
  }

  _dart_vec3_mirror _vec3_mirror;

  void vec3_mirrorv(
    ffi.Pointer<vec3> dst,
    ffi.Pointer<vec3> v,
    ffi.Pointer<vec3> vec,
  ) {
    _vec3_mirrorv ??= _dylib
        .lookupFunction<_c_vec3_mirrorv, _dart_vec3_mirrorv>('vec3_mirrorv');
    return _vec3_mirrorv(
      dst,
      v,
      vec,
    );
  }

  _dart_vec3_mirrorv _vec3_mirrorv;

  void vec3_rand(
    ffi.Pointer<vec3> dst,
    int positive_only,
  ) {
    _vec3_rand ??=
        _dylib.lookupFunction<_c_vec3_rand, _dart_vec3_rand>('vec3_rand');
    return _vec3_rand(
      dst,
      positive_only,
    );
  }

  _dart_vec3_rand _vec3_rand;

  int get_audio_channels(
    int speakers,
  ) {
    _get_audio_channels ??=
        _dylib.lookupFunction<_c_get_audio_channels, _dart_get_audio_channels>(
            'get_audio_channels');
    return _get_audio_channels(
      speakers,
    );
  }

  _dart_get_audio_channels _get_audio_channels;

  int get_audio_bytes_per_channel(
    int format,
  ) {
    _get_audio_bytes_per_channel ??= _dylib.lookupFunction<
        _c_get_audio_bytes_per_channel,
        _dart_get_audio_bytes_per_channel>('get_audio_bytes_per_channel');
    return _get_audio_bytes_per_channel(
      format,
    );
  }

  _dart_get_audio_bytes_per_channel _get_audio_bytes_per_channel;

  int is_audio_planar(
    int format,
  ) {
    _is_audio_planar ??=
        _dylib.lookupFunction<_c_is_audio_planar, _dart_is_audio_planar>(
            'is_audio_planar');
    return _is_audio_planar(
      format,
    );
  }

  _dart_is_audio_planar _is_audio_planar;

  int get_audio_planes(
    int format,
    int speakers,
  ) {
    _get_audio_planes ??=
        _dylib.lookupFunction<_c_get_audio_planes, _dart_get_audio_planes>(
            'get_audio_planes');
    return _get_audio_planes(
      format,
      speakers,
    );
  }

  _dart_get_audio_planes _get_audio_planes;

  int get_audio_size(
    int format,
    int speakers,
    int frames,
  ) {
    _get_audio_size ??=
        _dylib.lookupFunction<_c_get_audio_size, _dart_get_audio_size>(
            'get_audio_size');
    return _get_audio_size(
      format,
      speakers,
      frames,
    );
  }

  _dart_get_audio_size _get_audio_size;

  int audio_frames_to_ns(
    int sample_rate,
    int frames,
  ) {
    _audio_frames_to_ns ??=
        _dylib.lookupFunction<_c_audio_frames_to_ns, _dart_audio_frames_to_ns>(
            'audio_frames_to_ns');
    return _audio_frames_to_ns(
      sample_rate,
      frames,
    );
  }

  _dart_audio_frames_to_ns _audio_frames_to_ns;

  int ns_to_audio_frames(
    int sample_rate,
    int frames,
  ) {
    _ns_to_audio_frames ??=
        _dylib.lookupFunction<_c_ns_to_audio_frames, _dart_ns_to_audio_frames>(
            'ns_to_audio_frames');
    return _ns_to_audio_frames(
      sample_rate,
      frames,
    );
  }

  _dart_ns_to_audio_frames _ns_to_audio_frames;

  int audio_output_open(
    ffi.Pointer<ffi.Pointer<audio_output>> audio,
    ffi.Pointer<audio_output_info> info,
  ) {
    _audio_output_open ??=
        _dylib.lookupFunction<_c_audio_output_open, _dart_audio_output_open>(
            'audio_output_open');
    return _audio_output_open(
      audio,
      info,
    );
  }

  _dart_audio_output_open _audio_output_open;

  void audio_output_close(
    ffi.Pointer<audio_output> audio,
  ) {
    _audio_output_close ??=
        _dylib.lookupFunction<_c_audio_output_close, _dart_audio_output_close>(
            'audio_output_close');
    return _audio_output_close(
      audio,
    );
  }

  _dart_audio_output_close _audio_output_close;

  int audio_output_connect(
    ffi.Pointer<audio_output> video,
    int mix_idx,
    ffi.Pointer<audio_convert_info> conversion,
    ffi.Pointer<ffi.NativeFunction<audio_output_callback_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _audio_output_connect ??= _dylib.lookupFunction<_c_audio_output_connect,
        _dart_audio_output_connect>('audio_output_connect');
    return _audio_output_connect(
      video,
      mix_idx,
      conversion,
      callback,
      param,
    );
  }

  _dart_audio_output_connect _audio_output_connect;

  void audio_output_disconnect(
    ffi.Pointer<audio_output> video,
    int mix_idx,
    ffi.Pointer<ffi.NativeFunction<audio_output_callback_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _audio_output_disconnect ??= _dylib.lookupFunction<
        _c_audio_output_disconnect,
        _dart_audio_output_disconnect>('audio_output_disconnect');
    return _audio_output_disconnect(
      video,
      mix_idx,
      callback,
      param,
    );
  }

  _dart_audio_output_disconnect _audio_output_disconnect;

  int audio_output_active(
    ffi.Pointer<audio_output> audio,
  ) {
    _audio_output_active ??= _dylib.lookupFunction<_c_audio_output_active,
        _dart_audio_output_active>('audio_output_active');
    return _audio_output_active(
      audio,
    );
  }

  _dart_audio_output_active _audio_output_active;

  int audio_output_get_block_size(
    ffi.Pointer<audio_output> audio,
  ) {
    _audio_output_get_block_size ??= _dylib.lookupFunction<
        _c_audio_output_get_block_size,
        _dart_audio_output_get_block_size>('audio_output_get_block_size');
    return _audio_output_get_block_size(
      audio,
    );
  }

  _dart_audio_output_get_block_size _audio_output_get_block_size;

  int audio_output_get_planes(
    ffi.Pointer<audio_output> audio,
  ) {
    _audio_output_get_planes ??= _dylib.lookupFunction<
        _c_audio_output_get_planes,
        _dart_audio_output_get_planes>('audio_output_get_planes');
    return _audio_output_get_planes(
      audio,
    );
  }

  _dart_audio_output_get_planes _audio_output_get_planes;

  int audio_output_get_channels(
    ffi.Pointer<audio_output> audio,
  ) {
    _audio_output_get_channels ??= _dylib.lookupFunction<
        _c_audio_output_get_channels,
        _dart_audio_output_get_channels>('audio_output_get_channels');
    return _audio_output_get_channels(
      audio,
    );
  }

  _dart_audio_output_get_channels _audio_output_get_channels;

  int audio_output_get_sample_rate(
    ffi.Pointer<audio_output> audio,
  ) {
    _audio_output_get_sample_rate ??= _dylib.lookupFunction<
        _c_audio_output_get_sample_rate,
        _dart_audio_output_get_sample_rate>('audio_output_get_sample_rate');
    return _audio_output_get_sample_rate(
      audio,
    );
  }

  _dart_audio_output_get_sample_rate _audio_output_get_sample_rate;

  ffi.Pointer<audio_output_info> audio_output_get_info(
    ffi.Pointer<audio_output> audio,
  ) {
    _audio_output_get_info ??= _dylib.lookupFunction<_c_audio_output_get_info,
        _dart_audio_output_get_info>('audio_output_get_info');
    return _audio_output_get_info(
      audio,
    );
  }

  _dart_audio_output_get_info _audio_output_get_info;

  int format_is_yuv(
    int format,
  ) {
    _format_is_yuv ??= _dylib
        .lookupFunction<_c_format_is_yuv, _dart_format_is_yuv>('format_is_yuv');
    return _format_is_yuv(
      format,
    );
  }

  _dart_format_is_yuv _format_is_yuv;

  ffi.Pointer<ffi.Int8> get_video_format_name(
    int format,
  ) {
    _get_video_format_name ??= _dylib.lookupFunction<_c_get_video_format_name,
        _dart_get_video_format_name>('get_video_format_name');
    return _get_video_format_name(
      format,
    );
  }

  _dart_get_video_format_name _get_video_format_name;

  ffi.Pointer<ffi.Int8> get_video_colorspace_name(
    int cs,
  ) {
    _get_video_colorspace_name ??= _dylib.lookupFunction<
        _c_get_video_colorspace_name,
        _dart_get_video_colorspace_name>('get_video_colorspace_name');
    return _get_video_colorspace_name(
      cs,
    );
  }

  _dart_get_video_colorspace_name _get_video_colorspace_name;

  int resolve_video_range(
    int format,
    int range,
  ) {
    _resolve_video_range ??= _dylib.lookupFunction<_c_resolve_video_range,
        _dart_resolve_video_range>('resolve_video_range');
    return _resolve_video_range(
      format,
      range,
    );
  }

  _dart_resolve_video_range _resolve_video_range;

  ffi.Pointer<ffi.Int8> get_video_range_name(
    int format,
    int range,
  ) {
    _get_video_range_name ??= _dylib.lookupFunction<_c_get_video_range_name,
        _dart_get_video_range_name>('get_video_range_name');
    return _get_video_range_name(
      format,
      range,
    );
  }

  _dart_get_video_range_name _get_video_range_name;

  int video_format_from_fourcc(
    int fourcc,
  ) {
    _video_format_from_fourcc ??= _dylib.lookupFunction<
        _c_video_format_from_fourcc,
        _dart_video_format_from_fourcc>('video_format_from_fourcc');
    return _video_format_from_fourcc(
      fourcc,
    );
  }

  _dart_video_format_from_fourcc _video_format_from_fourcc;

  int video_format_get_parameters(
    int color_space,
    int range,
    ffi.Pointer<ffi.Float> matrix,
    ffi.Pointer<ffi.Float> min_range,
    ffi.Pointer<ffi.Float> max_range,
  ) {
    _video_format_get_parameters ??= _dylib.lookupFunction<
        _c_video_format_get_parameters,
        _dart_video_format_get_parameters>('video_format_get_parameters');
    return _video_format_get_parameters(
      color_space,
      range,
      matrix,
      min_range,
      max_range,
    );
  }

  _dart_video_format_get_parameters _video_format_get_parameters;

  int video_output_open(
    ffi.Pointer<ffi.Pointer<video_output>> video,
    ffi.Pointer<video_output_info> info,
  ) {
    _video_output_open ??=
        _dylib.lookupFunction<_c_video_output_open, _dart_video_output_open>(
            'video_output_open');
    return _video_output_open(
      video,
      info,
    );
  }

  _dart_video_output_open _video_output_open;

  void video_output_close(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_close ??=
        _dylib.lookupFunction<_c_video_output_close, _dart_video_output_close>(
            'video_output_close');
    return _video_output_close(
      video,
    );
  }

  _dart_video_output_close _video_output_close;

  int video_output_connect(
    ffi.Pointer<video_output> video,
    ffi.Pointer<video_scale_info> conversion,
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _video_output_connect ??= _dylib.lookupFunction<_c_video_output_connect,
        _dart_video_output_connect>('video_output_connect');
    return _video_output_connect(
      video,
      conversion,
      callback,
      param,
    );
  }

  _dart_video_output_connect _video_output_connect;

  void video_output_disconnect(
    ffi.Pointer<video_output> video,
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _video_output_disconnect ??= _dylib.lookupFunction<
        _c_video_output_disconnect,
        _dart_video_output_disconnect>('video_output_disconnect');
    return _video_output_disconnect(
      video,
      callback,
      param,
    );
  }

  _dart_video_output_disconnect _video_output_disconnect;

  int video_output_active(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_active ??= _dylib.lookupFunction<_c_video_output_active,
        _dart_video_output_active>('video_output_active');
    return _video_output_active(
      video,
    );
  }

  _dart_video_output_active _video_output_active;

  ffi.Pointer<video_output_info> video_output_get_info(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_get_info ??= _dylib.lookupFunction<_c_video_output_get_info,
        _dart_video_output_get_info>('video_output_get_info');
    return _video_output_get_info(
      video,
    );
  }

  _dart_video_output_get_info _video_output_get_info;

  int video_output_lock_frame(
    ffi.Pointer<video_output> video,
    ffi.Pointer<video_frame> frame,
    int count,
    int timestamp,
  ) {
    _video_output_lock_frame ??= _dylib.lookupFunction<
        _c_video_output_lock_frame,
        _dart_video_output_lock_frame>('video_output_lock_frame');
    return _video_output_lock_frame(
      video,
      frame,
      count,
      timestamp,
    );
  }

  _dart_video_output_lock_frame _video_output_lock_frame;

  void video_output_unlock_frame(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_unlock_frame ??= _dylib.lookupFunction<
        _c_video_output_unlock_frame,
        _dart_video_output_unlock_frame>('video_output_unlock_frame');
    return _video_output_unlock_frame(
      video,
    );
  }

  _dart_video_output_unlock_frame _video_output_unlock_frame;

  int video_output_get_frame_time(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_get_frame_time ??= _dylib.lookupFunction<
        _c_video_output_get_frame_time,
        _dart_video_output_get_frame_time>('video_output_get_frame_time');
    return _video_output_get_frame_time(
      video,
    );
  }

  _dart_video_output_get_frame_time _video_output_get_frame_time;

  void video_output_stop(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_stop ??=
        _dylib.lookupFunction<_c_video_output_stop, _dart_video_output_stop>(
            'video_output_stop');
    return _video_output_stop(
      video,
    );
  }

  _dart_video_output_stop _video_output_stop;

  int video_output_stopped(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_stopped ??= _dylib.lookupFunction<_c_video_output_stopped,
        _dart_video_output_stopped>('video_output_stopped');
    return _video_output_stopped(
      video,
    );
  }

  _dart_video_output_stopped _video_output_stopped;

  int video_output_get_format(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_get_format ??= _dylib.lookupFunction<
        _c_video_output_get_format,
        _dart_video_output_get_format>('video_output_get_format');
    return _video_output_get_format(
      video,
    );
  }

  _dart_video_output_get_format _video_output_get_format;

  int video_output_get_width(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_get_width ??= _dylib.lookupFunction<_c_video_output_get_width,
        _dart_video_output_get_width>('video_output_get_width');
    return _video_output_get_width(
      video,
    );
  }

  _dart_video_output_get_width _video_output_get_width;

  int video_output_get_height(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_get_height ??= _dylib.lookupFunction<
        _c_video_output_get_height,
        _dart_video_output_get_height>('video_output_get_height');
    return _video_output_get_height(
      video,
    );
  }

  _dart_video_output_get_height _video_output_get_height;

  double video_output_get_frame_rate(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_get_frame_rate ??= _dylib.lookupFunction<
        _c_video_output_get_frame_rate,
        _dart_video_output_get_frame_rate>('video_output_get_frame_rate');
    return _video_output_get_frame_rate(
      video,
    );
  }

  _dart_video_output_get_frame_rate _video_output_get_frame_rate;

  int video_output_get_skipped_frames(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_get_skipped_frames ??= _dylib.lookupFunction<
            _c_video_output_get_skipped_frames,
            _dart_video_output_get_skipped_frames>(
        'video_output_get_skipped_frames');
    return _video_output_get_skipped_frames(
      video,
    );
  }

  _dart_video_output_get_skipped_frames _video_output_get_skipped_frames;

  int video_output_get_total_frames(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_get_total_frames ??= _dylib.lookupFunction<
        _c_video_output_get_total_frames,
        _dart_video_output_get_total_frames>('video_output_get_total_frames');
    return _video_output_get_total_frames(
      video,
    );
  }

  _dart_video_output_get_total_frames _video_output_get_total_frames;

  void video_output_inc_texture_encoders(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_inc_texture_encoders ??= _dylib.lookupFunction<
            _c_video_output_inc_texture_encoders,
            _dart_video_output_inc_texture_encoders>(
        'video_output_inc_texture_encoders');
    return _video_output_inc_texture_encoders(
      video,
    );
  }

  _dart_video_output_inc_texture_encoders _video_output_inc_texture_encoders;

  void video_output_dec_texture_encoders(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_dec_texture_encoders ??= _dylib.lookupFunction<
            _c_video_output_dec_texture_encoders,
            _dart_video_output_dec_texture_encoders>(
        'video_output_dec_texture_encoders');
    return _video_output_dec_texture_encoders(
      video,
    );
  }

  _dart_video_output_dec_texture_encoders _video_output_dec_texture_encoders;

  void video_output_inc_texture_frames(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_inc_texture_frames ??= _dylib.lookupFunction<
            _c_video_output_inc_texture_frames,
            _dart_video_output_inc_texture_frames>(
        'video_output_inc_texture_frames');
    return _video_output_inc_texture_frames(
      video,
    );
  }

  _dart_video_output_inc_texture_frames _video_output_inc_texture_frames;

  void video_output_inc_texture_skipped_frames(
    ffi.Pointer<video_output> video,
  ) {
    _video_output_inc_texture_skipped_frames ??= _dylib.lookupFunction<
            _c_video_output_inc_texture_skipped_frames,
            _dart_video_output_inc_texture_skipped_frames>(
        'video_output_inc_texture_skipped_frames');
    return _video_output_inc_texture_skipped_frames(
      video,
    );
  }

  _dart_video_output_inc_texture_skipped_frames
      _video_output_inc_texture_skipped_frames;

  ffi.Pointer<signal_handler> signal_handler_create() {
    _signal_handler_create ??= _dylib.lookupFunction<_c_signal_handler_create,
        _dart_signal_handler_create>('signal_handler_create');
    return _signal_handler_create();
  }

  _dart_signal_handler_create _signal_handler_create;

  void signal_handler_destroy(
    ffi.Pointer<signal_handler> handler,
  ) {
    _signal_handler_destroy ??= _dylib.lookupFunction<_c_signal_handler_destroy,
        _dart_signal_handler_destroy>('signal_handler_destroy');
    return _signal_handler_destroy(
      handler,
    );
  }

  _dart_signal_handler_destroy _signal_handler_destroy;

  int signal_handler_add(
    ffi.Pointer<signal_handler> handler,
    ffi.Pointer<ffi.Int8> signal_decl,
  ) {
    _signal_handler_add ??=
        _dylib.lookupFunction<_c_signal_handler_add, _dart_signal_handler_add>(
            'signal_handler_add');
    return _signal_handler_add(
      handler,
      signal_decl,
    );
  }

  _dart_signal_handler_add _signal_handler_add;

  int signal_handler_add_array(
    ffi.Pointer<signal_handler> handler,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> signal_decls,
  ) {
    _signal_handler_add_array ??= _dylib.lookupFunction<
        _c_signal_handler_add_array,
        _dart_signal_handler_add_array>('signal_handler_add_array');
    return _signal_handler_add_array(
      handler,
      signal_decls,
    );
  }

  _dart_signal_handler_add_array _signal_handler_add_array;

  void signal_handler_connect(
    ffi.Pointer<signal_handler> handler,
    ffi.Pointer<ffi.Int8> signal,
    ffi.Pointer<ffi.NativeFunction<signal_callback_t>> callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    _signal_handler_connect ??= _dylib.lookupFunction<_c_signal_handler_connect,
        _dart_signal_handler_connect>('signal_handler_connect');
    return _signal_handler_connect(
      handler,
      signal,
      callback,
      data,
    );
  }

  _dart_signal_handler_connect _signal_handler_connect;

  void signal_handler_connect_ref(
    ffi.Pointer<signal_handler> handler,
    ffi.Pointer<ffi.Int8> signal,
    ffi.Pointer<ffi.NativeFunction<signal_callback_t>> callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    _signal_handler_connect_ref ??= _dylib.lookupFunction<
        _c_signal_handler_connect_ref,
        _dart_signal_handler_connect_ref>('signal_handler_connect_ref');
    return _signal_handler_connect_ref(
      handler,
      signal,
      callback,
      data,
    );
  }

  _dart_signal_handler_connect_ref _signal_handler_connect_ref;

  void signal_handler_disconnect(
    ffi.Pointer<signal_handler> handler,
    ffi.Pointer<ffi.Int8> signal,
    ffi.Pointer<ffi.NativeFunction<signal_callback_t>> callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    _signal_handler_disconnect ??= _dylib.lookupFunction<
        _c_signal_handler_disconnect,
        _dart_signal_handler_disconnect>('signal_handler_disconnect');
    return _signal_handler_disconnect(
      handler,
      signal,
      callback,
      data,
    );
  }

  _dart_signal_handler_disconnect _signal_handler_disconnect;

  void signal_handler_connect_global(
    ffi.Pointer<signal_handler> handler,
    ffi.Pointer<ffi.NativeFunction<global_signal_callback_t>> callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    _signal_handler_connect_global ??= _dylib.lookupFunction<
        _c_signal_handler_connect_global,
        _dart_signal_handler_connect_global>('signal_handler_connect_global');
    return _signal_handler_connect_global(
      handler,
      callback,
      data,
    );
  }

  _dart_signal_handler_connect_global _signal_handler_connect_global;

  void signal_handler_disconnect_global(
    ffi.Pointer<signal_handler> handler,
    ffi.Pointer<ffi.NativeFunction<global_signal_callback_t>> callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    _signal_handler_disconnect_global ??= _dylib.lookupFunction<
            _c_signal_handler_disconnect_global,
            _dart_signal_handler_disconnect_global>(
        'signal_handler_disconnect_global');
    return _signal_handler_disconnect_global(
      handler,
      callback,
      data,
    );
  }

  _dart_signal_handler_disconnect_global _signal_handler_disconnect_global;

  void signal_handler_remove_current() {
    _signal_handler_remove_current ??= _dylib.lookupFunction<
        _c_signal_handler_remove_current,
        _dart_signal_handler_remove_current>('signal_handler_remove_current');
    return _signal_handler_remove_current();
  }

  _dart_signal_handler_remove_current _signal_handler_remove_current;

  void signal_handler_signal(
    ffi.Pointer<signal_handler> handler,
    ffi.Pointer<ffi.Int8> signal,
    ffi.Pointer<calldata_t> params,
  ) {
    _signal_handler_signal ??= _dylib.lookupFunction<_c_signal_handler_signal,
        _dart_signal_handler_signal>('signal_handler_signal');
    return _signal_handler_signal(
      handler,
      signal,
      params,
    );
  }

  _dart_signal_handler_signal _signal_handler_signal;

  ffi.Pointer<proc_handler> proc_handler_create() {
    _proc_handler_create ??= _dylib.lookupFunction<_c_proc_handler_create,
        _dart_proc_handler_create>('proc_handler_create');
    return _proc_handler_create();
  }

  _dart_proc_handler_create _proc_handler_create;

  void proc_handler_destroy(
    ffi.Pointer<proc_handler> handler,
  ) {
    _proc_handler_destroy ??= _dylib.lookupFunction<_c_proc_handler_destroy,
        _dart_proc_handler_destroy>('proc_handler_destroy');
    return _proc_handler_destroy(
      handler,
    );
  }

  _dart_proc_handler_destroy _proc_handler_destroy;

  void proc_handler_add(
    ffi.Pointer<proc_handler> handler,
    ffi.Pointer<ffi.Int8> decl_string,
    ffi.Pointer<ffi.NativeFunction<proc_handler_proc_t>> proc,
    ffi.Pointer<ffi.Void> data,
  ) {
    _proc_handler_add ??=
        _dylib.lookupFunction<_c_proc_handler_add, _dart_proc_handler_add>(
            'proc_handler_add');
    return _proc_handler_add(
      handler,
      decl_string,
      proc,
      data,
    );
  }

  _dart_proc_handler_add _proc_handler_add;

  /// Calls a function in a procedure handler.  Returns false if the named
  /// procedure is not found.
  int proc_handler_call(
    ffi.Pointer<proc_handler> handler,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<calldata_t> params,
  ) {
    _proc_handler_call ??=
        _dylib.lookupFunction<_c_proc_handler_call, _dart_proc_handler_call>(
            'proc_handler_call');
    return _proc_handler_call(
      handler,
      name,
      params,
    );
  }

  _dart_proc_handler_call _proc_handler_call;

  ffi.Pointer<obs_data> obs_data_create() {
    _obs_data_create ??=
        _dylib.lookupFunction<_c_obs_data_create, _dart_obs_data_create>(
            'obs_data_create');
    return _obs_data_create();
  }

  _dart_obs_data_create _obs_data_create;

  ffi.Pointer<obs_data> obs_data_create_from_json(
    ffi.Pointer<ffi.Int8> json_string,
  ) {
    _obs_data_create_from_json ??= _dylib.lookupFunction<
        _c_obs_data_create_from_json,
        _dart_obs_data_create_from_json>('obs_data_create_from_json');
    return _obs_data_create_from_json(
      json_string,
    );
  }

  _dart_obs_data_create_from_json _obs_data_create_from_json;

  ffi.Pointer<obs_data> obs_data_create_from_json_file(
    ffi.Pointer<ffi.Int8> json_file,
  ) {
    _obs_data_create_from_json_file ??= _dylib.lookupFunction<
        _c_obs_data_create_from_json_file,
        _dart_obs_data_create_from_json_file>('obs_data_create_from_json_file');
    return _obs_data_create_from_json_file(
      json_file,
    );
  }

  _dart_obs_data_create_from_json_file _obs_data_create_from_json_file;

  ffi.Pointer<obs_data> obs_data_create_from_json_file_safe(
    ffi.Pointer<ffi.Int8> json_file,
    ffi.Pointer<ffi.Int8> backup_ext,
  ) {
    _obs_data_create_from_json_file_safe ??= _dylib.lookupFunction<
            _c_obs_data_create_from_json_file_safe,
            _dart_obs_data_create_from_json_file_safe>(
        'obs_data_create_from_json_file_safe');
    return _obs_data_create_from_json_file_safe(
      json_file,
      backup_ext,
    );
  }

  _dart_obs_data_create_from_json_file_safe
      _obs_data_create_from_json_file_safe;

  void obs_data_addref(
    ffi.Pointer<obs_data> data,
  ) {
    _obs_data_addref ??=
        _dylib.lookupFunction<_c_obs_data_addref, _dart_obs_data_addref>(
            'obs_data_addref');
    return _obs_data_addref(
      data,
    );
  }

  _dart_obs_data_addref _obs_data_addref;

  void obs_data_release(
    ffi.Pointer<obs_data> data,
  ) {
    _obs_data_release ??=
        _dylib.lookupFunction<_c_obs_data_release, _dart_obs_data_release>(
            'obs_data_release');
    return _obs_data_release(
      data,
    );
  }

  _dart_obs_data_release _obs_data_release;

  ffi.Pointer<ffi.Int8> obs_data_get_json(
    ffi.Pointer<obs_data> data,
  ) {
    _obs_data_get_json ??=
        _dylib.lookupFunction<_c_obs_data_get_json, _dart_obs_data_get_json>(
            'obs_data_get_json');
    return _obs_data_get_json(
      data,
    );
  }

  _dart_obs_data_get_json _obs_data_get_json;

  int obs_data_save_json(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> file,
  ) {
    _obs_data_save_json ??=
        _dylib.lookupFunction<_c_obs_data_save_json, _dart_obs_data_save_json>(
            'obs_data_save_json');
    return _obs_data_save_json(
      data,
      file,
    );
  }

  _dart_obs_data_save_json _obs_data_save_json;

  int obs_data_save_json_safe(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> temp_ext,
    ffi.Pointer<ffi.Int8> backup_ext,
  ) {
    _obs_data_save_json_safe ??= _dylib.lookupFunction<
        _c_obs_data_save_json_safe,
        _dart_obs_data_save_json_safe>('obs_data_save_json_safe');
    return _obs_data_save_json_safe(
      data,
      file,
      temp_ext,
      backup_ext,
    );
  }

  _dart_obs_data_save_json_safe _obs_data_save_json_safe;

  void obs_data_apply(
    ffi.Pointer<obs_data> target,
    ffi.Pointer<obs_data> apply_data,
  ) {
    _obs_data_apply ??=
        _dylib.lookupFunction<_c_obs_data_apply, _dart_obs_data_apply>(
            'obs_data_apply');
    return _obs_data_apply(
      target,
      apply_data,
    );
  }

  _dart_obs_data_apply _obs_data_apply;

  void obs_data_erase(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_erase ??=
        _dylib.lookupFunction<_c_obs_data_erase, _dart_obs_data_erase>(
            'obs_data_erase');
    return _obs_data_erase(
      data,
      name,
    );
  }

  _dart_obs_data_erase _obs_data_erase;

  void obs_data_clear(
    ffi.Pointer<obs_data> data,
  ) {
    _obs_data_clear ??=
        _dylib.lookupFunction<_c_obs_data_clear, _dart_obs_data_clear>(
            'obs_data_clear');
    return _obs_data_clear(
      data,
    );
  }

  _dart_obs_data_clear _obs_data_clear;

  void obs_data_set_string(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    _obs_data_set_string ??= _dylib.lookupFunction<_c_obs_data_set_string,
        _dart_obs_data_set_string>('obs_data_set_string');
    return _obs_data_set_string(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_string _obs_data_set_string;

  void obs_data_set_int(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    _obs_data_set_int ??=
        _dylib.lookupFunction<_c_obs_data_set_int, _dart_obs_data_set_int>(
            'obs_data_set_int');
    return _obs_data_set_int(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_int _obs_data_set_int;

  void obs_data_set_double(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    _obs_data_set_double ??= _dylib.lookupFunction<_c_obs_data_set_double,
        _dart_obs_data_set_double>('obs_data_set_double');
    return _obs_data_set_double(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_double _obs_data_set_double;

  void obs_data_set_bool(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    _obs_data_set_bool ??=
        _dylib.lookupFunction<_c_obs_data_set_bool, _dart_obs_data_set_bool>(
            'obs_data_set_bool');
    return _obs_data_set_bool(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_bool _obs_data_set_bool;

  void obs_data_set_obj(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> obj,
  ) {
    _obs_data_set_obj ??=
        _dylib.lookupFunction<_c_obs_data_set_obj, _dart_obs_data_set_obj>(
            'obs_data_set_obj');
    return _obs_data_set_obj(
      data,
      name,
      obj,
    );
  }

  _dart_obs_data_set_obj _obs_data_set_obj;

  void obs_data_set_array(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_array> array,
  ) {
    _obs_data_set_array ??=
        _dylib.lookupFunction<_c_obs_data_set_array, _dart_obs_data_set_array>(
            'obs_data_set_array');
    return _obs_data_set_array(
      data,
      name,
      array,
    );
  }

  _dart_obs_data_set_array _obs_data_set_array;

  void obs_data_set_default_string(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    _obs_data_set_default_string ??= _dylib.lookupFunction<
        _c_obs_data_set_default_string,
        _dart_obs_data_set_default_string>('obs_data_set_default_string');
    return _obs_data_set_default_string(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_default_string _obs_data_set_default_string;

  void obs_data_set_default_int(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    _obs_data_set_default_int ??= _dylib.lookupFunction<
        _c_obs_data_set_default_int,
        _dart_obs_data_set_default_int>('obs_data_set_default_int');
    return _obs_data_set_default_int(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_default_int _obs_data_set_default_int;

  void obs_data_set_default_double(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    _obs_data_set_default_double ??= _dylib.lookupFunction<
        _c_obs_data_set_default_double,
        _dart_obs_data_set_default_double>('obs_data_set_default_double');
    return _obs_data_set_default_double(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_default_double _obs_data_set_default_double;

  void obs_data_set_default_bool(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    _obs_data_set_default_bool ??= _dylib.lookupFunction<
        _c_obs_data_set_default_bool,
        _dart_obs_data_set_default_bool>('obs_data_set_default_bool');
    return _obs_data_set_default_bool(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_default_bool _obs_data_set_default_bool;

  void obs_data_set_default_obj(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> obj,
  ) {
    _obs_data_set_default_obj ??= _dylib.lookupFunction<
        _c_obs_data_set_default_obj,
        _dart_obs_data_set_default_obj>('obs_data_set_default_obj');
    return _obs_data_set_default_obj(
      data,
      name,
      obj,
    );
  }

  _dart_obs_data_set_default_obj _obs_data_set_default_obj;

  void obs_data_set_autoselect_string(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    _obs_data_set_autoselect_string ??= _dylib.lookupFunction<
        _c_obs_data_set_autoselect_string,
        _dart_obs_data_set_autoselect_string>('obs_data_set_autoselect_string');
    return _obs_data_set_autoselect_string(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_autoselect_string _obs_data_set_autoselect_string;

  void obs_data_set_autoselect_int(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    _obs_data_set_autoselect_int ??= _dylib.lookupFunction<
        _c_obs_data_set_autoselect_int,
        _dart_obs_data_set_autoselect_int>('obs_data_set_autoselect_int');
    return _obs_data_set_autoselect_int(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_autoselect_int _obs_data_set_autoselect_int;

  void obs_data_set_autoselect_double(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    _obs_data_set_autoselect_double ??= _dylib.lookupFunction<
        _c_obs_data_set_autoselect_double,
        _dart_obs_data_set_autoselect_double>('obs_data_set_autoselect_double');
    return _obs_data_set_autoselect_double(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_autoselect_double _obs_data_set_autoselect_double;

  void obs_data_set_autoselect_bool(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    _obs_data_set_autoselect_bool ??= _dylib.lookupFunction<
        _c_obs_data_set_autoselect_bool,
        _dart_obs_data_set_autoselect_bool>('obs_data_set_autoselect_bool');
    return _obs_data_set_autoselect_bool(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_autoselect_bool _obs_data_set_autoselect_bool;

  void obs_data_set_autoselect_obj(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> obj,
  ) {
    _obs_data_set_autoselect_obj ??= _dylib.lookupFunction<
        _c_obs_data_set_autoselect_obj,
        _dart_obs_data_set_autoselect_obj>('obs_data_set_autoselect_obj');
    return _obs_data_set_autoselect_obj(
      data,
      name,
      obj,
    );
  }

  _dart_obs_data_set_autoselect_obj _obs_data_set_autoselect_obj;

  ffi.Pointer<ffi.Int8> obs_data_get_string(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_string ??= _dylib.lookupFunction<_c_obs_data_get_string,
        _dart_obs_data_get_string>('obs_data_get_string');
    return _obs_data_get_string(
      data,
      name,
    );
  }

  _dart_obs_data_get_string _obs_data_get_string;

  int obs_data_get_int(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_int ??=
        _dylib.lookupFunction<_c_obs_data_get_int, _dart_obs_data_get_int>(
            'obs_data_get_int');
    return _obs_data_get_int(
      data,
      name,
    );
  }

  _dart_obs_data_get_int _obs_data_get_int;

  double obs_data_get_double(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_double ??= _dylib.lookupFunction<_c_obs_data_get_double,
        _dart_obs_data_get_double>('obs_data_get_double');
    return _obs_data_get_double(
      data,
      name,
    );
  }

  _dart_obs_data_get_double _obs_data_get_double;

  int obs_data_get_bool(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_bool ??=
        _dylib.lookupFunction<_c_obs_data_get_bool, _dart_obs_data_get_bool>(
            'obs_data_get_bool');
    return _obs_data_get_bool(
      data,
      name,
    );
  }

  _dart_obs_data_get_bool _obs_data_get_bool;

  ffi.Pointer<obs_data> obs_data_get_obj(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_obj ??=
        _dylib.lookupFunction<_c_obs_data_get_obj, _dart_obs_data_get_obj>(
            'obs_data_get_obj');
    return _obs_data_get_obj(
      data,
      name,
    );
  }

  _dart_obs_data_get_obj _obs_data_get_obj;

  ffi.Pointer<obs_data_array> obs_data_get_array(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_array ??=
        _dylib.lookupFunction<_c_obs_data_get_array, _dart_obs_data_get_array>(
            'obs_data_get_array');
    return _obs_data_get_array(
      data,
      name,
    );
  }

  _dart_obs_data_get_array _obs_data_get_array;

  ffi.Pointer<ffi.Int8> obs_data_get_default_string(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_default_string ??= _dylib.lookupFunction<
        _c_obs_data_get_default_string,
        _dart_obs_data_get_default_string>('obs_data_get_default_string');
    return _obs_data_get_default_string(
      data,
      name,
    );
  }

  _dart_obs_data_get_default_string _obs_data_get_default_string;

  int obs_data_get_default_int(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_default_int ??= _dylib.lookupFunction<
        _c_obs_data_get_default_int,
        _dart_obs_data_get_default_int>('obs_data_get_default_int');
    return _obs_data_get_default_int(
      data,
      name,
    );
  }

  _dart_obs_data_get_default_int _obs_data_get_default_int;

  double obs_data_get_default_double(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_default_double ??= _dylib.lookupFunction<
        _c_obs_data_get_default_double,
        _dart_obs_data_get_default_double>('obs_data_get_default_double');
    return _obs_data_get_default_double(
      data,
      name,
    );
  }

  _dart_obs_data_get_default_double _obs_data_get_default_double;

  int obs_data_get_default_bool(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_default_bool ??= _dylib.lookupFunction<
        _c_obs_data_get_default_bool,
        _dart_obs_data_get_default_bool>('obs_data_get_default_bool');
    return _obs_data_get_default_bool(
      data,
      name,
    );
  }

  _dart_obs_data_get_default_bool _obs_data_get_default_bool;

  ffi.Pointer<obs_data> obs_data_get_default_obj(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_default_obj ??= _dylib.lookupFunction<
        _c_obs_data_get_default_obj,
        _dart_obs_data_get_default_obj>('obs_data_get_default_obj');
    return _obs_data_get_default_obj(
      data,
      name,
    );
  }

  _dart_obs_data_get_default_obj _obs_data_get_default_obj;

  ffi.Pointer<obs_data_array> obs_data_get_default_array(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_default_array ??= _dylib.lookupFunction<
        _c_obs_data_get_default_array,
        _dart_obs_data_get_default_array>('obs_data_get_default_array');
    return _obs_data_get_default_array(
      data,
      name,
    );
  }

  _dart_obs_data_get_default_array _obs_data_get_default_array;

  ffi.Pointer<ffi.Int8> obs_data_get_autoselect_string(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_autoselect_string ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_string,
        _dart_obs_data_get_autoselect_string>('obs_data_get_autoselect_string');
    return _obs_data_get_autoselect_string(
      data,
      name,
    );
  }

  _dart_obs_data_get_autoselect_string _obs_data_get_autoselect_string;

  int obs_data_get_autoselect_int(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_autoselect_int ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_int,
        _dart_obs_data_get_autoselect_int>('obs_data_get_autoselect_int');
    return _obs_data_get_autoselect_int(
      data,
      name,
    );
  }

  _dart_obs_data_get_autoselect_int _obs_data_get_autoselect_int;

  double obs_data_get_autoselect_double(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_autoselect_double ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_double,
        _dart_obs_data_get_autoselect_double>('obs_data_get_autoselect_double');
    return _obs_data_get_autoselect_double(
      data,
      name,
    );
  }

  _dart_obs_data_get_autoselect_double _obs_data_get_autoselect_double;

  int obs_data_get_autoselect_bool(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_autoselect_bool ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_bool,
        _dart_obs_data_get_autoselect_bool>('obs_data_get_autoselect_bool');
    return _obs_data_get_autoselect_bool(
      data,
      name,
    );
  }

  _dart_obs_data_get_autoselect_bool _obs_data_get_autoselect_bool;

  ffi.Pointer<obs_data> obs_data_get_autoselect_obj(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_autoselect_obj ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_obj,
        _dart_obs_data_get_autoselect_obj>('obs_data_get_autoselect_obj');
    return _obs_data_get_autoselect_obj(
      data,
      name,
    );
  }

  _dart_obs_data_get_autoselect_obj _obs_data_get_autoselect_obj;

  ffi.Pointer<obs_data_array> obs_data_get_autoselect_array(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_get_autoselect_array ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_array,
        _dart_obs_data_get_autoselect_array>('obs_data_get_autoselect_array');
    return _obs_data_get_autoselect_array(
      data,
      name,
    );
  }

  _dart_obs_data_get_autoselect_array _obs_data_get_autoselect_array;

  ffi.Pointer<obs_data_array> obs_data_array_create() {
    _obs_data_array_create ??= _dylib.lookupFunction<_c_obs_data_array_create,
        _dart_obs_data_array_create>('obs_data_array_create');
    return _obs_data_array_create();
  }

  _dart_obs_data_array_create _obs_data_array_create;

  void obs_data_array_addref(
    ffi.Pointer<obs_data_array> array,
  ) {
    _obs_data_array_addref ??= _dylib.lookupFunction<_c_obs_data_array_addref,
        _dart_obs_data_array_addref>('obs_data_array_addref');
    return _obs_data_array_addref(
      array,
    );
  }

  _dart_obs_data_array_addref _obs_data_array_addref;

  void obs_data_array_release(
    ffi.Pointer<obs_data_array> array,
  ) {
    _obs_data_array_release ??= _dylib.lookupFunction<_c_obs_data_array_release,
        _dart_obs_data_array_release>('obs_data_array_release');
    return _obs_data_array_release(
      array,
    );
  }

  _dart_obs_data_array_release _obs_data_array_release;

  int obs_data_array_count(
    ffi.Pointer<obs_data_array> array,
  ) {
    _obs_data_array_count ??= _dylib.lookupFunction<_c_obs_data_array_count,
        _dart_obs_data_array_count>('obs_data_array_count');
    return _obs_data_array_count(
      array,
    );
  }

  _dart_obs_data_array_count _obs_data_array_count;

  ffi.Pointer<obs_data> obs_data_array_item(
    ffi.Pointer<obs_data_array> array,
    int idx,
  ) {
    _obs_data_array_item ??= _dylib.lookupFunction<_c_obs_data_array_item,
        _dart_obs_data_array_item>('obs_data_array_item');
    return _obs_data_array_item(
      array,
      idx,
    );
  }

  _dart_obs_data_array_item _obs_data_array_item;

  int obs_data_array_push_back(
    ffi.Pointer<obs_data_array> array,
    ffi.Pointer<obs_data> obj,
  ) {
    _obs_data_array_push_back ??= _dylib.lookupFunction<
        _c_obs_data_array_push_back,
        _dart_obs_data_array_push_back>('obs_data_array_push_back');
    return _obs_data_array_push_back(
      array,
      obj,
    );
  }

  _dart_obs_data_array_push_back _obs_data_array_push_back;

  void obs_data_array_insert(
    ffi.Pointer<obs_data_array> array,
    int idx,
    ffi.Pointer<obs_data> obj,
  ) {
    _obs_data_array_insert ??= _dylib.lookupFunction<_c_obs_data_array_insert,
        _dart_obs_data_array_insert>('obs_data_array_insert');
    return _obs_data_array_insert(
      array,
      idx,
      obj,
    );
  }

  _dart_obs_data_array_insert _obs_data_array_insert;

  void obs_data_array_push_back_array(
    ffi.Pointer<obs_data_array> array,
    ffi.Pointer<obs_data_array> array2,
  ) {
    _obs_data_array_push_back_array ??= _dylib.lookupFunction<
        _c_obs_data_array_push_back_array,
        _dart_obs_data_array_push_back_array>('obs_data_array_push_back_array');
    return _obs_data_array_push_back_array(
      array,
      array2,
    );
  }

  _dart_obs_data_array_push_back_array _obs_data_array_push_back_array;

  void obs_data_array_erase(
    ffi.Pointer<obs_data_array> array,
    int idx,
  ) {
    _obs_data_array_erase ??= _dylib.lookupFunction<_c_obs_data_array_erase,
        _dart_obs_data_array_erase>('obs_data_array_erase');
    return _obs_data_array_erase(
      array,
      idx,
    );
  }

  _dart_obs_data_array_erase _obs_data_array_erase;

  int obs_data_has_user_value(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_has_user_value ??= _dylib.lookupFunction<
        _c_obs_data_has_user_value,
        _dart_obs_data_has_user_value>('obs_data_has_user_value');
    return _obs_data_has_user_value(
      data,
      name,
    );
  }

  _dart_obs_data_has_user_value _obs_data_has_user_value;

  int obs_data_has_default_value(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_has_default_value ??= _dylib.lookupFunction<
        _c_obs_data_has_default_value,
        _dart_obs_data_has_default_value>('obs_data_has_default_value');
    return _obs_data_has_default_value(
      data,
      name,
    );
  }

  _dart_obs_data_has_default_value _obs_data_has_default_value;

  int obs_data_has_autoselect_value(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_has_autoselect_value ??= _dylib.lookupFunction<
        _c_obs_data_has_autoselect_value,
        _dart_obs_data_has_autoselect_value>('obs_data_has_autoselect_value');
    return _obs_data_has_autoselect_value(
      data,
      name,
    );
  }

  _dart_obs_data_has_autoselect_value _obs_data_has_autoselect_value;

  int obs_data_item_has_user_value(
    ffi.Pointer<obs_data_item> data,
  ) {
    _obs_data_item_has_user_value ??= _dylib.lookupFunction<
        _c_obs_data_item_has_user_value,
        _dart_obs_data_item_has_user_value>('obs_data_item_has_user_value');
    return _obs_data_item_has_user_value(
      data,
    );
  }

  _dart_obs_data_item_has_user_value _obs_data_item_has_user_value;

  int obs_data_item_has_default_value(
    ffi.Pointer<obs_data_item> data,
  ) {
    _obs_data_item_has_default_value ??= _dylib.lookupFunction<
            _c_obs_data_item_has_default_value,
            _dart_obs_data_item_has_default_value>(
        'obs_data_item_has_default_value');
    return _obs_data_item_has_default_value(
      data,
    );
  }

  _dart_obs_data_item_has_default_value _obs_data_item_has_default_value;

  int obs_data_item_has_autoselect_value(
    ffi.Pointer<obs_data_item> data,
  ) {
    _obs_data_item_has_autoselect_value ??= _dylib.lookupFunction<
            _c_obs_data_item_has_autoselect_value,
            _dart_obs_data_item_has_autoselect_value>(
        'obs_data_item_has_autoselect_value');
    return _obs_data_item_has_autoselect_value(
      data,
    );
  }

  _dart_obs_data_item_has_autoselect_value _obs_data_item_has_autoselect_value;

  void obs_data_unset_user_value(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_unset_user_value ??= _dylib.lookupFunction<
        _c_obs_data_unset_user_value,
        _dart_obs_data_unset_user_value>('obs_data_unset_user_value');
    return _obs_data_unset_user_value(
      data,
      name,
    );
  }

  _dart_obs_data_unset_user_value _obs_data_unset_user_value;

  void obs_data_unset_default_value(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_unset_default_value ??= _dylib.lookupFunction<
        _c_obs_data_unset_default_value,
        _dart_obs_data_unset_default_value>('obs_data_unset_default_value');
    return _obs_data_unset_default_value(
      data,
      name,
    );
  }

  _dart_obs_data_unset_default_value _obs_data_unset_default_value;

  void obs_data_unset_autoselect_value(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_unset_autoselect_value ??= _dylib.lookupFunction<
            _c_obs_data_unset_autoselect_value,
            _dart_obs_data_unset_autoselect_value>(
        'obs_data_unset_autoselect_value');
    return _obs_data_unset_autoselect_value(
      data,
      name,
    );
  }

  _dart_obs_data_unset_autoselect_value _obs_data_unset_autoselect_value;

  void obs_data_item_unset_user_value(
    ffi.Pointer<obs_data_item> data,
  ) {
    _obs_data_item_unset_user_value ??= _dylib.lookupFunction<
        _c_obs_data_item_unset_user_value,
        _dart_obs_data_item_unset_user_value>('obs_data_item_unset_user_value');
    return _obs_data_item_unset_user_value(
      data,
    );
  }

  _dart_obs_data_item_unset_user_value _obs_data_item_unset_user_value;

  void obs_data_item_unset_default_value(
    ffi.Pointer<obs_data_item> data,
  ) {
    _obs_data_item_unset_default_value ??= _dylib.lookupFunction<
            _c_obs_data_item_unset_default_value,
            _dart_obs_data_item_unset_default_value>(
        'obs_data_item_unset_default_value');
    return _obs_data_item_unset_default_value(
      data,
    );
  }

  _dart_obs_data_item_unset_default_value _obs_data_item_unset_default_value;

  void obs_data_item_unset_autoselect_value(
    ffi.Pointer<obs_data_item> data,
  ) {
    _obs_data_item_unset_autoselect_value ??= _dylib.lookupFunction<
            _c_obs_data_item_unset_autoselect_value,
            _dart_obs_data_item_unset_autoselect_value>(
        'obs_data_item_unset_autoselect_value');
    return _obs_data_item_unset_autoselect_value(
      data,
    );
  }

  _dart_obs_data_item_unset_autoselect_value
      _obs_data_item_unset_autoselect_value;

  ffi.Pointer<obs_data_item> obs_data_first(
    ffi.Pointer<obs_data> data,
  ) {
    _obs_data_first ??=
        _dylib.lookupFunction<_c_obs_data_first, _dart_obs_data_first>(
            'obs_data_first');
    return _obs_data_first(
      data,
    );
  }

  _dart_obs_data_first _obs_data_first;

  ffi.Pointer<obs_data_item> obs_data_item_byname(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_data_item_byname ??= _dylib.lookupFunction<_c_obs_data_item_byname,
        _dart_obs_data_item_byname>('obs_data_item_byname');
    return _obs_data_item_byname(
      data,
      name,
    );
  }

  _dart_obs_data_item_byname _obs_data_item_byname;

  int obs_data_item_next(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ) {
    _obs_data_item_next ??=
        _dylib.lookupFunction<_c_obs_data_item_next, _dart_obs_data_item_next>(
            'obs_data_item_next');
    return _obs_data_item_next(
      item,
    );
  }

  _dart_obs_data_item_next _obs_data_item_next;

  void obs_data_item_release(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ) {
    _obs_data_item_release ??= _dylib.lookupFunction<_c_obs_data_item_release,
        _dart_obs_data_item_release>('obs_data_item_release');
    return _obs_data_item_release(
      item,
    );
  }

  _dart_obs_data_item_release _obs_data_item_release;

  void obs_data_item_remove(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ) {
    _obs_data_item_remove ??= _dylib.lookupFunction<_c_obs_data_item_remove,
        _dart_obs_data_item_remove>('obs_data_item_remove');
    return _obs_data_item_remove(
      item,
    );
  }

  _dart_obs_data_item_remove _obs_data_item_remove;

  int obs_data_item_gettype(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_gettype ??= _dylib.lookupFunction<_c_obs_data_item_gettype,
        _dart_obs_data_item_gettype>('obs_data_item_gettype');
    return _obs_data_item_gettype(
      item,
    );
  }

  _dart_obs_data_item_gettype _obs_data_item_gettype;

  int obs_data_item_numtype(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_numtype ??= _dylib.lookupFunction<_c_obs_data_item_numtype,
        _dart_obs_data_item_numtype>('obs_data_item_numtype');
    return _obs_data_item_numtype(
      item,
    );
  }

  _dart_obs_data_item_numtype _obs_data_item_numtype;

  ffi.Pointer<ffi.Int8> obs_data_item_get_name(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_name ??= _dylib.lookupFunction<_c_obs_data_item_get_name,
        _dart_obs_data_item_get_name>('obs_data_item_get_name');
    return _obs_data_item_get_name(
      item,
    );
  }

  _dart_obs_data_item_get_name _obs_data_item_get_name;

  void obs_data_item_set_string(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    ffi.Pointer<ffi.Int8> val,
  ) {
    _obs_data_item_set_string ??= _dylib.lookupFunction<
        _c_obs_data_item_set_string,
        _dart_obs_data_item_set_string>('obs_data_item_set_string');
    return _obs_data_item_set_string(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_string _obs_data_item_set_string;

  void obs_data_item_set_int(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    int val,
  ) {
    _obs_data_item_set_int ??= _dylib.lookupFunction<_c_obs_data_item_set_int,
        _dart_obs_data_item_set_int>('obs_data_item_set_int');
    return _obs_data_item_set_int(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_int _obs_data_item_set_int;

  void obs_data_item_set_double(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    double val,
  ) {
    _obs_data_item_set_double ??= _dylib.lookupFunction<
        _c_obs_data_item_set_double,
        _dart_obs_data_item_set_double>('obs_data_item_set_double');
    return _obs_data_item_set_double(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_double _obs_data_item_set_double;

  void obs_data_item_set_bool(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    int val,
  ) {
    _obs_data_item_set_bool ??= _dylib.lookupFunction<_c_obs_data_item_set_bool,
        _dart_obs_data_item_set_bool>('obs_data_item_set_bool');
    return _obs_data_item_set_bool(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_bool _obs_data_item_set_bool;

  void obs_data_item_set_obj(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    ffi.Pointer<obs_data> val,
  ) {
    _obs_data_item_set_obj ??= _dylib.lookupFunction<_c_obs_data_item_set_obj,
        _dart_obs_data_item_set_obj>('obs_data_item_set_obj');
    return _obs_data_item_set_obj(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_obj _obs_data_item_set_obj;

  void obs_data_item_set_array(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    ffi.Pointer<obs_data_array> val,
  ) {
    _obs_data_item_set_array ??= _dylib.lookupFunction<
        _c_obs_data_item_set_array,
        _dart_obs_data_item_set_array>('obs_data_item_set_array');
    return _obs_data_item_set_array(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_array _obs_data_item_set_array;

  void obs_data_item_set_default_string(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    ffi.Pointer<ffi.Int8> val,
  ) {
    _obs_data_item_set_default_string ??= _dylib.lookupFunction<
            _c_obs_data_item_set_default_string,
            _dart_obs_data_item_set_default_string>(
        'obs_data_item_set_default_string');
    return _obs_data_item_set_default_string(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_default_string _obs_data_item_set_default_string;

  void obs_data_item_set_default_int(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    int val,
  ) {
    _obs_data_item_set_default_int ??= _dylib.lookupFunction<
        _c_obs_data_item_set_default_int,
        _dart_obs_data_item_set_default_int>('obs_data_item_set_default_int');
    return _obs_data_item_set_default_int(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_default_int _obs_data_item_set_default_int;

  void obs_data_item_set_default_double(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    double val,
  ) {
    _obs_data_item_set_default_double ??= _dylib.lookupFunction<
            _c_obs_data_item_set_default_double,
            _dart_obs_data_item_set_default_double>(
        'obs_data_item_set_default_double');
    return _obs_data_item_set_default_double(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_default_double _obs_data_item_set_default_double;

  void obs_data_item_set_default_bool(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    int val,
  ) {
    _obs_data_item_set_default_bool ??= _dylib.lookupFunction<
        _c_obs_data_item_set_default_bool,
        _dart_obs_data_item_set_default_bool>('obs_data_item_set_default_bool');
    return _obs_data_item_set_default_bool(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_default_bool _obs_data_item_set_default_bool;

  void obs_data_item_set_default_obj(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    ffi.Pointer<obs_data> val,
  ) {
    _obs_data_item_set_default_obj ??= _dylib.lookupFunction<
        _c_obs_data_item_set_default_obj,
        _dart_obs_data_item_set_default_obj>('obs_data_item_set_default_obj');
    return _obs_data_item_set_default_obj(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_default_obj _obs_data_item_set_default_obj;

  void obs_data_item_set_default_array(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    ffi.Pointer<obs_data_array> val,
  ) {
    _obs_data_item_set_default_array ??= _dylib.lookupFunction<
            _c_obs_data_item_set_default_array,
            _dart_obs_data_item_set_default_array>(
        'obs_data_item_set_default_array');
    return _obs_data_item_set_default_array(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_default_array _obs_data_item_set_default_array;

  void obs_data_item_set_autoselect_string(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    ffi.Pointer<ffi.Int8> val,
  ) {
    _obs_data_item_set_autoselect_string ??= _dylib.lookupFunction<
            _c_obs_data_item_set_autoselect_string,
            _dart_obs_data_item_set_autoselect_string>(
        'obs_data_item_set_autoselect_string');
    return _obs_data_item_set_autoselect_string(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_autoselect_string
      _obs_data_item_set_autoselect_string;

  void obs_data_item_set_autoselect_int(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    int val,
  ) {
    _obs_data_item_set_autoselect_int ??= _dylib.lookupFunction<
            _c_obs_data_item_set_autoselect_int,
            _dart_obs_data_item_set_autoselect_int>(
        'obs_data_item_set_autoselect_int');
    return _obs_data_item_set_autoselect_int(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_autoselect_int _obs_data_item_set_autoselect_int;

  void obs_data_item_set_autoselect_double(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    double val,
  ) {
    _obs_data_item_set_autoselect_double ??= _dylib.lookupFunction<
            _c_obs_data_item_set_autoselect_double,
            _dart_obs_data_item_set_autoselect_double>(
        'obs_data_item_set_autoselect_double');
    return _obs_data_item_set_autoselect_double(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_autoselect_double
      _obs_data_item_set_autoselect_double;

  void obs_data_item_set_autoselect_bool(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    int val,
  ) {
    _obs_data_item_set_autoselect_bool ??= _dylib.lookupFunction<
            _c_obs_data_item_set_autoselect_bool,
            _dart_obs_data_item_set_autoselect_bool>(
        'obs_data_item_set_autoselect_bool');
    return _obs_data_item_set_autoselect_bool(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_autoselect_bool _obs_data_item_set_autoselect_bool;

  void obs_data_item_set_autoselect_obj(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    ffi.Pointer<obs_data> val,
  ) {
    _obs_data_item_set_autoselect_obj ??= _dylib.lookupFunction<
            _c_obs_data_item_set_autoselect_obj,
            _dart_obs_data_item_set_autoselect_obj>(
        'obs_data_item_set_autoselect_obj');
    return _obs_data_item_set_autoselect_obj(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_autoselect_obj _obs_data_item_set_autoselect_obj;

  void obs_data_item_set_autoselect_array(
    ffi.Pointer<ffi.Pointer<obs_data_item>> item,
    ffi.Pointer<obs_data_array> val,
  ) {
    _obs_data_item_set_autoselect_array ??= _dylib.lookupFunction<
            _c_obs_data_item_set_autoselect_array,
            _dart_obs_data_item_set_autoselect_array>(
        'obs_data_item_set_autoselect_array');
    return _obs_data_item_set_autoselect_array(
      item,
      val,
    );
  }

  _dart_obs_data_item_set_autoselect_array _obs_data_item_set_autoselect_array;

  ffi.Pointer<ffi.Int8> obs_data_item_get_string(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_string ??= _dylib.lookupFunction<
        _c_obs_data_item_get_string,
        _dart_obs_data_item_get_string>('obs_data_item_get_string');
    return _obs_data_item_get_string(
      item,
    );
  }

  _dart_obs_data_item_get_string _obs_data_item_get_string;

  int obs_data_item_get_int(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_int ??= _dylib.lookupFunction<_c_obs_data_item_get_int,
        _dart_obs_data_item_get_int>('obs_data_item_get_int');
    return _obs_data_item_get_int(
      item,
    );
  }

  _dart_obs_data_item_get_int _obs_data_item_get_int;

  double obs_data_item_get_double(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_double ??= _dylib.lookupFunction<
        _c_obs_data_item_get_double,
        _dart_obs_data_item_get_double>('obs_data_item_get_double');
    return _obs_data_item_get_double(
      item,
    );
  }

  _dart_obs_data_item_get_double _obs_data_item_get_double;

  int obs_data_item_get_bool(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_bool ??= _dylib.lookupFunction<_c_obs_data_item_get_bool,
        _dart_obs_data_item_get_bool>('obs_data_item_get_bool');
    return _obs_data_item_get_bool(
      item,
    );
  }

  _dart_obs_data_item_get_bool _obs_data_item_get_bool;

  ffi.Pointer<obs_data> obs_data_item_get_obj(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_obj ??= _dylib.lookupFunction<_c_obs_data_item_get_obj,
        _dart_obs_data_item_get_obj>('obs_data_item_get_obj');
    return _obs_data_item_get_obj(
      item,
    );
  }

  _dart_obs_data_item_get_obj _obs_data_item_get_obj;

  ffi.Pointer<obs_data_array> obs_data_item_get_array(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_array ??= _dylib.lookupFunction<
        _c_obs_data_item_get_array,
        _dart_obs_data_item_get_array>('obs_data_item_get_array');
    return _obs_data_item_get_array(
      item,
    );
  }

  _dart_obs_data_item_get_array _obs_data_item_get_array;

  ffi.Pointer<ffi.Int8> obs_data_item_get_default_string(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_default_string ??= _dylib.lookupFunction<
            _c_obs_data_item_get_default_string,
            _dart_obs_data_item_get_default_string>(
        'obs_data_item_get_default_string');
    return _obs_data_item_get_default_string(
      item,
    );
  }

  _dart_obs_data_item_get_default_string _obs_data_item_get_default_string;

  int obs_data_item_get_default_int(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_default_int ??= _dylib.lookupFunction<
        _c_obs_data_item_get_default_int,
        _dart_obs_data_item_get_default_int>('obs_data_item_get_default_int');
    return _obs_data_item_get_default_int(
      item,
    );
  }

  _dart_obs_data_item_get_default_int _obs_data_item_get_default_int;

  double obs_data_item_get_default_double(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_default_double ??= _dylib.lookupFunction<
            _c_obs_data_item_get_default_double,
            _dart_obs_data_item_get_default_double>(
        'obs_data_item_get_default_double');
    return _obs_data_item_get_default_double(
      item,
    );
  }

  _dart_obs_data_item_get_default_double _obs_data_item_get_default_double;

  int obs_data_item_get_default_bool(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_default_bool ??= _dylib.lookupFunction<
        _c_obs_data_item_get_default_bool,
        _dart_obs_data_item_get_default_bool>('obs_data_item_get_default_bool');
    return _obs_data_item_get_default_bool(
      item,
    );
  }

  _dart_obs_data_item_get_default_bool _obs_data_item_get_default_bool;

  ffi.Pointer<obs_data> obs_data_item_get_default_obj(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_default_obj ??= _dylib.lookupFunction<
        _c_obs_data_item_get_default_obj,
        _dart_obs_data_item_get_default_obj>('obs_data_item_get_default_obj');
    return _obs_data_item_get_default_obj(
      item,
    );
  }

  _dart_obs_data_item_get_default_obj _obs_data_item_get_default_obj;

  ffi.Pointer<obs_data_array> obs_data_item_get_default_array(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_default_array ??= _dylib.lookupFunction<
            _c_obs_data_item_get_default_array,
            _dart_obs_data_item_get_default_array>(
        'obs_data_item_get_default_array');
    return _obs_data_item_get_default_array(
      item,
    );
  }

  _dart_obs_data_item_get_default_array _obs_data_item_get_default_array;

  ffi.Pointer<ffi.Int8> obs_data_item_get_autoselect_string(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_autoselect_string ??= _dylib.lookupFunction<
            _c_obs_data_item_get_autoselect_string,
            _dart_obs_data_item_get_autoselect_string>(
        'obs_data_item_get_autoselect_string');
    return _obs_data_item_get_autoselect_string(
      item,
    );
  }

  _dart_obs_data_item_get_autoselect_string
      _obs_data_item_get_autoselect_string;

  int obs_data_item_get_autoselect_int(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_autoselect_int ??= _dylib.lookupFunction<
            _c_obs_data_item_get_autoselect_int,
            _dart_obs_data_item_get_autoselect_int>(
        'obs_data_item_get_autoselect_int');
    return _obs_data_item_get_autoselect_int(
      item,
    );
  }

  _dart_obs_data_item_get_autoselect_int _obs_data_item_get_autoselect_int;

  double obs_data_item_get_autoselect_double(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_autoselect_double ??= _dylib.lookupFunction<
            _c_obs_data_item_get_autoselect_double,
            _dart_obs_data_item_get_autoselect_double>(
        'obs_data_item_get_autoselect_double');
    return _obs_data_item_get_autoselect_double(
      item,
    );
  }

  _dart_obs_data_item_get_autoselect_double
      _obs_data_item_get_autoselect_double;

  int obs_data_item_get_autoselect_bool(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_autoselect_bool ??= _dylib.lookupFunction<
            _c_obs_data_item_get_autoselect_bool,
            _dart_obs_data_item_get_autoselect_bool>(
        'obs_data_item_get_autoselect_bool');
    return _obs_data_item_get_autoselect_bool(
      item,
    );
  }

  _dart_obs_data_item_get_autoselect_bool _obs_data_item_get_autoselect_bool;

  ffi.Pointer<obs_data> obs_data_item_get_autoselect_obj(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_autoselect_obj ??= _dylib.lookupFunction<
            _c_obs_data_item_get_autoselect_obj,
            _dart_obs_data_item_get_autoselect_obj>(
        'obs_data_item_get_autoselect_obj');
    return _obs_data_item_get_autoselect_obj(
      item,
    );
  }

  _dart_obs_data_item_get_autoselect_obj _obs_data_item_get_autoselect_obj;

  ffi.Pointer<obs_data_array> obs_data_item_get_autoselect_array(
    ffi.Pointer<obs_data_item> item,
  ) {
    _obs_data_item_get_autoselect_array ??= _dylib.lookupFunction<
            _c_obs_data_item_get_autoselect_array,
            _dart_obs_data_item_get_autoselect_array>(
        'obs_data_item_get_autoselect_array');
    return _obs_data_item_get_autoselect_array(
      item,
    );
  }

  _dart_obs_data_item_get_autoselect_array _obs_data_item_get_autoselect_array;

  void obs_data_set_vec2(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    _obs_data_set_vec2 ??=
        _dylib.lookupFunction<_c_obs_data_set_vec2, _dart_obs_data_set_vec2>(
            'obs_data_set_vec2');
    return _obs_data_set_vec2(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_vec2 _obs_data_set_vec2;

  void obs_data_set_vec3(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    _obs_data_set_vec3 ??=
        _dylib.lookupFunction<_c_obs_data_set_vec3, _dart_obs_data_set_vec3>(
            'obs_data_set_vec3');
    return _obs_data_set_vec3(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_vec3 _obs_data_set_vec3;

  void obs_data_set_vec4(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    _obs_data_set_vec4 ??=
        _dylib.lookupFunction<_c_obs_data_set_vec4, _dart_obs_data_set_vec4>(
            'obs_data_set_vec4');
    return _obs_data_set_vec4(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_vec4 _obs_data_set_vec4;

  void obs_data_set_quat(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    _obs_data_set_quat ??=
        _dylib.lookupFunction<_c_obs_data_set_quat, _dart_obs_data_set_quat>(
            'obs_data_set_quat');
    return _obs_data_set_quat(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_quat _obs_data_set_quat;

  void obs_data_set_default_vec2(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    _obs_data_set_default_vec2 ??= _dylib.lookupFunction<
        _c_obs_data_set_default_vec2,
        _dart_obs_data_set_default_vec2>('obs_data_set_default_vec2');
    return _obs_data_set_default_vec2(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_default_vec2 _obs_data_set_default_vec2;

  void obs_data_set_default_vec3(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    _obs_data_set_default_vec3 ??= _dylib.lookupFunction<
        _c_obs_data_set_default_vec3,
        _dart_obs_data_set_default_vec3>('obs_data_set_default_vec3');
    return _obs_data_set_default_vec3(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_default_vec3 _obs_data_set_default_vec3;

  void obs_data_set_default_vec4(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    _obs_data_set_default_vec4 ??= _dylib.lookupFunction<
        _c_obs_data_set_default_vec4,
        _dart_obs_data_set_default_vec4>('obs_data_set_default_vec4');
    return _obs_data_set_default_vec4(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_default_vec4 _obs_data_set_default_vec4;

  void obs_data_set_default_quat(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    _obs_data_set_default_quat ??= _dylib.lookupFunction<
        _c_obs_data_set_default_quat,
        _dart_obs_data_set_default_quat>('obs_data_set_default_quat');
    return _obs_data_set_default_quat(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_default_quat _obs_data_set_default_quat;

  void obs_data_set_autoselect_vec2(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    _obs_data_set_autoselect_vec2 ??= _dylib.lookupFunction<
        _c_obs_data_set_autoselect_vec2,
        _dart_obs_data_set_autoselect_vec2>('obs_data_set_autoselect_vec2');
    return _obs_data_set_autoselect_vec2(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_autoselect_vec2 _obs_data_set_autoselect_vec2;

  void obs_data_set_autoselect_vec3(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    _obs_data_set_autoselect_vec3 ??= _dylib.lookupFunction<
        _c_obs_data_set_autoselect_vec3,
        _dart_obs_data_set_autoselect_vec3>('obs_data_set_autoselect_vec3');
    return _obs_data_set_autoselect_vec3(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_autoselect_vec3 _obs_data_set_autoselect_vec3;

  void obs_data_set_autoselect_vec4(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    _obs_data_set_autoselect_vec4 ??= _dylib.lookupFunction<
        _c_obs_data_set_autoselect_vec4,
        _dart_obs_data_set_autoselect_vec4>('obs_data_set_autoselect_vec4');
    return _obs_data_set_autoselect_vec4(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_autoselect_vec4 _obs_data_set_autoselect_vec4;

  void obs_data_set_autoselect_quat(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    _obs_data_set_autoselect_quat ??= _dylib.lookupFunction<
        _c_obs_data_set_autoselect_quat,
        _dart_obs_data_set_autoselect_quat>('obs_data_set_autoselect_quat');
    return _obs_data_set_autoselect_quat(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_set_autoselect_quat _obs_data_set_autoselect_quat;

  void obs_data_get_vec2(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    _obs_data_get_vec2 ??=
        _dylib.lookupFunction<_c_obs_data_get_vec2, _dart_obs_data_get_vec2>(
            'obs_data_get_vec2');
    return _obs_data_get_vec2(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_vec2 _obs_data_get_vec2;

  void obs_data_get_vec3(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    _obs_data_get_vec3 ??=
        _dylib.lookupFunction<_c_obs_data_get_vec3, _dart_obs_data_get_vec3>(
            'obs_data_get_vec3');
    return _obs_data_get_vec3(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_vec3 _obs_data_get_vec3;

  void obs_data_get_vec4(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    _obs_data_get_vec4 ??=
        _dylib.lookupFunction<_c_obs_data_get_vec4, _dart_obs_data_get_vec4>(
            'obs_data_get_vec4');
    return _obs_data_get_vec4(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_vec4 _obs_data_get_vec4;

  void obs_data_get_quat(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    _obs_data_get_quat ??=
        _dylib.lookupFunction<_c_obs_data_get_quat, _dart_obs_data_get_quat>(
            'obs_data_get_quat');
    return _obs_data_get_quat(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_quat _obs_data_get_quat;

  void obs_data_get_default_vec2(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    _obs_data_get_default_vec2 ??= _dylib.lookupFunction<
        _c_obs_data_get_default_vec2,
        _dart_obs_data_get_default_vec2>('obs_data_get_default_vec2');
    return _obs_data_get_default_vec2(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_default_vec2 _obs_data_get_default_vec2;

  void obs_data_get_default_vec3(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    _obs_data_get_default_vec3 ??= _dylib.lookupFunction<
        _c_obs_data_get_default_vec3,
        _dart_obs_data_get_default_vec3>('obs_data_get_default_vec3');
    return _obs_data_get_default_vec3(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_default_vec3 _obs_data_get_default_vec3;

  void obs_data_get_default_vec4(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    _obs_data_get_default_vec4 ??= _dylib.lookupFunction<
        _c_obs_data_get_default_vec4,
        _dart_obs_data_get_default_vec4>('obs_data_get_default_vec4');
    return _obs_data_get_default_vec4(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_default_vec4 _obs_data_get_default_vec4;

  void obs_data_get_default_quat(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    _obs_data_get_default_quat ??= _dylib.lookupFunction<
        _c_obs_data_get_default_quat,
        _dart_obs_data_get_default_quat>('obs_data_get_default_quat');
    return _obs_data_get_default_quat(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_default_quat _obs_data_get_default_quat;

  void obs_data_get_autoselect_vec2(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec2> val,
  ) {
    _obs_data_get_autoselect_vec2 ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_vec2,
        _dart_obs_data_get_autoselect_vec2>('obs_data_get_autoselect_vec2');
    return _obs_data_get_autoselect_vec2(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_autoselect_vec2 _obs_data_get_autoselect_vec2;

  void obs_data_get_autoselect_vec3(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec3> val,
  ) {
    _obs_data_get_autoselect_vec3 ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_vec3,
        _dart_obs_data_get_autoselect_vec3>('obs_data_get_autoselect_vec3');
    return _obs_data_get_autoselect_vec3(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_autoselect_vec3 _obs_data_get_autoselect_vec3;

  void obs_data_get_autoselect_vec4(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<vec4> val,
  ) {
    _obs_data_get_autoselect_vec4 ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_vec4,
        _dart_obs_data_get_autoselect_vec4>('obs_data_get_autoselect_vec4');
    return _obs_data_get_autoselect_vec4(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_autoselect_vec4 _obs_data_get_autoselect_vec4;

  void obs_data_get_autoselect_quat(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<quat> val,
  ) {
    _obs_data_get_autoselect_quat ??= _dylib.lookupFunction<
        _c_obs_data_get_autoselect_quat,
        _dart_obs_data_get_autoselect_quat>('obs_data_get_autoselect_quat');
    return _obs_data_get_autoselect_quat(
      data,
      name,
      val,
    );
  }

  _dart_obs_data_get_autoselect_quat _obs_data_get_autoselect_quat;

  int obs_data_get_frames_per_second(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    _obs_data_get_frames_per_second ??= _dylib.lookupFunction<
        _c_obs_data_get_frames_per_second,
        _dart_obs_data_get_frames_per_second>('obs_data_get_frames_per_second');
    return _obs_data_get_frames_per_second(
      data,
      name,
      fps,
      option,
    );
  }

  _dart_obs_data_get_frames_per_second _obs_data_get_frames_per_second;

  int obs_data_get_default_frames_per_second(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    _obs_data_get_default_frames_per_second ??= _dylib.lookupFunction<
            _c_obs_data_get_default_frames_per_second,
            _dart_obs_data_get_default_frames_per_second>(
        'obs_data_get_default_frames_per_second');
    return _obs_data_get_default_frames_per_second(
      data,
      name,
      fps,
      option,
    );
  }

  _dart_obs_data_get_default_frames_per_second
      _obs_data_get_default_frames_per_second;

  int obs_data_get_autoselect_frames_per_second(
    ffi.Pointer<obs_data> data,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    _obs_data_get_autoselect_frames_per_second ??= _dylib.lookupFunction<
            _c_obs_data_get_autoselect_frames_per_second,
            _dart_obs_data_get_autoselect_frames_per_second>(
        'obs_data_get_autoselect_frames_per_second');
    return _obs_data_get_autoselect_frames_per_second(
      data,
      name,
      fps,
      option,
    );
  }

  _dart_obs_data_get_autoselect_frames_per_second
      _obs_data_get_autoselect_frames_per_second;

  int obs_data_item_get_frames_per_second(
    ffi.Pointer<obs_data_item> item,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    _obs_data_item_get_frames_per_second ??= _dylib.lookupFunction<
            _c_obs_data_item_get_frames_per_second,
            _dart_obs_data_item_get_frames_per_second>(
        'obs_data_item_get_frames_per_second');
    return _obs_data_item_get_frames_per_second(
      item,
      fps,
      option,
    );
  }

  _dart_obs_data_item_get_frames_per_second
      _obs_data_item_get_frames_per_second;

  int obs_data_item_get_default_frames_per_second(
    ffi.Pointer<obs_data_item> item,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    _obs_data_item_get_default_frames_per_second ??= _dylib.lookupFunction<
            _c_obs_data_item_get_default_frames_per_second,
            _dart_obs_data_item_get_default_frames_per_second>(
        'obs_data_item_get_default_frames_per_second');
    return _obs_data_item_get_default_frames_per_second(
      item,
      fps,
      option,
    );
  }

  _dart_obs_data_item_get_default_frames_per_second
      _obs_data_item_get_default_frames_per_second;

  int obs_data_item_get_autoselect_frames_per_second(
    ffi.Pointer<obs_data_item> item,
    ffi.Pointer<media_frames_per_second> fps,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
  ) {
    _obs_data_item_get_autoselect_frames_per_second ??= _dylib.lookupFunction<
            _c_obs_data_item_get_autoselect_frames_per_second,
            _dart_obs_data_item_get_autoselect_frames_per_second>(
        'obs_data_item_get_autoselect_frames_per_second');
    return _obs_data_item_get_autoselect_frames_per_second(
      item,
      fps,
      option,
    );
  }

  _dart_obs_data_item_get_autoselect_frames_per_second
      _obs_data_item_get_autoselect_frames_per_second;

  ffi.Pointer<obs_data> obs_data_newref(
    ffi.Pointer<obs_data> data,
  ) {
    _obs_data_newref ??=
        _dylib.lookupFunction<_c_obs_data_newref, _dart_obs_data_newref>(
            'obs_data_newref');
    return _obs_data_newref(
      data,
    );
  }

  _dart_obs_data_newref _obs_data_newref;

  /// Registers a modal UI definition to the current obs context.  This should be
  /// used in obs_module_load.
  ///
  /// @param  info  Pointer to the modal definition structure
  void obs_register_modal_ui(
    ffi.Pointer<obs_modal_ui> info,
  ) {
    _obs_register_modal_ui ??= _dylib.lookupFunction<_c_obs_register_modal_ui,
        _dart_obs_register_modal_ui>('obs_register_modal_ui');
    return _obs_register_modal_ui(
      info,
    );
  }

  _dart_obs_register_modal_ui _obs_register_modal_ui;

  /// Registers a modeless UI definition to the current obs context.  This should
  /// be used in obs_module_load.
  ///
  /// @param  info  Pointer to the modal definition structure
  void obs_register_modeless_ui(
    ffi.Pointer<obs_modeless_ui> info,
  ) {
    _obs_register_modeless_ui ??= _dylib.lookupFunction<
        _c_obs_register_modeless_ui,
        _dart_obs_register_modeless_ui>('obs_register_modeless_ui');
    return _obs_register_modeless_ui(
      info,
    );
  }

  _dart_obs_register_modeless_ui _obs_register_modeless_ui;

  /// Requests modal UI to be displayed.  Returns when user is complete.
  ///
  /// @param    name  Name of the input/output/etc type that UI was requested for
  /// @param    task  Task of the user interface (usually "config")
  /// @param  target  Desired target (i.e. "qt", "wx", "gtk3", "win32", etc)
  /// @param    data  Pointer to the obs input/output/etc
  /// @param ui_data  UI-specific data, usually a parent pointer/handle (if any)
  ///
  /// @return         OBS_UI_SUCCESS if the UI was successful,
  /// OBS_UI_CANCEL if the UI was cancelled by the user, or
  /// OBS_UI_NOTFOUND if the UI callback was not found
  int obs_exec_ui(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> task,
    ffi.Pointer<ffi.Int8> target,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> ui_data,
  ) {
    _obs_exec_ui ??=
        _dylib.lookupFunction<_c_obs_exec_ui, _dart_obs_exec_ui>('obs_exec_ui');
    return _obs_exec_ui(
      id,
      task,
      target,
      data,
      ui_data,
    );
  }

  _dart_obs_exec_ui _obs_exec_ui;

  /// Requests modeless UI to be created.  Returns immediately.
  ///
  /// @param    name  Name of the input/output/etc type that UI was requested for
  /// @param    task  Task of the user interface
  /// @param  target  Desired target (i.e. "qt", "wx", "gtk3", "win32", etc)
  /// @param    data  Pointer to the obs input/output/etc
  /// @param ui_data  UI-specific data, usually a parent pointer/handle (if any)
  ///
  /// @return         Pointer/handle to the target-specific modeless object, or
  /// NULL if not found or failed.
  ffi.Pointer<ffi.Void> obs_create_ui(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> task,
    ffi.Pointer<ffi.Int8> target,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> ui_data,
  ) {
    _obs_create_ui ??= _dylib
        .lookupFunction<_c_obs_create_ui, _dart_obs_create_ui>('obs_create_ui');
    return _obs_create_ui(
      id,
      task,
      target,
      data,
      ui_data,
    );
  }

  _dart_obs_create_ui _obs_create_ui;

  ffi.Pointer<obs_properties> obs_properties_create() {
    _obs_properties_create ??= _dylib.lookupFunction<_c_obs_properties_create,
        _dart_obs_properties_create>('obs_properties_create');
    return _obs_properties_create();
  }

  _dart_obs_properties_create _obs_properties_create;

  ffi.Pointer<obs_properties> obs_properties_create_param(
    ffi.Pointer<ffi.Void> param,
    ffi.Pointer<ffi.NativeFunction<_typedefC_13>> destroy,
  ) {
    _obs_properties_create_param ??= _dylib.lookupFunction<
        _c_obs_properties_create_param,
        _dart_obs_properties_create_param>('obs_properties_create_param');
    return _obs_properties_create_param(
      param,
      destroy,
    );
  }

  _dart_obs_properties_create_param _obs_properties_create_param;

  void obs_properties_destroy(
    ffi.Pointer<obs_properties> props,
  ) {
    _obs_properties_destroy ??= _dylib.lookupFunction<_c_obs_properties_destroy,
        _dart_obs_properties_destroy>('obs_properties_destroy');
    return _obs_properties_destroy(
      props,
    );
  }

  _dart_obs_properties_destroy _obs_properties_destroy;

  void obs_properties_set_flags(
    ffi.Pointer<obs_properties> props,
    int flags,
  ) {
    _obs_properties_set_flags ??= _dylib.lookupFunction<
        _c_obs_properties_set_flags,
        _dart_obs_properties_set_flags>('obs_properties_set_flags');
    return _obs_properties_set_flags(
      props,
      flags,
    );
  }

  _dart_obs_properties_set_flags _obs_properties_set_flags;

  int obs_properties_get_flags(
    ffi.Pointer<obs_properties> props,
  ) {
    _obs_properties_get_flags ??= _dylib.lookupFunction<
        _c_obs_properties_get_flags,
        _dart_obs_properties_get_flags>('obs_properties_get_flags');
    return _obs_properties_get_flags(
      props,
    );
  }

  _dart_obs_properties_get_flags _obs_properties_get_flags;

  void obs_properties_set_param(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Void> param,
    ffi.Pointer<ffi.NativeFunction<_typedefC_14>> destroy,
  ) {
    _obs_properties_set_param ??= _dylib.lookupFunction<
        _c_obs_properties_set_param,
        _dart_obs_properties_set_param>('obs_properties_set_param');
    return _obs_properties_set_param(
      props,
      param,
      destroy,
    );
  }

  _dart_obs_properties_set_param _obs_properties_set_param;

  ffi.Pointer<ffi.Void> obs_properties_get_param(
    ffi.Pointer<obs_properties> props,
  ) {
    _obs_properties_get_param ??= _dylib.lookupFunction<
        _c_obs_properties_get_param,
        _dart_obs_properties_get_param>('obs_properties_get_param');
    return _obs_properties_get_param(
      props,
    );
  }

  _dart_obs_properties_get_param _obs_properties_get_param;

  ffi.Pointer<obs_property> obs_properties_first(
    ffi.Pointer<obs_properties> props,
  ) {
    _obs_properties_first ??= _dylib.lookupFunction<_c_obs_properties_first,
        _dart_obs_properties_first>('obs_properties_first');
    return _obs_properties_first(
      props,
    );
  }

  _dart_obs_properties_first _obs_properties_first;

  ffi.Pointer<obs_property> obs_properties_get(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> property,
  ) {
    _obs_properties_get ??=
        _dylib.lookupFunction<_c_obs_properties_get, _dart_obs_properties_get>(
            'obs_properties_get');
    return _obs_properties_get(
      props,
      property,
    );
  }

  _dart_obs_properties_get _obs_properties_get;

  ffi.Pointer<obs_properties> obs_properties_get_parent(
    ffi.Pointer<obs_properties> props,
  ) {
    _obs_properties_get_parent ??= _dylib.lookupFunction<
        _c_obs_properties_get_parent,
        _dart_obs_properties_get_parent>('obs_properties_get_parent');
    return _obs_properties_get_parent(
      props,
    );
  }

  _dart_obs_properties_get_parent _obs_properties_get_parent;

  /// Remove a property from a properties list.
  ///
  /// Removes a property from a properties list. Only valid in either
  /// get_properties or modified_callback(2). modified_callback(2) must return
  /// true so that all UI properties are rebuilt and returning false is undefined
  /// behavior.
  ///
  /// @param props Properties to remove from.
  /// @param property Name of the property to remove.
  void obs_properties_remove_by_name(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> property,
  ) {
    _obs_properties_remove_by_name ??= _dylib.lookupFunction<
        _c_obs_properties_remove_by_name,
        _dart_obs_properties_remove_by_name>('obs_properties_remove_by_name');
    return _obs_properties_remove_by_name(
      props,
      property,
    );
  }

  _dart_obs_properties_remove_by_name _obs_properties_remove_by_name;

  /// Applies settings to the properties by calling all the necessary
  /// modification callbacks
  void obs_properties_apply_settings(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_properties_apply_settings ??= _dylib.lookupFunction<
        _c_obs_properties_apply_settings,
        _dart_obs_properties_apply_settings>('obs_properties_apply_settings');
    return _obs_properties_apply_settings(
      props,
      settings,
    );
  }

  _dart_obs_properties_apply_settings _obs_properties_apply_settings;

  ffi.Pointer<obs_property> obs_properties_add_bool(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    _obs_properties_add_bool ??= _dylib.lookupFunction<
        _c_obs_properties_add_bool,
        _dart_obs_properties_add_bool>('obs_properties_add_bool');
    return _obs_properties_add_bool(
      props,
      name,
      description,
    );
  }

  _dart_obs_properties_add_bool _obs_properties_add_bool;

  ffi.Pointer<obs_property> obs_properties_add_int(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int min,
    int max,
    int step,
  ) {
    _obs_properties_add_int ??= _dylib.lookupFunction<_c_obs_properties_add_int,
        _dart_obs_properties_add_int>('obs_properties_add_int');
    return _obs_properties_add_int(
      props,
      name,
      description,
      min,
      max,
      step,
    );
  }

  _dart_obs_properties_add_int _obs_properties_add_int;

  ffi.Pointer<obs_property> obs_properties_add_float(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    double min,
    double max,
    double step,
  ) {
    _obs_properties_add_float ??= _dylib.lookupFunction<
        _c_obs_properties_add_float,
        _dart_obs_properties_add_float>('obs_properties_add_float');
    return _obs_properties_add_float(
      props,
      name,
      description,
      min,
      max,
      step,
    );
  }

  _dart_obs_properties_add_float _obs_properties_add_float;

  ffi.Pointer<obs_property> obs_properties_add_int_slider(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int min,
    int max,
    int step,
  ) {
    _obs_properties_add_int_slider ??= _dylib.lookupFunction<
        _c_obs_properties_add_int_slider,
        _dart_obs_properties_add_int_slider>('obs_properties_add_int_slider');
    return _obs_properties_add_int_slider(
      props,
      name,
      description,
      min,
      max,
      step,
    );
  }

  _dart_obs_properties_add_int_slider _obs_properties_add_int_slider;

  ffi.Pointer<obs_property> obs_properties_add_float_slider(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    double min,
    double max,
    double step,
  ) {
    _obs_properties_add_float_slider ??= _dylib.lookupFunction<
            _c_obs_properties_add_float_slider,
            _dart_obs_properties_add_float_slider>(
        'obs_properties_add_float_slider');
    return _obs_properties_add_float_slider(
      props,
      name,
      description,
      min,
      max,
      step,
    );
  }

  _dart_obs_properties_add_float_slider _obs_properties_add_float_slider;

  ffi.Pointer<obs_property> obs_properties_add_text(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
  ) {
    _obs_properties_add_text ??= _dylib.lookupFunction<
        _c_obs_properties_add_text,
        _dart_obs_properties_add_text>('obs_properties_add_text');
    return _obs_properties_add_text(
      props,
      name,
      description,
      type,
    );
  }

  _dart_obs_properties_add_text _obs_properties_add_text;

  /// Adds a 'path' property.  Can be a directory or a file.
  ///
  /// If target is a file path, the filters should be this format, separated by
  /// double semi-colens, and extensions separated by space:
  /// "Example types 1 and 2 (*.ex1 *.ex2);;Example type 3 (*.ex3)"
  ///
  /// @param  props        Properties object
  /// @param  name         Settings name
  /// @param  description  Description (display name) of the property
  /// @param  type         Type of path (directory or file)
  /// @param  filter       If type is a file path, then describes the file filter
  /// that the user can browse.  Items are separated via
  /// double semi-colens.  If multiple file types in a
  /// filter, separate with space.
  ffi.Pointer<obs_property> obs_properties_add_path(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
    ffi.Pointer<ffi.Int8> filter,
    ffi.Pointer<ffi.Int8> default_path,
  ) {
    _obs_properties_add_path ??= _dylib.lookupFunction<
        _c_obs_properties_add_path,
        _dart_obs_properties_add_path>('obs_properties_add_path');
    return _obs_properties_add_path(
      props,
      name,
      description,
      type,
      filter,
      default_path,
    );
  }

  _dart_obs_properties_add_path _obs_properties_add_path;

  ffi.Pointer<obs_property> obs_properties_add_list(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
    int format,
  ) {
    _obs_properties_add_list ??= _dylib.lookupFunction<
        _c_obs_properties_add_list,
        _dart_obs_properties_add_list>('obs_properties_add_list');
    return _obs_properties_add_list(
      props,
      name,
      description,
      type,
      format,
    );
  }

  _dart_obs_properties_add_list _obs_properties_add_list;

  ffi.Pointer<obs_property> obs_properties_add_color(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    _obs_properties_add_color ??= _dylib.lookupFunction<
        _c_obs_properties_add_color,
        _dart_obs_properties_add_color>('obs_properties_add_color');
    return _obs_properties_add_color(
      props,
      name,
      description,
    );
  }

  _dart_obs_properties_add_color _obs_properties_add_color;

  ffi.Pointer<obs_property> obs_properties_add_button(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.NativeFunction<obs_property_clicked_t>> callback,
  ) {
    _obs_properties_add_button ??= _dylib.lookupFunction<
        _c_obs_properties_add_button,
        _dart_obs_properties_add_button>('obs_properties_add_button');
    return _obs_properties_add_button(
      props,
      name,
      text,
      callback,
    );
  }

  _dart_obs_properties_add_button _obs_properties_add_button;

  ffi.Pointer<obs_property> obs_properties_add_button2(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.NativeFunction<obs_property_clicked_t>> callback,
    ffi.Pointer<ffi.Void> priv,
  ) {
    _obs_properties_add_button2 ??= _dylib.lookupFunction<
        _c_obs_properties_add_button2,
        _dart_obs_properties_add_button2>('obs_properties_add_button2');
    return _obs_properties_add_button2(
      props,
      name,
      text,
      callback,
      priv,
    );
  }

  _dart_obs_properties_add_button2 _obs_properties_add_button2;

  /// Adds a font selection property.
  ///
  /// A font is an obs_data sub-object which contains the following items:
  /// face:   face name string
  /// style:  style name string
  /// size:   size integer
  /// flags:  font flags integer (OBS_FONT_* defined above)
  ffi.Pointer<obs_property> obs_properties_add_font(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    _obs_properties_add_font ??= _dylib.lookupFunction<
        _c_obs_properties_add_font,
        _dart_obs_properties_add_font>('obs_properties_add_font');
    return _obs_properties_add_font(
      props,
      name,
      description,
    );
  }

  _dart_obs_properties_add_font _obs_properties_add_font;

  ffi.Pointer<obs_property> obs_properties_add_editable_list(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
    ffi.Pointer<ffi.Int8> filter,
    ffi.Pointer<ffi.Int8> default_path,
  ) {
    _obs_properties_add_editable_list ??= _dylib.lookupFunction<
            _c_obs_properties_add_editable_list,
            _dart_obs_properties_add_editable_list>(
        'obs_properties_add_editable_list');
    return _obs_properties_add_editable_list(
      props,
      name,
      description,
      type,
      filter,
      default_path,
    );
  }

  _dart_obs_properties_add_editable_list _obs_properties_add_editable_list;

  ffi.Pointer<obs_property> obs_properties_add_frame_rate(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    _obs_properties_add_frame_rate ??= _dylib.lookupFunction<
        _c_obs_properties_add_frame_rate,
        _dart_obs_properties_add_frame_rate>('obs_properties_add_frame_rate');
    return _obs_properties_add_frame_rate(
      props,
      name,
      description,
    );
  }

  _dart_obs_properties_add_frame_rate _obs_properties_add_frame_rate;

  ffi.Pointer<obs_property> obs_properties_add_group(
    ffi.Pointer<obs_properties> props,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    int type,
    ffi.Pointer<obs_properties> group,
  ) {
    _obs_properties_add_group ??= _dylib.lookupFunction<
        _c_obs_properties_add_group,
        _dart_obs_properties_add_group>('obs_properties_add_group');
    return _obs_properties_add_group(
      props,
      name,
      description,
      type,
      group,
    );
  }

  _dart_obs_properties_add_group _obs_properties_add_group;

  void obs_property_set_modified_callback(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.NativeFunction<obs_property_modified_t>> modified,
  ) {
    _obs_property_set_modified_callback ??= _dylib.lookupFunction<
            _c_obs_property_set_modified_callback,
            _dart_obs_property_set_modified_callback>(
        'obs_property_set_modified_callback');
    return _obs_property_set_modified_callback(
      p,
      modified,
    );
  }

  _dart_obs_property_set_modified_callback _obs_property_set_modified_callback;

  void obs_property_set_modified_callback2(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.NativeFunction<obs_property_modified2_t>> modified,
    ffi.Pointer<ffi.Void> priv,
  ) {
    _obs_property_set_modified_callback2 ??= _dylib.lookupFunction<
            _c_obs_property_set_modified_callback2,
            _dart_obs_property_set_modified_callback2>(
        'obs_property_set_modified_callback2');
    return _obs_property_set_modified_callback2(
      p,
      modified,
      priv,
    );
  }

  _dart_obs_property_set_modified_callback2
      _obs_property_set_modified_callback2;

  int obs_property_modified(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_property_modified ??= _dylib.lookupFunction<_c_obs_property_modified,
        _dart_obs_property_modified>('obs_property_modified');
    return _obs_property_modified(
      p,
      settings,
    );
  }

  _dart_obs_property_modified _obs_property_modified;

  int obs_property_button_clicked(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.Void> obj,
  ) {
    _obs_property_button_clicked ??= _dylib.lookupFunction<
        _c_obs_property_button_clicked,
        _dart_obs_property_button_clicked>('obs_property_button_clicked');
    return _obs_property_button_clicked(
      p,
      obj,
    );
  }

  _dart_obs_property_button_clicked _obs_property_button_clicked;

  void obs_property_set_visible(
    ffi.Pointer<obs_property> p,
    int visible,
  ) {
    _obs_property_set_visible ??= _dylib.lookupFunction<
        _c_obs_property_set_visible,
        _dart_obs_property_set_visible>('obs_property_set_visible');
    return _obs_property_set_visible(
      p,
      visible,
    );
  }

  _dart_obs_property_set_visible _obs_property_set_visible;

  void obs_property_set_enabled(
    ffi.Pointer<obs_property> p,
    int enabled,
  ) {
    _obs_property_set_enabled ??= _dylib.lookupFunction<
        _c_obs_property_set_enabled,
        _dart_obs_property_set_enabled>('obs_property_set_enabled');
    return _obs_property_set_enabled(
      p,
      enabled,
    );
  }

  _dart_obs_property_set_enabled _obs_property_set_enabled;

  void obs_property_set_description(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.Int8> description,
  ) {
    _obs_property_set_description ??= _dylib.lookupFunction<
        _c_obs_property_set_description,
        _dart_obs_property_set_description>('obs_property_set_description');
    return _obs_property_set_description(
      p,
      description,
    );
  }

  _dart_obs_property_set_description _obs_property_set_description;

  void obs_property_set_long_description(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.Int8> long_description,
  ) {
    _obs_property_set_long_description ??= _dylib.lookupFunction<
            _c_obs_property_set_long_description,
            _dart_obs_property_set_long_description>(
        'obs_property_set_long_description');
    return _obs_property_set_long_description(
      p,
      long_description,
    );
  }

  _dart_obs_property_set_long_description _obs_property_set_long_description;

  ffi.Pointer<ffi.Int8> obs_property_name(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_name ??=
        _dylib.lookupFunction<_c_obs_property_name, _dart_obs_property_name>(
            'obs_property_name');
    return _obs_property_name(
      p,
    );
  }

  _dart_obs_property_name _obs_property_name;

  ffi.Pointer<ffi.Int8> obs_property_description(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_description ??= _dylib.lookupFunction<
        _c_obs_property_description,
        _dart_obs_property_description>('obs_property_description');
    return _obs_property_description(
      p,
    );
  }

  _dart_obs_property_description _obs_property_description;

  ffi.Pointer<ffi.Int8> obs_property_long_description(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_long_description ??= _dylib.lookupFunction<
        _c_obs_property_long_description,
        _dart_obs_property_long_description>('obs_property_long_description');
    return _obs_property_long_description(
      p,
    );
  }

  _dart_obs_property_long_description _obs_property_long_description;

  int obs_property_get_type(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_get_type ??= _dylib.lookupFunction<_c_obs_property_get_type,
        _dart_obs_property_get_type>('obs_property_get_type');
    return _obs_property_get_type(
      p,
    );
  }

  _dart_obs_property_get_type _obs_property_get_type;

  int obs_property_enabled(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_enabled ??= _dylib.lookupFunction<_c_obs_property_enabled,
        _dart_obs_property_enabled>('obs_property_enabled');
    return _obs_property_enabled(
      p,
    );
  }

  _dart_obs_property_enabled _obs_property_enabled;

  int obs_property_visible(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_visible ??= _dylib.lookupFunction<_c_obs_property_visible,
        _dart_obs_property_visible>('obs_property_visible');
    return _obs_property_visible(
      p,
    );
  }

  _dart_obs_property_visible _obs_property_visible;

  int obs_property_next(
    ffi.Pointer<ffi.Pointer<obs_property>> p,
  ) {
    _obs_property_next ??=
        _dylib.lookupFunction<_c_obs_property_next, _dart_obs_property_next>(
            'obs_property_next');
    return _obs_property_next(
      p,
    );
  }

  _dart_obs_property_next _obs_property_next;

  int obs_property_int_min(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_int_min ??= _dylib.lookupFunction<_c_obs_property_int_min,
        _dart_obs_property_int_min>('obs_property_int_min');
    return _obs_property_int_min(
      p,
    );
  }

  _dart_obs_property_int_min _obs_property_int_min;

  int obs_property_int_max(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_int_max ??= _dylib.lookupFunction<_c_obs_property_int_max,
        _dart_obs_property_int_max>('obs_property_int_max');
    return _obs_property_int_max(
      p,
    );
  }

  _dart_obs_property_int_max _obs_property_int_max;

  int obs_property_int_step(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_int_step ??= _dylib.lookupFunction<_c_obs_property_int_step,
        _dart_obs_property_int_step>('obs_property_int_step');
    return _obs_property_int_step(
      p,
    );
  }

  _dart_obs_property_int_step _obs_property_int_step;

  int obs_property_int_type(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_int_type ??= _dylib.lookupFunction<_c_obs_property_int_type,
        _dart_obs_property_int_type>('obs_property_int_type');
    return _obs_property_int_type(
      p,
    );
  }

  _dart_obs_property_int_type _obs_property_int_type;

  ffi.Pointer<ffi.Int8> obs_property_int_suffix(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_int_suffix ??= _dylib.lookupFunction<
        _c_obs_property_int_suffix,
        _dart_obs_property_int_suffix>('obs_property_int_suffix');
    return _obs_property_int_suffix(
      p,
    );
  }

  _dart_obs_property_int_suffix _obs_property_int_suffix;

  double obs_property_float_min(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_float_min ??= _dylib.lookupFunction<_c_obs_property_float_min,
        _dart_obs_property_float_min>('obs_property_float_min');
    return _obs_property_float_min(
      p,
    );
  }

  _dart_obs_property_float_min _obs_property_float_min;

  double obs_property_float_max(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_float_max ??= _dylib.lookupFunction<_c_obs_property_float_max,
        _dart_obs_property_float_max>('obs_property_float_max');
    return _obs_property_float_max(
      p,
    );
  }

  _dart_obs_property_float_max _obs_property_float_max;

  double obs_property_float_step(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_float_step ??= _dylib.lookupFunction<
        _c_obs_property_float_step,
        _dart_obs_property_float_step>('obs_property_float_step');
    return _obs_property_float_step(
      p,
    );
  }

  _dart_obs_property_float_step _obs_property_float_step;

  int obs_property_float_type(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_float_type ??= _dylib.lookupFunction<
        _c_obs_property_float_type,
        _dart_obs_property_float_type>('obs_property_float_type');
    return _obs_property_float_type(
      p,
    );
  }

  _dart_obs_property_float_type _obs_property_float_type;

  ffi.Pointer<ffi.Int8> obs_property_float_suffix(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_float_suffix ??= _dylib.lookupFunction<
        _c_obs_property_float_suffix,
        _dart_obs_property_float_suffix>('obs_property_float_suffix');
    return _obs_property_float_suffix(
      p,
    );
  }

  _dart_obs_property_float_suffix _obs_property_float_suffix;

  int obs_property_text_type(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_text_type ??= _dylib.lookupFunction<_c_obs_property_text_type,
        _dart_obs_property_text_type>('obs_property_text_type');
    return _obs_property_text_type(
      p,
    );
  }

  _dart_obs_property_text_type _obs_property_text_type;

  int obs_property_text_monospace(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_text_monospace ??= _dylib.lookupFunction<
        _c_obs_property_text_monospace,
        _dart_obs_property_text_monospace>('obs_property_text_monospace');
    return _obs_property_text_monospace(
      p,
    );
  }

  _dart_obs_property_text_monospace _obs_property_text_monospace;

  int obs_property_path_type(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_path_type ??= _dylib.lookupFunction<_c_obs_property_path_type,
        _dart_obs_property_path_type>('obs_property_path_type');
    return _obs_property_path_type(
      p,
    );
  }

  _dart_obs_property_path_type _obs_property_path_type;

  ffi.Pointer<ffi.Int8> obs_property_path_filter(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_path_filter ??= _dylib.lookupFunction<
        _c_obs_property_path_filter,
        _dart_obs_property_path_filter>('obs_property_path_filter');
    return _obs_property_path_filter(
      p,
    );
  }

  _dart_obs_property_path_filter _obs_property_path_filter;

  ffi.Pointer<ffi.Int8> obs_property_path_default_path(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_path_default_path ??= _dylib.lookupFunction<
        _c_obs_property_path_default_path,
        _dart_obs_property_path_default_path>('obs_property_path_default_path');
    return _obs_property_path_default_path(
      p,
    );
  }

  _dart_obs_property_path_default_path _obs_property_path_default_path;

  int obs_property_list_type(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_list_type ??= _dylib.lookupFunction<_c_obs_property_list_type,
        _dart_obs_property_list_type>('obs_property_list_type');
    return _obs_property_list_type(
      p,
    );
  }

  _dart_obs_property_list_type _obs_property_list_type;

  int obs_property_list_format(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_list_format ??= _dylib.lookupFunction<
        _c_obs_property_list_format,
        _dart_obs_property_list_format>('obs_property_list_format');
    return _obs_property_list_format(
      p,
    );
  }

  _dart_obs_property_list_format _obs_property_list_format;

  void obs_property_int_set_limits(
    ffi.Pointer<obs_property> p,
    int min,
    int max,
    int step,
  ) {
    _obs_property_int_set_limits ??= _dylib.lookupFunction<
        _c_obs_property_int_set_limits,
        _dart_obs_property_int_set_limits>('obs_property_int_set_limits');
    return _obs_property_int_set_limits(
      p,
      min,
      max,
      step,
    );
  }

  _dart_obs_property_int_set_limits _obs_property_int_set_limits;

  void obs_property_float_set_limits(
    ffi.Pointer<obs_property> p,
    double min,
    double max,
    double step,
  ) {
    _obs_property_float_set_limits ??= _dylib.lookupFunction<
        _c_obs_property_float_set_limits,
        _dart_obs_property_float_set_limits>('obs_property_float_set_limits');
    return _obs_property_float_set_limits(
      p,
      min,
      max,
      step,
    );
  }

  _dart_obs_property_float_set_limits _obs_property_float_set_limits;

  void obs_property_int_set_suffix(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.Int8> suffix,
  ) {
    _obs_property_int_set_suffix ??= _dylib.lookupFunction<
        _c_obs_property_int_set_suffix,
        _dart_obs_property_int_set_suffix>('obs_property_int_set_suffix');
    return _obs_property_int_set_suffix(
      p,
      suffix,
    );
  }

  _dart_obs_property_int_set_suffix _obs_property_int_set_suffix;

  void obs_property_float_set_suffix(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.Int8> suffix,
  ) {
    _obs_property_float_set_suffix ??= _dylib.lookupFunction<
        _c_obs_property_float_set_suffix,
        _dart_obs_property_float_set_suffix>('obs_property_float_set_suffix');
    return _obs_property_float_set_suffix(
      p,
      suffix,
    );
  }

  _dart_obs_property_float_set_suffix _obs_property_float_set_suffix;

  void obs_property_text_set_monospace(
    ffi.Pointer<obs_property> p,
    int monospace,
  ) {
    _obs_property_text_set_monospace ??= _dylib.lookupFunction<
            _c_obs_property_text_set_monospace,
            _dart_obs_property_text_set_monospace>(
        'obs_property_text_set_monospace');
    return _obs_property_text_set_monospace(
      p,
      monospace,
    );
  }

  _dart_obs_property_text_set_monospace _obs_property_text_set_monospace;

  void obs_property_list_clear(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_list_clear ??= _dylib.lookupFunction<
        _c_obs_property_list_clear,
        _dart_obs_property_list_clear>('obs_property_list_clear');
    return _obs_property_list_clear(
      p,
    );
  }

  _dart_obs_property_list_clear _obs_property_list_clear;

  int obs_property_list_add_string(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    _obs_property_list_add_string ??= _dylib.lookupFunction<
        _c_obs_property_list_add_string,
        _dart_obs_property_list_add_string>('obs_property_list_add_string');
    return _obs_property_list_add_string(
      p,
      name,
      val,
    );
  }

  _dart_obs_property_list_add_string _obs_property_list_add_string;

  int obs_property_list_add_int(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    _obs_property_list_add_int ??= _dylib.lookupFunction<
        _c_obs_property_list_add_int,
        _dart_obs_property_list_add_int>('obs_property_list_add_int');
    return _obs_property_list_add_int(
      p,
      name,
      val,
    );
  }

  _dart_obs_property_list_add_int _obs_property_list_add_int;

  int obs_property_list_add_float(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    _obs_property_list_add_float ??= _dylib.lookupFunction<
        _c_obs_property_list_add_float,
        _dart_obs_property_list_add_float>('obs_property_list_add_float');
    return _obs_property_list_add_float(
      p,
      name,
      val,
    );
  }

  _dart_obs_property_list_add_float _obs_property_list_add_float;

  void obs_property_list_insert_string(
    ffi.Pointer<obs_property> p,
    int idx,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
  ) {
    _obs_property_list_insert_string ??= _dylib.lookupFunction<
            _c_obs_property_list_insert_string,
            _dart_obs_property_list_insert_string>(
        'obs_property_list_insert_string');
    return _obs_property_list_insert_string(
      p,
      idx,
      name,
      val,
    );
  }

  _dart_obs_property_list_insert_string _obs_property_list_insert_string;

  void obs_property_list_insert_int(
    ffi.Pointer<obs_property> p,
    int idx,
    ffi.Pointer<ffi.Int8> name,
    int val,
  ) {
    _obs_property_list_insert_int ??= _dylib.lookupFunction<
        _c_obs_property_list_insert_int,
        _dart_obs_property_list_insert_int>('obs_property_list_insert_int');
    return _obs_property_list_insert_int(
      p,
      idx,
      name,
      val,
    );
  }

  _dart_obs_property_list_insert_int _obs_property_list_insert_int;

  void obs_property_list_insert_float(
    ffi.Pointer<obs_property> p,
    int idx,
    ffi.Pointer<ffi.Int8> name,
    double val,
  ) {
    _obs_property_list_insert_float ??= _dylib.lookupFunction<
        _c_obs_property_list_insert_float,
        _dart_obs_property_list_insert_float>('obs_property_list_insert_float');
    return _obs_property_list_insert_float(
      p,
      idx,
      name,
      val,
    );
  }

  _dart_obs_property_list_insert_float _obs_property_list_insert_float;

  void obs_property_list_item_disable(
    ffi.Pointer<obs_property> p,
    int idx,
    int disabled,
  ) {
    _obs_property_list_item_disable ??= _dylib.lookupFunction<
        _c_obs_property_list_item_disable,
        _dart_obs_property_list_item_disable>('obs_property_list_item_disable');
    return _obs_property_list_item_disable(
      p,
      idx,
      disabled,
    );
  }

  _dart_obs_property_list_item_disable _obs_property_list_item_disable;

  int obs_property_list_item_disabled(
    ffi.Pointer<obs_property> p,
    int idx,
  ) {
    _obs_property_list_item_disabled ??= _dylib.lookupFunction<
            _c_obs_property_list_item_disabled,
            _dart_obs_property_list_item_disabled>(
        'obs_property_list_item_disabled');
    return _obs_property_list_item_disabled(
      p,
      idx,
    );
  }

  _dart_obs_property_list_item_disabled _obs_property_list_item_disabled;

  void obs_property_list_item_remove(
    ffi.Pointer<obs_property> p,
    int idx,
  ) {
    _obs_property_list_item_remove ??= _dylib.lookupFunction<
        _c_obs_property_list_item_remove,
        _dart_obs_property_list_item_remove>('obs_property_list_item_remove');
    return _obs_property_list_item_remove(
      p,
      idx,
    );
  }

  _dart_obs_property_list_item_remove _obs_property_list_item_remove;

  int obs_property_list_item_count(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_list_item_count ??= _dylib.lookupFunction<
        _c_obs_property_list_item_count,
        _dart_obs_property_list_item_count>('obs_property_list_item_count');
    return _obs_property_list_item_count(
      p,
    );
  }

  _dart_obs_property_list_item_count _obs_property_list_item_count;

  ffi.Pointer<ffi.Int8> obs_property_list_item_name(
    ffi.Pointer<obs_property> p,
    int idx,
  ) {
    _obs_property_list_item_name ??= _dylib.lookupFunction<
        _c_obs_property_list_item_name,
        _dart_obs_property_list_item_name>('obs_property_list_item_name');
    return _obs_property_list_item_name(
      p,
      idx,
    );
  }

  _dart_obs_property_list_item_name _obs_property_list_item_name;

  ffi.Pointer<ffi.Int8> obs_property_list_item_string(
    ffi.Pointer<obs_property> p,
    int idx,
  ) {
    _obs_property_list_item_string ??= _dylib.lookupFunction<
        _c_obs_property_list_item_string,
        _dart_obs_property_list_item_string>('obs_property_list_item_string');
    return _obs_property_list_item_string(
      p,
      idx,
    );
  }

  _dart_obs_property_list_item_string _obs_property_list_item_string;

  int obs_property_list_item_int(
    ffi.Pointer<obs_property> p,
    int idx,
  ) {
    _obs_property_list_item_int ??= _dylib.lookupFunction<
        _c_obs_property_list_item_int,
        _dart_obs_property_list_item_int>('obs_property_list_item_int');
    return _obs_property_list_item_int(
      p,
      idx,
    );
  }

  _dart_obs_property_list_item_int _obs_property_list_item_int;

  double obs_property_list_item_float(
    ffi.Pointer<obs_property> p,
    int idx,
  ) {
    _obs_property_list_item_float ??= _dylib.lookupFunction<
        _c_obs_property_list_item_float,
        _dart_obs_property_list_item_float>('obs_property_list_item_float');
    return _obs_property_list_item_float(
      p,
      idx,
    );
  }

  _dart_obs_property_list_item_float _obs_property_list_item_float;

  int obs_property_editable_list_type(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_editable_list_type ??= _dylib.lookupFunction<
            _c_obs_property_editable_list_type,
            _dart_obs_property_editable_list_type>(
        'obs_property_editable_list_type');
    return _obs_property_editable_list_type(
      p,
    );
  }

  _dart_obs_property_editable_list_type _obs_property_editable_list_type;

  ffi.Pointer<ffi.Int8> obs_property_editable_list_filter(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_editable_list_filter ??= _dylib.lookupFunction<
            _c_obs_property_editable_list_filter,
            _dart_obs_property_editable_list_filter>(
        'obs_property_editable_list_filter');
    return _obs_property_editable_list_filter(
      p,
    );
  }

  _dart_obs_property_editable_list_filter _obs_property_editable_list_filter;

  ffi.Pointer<ffi.Int8> obs_property_editable_list_default_path(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_editable_list_default_path ??= _dylib.lookupFunction<
            _c_obs_property_editable_list_default_path,
            _dart_obs_property_editable_list_default_path>(
        'obs_property_editable_list_default_path');
    return _obs_property_editable_list_default_path(
      p,
    );
  }

  _dart_obs_property_editable_list_default_path
      _obs_property_editable_list_default_path;

  void obs_property_frame_rate_clear(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_frame_rate_clear ??= _dylib.lookupFunction<
        _c_obs_property_frame_rate_clear,
        _dart_obs_property_frame_rate_clear>('obs_property_frame_rate_clear');
    return _obs_property_frame_rate_clear(
      p,
    );
  }

  _dart_obs_property_frame_rate_clear _obs_property_frame_rate_clear;

  void obs_property_frame_rate_options_clear(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_frame_rate_options_clear ??= _dylib.lookupFunction<
            _c_obs_property_frame_rate_options_clear,
            _dart_obs_property_frame_rate_options_clear>(
        'obs_property_frame_rate_options_clear');
    return _obs_property_frame_rate_options_clear(
      p,
    );
  }

  _dart_obs_property_frame_rate_options_clear
      _obs_property_frame_rate_options_clear;

  void obs_property_frame_rate_fps_ranges_clear(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_frame_rate_fps_ranges_clear ??= _dylib.lookupFunction<
            _c_obs_property_frame_rate_fps_ranges_clear,
            _dart_obs_property_frame_rate_fps_ranges_clear>(
        'obs_property_frame_rate_fps_ranges_clear');
    return _obs_property_frame_rate_fps_ranges_clear(
      p,
    );
  }

  _dart_obs_property_frame_rate_fps_ranges_clear
      _obs_property_frame_rate_fps_ranges_clear;

  int obs_property_frame_rate_option_add(
    ffi.Pointer<obs_property> p,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    _obs_property_frame_rate_option_add ??= _dylib.lookupFunction<
            _c_obs_property_frame_rate_option_add,
            _dart_obs_property_frame_rate_option_add>(
        'obs_property_frame_rate_option_add');
    return _obs_property_frame_rate_option_add(
      p,
      name,
      description,
    );
  }

  _dart_obs_property_frame_rate_option_add _obs_property_frame_rate_option_add;

  void obs_property_frame_rate_option_insert(
    ffi.Pointer<obs_property> p,
    int idx,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
  ) {
    _obs_property_frame_rate_option_insert ??= _dylib.lookupFunction<
            _c_obs_property_frame_rate_option_insert,
            _dart_obs_property_frame_rate_option_insert>(
        'obs_property_frame_rate_option_insert');
    return _obs_property_frame_rate_option_insert(
      p,
      idx,
      name,
      description,
    );
  }

  _dart_obs_property_frame_rate_option_insert
      _obs_property_frame_rate_option_insert;

  int obs_property_frame_rate_options_count(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_frame_rate_options_count ??= _dylib.lookupFunction<
            _c_obs_property_frame_rate_options_count,
            _dart_obs_property_frame_rate_options_count>(
        'obs_property_frame_rate_options_count');
    return _obs_property_frame_rate_options_count(
      p,
    );
  }

  _dart_obs_property_frame_rate_options_count
      _obs_property_frame_rate_options_count;

  ffi.Pointer<ffi.Int8> obs_property_frame_rate_option_name(
    ffi.Pointer<obs_property> p,
    int idx,
  ) {
    _obs_property_frame_rate_option_name ??= _dylib.lookupFunction<
            _c_obs_property_frame_rate_option_name,
            _dart_obs_property_frame_rate_option_name>(
        'obs_property_frame_rate_option_name');
    return _obs_property_frame_rate_option_name(
      p,
      idx,
    );
  }

  _dart_obs_property_frame_rate_option_name
      _obs_property_frame_rate_option_name;

  ffi.Pointer<ffi.Int8> obs_property_frame_rate_option_description(
    ffi.Pointer<obs_property> p,
    int idx,
  ) {
    _obs_property_frame_rate_option_description ??= _dylib.lookupFunction<
            _c_obs_property_frame_rate_option_description,
            _dart_obs_property_frame_rate_option_description>(
        'obs_property_frame_rate_option_description');
    return _obs_property_frame_rate_option_description(
      p,
      idx,
    );
  }

  _dart_obs_property_frame_rate_option_description
      _obs_property_frame_rate_option_description;

  int obs_property_frame_rate_fps_ranges_count(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_frame_rate_fps_ranges_count ??= _dylib.lookupFunction<
            _c_obs_property_frame_rate_fps_ranges_count,
            _dart_obs_property_frame_rate_fps_ranges_count>(
        'obs_property_frame_rate_fps_ranges_count');
    return _obs_property_frame_rate_fps_ranges_count(
      p,
    );
  }

  _dart_obs_property_frame_rate_fps_ranges_count
      _obs_property_frame_rate_fps_ranges_count;

  int obs_property_group_type(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_group_type ??= _dylib.lookupFunction<
        _c_obs_property_group_type,
        _dart_obs_property_group_type>('obs_property_group_type');
    return _obs_property_group_type(
      p,
    );
  }

  _dart_obs_property_group_type _obs_property_group_type;

  ffi.Pointer<obs_properties> obs_property_group_content(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_property_group_content ??= _dylib.lookupFunction<
        _c_obs_property_group_content,
        _dart_obs_property_group_content>('obs_property_group_content');
    return _obs_property_group_content(
      p,
    );
  }

  _dart_obs_property_group_content _obs_property_group_content;

  int obs_proprety_text_type(
    ffi.Pointer<obs_property> p,
  ) {
    _obs_proprety_text_type ??= _dylib.lookupFunction<_c_obs_proprety_text_type,
        _dart_obs_proprety_text_type>('obs_proprety_text_type');
    return _obs_proprety_text_type(
      p,
    );
  }

  _dart_obs_proprety_text_type _obs_proprety_text_type;

  void obs_register_source_s(
    ffi.Pointer<obs_source_info> info,
    int size,
  ) {
    _obs_register_source_s ??= _dylib.lookupFunction<_c_obs_register_source_s,
        _dart_obs_register_source_s>('obs_register_source_s');
    return _obs_register_source_s(
      info,
      size,
    );
  }

  _dart_obs_register_source_s _obs_register_source_s;

  void obs_register_encoder_s(
    ffi.Pointer<obs_encoder_info> info,
    int size,
  ) {
    _obs_register_encoder_s ??= _dylib.lookupFunction<_c_obs_register_encoder_s,
        _dart_obs_register_encoder_s>('obs_register_encoder_s');
    return _obs_register_encoder_s(
      info,
      size,
    );
  }

  _dart_obs_register_encoder_s _obs_register_encoder_s;

  void obs_register_output_s(
    ffi.Pointer<obs_output_info> info,
    int size,
  ) {
    _obs_register_output_s ??= _dylib.lookupFunction<_c_obs_register_output_s,
        _dart_obs_register_output_s>('obs_register_output_s');
    return _obs_register_output_s(
      info,
      size,
    );
  }

  _dart_obs_register_output_s _obs_register_output_s;

  void obs_register_service_s(
    ffi.Pointer<obs_service_info> info,
    int size,
  ) {
    _obs_register_service_s ??= _dylib.lookupFunction<_c_obs_register_service_s,
        _dart_obs_register_service_s>('obs_register_service_s');
    return _obs_register_service_s(
      info,
      size,
    );
  }

  _dart_obs_register_service_s _obs_register_service_s;

  /// @brief Create a fader
  /// @param type the type of the fader
  /// @return pointer to the fader object
  ///
  /// A fader object is used to map input values from a gui element to dB and
  /// subsequently multiplier values used by libobs to mix audio.
  /// The current "position" of the fader is internally stored as dB value.
  ffi.Pointer<obs_fader> obs_fader_create(
    int type,
  ) {
    _obs_fader_create ??=
        _dylib.lookupFunction<_c_obs_fader_create, _dart_obs_fader_create>(
            'obs_fader_create');
    return _obs_fader_create(
      type,
    );
  }

  _dart_obs_fader_create _obs_fader_create;

  /// @brief Destroy a fader
  /// @param fader pointer to the fader object
  ///
  /// Destroy the fader and free all related data
  void obs_fader_destroy(
    ffi.Pointer<obs_fader> fader,
  ) {
    _obs_fader_destroy ??=
        _dylib.lookupFunction<_c_obs_fader_destroy, _dart_obs_fader_destroy>(
            'obs_fader_destroy');
    return _obs_fader_destroy(
      fader,
    );
  }

  _dart_obs_fader_destroy _obs_fader_destroy;

  /// @brief Set the fader dB value
  /// @param fader pointer to the fader object
  /// @param db new dB value
  /// @return true if value was set without clamping
  int obs_fader_set_db(
    ffi.Pointer<obs_fader> fader,
    double db,
  ) {
    _obs_fader_set_db ??=
        _dylib.lookupFunction<_c_obs_fader_set_db, _dart_obs_fader_set_db>(
            'obs_fader_set_db');
    return _obs_fader_set_db(
      fader,
      db,
    );
  }

  _dart_obs_fader_set_db _obs_fader_set_db;

  /// @brief Get the current fader dB value
  /// @param fader pointer to the fader object
  /// @return current fader dB value
  double obs_fader_get_db(
    ffi.Pointer<obs_fader> fader,
  ) {
    _obs_fader_get_db ??=
        _dylib.lookupFunction<_c_obs_fader_get_db, _dart_obs_fader_get_db>(
            'obs_fader_get_db');
    return _obs_fader_get_db(
      fader,
    );
  }

  _dart_obs_fader_get_db _obs_fader_get_db;

  /// @brief Set the fader value from deflection
  /// @param fader pointer to the fader object
  /// @param def new deflection
  /// @return true if value was set without clamping
  ///
  /// This sets the new fader value from the supplied deflection, in case the
  /// resulting value was clamped due to limits this function will return false.
  /// The deflection is typically in the range [0.0, 1.0] but may be higher in
  /// order to provide some amplification. In order for this to work the high dB
  /// limit has to be set.
  int obs_fader_set_deflection(
    ffi.Pointer<obs_fader> fader,
    double def,
  ) {
    _obs_fader_set_deflection ??= _dylib.lookupFunction<
        _c_obs_fader_set_deflection,
        _dart_obs_fader_set_deflection>('obs_fader_set_deflection');
    return _obs_fader_set_deflection(
      fader,
      def,
    );
  }

  _dart_obs_fader_set_deflection _obs_fader_set_deflection;

  /// @brief Get the current fader deflection
  /// @param fader pointer to the fader object
  /// @return current fader deflection
  double obs_fader_get_deflection(
    ffi.Pointer<obs_fader> fader,
  ) {
    _obs_fader_get_deflection ??= _dylib.lookupFunction<
        _c_obs_fader_get_deflection,
        _dart_obs_fader_get_deflection>('obs_fader_get_deflection');
    return _obs_fader_get_deflection(
      fader,
    );
  }

  _dart_obs_fader_get_deflection _obs_fader_get_deflection;

  /// @brief Set the fader value from multiplier
  /// @param fader pointer to the fader object
  /// @return true if the value was set without clamping
  int obs_fader_set_mul(
    ffi.Pointer<obs_fader> fader,
    double mul,
  ) {
    _obs_fader_set_mul ??=
        _dylib.lookupFunction<_c_obs_fader_set_mul, _dart_obs_fader_set_mul>(
            'obs_fader_set_mul');
    return _obs_fader_set_mul(
      fader,
      mul,
    );
  }

  _dart_obs_fader_set_mul _obs_fader_set_mul;

  /// @brief Get the current fader multiplier value
  /// @param fader pointer to the fader object
  /// @return current fader multiplier
  double obs_fader_get_mul(
    ffi.Pointer<obs_fader> fader,
  ) {
    _obs_fader_get_mul ??=
        _dylib.lookupFunction<_c_obs_fader_get_mul, _dart_obs_fader_get_mul>(
            'obs_fader_get_mul');
    return _obs_fader_get_mul(
      fader,
    );
  }

  _dart_obs_fader_get_mul _obs_fader_get_mul;

  /// @brief Attach the fader to a source
  /// @param fader pointer to the fader object
  /// @param source pointer to the source object
  /// @return true on success
  ///
  /// When the fader is attached to a source it will automatically sync it's state
  /// to the volume of the source.
  int obs_fader_attach_source(
    ffi.Pointer<obs_fader> fader,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_fader_attach_source ??= _dylib.lookupFunction<
        _c_obs_fader_attach_source,
        _dart_obs_fader_attach_source>('obs_fader_attach_source');
    return _obs_fader_attach_source(
      fader,
      source,
    );
  }

  _dart_obs_fader_attach_source _obs_fader_attach_source;

  /// @brief Detach the fader from the currently attached source
  /// @param fader pointer to the fader object
  void obs_fader_detach_source(
    ffi.Pointer<obs_fader> fader,
  ) {
    _obs_fader_detach_source ??= _dylib.lookupFunction<
        _c_obs_fader_detach_source,
        _dart_obs_fader_detach_source>('obs_fader_detach_source');
    return _obs_fader_detach_source(
      fader,
    );
  }

  _dart_obs_fader_detach_source _obs_fader_detach_source;

  void obs_fader_add_callback(
    ffi.Pointer<obs_fader> fader,
    ffi.Pointer<ffi.NativeFunction<obs_fader_changed_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_fader_add_callback ??= _dylib.lookupFunction<_c_obs_fader_add_callback,
        _dart_obs_fader_add_callback>('obs_fader_add_callback');
    return _obs_fader_add_callback(
      fader,
      callback,
      param,
    );
  }

  _dart_obs_fader_add_callback _obs_fader_add_callback;

  void obs_fader_remove_callback(
    ffi.Pointer<obs_fader> fader,
    ffi.Pointer<ffi.NativeFunction<obs_fader_changed_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_fader_remove_callback ??= _dylib.lookupFunction<
        _c_obs_fader_remove_callback,
        _dart_obs_fader_remove_callback>('obs_fader_remove_callback');
    return _obs_fader_remove_callback(
      fader,
      callback,
      param,
    );
  }

  _dart_obs_fader_remove_callback _obs_fader_remove_callback;

  /// @brief Create a volume meter
  /// @param type the mapping type to use for the volume meter
  /// @return pointer to the volume meter object
  ///
  /// A volume meter object is used to prepare the sound levels reported by audio
  /// sources for display in a GUI.
  /// It will automatically take source volume into account and map the levels
  /// to a range [0.0f, 1.0f].
  ffi.Pointer<obs_volmeter> obs_volmeter_create(
    int type,
  ) {
    _obs_volmeter_create ??= _dylib.lookupFunction<_c_obs_volmeter_create,
        _dart_obs_volmeter_create>('obs_volmeter_create');
    return _obs_volmeter_create(
      type,
    );
  }

  _dart_obs_volmeter_create _obs_volmeter_create;

  /// @brief Destroy a volume meter
  /// @param volmeter pointer to the volmeter object
  ///
  /// Destroy the volume meter and free all related data
  void obs_volmeter_destroy(
    ffi.Pointer<obs_volmeter> volmeter,
  ) {
    _obs_volmeter_destroy ??= _dylib.lookupFunction<_c_obs_volmeter_destroy,
        _dart_obs_volmeter_destroy>('obs_volmeter_destroy');
    return _obs_volmeter_destroy(
      volmeter,
    );
  }

  _dart_obs_volmeter_destroy _obs_volmeter_destroy;

  /// @brief Attach the volume meter to a source
  /// @param volmeter pointer to the volume meter object
  /// @param source pointer to the source object
  /// @return true on success
  ///
  /// When the volume meter is attached to a source it will start to listen to
  /// volume updates on the source and after preparing the data emit its own
  /// signal.
  int obs_volmeter_attach_source(
    ffi.Pointer<obs_volmeter> volmeter,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_volmeter_attach_source ??= _dylib.lookupFunction<
        _c_obs_volmeter_attach_source,
        _dart_obs_volmeter_attach_source>('obs_volmeter_attach_source');
    return _obs_volmeter_attach_source(
      volmeter,
      source,
    );
  }

  _dart_obs_volmeter_attach_source _obs_volmeter_attach_source;

  /// @brief Detach the volume meter from the currently attached source
  /// @param volmeter pointer to the volume meter object
  void obs_volmeter_detach_source(
    ffi.Pointer<obs_volmeter> volmeter,
  ) {
    _obs_volmeter_detach_source ??= _dylib.lookupFunction<
        _c_obs_volmeter_detach_source,
        _dart_obs_volmeter_detach_source>('obs_volmeter_detach_source');
    return _obs_volmeter_detach_source(
      volmeter,
    );
  }

  _dart_obs_volmeter_detach_source _obs_volmeter_detach_source;

  /// @brief Set the peak meter type for the volume meter
  /// @param volmeter pointer to the volume meter object
  /// @param peak_meter_type set if true-peak needs to be measured.
  void obs_volmeter_set_peak_meter_type(
    ffi.Pointer<obs_volmeter> volmeter,
    int peak_meter_type,
  ) {
    _obs_volmeter_set_peak_meter_type ??= _dylib.lookupFunction<
            _c_obs_volmeter_set_peak_meter_type,
            _dart_obs_volmeter_set_peak_meter_type>(
        'obs_volmeter_set_peak_meter_type');
    return _obs_volmeter_set_peak_meter_type(
      volmeter,
      peak_meter_type,
    );
  }

  _dart_obs_volmeter_set_peak_meter_type _obs_volmeter_set_peak_meter_type;

  /// @brief Set the update interval for the volume meter
  /// @param volmeter pointer to the volume meter object
  /// @param ms update interval in ms
  ///
  /// This sets the update interval in milliseconds that should be processed before
  /// the resulting values are emitted by the levels_updated signal. The resulting
  /// number of audio samples is rounded to an integer.
  ///
  /// Please note that due to way obs does receive audio data from the sources
  /// this is no hard guarantee for the timing of the signal itself. When the
  /// volume meter receives a chunk of data that is multiple the size of the sample
  /// interval, all data will be sampled and the values updated accordingly, but
  /// only the signal for the last segment is actually emitted.
  /// On the other hand data might be received in a way that will cause the signal
  /// to be emitted in shorter intervals than specified here under some
  /// circumstances.
  void obs_volmeter_set_update_interval(
    ffi.Pointer<obs_volmeter> volmeter,
    int ms,
  ) {
    _obs_volmeter_set_update_interval ??= _dylib.lookupFunction<
            _c_obs_volmeter_set_update_interval,
            _dart_obs_volmeter_set_update_interval>(
        'obs_volmeter_set_update_interval');
    return _obs_volmeter_set_update_interval(
      volmeter,
      ms,
    );
  }

  _dart_obs_volmeter_set_update_interval _obs_volmeter_set_update_interval;

  /// @brief Get the update interval currently used for the volume meter
  /// @param volmeter pointer to the volume meter object
  /// @return update interval in ms
  int obs_volmeter_get_update_interval(
    ffi.Pointer<obs_volmeter> volmeter,
  ) {
    _obs_volmeter_get_update_interval ??= _dylib.lookupFunction<
            _c_obs_volmeter_get_update_interval,
            _dart_obs_volmeter_get_update_interval>(
        'obs_volmeter_get_update_interval');
    return _obs_volmeter_get_update_interval(
      volmeter,
    );
  }

  _dart_obs_volmeter_get_update_interval _obs_volmeter_get_update_interval;

  /// @brief Get the number of channels which are configured for this source.
  /// @param volmeter pointer to the volume meter object
  int obs_volmeter_get_nr_channels(
    ffi.Pointer<obs_volmeter> volmeter,
  ) {
    _obs_volmeter_get_nr_channels ??= _dylib.lookupFunction<
        _c_obs_volmeter_get_nr_channels,
        _dart_obs_volmeter_get_nr_channels>('obs_volmeter_get_nr_channels');
    return _obs_volmeter_get_nr_channels(
      volmeter,
    );
  }

  _dart_obs_volmeter_get_nr_channels _obs_volmeter_get_nr_channels;

  void obs_volmeter_add_callback(
    ffi.Pointer<obs_volmeter> volmeter,
    ffi.Pointer<ffi.NativeFunction<obs_volmeter_updated_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_volmeter_add_callback ??= _dylib.lookupFunction<
        _c_obs_volmeter_add_callback,
        _dart_obs_volmeter_add_callback>('obs_volmeter_add_callback');
    return _obs_volmeter_add_callback(
      volmeter,
      callback,
      param,
    );
  }

  _dart_obs_volmeter_add_callback _obs_volmeter_add_callback;

  void obs_volmeter_remove_callback(
    ffi.Pointer<obs_volmeter> volmeter,
    ffi.Pointer<ffi.NativeFunction<obs_volmeter_updated_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_volmeter_remove_callback ??= _dylib.lookupFunction<
        _c_obs_volmeter_remove_callback,
        _dart_obs_volmeter_remove_callback>('obs_volmeter_remove_callback');
    return _obs_volmeter_remove_callback(
      volmeter,
      callback,
      param,
    );
  }

  _dart_obs_volmeter_remove_callback _obs_volmeter_remove_callback;

  double obs_mul_to_db(
    double mul,
  ) {
    _obs_mul_to_db ??= _dylib
        .lookupFunction<_c_obs_mul_to_db, _dart_obs_mul_to_db>('obs_mul_to_db');
    return _obs_mul_to_db(
      mul,
    );
  }

  _dart_obs_mul_to_db _obs_mul_to_db;

  double obs_db_to_mul(
    double db,
  ) {
    _obs_db_to_mul ??= _dylib
        .lookupFunction<_c_obs_db_to_mul, _dart_obs_db_to_mul>('obs_db_to_mul');
    return _obs_db_to_mul(
      db,
    );
  }

  _dart_obs_db_to_mul _obs_db_to_mul;

  int obs_hotkey_get_id(
    ffi.Pointer<obs_hotkey> key,
  ) {
    _obs_hotkey_get_id ??=
        _dylib.lookupFunction<_c_obs_hotkey_get_id, _dart_obs_hotkey_get_id>(
            'obs_hotkey_get_id');
    return _obs_hotkey_get_id(
      key,
    );
  }

  _dart_obs_hotkey_get_id _obs_hotkey_get_id;

  ffi.Pointer<ffi.Int8> obs_hotkey_get_name(
    ffi.Pointer<obs_hotkey> key,
  ) {
    _obs_hotkey_get_name ??= _dylib.lookupFunction<_c_obs_hotkey_get_name,
        _dart_obs_hotkey_get_name>('obs_hotkey_get_name');
    return _obs_hotkey_get_name(
      key,
    );
  }

  _dart_obs_hotkey_get_name _obs_hotkey_get_name;

  ffi.Pointer<ffi.Int8> obs_hotkey_get_description(
    ffi.Pointer<obs_hotkey> key,
  ) {
    _obs_hotkey_get_description ??= _dylib.lookupFunction<
        _c_obs_hotkey_get_description,
        _dart_obs_hotkey_get_description>('obs_hotkey_get_description');
    return _obs_hotkey_get_description(
      key,
    );
  }

  _dart_obs_hotkey_get_description _obs_hotkey_get_description;

  int obs_hotkey_get_registerer_type(
    ffi.Pointer<obs_hotkey> key,
  ) {
    _obs_hotkey_get_registerer_type ??= _dylib.lookupFunction<
        _c_obs_hotkey_get_registerer_type,
        _dart_obs_hotkey_get_registerer_type>('obs_hotkey_get_registerer_type');
    return _obs_hotkey_get_registerer_type(
      key,
    );
  }

  _dart_obs_hotkey_get_registerer_type _obs_hotkey_get_registerer_type;

  ffi.Pointer<ffi.Void> obs_hotkey_get_registerer(
    ffi.Pointer<obs_hotkey> key,
  ) {
    _obs_hotkey_get_registerer ??= _dylib.lookupFunction<
        _c_obs_hotkey_get_registerer,
        _dart_obs_hotkey_get_registerer>('obs_hotkey_get_registerer');
    return _obs_hotkey_get_registerer(
      key,
    );
  }

  _dart_obs_hotkey_get_registerer _obs_hotkey_get_registerer;

  int obs_hotkey_get_pair_partner_id(
    ffi.Pointer<obs_hotkey> key,
  ) {
    _obs_hotkey_get_pair_partner_id ??= _dylib.lookupFunction<
        _c_obs_hotkey_get_pair_partner_id,
        _dart_obs_hotkey_get_pair_partner_id>('obs_hotkey_get_pair_partner_id');
    return _obs_hotkey_get_pair_partner_id(
      key,
    );
  }

  _dart_obs_hotkey_get_pair_partner_id _obs_hotkey_get_pair_partner_id;

  int obs_hotkey_binding_get_hotkey_id(
    ffi.Pointer<obs_hotkey_binding> binding,
  ) {
    _obs_hotkey_binding_get_hotkey_id ??= _dylib.lookupFunction<
            _c_obs_hotkey_binding_get_hotkey_id,
            _dart_obs_hotkey_binding_get_hotkey_id>(
        'obs_hotkey_binding_get_hotkey_id');
    return _obs_hotkey_binding_get_hotkey_id(
      binding,
    );
  }

  _dart_obs_hotkey_binding_get_hotkey_id _obs_hotkey_binding_get_hotkey_id;

  ffi.Pointer<obs_hotkey> obs_hotkey_binding_get_hotkey(
    ffi.Pointer<obs_hotkey_binding> binding,
  ) {
    _obs_hotkey_binding_get_hotkey ??= _dylib.lookupFunction<
        _c_obs_hotkey_binding_get_hotkey,
        _dart_obs_hotkey_binding_get_hotkey>('obs_hotkey_binding_get_hotkey');
    return _obs_hotkey_binding_get_hotkey(
      binding,
    );
  }

  _dart_obs_hotkey_binding_get_hotkey _obs_hotkey_binding_get_hotkey;

  void obs_hotkey_set_name(
    int id,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_hotkey_set_name ??= _dylib.lookupFunction<_c_obs_hotkey_set_name,
        _dart_obs_hotkey_set_name>('obs_hotkey_set_name');
    return _obs_hotkey_set_name(
      id,
      name,
    );
  }

  _dart_obs_hotkey_set_name _obs_hotkey_set_name;

  void obs_hotkey_set_description(
    int id,
    ffi.Pointer<ffi.Int8> desc,
  ) {
    _obs_hotkey_set_description ??= _dylib.lookupFunction<
        _c_obs_hotkey_set_description,
        _dart_obs_hotkey_set_description>('obs_hotkey_set_description');
    return _obs_hotkey_set_description(
      id,
      desc,
    );
  }

  _dart_obs_hotkey_set_description _obs_hotkey_set_description;

  void obs_hotkey_pair_set_names(
    int id,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> name1,
  ) {
    _obs_hotkey_pair_set_names ??= _dylib.lookupFunction<
        _c_obs_hotkey_pair_set_names,
        _dart_obs_hotkey_pair_set_names>('obs_hotkey_pair_set_names');
    return _obs_hotkey_pair_set_names(
      id,
      name0,
      name1,
    );
  }

  _dart_obs_hotkey_pair_set_names _obs_hotkey_pair_set_names;

  void obs_hotkey_pair_set_descriptions(
    int id,
    ffi.Pointer<ffi.Int8> desc0,
    ffi.Pointer<ffi.Int8> desc1,
  ) {
    _obs_hotkey_pair_set_descriptions ??= _dylib.lookupFunction<
            _c_obs_hotkey_pair_set_descriptions,
            _dart_obs_hotkey_pair_set_descriptions>(
        'obs_hotkey_pair_set_descriptions');
    return _obs_hotkey_pair_set_descriptions(
      id,
      desc0,
      desc1,
    );
  }

  _dart_obs_hotkey_pair_set_descriptions _obs_hotkey_pair_set_descriptions;

  void obs_hotkeys_set_translations_s(
    ffi.Pointer<obs_hotkeys_translations> translations,
    int size,
  ) {
    _obs_hotkeys_set_translations_s ??= _dylib.lookupFunction<
        _c_obs_hotkeys_set_translations_s,
        _dart_obs_hotkeys_set_translations_s>('obs_hotkeys_set_translations_s');
    return _obs_hotkeys_set_translations_s(
      translations,
      size,
    );
  }

  _dart_obs_hotkeys_set_translations_s _obs_hotkeys_set_translations_s;

  void obs_hotkeys_set_audio_hotkeys_translations(
    ffi.Pointer<ffi.Int8> mute,
    ffi.Pointer<ffi.Int8> unmute,
    ffi.Pointer<ffi.Int8> push_to_mute,
    ffi.Pointer<ffi.Int8> push_to_talk,
  ) {
    _obs_hotkeys_set_audio_hotkeys_translations ??= _dylib.lookupFunction<
            _c_obs_hotkeys_set_audio_hotkeys_translations,
            _dart_obs_hotkeys_set_audio_hotkeys_translations>(
        'obs_hotkeys_set_audio_hotkeys_translations');
    return _obs_hotkeys_set_audio_hotkeys_translations(
      mute,
      unmute,
      push_to_mute,
      push_to_talk,
    );
  }

  _dart_obs_hotkeys_set_audio_hotkeys_translations
      _obs_hotkeys_set_audio_hotkeys_translations;

  void obs_hotkeys_set_sceneitem_hotkeys_translations(
    ffi.Pointer<ffi.Int8> show_1,
    ffi.Pointer<ffi.Int8> hide_1,
  ) {
    _obs_hotkeys_set_sceneitem_hotkeys_translations ??= _dylib.lookupFunction<
            _c_obs_hotkeys_set_sceneitem_hotkeys_translations,
            _dart_obs_hotkeys_set_sceneitem_hotkeys_translations>(
        'obs_hotkeys_set_sceneitem_hotkeys_translations');
    return _obs_hotkeys_set_sceneitem_hotkeys_translations(
      show_1,
      hide_1,
    );
  }

  _dart_obs_hotkeys_set_sceneitem_hotkeys_translations
      _obs_hotkeys_set_sceneitem_hotkeys_translations;

  int obs_hotkey_register_frontend(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_hotkey_register_frontend ??= _dylib.lookupFunction<
        _c_obs_hotkey_register_frontend,
        _dart_obs_hotkey_register_frontend>('obs_hotkey_register_frontend');
    return _obs_hotkey_register_frontend(
      name,
      description,
      func,
      data,
    );
  }

  _dart_obs_hotkey_register_frontend _obs_hotkey_register_frontend;

  int obs_hotkey_register_encoder(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_hotkey_register_encoder ??= _dylib.lookupFunction<
        _c_obs_hotkey_register_encoder,
        _dart_obs_hotkey_register_encoder>('obs_hotkey_register_encoder');
    return _obs_hotkey_register_encoder(
      encoder,
      name,
      description,
      func,
      data,
    );
  }

  _dart_obs_hotkey_register_encoder _obs_hotkey_register_encoder;

  int obs_hotkey_register_output(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_hotkey_register_output ??= _dylib.lookupFunction<
        _c_obs_hotkey_register_output,
        _dart_obs_hotkey_register_output>('obs_hotkey_register_output');
    return _obs_hotkey_register_output(
      output,
      name,
      description,
      func,
      data,
    );
  }

  _dart_obs_hotkey_register_output _obs_hotkey_register_output;

  int obs_hotkey_register_service(
    ffi.Pointer<obs_service> service,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_hotkey_register_service ??= _dylib.lookupFunction<
        _c_obs_hotkey_register_service,
        _dart_obs_hotkey_register_service>('obs_hotkey_register_service');
    return _obs_hotkey_register_service(
      service,
      name,
      description,
      func,
      data,
    );
  }

  _dart_obs_hotkey_register_service _obs_hotkey_register_service;

  int obs_hotkey_register_source(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> description,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_hotkey_register_source ??= _dylib.lookupFunction<
        _c_obs_hotkey_register_source,
        _dart_obs_hotkey_register_source>('obs_hotkey_register_source');
    return _obs_hotkey_register_source(
      source,
      name,
      description,
      func,
      data,
    );
  }

  _dart_obs_hotkey_register_source _obs_hotkey_register_source;

  int obs_hotkey_pair_register_frontend(
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    _obs_hotkey_pair_register_frontend ??= _dylib.lookupFunction<
            _c_obs_hotkey_pair_register_frontend,
            _dart_obs_hotkey_pair_register_frontend>(
        'obs_hotkey_pair_register_frontend');
    return _obs_hotkey_pair_register_frontend(
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  _dart_obs_hotkey_pair_register_frontend _obs_hotkey_pair_register_frontend;

  int obs_hotkey_pair_register_encoder(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    _obs_hotkey_pair_register_encoder ??= _dylib.lookupFunction<
            _c_obs_hotkey_pair_register_encoder,
            _dart_obs_hotkey_pair_register_encoder>(
        'obs_hotkey_pair_register_encoder');
    return _obs_hotkey_pair_register_encoder(
      encoder,
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  _dart_obs_hotkey_pair_register_encoder _obs_hotkey_pair_register_encoder;

  int obs_hotkey_pair_register_output(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    _obs_hotkey_pair_register_output ??= _dylib.lookupFunction<
            _c_obs_hotkey_pair_register_output,
            _dart_obs_hotkey_pair_register_output>(
        'obs_hotkey_pair_register_output');
    return _obs_hotkey_pair_register_output(
      output,
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  _dart_obs_hotkey_pair_register_output _obs_hotkey_pair_register_output;

  int obs_hotkey_pair_register_service(
    ffi.Pointer<obs_service> service,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    _obs_hotkey_pair_register_service ??= _dylib.lookupFunction<
            _c_obs_hotkey_pair_register_service,
            _dart_obs_hotkey_pair_register_service>(
        'obs_hotkey_pair_register_service');
    return _obs_hotkey_pair_register_service(
      service,
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  _dart_obs_hotkey_pair_register_service _obs_hotkey_pair_register_service;

  int obs_hotkey_pair_register_source(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.Int8> name0,
    ffi.Pointer<ffi.Int8> description0,
    ffi.Pointer<ffi.Int8> name1,
    ffi.Pointer<ffi.Int8> description1,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
    ffi.Pointer<ffi.Void> data0,
    ffi.Pointer<ffi.Void> data1,
  ) {
    _obs_hotkey_pair_register_source ??= _dylib.lookupFunction<
            _c_obs_hotkey_pair_register_source,
            _dart_obs_hotkey_pair_register_source>(
        'obs_hotkey_pair_register_source');
    return _obs_hotkey_pair_register_source(
      source,
      name0,
      description0,
      name1,
      description1,
      func0,
      func1,
      data0,
      data1,
    );
  }

  _dart_obs_hotkey_pair_register_source _obs_hotkey_pair_register_source;

  void obs_hotkey_unregister(
    int id,
  ) {
    _obs_hotkey_unregister ??= _dylib.lookupFunction<_c_obs_hotkey_unregister,
        _dart_obs_hotkey_unregister>('obs_hotkey_unregister');
    return _obs_hotkey_unregister(
      id,
    );
  }

  _dart_obs_hotkey_unregister _obs_hotkey_unregister;

  void obs_hotkey_pair_unregister(
    int id,
  ) {
    _obs_hotkey_pair_unregister ??= _dylib.lookupFunction<
        _c_obs_hotkey_pair_unregister,
        _dart_obs_hotkey_pair_unregister>('obs_hotkey_pair_unregister');
    return _obs_hotkey_pair_unregister(
      id,
    );
  }

  _dart_obs_hotkey_pair_unregister _obs_hotkey_pair_unregister;

  void obs_hotkey_load_bindings(
    int id,
    ffi.Pointer<obs_key_combination> combinations,
    int num,
  ) {
    _obs_hotkey_load_bindings ??= _dylib.lookupFunction<
        _c_obs_hotkey_load_bindings,
        _dart_obs_hotkey_load_bindings>('obs_hotkey_load_bindings');
    return _obs_hotkey_load_bindings(
      id,
      combinations,
      num,
    );
  }

  _dart_obs_hotkey_load_bindings _obs_hotkey_load_bindings;

  void obs_hotkey_load(
    int id,
    ffi.Pointer<obs_data_array> data,
  ) {
    _obs_hotkey_load ??=
        _dylib.lookupFunction<_c_obs_hotkey_load, _dart_obs_hotkey_load>(
            'obs_hotkey_load');
    return _obs_hotkey_load(
      id,
      data,
    );
  }

  _dart_obs_hotkey_load _obs_hotkey_load;

  void obs_hotkeys_load_encoder(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<obs_data> hotkeys,
  ) {
    _obs_hotkeys_load_encoder ??= _dylib.lookupFunction<
        _c_obs_hotkeys_load_encoder,
        _dart_obs_hotkeys_load_encoder>('obs_hotkeys_load_encoder');
    return _obs_hotkeys_load_encoder(
      encoder,
      hotkeys,
    );
  }

  _dart_obs_hotkeys_load_encoder _obs_hotkeys_load_encoder;

  void obs_hotkeys_load_output(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<obs_data> hotkeys,
  ) {
    _obs_hotkeys_load_output ??= _dylib.lookupFunction<
        _c_obs_hotkeys_load_output,
        _dart_obs_hotkeys_load_output>('obs_hotkeys_load_output');
    return _obs_hotkeys_load_output(
      output,
      hotkeys,
    );
  }

  _dart_obs_hotkeys_load_output _obs_hotkeys_load_output;

  void obs_hotkeys_load_service(
    ffi.Pointer<obs_service> service,
    ffi.Pointer<obs_data> hotkeys,
  ) {
    _obs_hotkeys_load_service ??= _dylib.lookupFunction<
        _c_obs_hotkeys_load_service,
        _dart_obs_hotkeys_load_service>('obs_hotkeys_load_service');
    return _obs_hotkeys_load_service(
      service,
      hotkeys,
    );
  }

  _dart_obs_hotkeys_load_service _obs_hotkeys_load_service;

  void obs_hotkeys_load_source(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_data> hotkeys,
  ) {
    _obs_hotkeys_load_source ??= _dylib.lookupFunction<
        _c_obs_hotkeys_load_source,
        _dart_obs_hotkeys_load_source>('obs_hotkeys_load_source');
    return _obs_hotkeys_load_source(
      source,
      hotkeys,
    );
  }

  _dart_obs_hotkeys_load_source _obs_hotkeys_load_source;

  void obs_hotkey_pair_load(
    int id,
    ffi.Pointer<obs_data_array> data0,
    ffi.Pointer<obs_data_array> data1,
  ) {
    _obs_hotkey_pair_load ??= _dylib.lookupFunction<_c_obs_hotkey_pair_load,
        _dart_obs_hotkey_pair_load>('obs_hotkey_pair_load');
    return _obs_hotkey_pair_load(
      id,
      data0,
      data1,
    );
  }

  _dart_obs_hotkey_pair_load _obs_hotkey_pair_load;

  ffi.Pointer<obs_data_array> obs_hotkey_save(
    int id,
  ) {
    _obs_hotkey_save ??=
        _dylib.lookupFunction<_c_obs_hotkey_save, _dart_obs_hotkey_save>(
            'obs_hotkey_save');
    return _obs_hotkey_save(
      id,
    );
  }

  _dart_obs_hotkey_save _obs_hotkey_save;

  void obs_hotkey_pair_save(
    int id,
    ffi.Pointer<ffi.Pointer<obs_data_array>> p_data0,
    ffi.Pointer<ffi.Pointer<obs_data_array>> p_data1,
  ) {
    _obs_hotkey_pair_save ??= _dylib.lookupFunction<_c_obs_hotkey_pair_save,
        _dart_obs_hotkey_pair_save>('obs_hotkey_pair_save');
    return _obs_hotkey_pair_save(
      id,
      p_data0,
      p_data1,
    );
  }

  _dart_obs_hotkey_pair_save _obs_hotkey_pair_save;

  ffi.Pointer<obs_data> obs_hotkeys_save_encoder(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_hotkeys_save_encoder ??= _dylib.lookupFunction<
        _c_obs_hotkeys_save_encoder,
        _dart_obs_hotkeys_save_encoder>('obs_hotkeys_save_encoder');
    return _obs_hotkeys_save_encoder(
      encoder,
    );
  }

  _dart_obs_hotkeys_save_encoder _obs_hotkeys_save_encoder;

  ffi.Pointer<obs_data> obs_hotkeys_save_output(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_hotkeys_save_output ??= _dylib.lookupFunction<
        _c_obs_hotkeys_save_output,
        _dart_obs_hotkeys_save_output>('obs_hotkeys_save_output');
    return _obs_hotkeys_save_output(
      output,
    );
  }

  _dart_obs_hotkeys_save_output _obs_hotkeys_save_output;

  ffi.Pointer<obs_data> obs_hotkeys_save_service(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_hotkeys_save_service ??= _dylib.lookupFunction<
        _c_obs_hotkeys_save_service,
        _dart_obs_hotkeys_save_service>('obs_hotkeys_save_service');
    return _obs_hotkeys_save_service(
      service,
    );
  }

  _dart_obs_hotkeys_save_service _obs_hotkeys_save_service;

  ffi.Pointer<obs_data> obs_hotkeys_save_source(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_hotkeys_save_source ??= _dylib.lookupFunction<
        _c_obs_hotkeys_save_source,
        _dart_obs_hotkeys_save_source>('obs_hotkeys_save_source');
    return _obs_hotkeys_save_source(
      source,
    );
  }

  _dart_obs_hotkeys_save_source _obs_hotkeys_save_source;

  void obs_enum_hotkeys(
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_enum_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_enum_hotkeys ??=
        _dylib.lookupFunction<_c_obs_enum_hotkeys, _dart_obs_enum_hotkeys>(
            'obs_enum_hotkeys');
    return _obs_enum_hotkeys(
      func,
      data,
    );
  }

  _dart_obs_enum_hotkeys _obs_enum_hotkeys;

  void obs_enum_hotkey_bindings(
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_binding_enum_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_enum_hotkey_bindings ??= _dylib.lookupFunction<
        _c_obs_enum_hotkey_bindings,
        _dart_obs_enum_hotkey_bindings>('obs_enum_hotkey_bindings');
    return _obs_enum_hotkey_bindings(
      func,
      data,
    );
  }

  _dart_obs_enum_hotkey_bindings _obs_enum_hotkey_bindings;

  void obs_hotkey_enable_background_press(
    int enable,
  ) {
    _obs_hotkey_enable_background_press ??= _dylib.lookupFunction<
            _c_obs_hotkey_enable_background_press,
            _dart_obs_hotkey_enable_background_press>(
        'obs_hotkey_enable_background_press');
    return _obs_hotkey_enable_background_press(
      enable,
    );
  }

  _dart_obs_hotkey_enable_background_press _obs_hotkey_enable_background_press;

  void obs_hotkey_enable_strict_modifiers(
    int enable,
  ) {
    _obs_hotkey_enable_strict_modifiers ??= _dylib.lookupFunction<
            _c_obs_hotkey_enable_strict_modifiers,
            _dart_obs_hotkey_enable_strict_modifiers>(
        'obs_hotkey_enable_strict_modifiers');
    return _obs_hotkey_enable_strict_modifiers(
      enable,
    );
  }

  _dart_obs_hotkey_enable_strict_modifiers _obs_hotkey_enable_strict_modifiers;

  void obs_hotkey_set_callback_routing_func(
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_callback_router_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_hotkey_set_callback_routing_func ??= _dylib.lookupFunction<
            _c_obs_hotkey_set_callback_routing_func,
            _dart_obs_hotkey_set_callback_routing_func>(
        'obs_hotkey_set_callback_routing_func');
    return _obs_hotkey_set_callback_routing_func(
      func,
      data,
    );
  }

  _dart_obs_hotkey_set_callback_routing_func
      _obs_hotkey_set_callback_routing_func;

  void obs_hotkey_trigger_routed_callback(
    int id,
    int pressed,
  ) {
    _obs_hotkey_trigger_routed_callback ??= _dylib.lookupFunction<
            _c_obs_hotkey_trigger_routed_callback,
            _dart_obs_hotkey_trigger_routed_callback>(
        'obs_hotkey_trigger_routed_callback');
    return _obs_hotkey_trigger_routed_callback(
      id,
      pressed,
    );
  }

  _dart_obs_hotkey_trigger_routed_callback _obs_hotkey_trigger_routed_callback;

  void obs_hotkey_enable_callback_rerouting(
    int enable,
  ) {
    _obs_hotkey_enable_callback_rerouting ??= _dylib.lookupFunction<
            _c_obs_hotkey_enable_callback_rerouting,
            _dart_obs_hotkey_enable_callback_rerouting>(
        'obs_hotkey_enable_callback_rerouting');
    return _obs_hotkey_enable_callback_rerouting(
      enable,
    );
  }

  _dart_obs_hotkey_enable_callback_rerouting
      _obs_hotkey_enable_callback_rerouting;

  void obs_hotkey_update_atomic(
    ffi.Pointer<ffi.NativeFunction<obs_hotkey_atomic_update_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_hotkey_update_atomic ??= _dylib.lookupFunction<
        _c_obs_hotkey_update_atomic,
        _dart_obs_hotkey_update_atomic>('obs_hotkey_update_atomic');
    return _obs_hotkey_update_atomic(
      func,
      data,
    );
  }

  _dart_obs_hotkey_update_atomic _obs_hotkey_update_atomic;

  void obs_key_to_str(
    int key,
    ffi.Pointer<dstr> str,
  ) {
    _obs_key_to_str ??=
        _dylib.lookupFunction<_c_obs_key_to_str, _dart_obs_key_to_str>(
            'obs_key_to_str');
    return _obs_key_to_str(
      key,
      str,
    );
  }

  _dart_obs_key_to_str _obs_key_to_str;

  int obs_key_from_virtual_key(
    int code,
  ) {
    _obs_key_from_virtual_key ??= _dylib.lookupFunction<
        _c_obs_key_from_virtual_key,
        _dart_obs_key_from_virtual_key>('obs_key_from_virtual_key');
    return _obs_key_from_virtual_key(
      code,
    );
  }

  _dart_obs_key_from_virtual_key _obs_key_from_virtual_key;

  int obs_key_to_virtual_key(
    int key,
  ) {
    _obs_key_to_virtual_key ??= _dylib.lookupFunction<_c_obs_key_to_virtual_key,
        _dart_obs_key_to_virtual_key>('obs_key_to_virtual_key');
    return _obs_key_to_virtual_key(
      key,
    );
  }

  _dart_obs_key_to_virtual_key _obs_key_to_virtual_key;

  ffi.Pointer<ffi.Int8> obs_key_to_name(
    int key,
  ) {
    _obs_key_to_name ??=
        _dylib.lookupFunction<_c_obs_key_to_name, _dart_obs_key_to_name>(
            'obs_key_to_name');
    return _obs_key_to_name(
      key,
    );
  }

  _dart_obs_key_to_name _obs_key_to_name;

  int obs_key_from_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_key_from_name ??=
        _dylib.lookupFunction<_c_obs_key_from_name, _dart_obs_key_from_name>(
            'obs_key_from_name');
    return _obs_key_from_name(
      name,
    );
  }

  _dart_obs_key_from_name _obs_key_from_name;

  /// Find a core libobs data file
  /// @param path name of the base file
  /// @return A string containing the full path to the file.
  /// Use bfree after use.
  ffi.Pointer<ffi.Int8> obs_find_data_file(
    ffi.Pointer<ffi.Int8> file,
  ) {
    _obs_find_data_file ??=
        _dylib.lookupFunction<_c_obs_find_data_file, _dart_obs_find_data_file>(
            'obs_find_data_file');
    return _obs_find_data_file(
      file,
    );
  }

  _dart_obs_find_data_file _obs_find_data_file;

  /// Add a path to search libobs data files in.
  /// @param path Full path to directory to look in.
  /// The string is copied.
  void obs_add_data_path(
    ffi.Pointer<ffi.Int8> path,
  ) {
    _obs_add_data_path ??=
        _dylib.lookupFunction<_c_obs_add_data_path, _dart_obs_add_data_path>(
            'obs_add_data_path');
    return _obs_add_data_path(
      path,
    );
  }

  _dart_obs_add_data_path _obs_add_data_path;

  /// Remove a path from libobs core data paths.
  /// @param path The path to compare to currently set paths.
  /// It does not need to be the same pointer, but
  /// the path string must match an entry fully.
  /// @return Whether or not the path was successfully removed.
  /// If false, the path could not be found.
  int obs_remove_data_path(
    ffi.Pointer<ffi.Int8> path,
  ) {
    _obs_remove_data_path ??= _dylib.lookupFunction<_c_obs_remove_data_path,
        _dart_obs_remove_data_path>('obs_remove_data_path');
    return _obs_remove_data_path(
      path,
    );
  }

  _dart_obs_remove_data_path _obs_remove_data_path;

  /// Initializes OBS
  ///
  /// @param  locale              The locale to use for modules
  /// @param  module_config_path  Path to module config storage directory
  /// (or NULL if none)
  /// @param  store               The profiler name store for OBS to use or NULL
  int obs_startup(
    ffi.Pointer<ffi.Int8> locale,
    ffi.Pointer<ffi.Int8> module_config_path,
    ffi.Pointer<profiler_name_store> store,
  ) {
    _obs_startup ??=
        _dylib.lookupFunction<_c_obs_startup, _dart_obs_startup>('obs_startup');
    return _obs_startup(
      locale,
      module_config_path,
      store,
    );
  }

  _dart_obs_startup _obs_startup;

  /// Releases all data associated with OBS and terminates the OBS context
  void obs_shutdown() {
    _obs_shutdown ??= _dylib
        .lookupFunction<_c_obs_shutdown, _dart_obs_shutdown>('obs_shutdown');
    return _obs_shutdown();
  }

  _dart_obs_shutdown _obs_shutdown;

  /// @return true if the main OBS context has been initialized
  int obs_initialized() {
    _obs_initialized ??=
        _dylib.lookupFunction<_c_obs_initialized, _dart_obs_initialized>(
            'obs_initialized');
    return _obs_initialized();
  }

  _dart_obs_initialized _obs_initialized;

  /// @return The current core version
  int obs_get_version() {
    _obs_get_version ??=
        _dylib.lookupFunction<_c_obs_get_version, _dart_obs_get_version>(
            'obs_get_version');
    return _obs_get_version();
  }

  _dart_obs_get_version _obs_get_version;

  /// @return The current core version string
  ffi.Pointer<ffi.Int8> obs_get_version_string() {
    _obs_get_version_string ??= _dylib.lookupFunction<_c_obs_get_version_string,
        _dart_obs_get_version_string>('obs_get_version_string');
    return _obs_get_version_string();
  }

  _dart_obs_get_version_string _obs_get_version_string;

  /// Sets things up for calls to obs_get_cmdline_args. Called only once at startup
  /// and safely copies argv/argc from main(). Subsequent calls do nothing.
  ///
  /// @param  argc  The count of command line arguments, from main()
  /// @param  argv  An array of command line arguments, copied from main() and ends
  /// with NULL.
  void obs_set_cmdline_args(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ) {
    _obs_set_cmdline_args ??= _dylib.lookupFunction<_c_obs_set_cmdline_args,
        _dart_obs_set_cmdline_args>('obs_set_cmdline_args');
    return _obs_set_cmdline_args(
      argc,
      argv,
    );
  }

  _dart_obs_set_cmdline_args _obs_set_cmdline_args;

  /// Sets a new locale to use for modules.  This will call obs_module_set_locale
  /// for each module with the new locale.
  ///
  /// @param  locale  The locale to use for modules
  void obs_set_locale(
    ffi.Pointer<ffi.Int8> locale,
  ) {
    _obs_set_locale ??=
        _dylib.lookupFunction<_c_obs_set_locale, _dart_obs_set_locale>(
            'obs_set_locale');
    return _obs_set_locale(
      locale,
    );
  }

  _dart_obs_set_locale _obs_set_locale;

  /// @return the current locale
  ffi.Pointer<ffi.Int8> obs_get_locale() {
    _obs_get_locale ??=
        _dylib.lookupFunction<_c_obs_get_locale, _dart_obs_get_locale>(
            'obs_get_locale');
    return _obs_get_locale();
  }

  _dart_obs_get_locale _obs_get_locale;

  /// Returns the profiler name store (see util/profiler.h) used by OBS, which is
  /// either a name store passed to obs_startup, an internal name store, or NULL
  /// in case obs_initialized() returns false.
  ffi.Pointer<profiler_name_store> obs_get_profiler_name_store() {
    _obs_get_profiler_name_store ??= _dylib.lookupFunction<
        _c_obs_get_profiler_name_store,
        _dart_obs_get_profiler_name_store>('obs_get_profiler_name_store');
    return _obs_get_profiler_name_store();
  }

  _dart_obs_get_profiler_name_store _obs_get_profiler_name_store;

  /// Sets base video output base resolution/fps/format.
  ///
  /// @note This data cannot be changed if an output is currently active.
  /// @note The graphics module cannot be changed without fully destroying the
  /// OBS context.
  ///
  /// @param   ovi  Pointer to an obs_video_info structure containing the
  /// specification of the graphics subsystem,
  /// @return       OBS_VIDEO_SUCCESS if successful
  /// OBS_VIDEO_NOT_SUPPORTED if the adapter lacks capabilities
  /// OBS_VIDEO_INVALID_PARAM if a parameter is invalid
  /// OBS_VIDEO_CURRENTLY_ACTIVE if video is currently active
  /// OBS_VIDEO_MODULE_NOT_FOUND if the graphics module is not found
  /// OBS_VIDEO_FAIL for generic failure
  int obs_reset_video(
    ffi.Pointer<obs_video_info> ovi,
  ) {
    _obs_reset_video ??=
        _dylib.lookupFunction<_c_obs_reset_video, _dart_obs_reset_video>(
            'obs_reset_video');
    return _obs_reset_video(
      ovi,
    );
  }

  _dart_obs_reset_video _obs_reset_video;

  /// Sets base audio output format/channels/samples/etc
  ///
  /// @note Cannot reset base audio if an output is currently active.
  int obs_reset_audio(
    ffi.Pointer<obs_audio_info> oai,
  ) {
    _obs_reset_audio ??=
        _dylib.lookupFunction<_c_obs_reset_audio, _dart_obs_reset_audio>(
            'obs_reset_audio');
    return _obs_reset_audio(
      oai,
    );
  }

  _dart_obs_reset_audio _obs_reset_audio;

  /// Gets the current video settings, returns false if no video
  int obs_get_video_info(
    ffi.Pointer<obs_video_info> ovi,
  ) {
    _obs_get_video_info ??=
        _dylib.lookupFunction<_c_obs_get_video_info, _dart_obs_get_video_info>(
            'obs_get_video_info');
    return _obs_get_video_info(
      ovi,
    );
  }

  _dart_obs_get_video_info _obs_get_video_info;

  /// Gets the current audio settings, returns false if no audio
  int obs_get_audio_info(
    ffi.Pointer<obs_audio_info> oai,
  ) {
    _obs_get_audio_info ??=
        _dylib.lookupFunction<_c_obs_get_audio_info, _dart_obs_get_audio_info>(
            'obs_get_audio_info');
    return _obs_get_audio_info(
      oai,
    );
  }

  _dart_obs_get_audio_info _obs_get_audio_info;

  /// Opens a plugin module directly from a specific path.
  ///
  /// If the module already exists then the function will return successful, and
  /// the module parameter will be given the pointer to the existing module.
  ///
  /// This does not initialize the module, it only loads the module image.  To
  /// initialize the module, call obs_init_module.
  ///
  /// @param  module     The pointer to the created module.
  /// @param  path       Specifies the path to the module library file.  If the
  /// extension is not specified, it will use the extension
  /// appropriate to the operating system.
  /// @param  data_path  Specifies the path to the directory where the module's
  /// data files are stored.
  /// @returns           MODULE_SUCCESS if successful
  /// MODULE_ERROR if a generic error occurred
  /// MODULE_FILE_NOT_FOUND if the module was not found
  /// MODULE_MISSING_EXPORTS if required exports are missing
  /// MODULE_INCOMPATIBLE_VER if incompatible version
  int obs_open_module(
    ffi.Pointer<ffi.Pointer<obs_module>> module,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> data_path,
  ) {
    _obs_open_module ??=
        _dylib.lookupFunction<_c_obs_open_module, _dart_obs_open_module>(
            'obs_open_module');
    return _obs_open_module(
      module,
      path,
      data_path,
    );
  }

  _dart_obs_open_module _obs_open_module;

  /// Initializes the module, which calls its obs_module_load export.  If the
  /// module is already loaded, then this function does nothing and returns
  /// successful.
  int obs_init_module(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_init_module ??=
        _dylib.lookupFunction<_c_obs_init_module, _dart_obs_init_module>(
            'obs_init_module');
    return _obs_init_module(
      module,
    );
  }

  _dart_obs_init_module _obs_init_module;

  /// Returns a module based upon its name, or NULL if not found
  ffi.Pointer<obs_module> obs_get_module(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_module ??=
        _dylib.lookupFunction<_c_obs_get_module, _dart_obs_get_module>(
            'obs_get_module');
    return _obs_get_module(
      name,
    );
  }

  _dart_obs_get_module _obs_get_module;

  /// Returns locale text from a specific module
  int obs_module_get_locale_string(
    ffi.Pointer<obs_module> mod,
    ffi.Pointer<ffi.Int8> lookup_string,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> translated_string,
  ) {
    _obs_module_get_locale_string ??= _dylib.lookupFunction<
        _c_obs_module_get_locale_string,
        _dart_obs_module_get_locale_string>('obs_module_get_locale_string');
    return _obs_module_get_locale_string(
      mod,
      lookup_string,
      translated_string,
    );
  }

  _dart_obs_module_get_locale_string _obs_module_get_locale_string;

  ffi.Pointer<ffi.Int8> obs_module_get_locale_text(
    ffi.Pointer<obs_module> mod,
    ffi.Pointer<ffi.Int8> text,
  ) {
    _obs_module_get_locale_text ??= _dylib.lookupFunction<
        _c_obs_module_get_locale_text,
        _dart_obs_module_get_locale_text>('obs_module_get_locale_text');
    return _obs_module_get_locale_text(
      mod,
      text,
    );
  }

  _dart_obs_module_get_locale_text _obs_module_get_locale_text;

  /// Logs loaded modules
  void obs_log_loaded_modules() {
    _obs_log_loaded_modules ??= _dylib.lookupFunction<_c_obs_log_loaded_modules,
        _dart_obs_log_loaded_modules>('obs_log_loaded_modules');
    return _obs_log_loaded_modules();
  }

  _dart_obs_log_loaded_modules _obs_log_loaded_modules;

  /// Returns the module file name
  ffi.Pointer<ffi.Int8> obs_get_module_file_name(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_file_name ??= _dylib.lookupFunction<
        _c_obs_get_module_file_name,
        _dart_obs_get_module_file_name>('obs_get_module_file_name');
    return _obs_get_module_file_name(
      module,
    );
  }

  _dart_obs_get_module_file_name _obs_get_module_file_name;

  /// Returns the module full name
  ffi.Pointer<ffi.Int8> obs_get_module_name(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_name ??= _dylib.lookupFunction<_c_obs_get_module_name,
        _dart_obs_get_module_name>('obs_get_module_name');
    return _obs_get_module_name(
      module,
    );
  }

  _dart_obs_get_module_name _obs_get_module_name;

  /// Returns the module author(s)
  ffi.Pointer<ffi.Int8> obs_get_module_author(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_author ??= _dylib.lookupFunction<_c_obs_get_module_author,
        _dart_obs_get_module_author>('obs_get_module_author');
    return _obs_get_module_author(
      module,
    );
  }

  _dart_obs_get_module_author _obs_get_module_author;

  /// Returns the module description
  ffi.Pointer<ffi.Int8> obs_get_module_description(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_description ??= _dylib.lookupFunction<
        _c_obs_get_module_description,
        _dart_obs_get_module_description>('obs_get_module_description');
    return _obs_get_module_description(
      module,
    );
  }

  _dart_obs_get_module_description _obs_get_module_description;

  /// Returns the module binary path
  ffi.Pointer<ffi.Int8> obs_get_module_binary_path(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_binary_path ??= _dylib.lookupFunction<
        _c_obs_get_module_binary_path,
        _dart_obs_get_module_binary_path>('obs_get_module_binary_path');
    return _obs_get_module_binary_path(
      module,
    );
  }

  _dart_obs_get_module_binary_path _obs_get_module_binary_path;

  /// Returns the module data path
  ffi.Pointer<ffi.Int8> obs_get_module_data_path(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_data_path ??= _dylib.lookupFunction<
        _c_obs_get_module_data_path,
        _dart_obs_get_module_data_path>('obs_get_module_data_path');
    return _obs_get_module_data_path(
      module,
    );
  }

  _dart_obs_get_module_data_path _obs_get_module_data_path;

  /// Adds a module search path to be used with obs_find_modules.  If the search
  /// path strings contain %module%, that text will be replaced with the module
  /// name when used.
  ///
  /// @param  bin   Specifies the module's binary directory search path.
  /// @param  data  Specifies the module's data directory search path.
  void obs_add_module_path(
    ffi.Pointer<ffi.Int8> bin,
    ffi.Pointer<ffi.Int8> data,
  ) {
    _obs_add_module_path ??= _dylib.lookupFunction<_c_obs_add_module_path,
        _dart_obs_add_module_path>('obs_add_module_path');
    return _obs_add_module_path(
      bin,
      data,
    );
  }

  _dart_obs_add_module_path _obs_add_module_path;

  /// Automatically loads all modules from module paths (convenience function)
  void obs_load_all_modules() {
    _obs_load_all_modules ??= _dylib.lookupFunction<_c_obs_load_all_modules,
        _dart_obs_load_all_modules>('obs_load_all_modules');
    return _obs_load_all_modules();
  }

  _dart_obs_load_all_modules _obs_load_all_modules;

  /// Notifies modules that all modules have been loaded.  This function should
  /// be called after all modules have been loaded.
  void obs_post_load_modules() {
    _obs_post_load_modules ??= _dylib.lookupFunction<_c_obs_post_load_modules,
        _dart_obs_post_load_modules>('obs_post_load_modules');
    return _obs_post_load_modules();
  }

  _dart_obs_post_load_modules _obs_post_load_modules;

  /// Finds all modules within the search paths added by obs_add_module_path.
  void obs_find_modules(
    ffi.Pointer<ffi.NativeFunction<obs_find_module_callback_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_find_modules ??=
        _dylib.lookupFunction<_c_obs_find_modules, _dart_obs_find_modules>(
            'obs_find_modules');
    return _obs_find_modules(
      callback,
      param,
    );
  }

  _dart_obs_find_modules _obs_find_modules;

  /// Enumerates all loaded modules
  void obs_enum_modules(
    ffi.Pointer<ffi.NativeFunction<obs_enum_module_callback_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_modules ??=
        _dylib.lookupFunction<_c_obs_enum_modules, _dart_obs_enum_modules>(
            'obs_enum_modules');
    return _obs_enum_modules(
      callback,
      param,
    );
  }

  _dart_obs_enum_modules _obs_enum_modules;

  /// Helper function for using default module locale
  ffi.Pointer<text_lookup> obs_module_load_locale(
    ffi.Pointer<obs_module> module,
    ffi.Pointer<ffi.Int8> default_locale,
    ffi.Pointer<ffi.Int8> locale,
  ) {
    _obs_module_load_locale ??= _dylib.lookupFunction<_c_obs_module_load_locale,
        _dart_obs_module_load_locale>('obs_module_load_locale');
    return _obs_module_load_locale(
      module,
      default_locale,
      locale,
    );
  }

  _dart_obs_module_load_locale _obs_module_load_locale;

  /// Returns the location of a plugin module data file.
  ///
  /// @note   Modules should use obs_module_file function defined in obs-module.h
  /// as a more elegant means of getting their files without having to
  /// specify the module parameter.
  ///
  /// @param  module  The module associated with the file to locate
  /// @param  file    The file to locate
  /// @return         Path string, or NULL if not found.  Use bfree to free string.
  ffi.Pointer<ffi.Int8> obs_find_module_file(
    ffi.Pointer<obs_module> module,
    ffi.Pointer<ffi.Int8> file,
  ) {
    _obs_find_module_file ??= _dylib.lookupFunction<_c_obs_find_module_file,
        _dart_obs_find_module_file>('obs_find_module_file');
    return _obs_find_module_file(
      module,
      file,
    );
  }

  _dart_obs_find_module_file _obs_find_module_file;

  /// Returns the path of a plugin module config file (whether it exists or not)
  ///
  /// @note   Modules should use obs_module_config_path function defined in
  /// obs-module.h as a more elegant means of getting their files without
  /// having to specify the module parameter.
  ///
  /// @param  module  The module associated with the path
  /// @param  file    The file to get a path to
  /// @return         Path string, or NULL if not found.  Use bfree to free string.
  ffi.Pointer<ffi.Int8> obs_module_get_config_path(
    ffi.Pointer<obs_module> module,
    ffi.Pointer<ffi.Int8> file,
  ) {
    _obs_module_get_config_path ??= _dylib.lookupFunction<
        _c_obs_module_get_config_path,
        _dart_obs_module_get_config_path>('obs_module_get_config_path');
    return _obs_module_get_config_path(
      module,
      file,
    );
  }

  _dart_obs_module_get_config_path _obs_module_get_config_path;

  /// Enumerates all source types (inputs, filters, transitions, etc).
  int obs_enum_source_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_source_types ??= _dylib.lookupFunction<_c_obs_enum_source_types,
        _dart_obs_enum_source_types>('obs_enum_source_types');
    return _obs_enum_source_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_source_types _obs_enum_source_types;

  /// Enumerates all available inputs source types.
  ///
  /// Inputs are general source inputs (such as capture sources, device sources,
  /// etc).
  int obs_enum_input_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_input_types ??= _dylib.lookupFunction<_c_obs_enum_input_types,
        _dart_obs_enum_input_types>('obs_enum_input_types');
    return _obs_enum_input_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_input_types _obs_enum_input_types;

  int obs_enum_input_types2(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> unversioned_id,
  ) {
    _obs_enum_input_types2 ??= _dylib.lookupFunction<_c_obs_enum_input_types2,
        _dart_obs_enum_input_types2>('obs_enum_input_types2');
    return _obs_enum_input_types2(
      idx,
      id,
      unversioned_id,
    );
  }

  _dart_obs_enum_input_types2 _obs_enum_input_types2;

  ffi.Pointer<ffi.Int8> obs_get_latest_input_type_id(
    ffi.Pointer<ffi.Int8> unversioned_id,
  ) {
    _obs_get_latest_input_type_id ??= _dylib.lookupFunction<
        _c_obs_get_latest_input_type_id,
        _dart_obs_get_latest_input_type_id>('obs_get_latest_input_type_id');
    return _obs_get_latest_input_type_id(
      unversioned_id,
    );
  }

  _dart_obs_get_latest_input_type_id _obs_get_latest_input_type_id;

  /// Enumerates all available filter source types.
  ///
  /// Filters are sources that are used to modify the video/audio output of
  /// other sources.
  int obs_enum_filter_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_filter_types ??= _dylib.lookupFunction<_c_obs_enum_filter_types,
        _dart_obs_enum_filter_types>('obs_enum_filter_types');
    return _obs_enum_filter_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_filter_types _obs_enum_filter_types;

  /// Enumerates all available transition source types.
  ///
  /// Transitions are sources used to transition between two or more other
  /// sources.
  int obs_enum_transition_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_transition_types ??= _dylib.lookupFunction<
        _c_obs_enum_transition_types,
        _dart_obs_enum_transition_types>('obs_enum_transition_types');
    return _obs_enum_transition_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_transition_types _obs_enum_transition_types;

  /// Enumerates all available output types.
  int obs_enum_output_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_output_types ??= _dylib.lookupFunction<_c_obs_enum_output_types,
        _dart_obs_enum_output_types>('obs_enum_output_types');
    return _obs_enum_output_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_output_types _obs_enum_output_types;

  /// Enumerates all available encoder types.
  int obs_enum_encoder_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_encoder_types ??= _dylib.lookupFunction<_c_obs_enum_encoder_types,
        _dart_obs_enum_encoder_types>('obs_enum_encoder_types');
    return _obs_enum_encoder_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_encoder_types _obs_enum_encoder_types;

  /// Enumerates all available service types.
  int obs_enum_service_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_service_types ??= _dylib.lookupFunction<_c_obs_enum_service_types,
        _dart_obs_enum_service_types>('obs_enum_service_types');
    return _obs_enum_service_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_service_types _obs_enum_service_types;

  /// Helper function for entering the OBS graphics context
  void obs_enter_graphics() {
    _obs_enter_graphics ??=
        _dylib.lookupFunction<_c_obs_enter_graphics, _dart_obs_enter_graphics>(
            'obs_enter_graphics');
    return _obs_enter_graphics();
  }

  _dart_obs_enter_graphics _obs_enter_graphics;

  /// Helper function for leaving the OBS graphics context
  void obs_leave_graphics() {
    _obs_leave_graphics ??=
        _dylib.lookupFunction<_c_obs_leave_graphics, _dart_obs_leave_graphics>(
            'obs_leave_graphics');
    return _obs_leave_graphics();
  }

  _dart_obs_leave_graphics _obs_leave_graphics;

  /// Gets the main audio output handler for this OBS context
  ffi.Pointer<audio_output> obs_get_audio() {
    _obs_get_audio ??= _dylib
        .lookupFunction<_c_obs_get_audio, _dart_obs_get_audio>('obs_get_audio');
    return _obs_get_audio();
  }

  _dart_obs_get_audio _obs_get_audio;

  /// Gets the main video output handler for this OBS context
  ffi.Pointer<video_output> obs_get_video() {
    _obs_get_video ??= _dylib
        .lookupFunction<_c_obs_get_video, _dart_obs_get_video>('obs_get_video');
    return _obs_get_video();
  }

  _dart_obs_get_video _obs_get_video;

  /// Returns true if video is active, false otherwise
  int obs_video_active() {
    _obs_video_active ??=
        _dylib.lookupFunction<_c_obs_video_active, _dart_obs_video_active>(
            'obs_video_active');
    return _obs_video_active();
  }

  _dart_obs_video_active _obs_video_active;

  /// Sets the primary output source for a channel.
  void obs_set_output_source(
    int channel,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_set_output_source ??= _dylib.lookupFunction<_c_obs_set_output_source,
        _dart_obs_set_output_source>('obs_set_output_source');
    return _obs_set_output_source(
      channel,
      source,
    );
  }

  _dart_obs_set_output_source _obs_set_output_source;

  /// Gets the primary output source for a channel and increments the reference
  /// counter for that source.  Use obs_source_release to release.
  ffi.Pointer<obs_source> obs_get_output_source(
    int channel,
  ) {
    _obs_get_output_source ??= _dylib.lookupFunction<_c_obs_get_output_source,
        _dart_obs_get_output_source>('obs_get_output_source');
    return _obs_get_output_source(
      channel,
    );
  }

  _dart_obs_get_output_source _obs_get_output_source;

  /// Enumerates all input sources
  ///
  /// Callback function returns true to continue enumeration, or false to end
  /// enumeration.
  ///
  /// Use obs_source_get_ref or obs_source_get_weak_source if you want to retain
  /// a reference after obs_enum_sources finishes
  void obs_enum_sources(
    ffi.Pointer<ffi.NativeFunction<_typedefC_108>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_sources ??=
        _dylib.lookupFunction<_c_obs_enum_sources, _dart_obs_enum_sources>(
            'obs_enum_sources');
    return _obs_enum_sources(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_sources _obs_enum_sources;

  /// Enumerates scenes
  void obs_enum_scenes(
    ffi.Pointer<ffi.NativeFunction<_typedefC_109>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_scenes ??=
        _dylib.lookupFunction<_c_obs_enum_scenes, _dart_obs_enum_scenes>(
            'obs_enum_scenes');
    return _obs_enum_scenes(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_scenes _obs_enum_scenes;

  /// Enumerates outputs
  void obs_enum_outputs(
    ffi.Pointer<ffi.NativeFunction<_typedefC_110>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_outputs ??=
        _dylib.lookupFunction<_c_obs_enum_outputs, _dart_obs_enum_outputs>(
            'obs_enum_outputs');
    return _obs_enum_outputs(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_outputs _obs_enum_outputs;

  /// Enumerates encoders
  void obs_enum_encoders(
    ffi.Pointer<ffi.NativeFunction<_typedefC_111>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_encoders ??=
        _dylib.lookupFunction<_c_obs_enum_encoders, _dart_obs_enum_encoders>(
            'obs_enum_encoders');
    return _obs_enum_encoders(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_encoders _obs_enum_encoders;

  /// Enumerates encoders
  void obs_enum_services(
    ffi.Pointer<ffi.NativeFunction<_typedefC_112>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_services ??=
        _dylib.lookupFunction<_c_obs_enum_services, _dart_obs_enum_services>(
            'obs_enum_services');
    return _obs_enum_services(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_services _obs_enum_services;

  /// Gets a source by its name.
  ///
  /// Increments the source reference counter, use obs_source_release to
  /// release it when complete.
  ffi.Pointer<obs_source> obs_get_source_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_source_by_name ??= _dylib.lookupFunction<_c_obs_get_source_by_name,
        _dart_obs_get_source_by_name>('obs_get_source_by_name');
    return _obs_get_source_by_name(
      name,
    );
  }

  _dart_obs_get_source_by_name _obs_get_source_by_name;

  /// Gets an output by its name.
  ffi.Pointer<obs_output> obs_get_output_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_output_by_name ??= _dylib.lookupFunction<_c_obs_get_output_by_name,
        _dart_obs_get_output_by_name>('obs_get_output_by_name');
    return _obs_get_output_by_name(
      name,
    );
  }

  _dart_obs_get_output_by_name _obs_get_output_by_name;

  /// Gets an encoder by its name.
  ffi.Pointer<obs_encoder> obs_get_encoder_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_encoder_by_name ??= _dylib.lookupFunction<
        _c_obs_get_encoder_by_name,
        _dart_obs_get_encoder_by_name>('obs_get_encoder_by_name');
    return _obs_get_encoder_by_name(
      name,
    );
  }

  _dart_obs_get_encoder_by_name _obs_get_encoder_by_name;

  /// Gets an service by its name.
  ffi.Pointer<obs_service> obs_get_service_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_service_by_name ??= _dylib.lookupFunction<
        _c_obs_get_service_by_name,
        _dart_obs_get_service_by_name>('obs_get_service_by_name');
    return _obs_get_service_by_name(
      name,
    );
  }

  _dart_obs_get_service_by_name _obs_get_service_by_name;

  /// Returns a commonly used base effect
  ffi.Pointer<gs_effect> obs_get_base_effect(
    int effect,
  ) {
    _obs_get_base_effect ??= _dylib.lookupFunction<_c_obs_get_base_effect,
        _dart_obs_get_base_effect>('obs_get_base_effect');
    return _obs_get_base_effect(
      effect,
    );
  }

  _dart_obs_get_base_effect _obs_get_base_effect;

  ffi.Pointer<gs_effect> obs_get_default_rect_effect() {
    _obs_get_default_rect_effect ??= _dylib.lookupFunction<
        _c_obs_get_default_rect_effect,
        _dart_obs_get_default_rect_effect>('obs_get_default_rect_effect');
    return _obs_get_default_rect_effect();
  }

  _dart_obs_get_default_rect_effect _obs_get_default_rect_effect;

  /// Returns the primary obs signal handler
  ffi.Pointer<signal_handler> obs_get_signal_handler() {
    _obs_get_signal_handler ??= _dylib.lookupFunction<_c_obs_get_signal_handler,
        _dart_obs_get_signal_handler>('obs_get_signal_handler');
    return _obs_get_signal_handler();
  }

  _dart_obs_get_signal_handler _obs_get_signal_handler;

  /// Returns the primary obs procedure handler
  ffi.Pointer<proc_handler> obs_get_proc_handler() {
    _obs_get_proc_handler ??= _dylib.lookupFunction<_c_obs_get_proc_handler,
        _dart_obs_get_proc_handler>('obs_get_proc_handler');
    return _obs_get_proc_handler();
  }

  _dart_obs_get_proc_handler _obs_get_proc_handler;

  /// Renders the main view
  void obs_render_main_view() {
    _obs_render_main_view ??= _dylib.lookupFunction<_c_obs_render_main_view,
        _dart_obs_render_main_view>('obs_render_main_view');
    return _obs_render_main_view();
  }

  _dart_obs_render_main_view _obs_render_main_view;

  /// Renders the last main output texture
  void obs_render_main_texture() {
    _obs_render_main_texture ??= _dylib.lookupFunction<
        _c_obs_render_main_texture,
        _dart_obs_render_main_texture>('obs_render_main_texture');
    return _obs_render_main_texture();
  }

  _dart_obs_render_main_texture _obs_render_main_texture;

  /// Renders the last main output texture ignoring background color
  void obs_render_main_texture_src_color_only() {
    _obs_render_main_texture_src_color_only ??= _dylib.lookupFunction<
            _c_obs_render_main_texture_src_color_only,
            _dart_obs_render_main_texture_src_color_only>(
        'obs_render_main_texture_src_color_only');
    return _obs_render_main_texture_src_color_only();
  }

  _dart_obs_render_main_texture_src_color_only
      _obs_render_main_texture_src_color_only;

  /// Returns the last main output texture.  This can return NULL if the texture
  /// is unavailable.
  ffi.Pointer<gs_texture> obs_get_main_texture() {
    _obs_get_main_texture ??= _dylib.lookupFunction<_c_obs_get_main_texture,
        _dart_obs_get_main_texture>('obs_get_main_texture');
    return _obs_get_main_texture();
  }

  _dart_obs_get_main_texture _obs_get_main_texture;

  /// Sets the master user volume
  void obs_set_master_volume(
    double volume,
  ) {
    _obs_set_master_volume ??= _dylib.lookupFunction<_c_obs_set_master_volume,
        _dart_obs_set_master_volume>('obs_set_master_volume');
    return _obs_set_master_volume(
      volume,
    );
  }

  _dart_obs_set_master_volume _obs_set_master_volume;

  /// Gets the master user volume
  double obs_get_master_volume() {
    _obs_get_master_volume ??= _dylib.lookupFunction<_c_obs_get_master_volume,
        _dart_obs_get_master_volume>('obs_get_master_volume');
    return _obs_get_master_volume();
  }

  _dart_obs_get_master_volume _obs_get_master_volume;

  /// Saves a source to settings data
  ffi.Pointer<obs_data> obs_save_source(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_save_source ??=
        _dylib.lookupFunction<_c_obs_save_source, _dart_obs_save_source>(
            'obs_save_source');
    return _obs_save_source(
      source,
    );
  }

  _dart_obs_save_source _obs_save_source;

  /// Loads a source from settings data
  ffi.Pointer<obs_source> obs_load_source(
    ffi.Pointer<obs_data> data,
  ) {
    _obs_load_source ??=
        _dylib.lookupFunction<_c_obs_load_source, _dart_obs_load_source>(
            'obs_load_source');
    return _obs_load_source(
      data,
    );
  }

  _dart_obs_load_source _obs_load_source;

  /// Send a save signal to sources
  void obs_source_save(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_save ??=
        _dylib.lookupFunction<_c_obs_source_save, _dart_obs_source_save>(
            'obs_source_save');
    return _obs_source_save(
      source,
    );
  }

  _dart_obs_source_save _obs_source_save;

  /// Send a load signal to sources
  void obs_source_load(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_load ??=
        _dylib.lookupFunction<_c_obs_source_load, _dart_obs_source_load>(
            'obs_source_load');
    return _obs_source_load(
      source,
    );
  }

  _dart_obs_source_load _obs_source_load;

  /// Loads sources from a data array
  void obs_load_sources(
    ffi.Pointer<obs_data_array> array,
    ffi.Pointer<ffi.NativeFunction<obs_load_source_cb>> cb,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    _obs_load_sources ??=
        _dylib.lookupFunction<_c_obs_load_sources, _dart_obs_load_sources>(
            'obs_load_sources');
    return _obs_load_sources(
      array,
      cb,
      private_data,
    );
  }

  _dart_obs_load_sources _obs_load_sources;

  /// Saves sources to a data array
  ffi.Pointer<obs_data_array> obs_save_sources() {
    _obs_save_sources ??=
        _dylib.lookupFunction<_c_obs_save_sources, _dart_obs_save_sources>(
            'obs_save_sources');
    return _obs_save_sources();
  }

  _dart_obs_save_sources _obs_save_sources;

  ffi.Pointer<obs_data_array> obs_save_sources_filtered(
    ffi.Pointer<ffi.NativeFunction<obs_save_source_filter_cb>> cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_save_sources_filtered ??= _dylib.lookupFunction<
        _c_obs_save_sources_filtered,
        _dart_obs_save_sources_filtered>('obs_save_sources_filtered');
    return _obs_save_sources_filtered(
      cb,
      data,
    );
  }

  _dart_obs_save_sources_filtered _obs_save_sources_filtered;

  int obs_obj_get_type(
    ffi.Pointer<ffi.Void> obj,
  ) {
    _obs_obj_get_type ??=
        _dylib.lookupFunction<_c_obs_obj_get_type, _dart_obs_obj_get_type>(
            'obs_obj_get_type');
    return _obs_obj_get_type(
      obj,
    );
  }

  _dart_obs_obj_get_type _obs_obj_get_type;

  ffi.Pointer<ffi.Int8> obs_obj_get_id(
    ffi.Pointer<ffi.Void> obj,
  ) {
    _obs_obj_get_id ??=
        _dylib.lookupFunction<_c_obs_obj_get_id, _dart_obs_obj_get_id>(
            'obs_obj_get_id');
    return _obs_obj_get_id(
      obj,
    );
  }

  _dart_obs_obj_get_id _obs_obj_get_id;

  int obs_obj_invalid(
    ffi.Pointer<ffi.Void> obj,
  ) {
    _obs_obj_invalid ??=
        _dylib.lookupFunction<_c_obs_obj_invalid, _dart_obs_obj_invalid>(
            'obs_obj_invalid');
    return _obs_obj_invalid(
      obj,
    );
  }

  _dart_obs_obj_invalid _obs_obj_invalid;

  ffi.Pointer<ffi.Void> obs_obj_get_data(
    ffi.Pointer<ffi.Void> obj,
  ) {
    _obs_obj_get_data ??=
        _dylib.lookupFunction<_c_obs_obj_get_data, _dart_obs_obj_get_data>(
            'obs_obj_get_data');
    return _obs_obj_get_data(
      obj,
    );
  }

  _dart_obs_obj_get_data _obs_obj_get_data;

  void obs_enum_audio_monitoring_devices(
    ffi.Pointer<ffi.NativeFunction<obs_enum_audio_device_cb>> cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_enum_audio_monitoring_devices ??= _dylib.lookupFunction<
            _c_obs_enum_audio_monitoring_devices,
            _dart_obs_enum_audio_monitoring_devices>(
        'obs_enum_audio_monitoring_devices');
    return _obs_enum_audio_monitoring_devices(
      cb,
      data,
    );
  }

  _dart_obs_enum_audio_monitoring_devices _obs_enum_audio_monitoring_devices;

  int obs_set_audio_monitoring_device(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_set_audio_monitoring_device ??= _dylib.lookupFunction<
            _c_obs_set_audio_monitoring_device,
            _dart_obs_set_audio_monitoring_device>(
        'obs_set_audio_monitoring_device');
    return _obs_set_audio_monitoring_device(
      name,
      id,
    );
  }

  _dart_obs_set_audio_monitoring_device _obs_set_audio_monitoring_device;

  void obs_get_audio_monitoring_device(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_get_audio_monitoring_device ??= _dylib.lookupFunction<
            _c_obs_get_audio_monitoring_device,
            _dart_obs_get_audio_monitoring_device>(
        'obs_get_audio_monitoring_device');
    return _obs_get_audio_monitoring_device(
      name,
      id,
    );
  }

  _dart_obs_get_audio_monitoring_device _obs_get_audio_monitoring_device;

  void obs_add_tick_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_113>> tick,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_add_tick_callback ??= _dylib.lookupFunction<_c_obs_add_tick_callback,
        _dart_obs_add_tick_callback>('obs_add_tick_callback');
    return _obs_add_tick_callback(
      tick,
      param,
    );
  }

  _dart_obs_add_tick_callback _obs_add_tick_callback;

  void obs_remove_tick_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_114>> tick,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_remove_tick_callback ??= _dylib.lookupFunction<
        _c_obs_remove_tick_callback,
        _dart_obs_remove_tick_callback>('obs_remove_tick_callback');
    return _obs_remove_tick_callback(
      tick,
      param,
    );
  }

  _dart_obs_remove_tick_callback _obs_remove_tick_callback;

  void obs_add_main_render_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_115>> draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_add_main_render_callback ??= _dylib.lookupFunction<
        _c_obs_add_main_render_callback,
        _dart_obs_add_main_render_callback>('obs_add_main_render_callback');
    return _obs_add_main_render_callback(
      draw,
      param,
    );
  }

  _dart_obs_add_main_render_callback _obs_add_main_render_callback;

  void obs_remove_main_render_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_116>> draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_remove_main_render_callback ??= _dylib.lookupFunction<
            _c_obs_remove_main_render_callback,
            _dart_obs_remove_main_render_callback>(
        'obs_remove_main_render_callback');
    return _obs_remove_main_render_callback(
      draw,
      param,
    );
  }

  _dart_obs_remove_main_render_callback _obs_remove_main_render_callback;

  void obs_add_raw_video_callback(
    ffi.Pointer<video_scale_info> conversion,
    ffi.Pointer<ffi.NativeFunction<_typedefC_117>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_add_raw_video_callback ??= _dylib.lookupFunction<
        _c_obs_add_raw_video_callback,
        _dart_obs_add_raw_video_callback>('obs_add_raw_video_callback');
    return _obs_add_raw_video_callback(
      conversion,
      callback,
      param,
    );
  }

  _dart_obs_add_raw_video_callback _obs_add_raw_video_callback;

  void obs_remove_raw_video_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_118>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_remove_raw_video_callback ??= _dylib.lookupFunction<
        _c_obs_remove_raw_video_callback,
        _dart_obs_remove_raw_video_callback>('obs_remove_raw_video_callback');
    return _obs_remove_raw_video_callback(
      callback,
      param,
    );
  }

  _dart_obs_remove_raw_video_callback _obs_remove_raw_video_callback;

  int obs_get_video_frame_time() {
    _obs_get_video_frame_time ??= _dylib.lookupFunction<
        _c_obs_get_video_frame_time,
        _dart_obs_get_video_frame_time>('obs_get_video_frame_time');
    return _obs_get_video_frame_time();
  }

  _dart_obs_get_video_frame_time _obs_get_video_frame_time;

  double obs_get_active_fps() {
    _obs_get_active_fps ??=
        _dylib.lookupFunction<_c_obs_get_active_fps, _dart_obs_get_active_fps>(
            'obs_get_active_fps');
    return _obs_get_active_fps();
  }

  _dart_obs_get_active_fps _obs_get_active_fps;

  int obs_get_average_frame_time_ns() {
    _obs_get_average_frame_time_ns ??= _dylib.lookupFunction<
        _c_obs_get_average_frame_time_ns,
        _dart_obs_get_average_frame_time_ns>('obs_get_average_frame_time_ns');
    return _obs_get_average_frame_time_ns();
  }

  _dart_obs_get_average_frame_time_ns _obs_get_average_frame_time_ns;

  int obs_get_frame_interval_ns() {
    _obs_get_frame_interval_ns ??= _dylib.lookupFunction<
        _c_obs_get_frame_interval_ns,
        _dart_obs_get_frame_interval_ns>('obs_get_frame_interval_ns');
    return _obs_get_frame_interval_ns();
  }

  _dart_obs_get_frame_interval_ns _obs_get_frame_interval_ns;

  int obs_get_total_frames() {
    _obs_get_total_frames ??= _dylib.lookupFunction<_c_obs_get_total_frames,
        _dart_obs_get_total_frames>('obs_get_total_frames');
    return _obs_get_total_frames();
  }

  _dart_obs_get_total_frames _obs_get_total_frames;

  int obs_get_lagged_frames() {
    _obs_get_lagged_frames ??= _dylib.lookupFunction<_c_obs_get_lagged_frames,
        _dart_obs_get_lagged_frames>('obs_get_lagged_frames');
    return _obs_get_lagged_frames();
  }

  _dart_obs_get_lagged_frames _obs_get_lagged_frames;

  int obs_nv12_tex_active() {
    _obs_nv12_tex_active ??= _dylib.lookupFunction<_c_obs_nv12_tex_active,
        _dart_obs_nv12_tex_active>('obs_nv12_tex_active');
    return _obs_nv12_tex_active();
  }

  _dart_obs_nv12_tex_active _obs_nv12_tex_active;

  void obs_apply_private_data(
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_apply_private_data ??= _dylib.lookupFunction<_c_obs_apply_private_data,
        _dart_obs_apply_private_data>('obs_apply_private_data');
    return _obs_apply_private_data(
      settings,
    );
  }

  _dart_obs_apply_private_data _obs_apply_private_data;

  void obs_set_private_data(
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_set_private_data ??= _dylib.lookupFunction<_c_obs_set_private_data,
        _dart_obs_set_private_data>('obs_set_private_data');
    return _obs_set_private_data(
      settings,
    );
  }

  _dart_obs_set_private_data _obs_set_private_data;

  ffi.Pointer<obs_data> obs_get_private_data() {
    _obs_get_private_data ??= _dylib.lookupFunction<_c_obs_get_private_data,
        _dart_obs_get_private_data>('obs_get_private_data');
    return _obs_get_private_data();
  }

  _dart_obs_get_private_data _obs_get_private_data;

  void obs_queue_task(
    int type,
    ffi.Pointer<ffi.NativeFunction<obs_task_t>> task,
    ffi.Pointer<ffi.Void> param,
    int wait,
  ) {
    _obs_queue_task ??=
        _dylib.lookupFunction<_c_obs_queue_task, _dart_obs_queue_task>(
            'obs_queue_task');
    return _obs_queue_task(
      type,
      task,
      param,
      wait,
    );
  }

  _dart_obs_queue_task _obs_queue_task;

  void obs_set_ui_task_handler(
    ffi.Pointer<ffi.NativeFunction<obs_task_handler_t>> handler,
  ) {
    _obs_set_ui_task_handler ??= _dylib.lookupFunction<
        _c_obs_set_ui_task_handler,
        _dart_obs_set_ui_task_handler>('obs_set_ui_task_handler');
    return _obs_set_ui_task_handler(
      handler,
    );
  }

  _dart_obs_set_ui_task_handler _obs_set_ui_task_handler;

  /// Creates a view context.
  ///
  /// A view can be used for things like separate previews, or drawing
  /// sources separately.
  ffi.Pointer<obs_view> obs_view_create() {
    _obs_view_create ??=
        _dylib.lookupFunction<_c_obs_view_create, _dart_obs_view_create>(
            'obs_view_create');
    return _obs_view_create();
  }

  _dart_obs_view_create _obs_view_create;

  /// Destroys this view context
  void obs_view_destroy(
    ffi.Pointer<obs_view> view,
  ) {
    _obs_view_destroy ??=
        _dylib.lookupFunction<_c_obs_view_destroy, _dart_obs_view_destroy>(
            'obs_view_destroy');
    return _obs_view_destroy(
      view,
    );
  }

  _dart_obs_view_destroy _obs_view_destroy;

  /// Sets the source to be used for this view context.
  void obs_view_set_source(
    ffi.Pointer<obs_view> view,
    int channel,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_view_set_source ??= _dylib.lookupFunction<_c_obs_view_set_source,
        _dart_obs_view_set_source>('obs_view_set_source');
    return _obs_view_set_source(
      view,
      channel,
      source,
    );
  }

  _dart_obs_view_set_source _obs_view_set_source;

  /// Gets the source currently in use for this view context
  ffi.Pointer<obs_source> obs_view_get_source(
    ffi.Pointer<obs_view> view,
    int channel,
  ) {
    _obs_view_get_source ??= _dylib.lookupFunction<_c_obs_view_get_source,
        _dart_obs_view_get_source>('obs_view_get_source');
    return _obs_view_get_source(
      view,
      channel,
    );
  }

  _dart_obs_view_get_source _obs_view_get_source;

  /// Renders the sources of this view context
  void obs_view_render(
    ffi.Pointer<obs_view> view,
  ) {
    _obs_view_render ??=
        _dylib.lookupFunction<_c_obs_view_render, _dart_obs_view_render>(
            'obs_view_render');
    return _obs_view_render(
      view,
    );
  }

  _dart_obs_view_render _obs_view_render;

  /// Adds a new window display linked to the main render pipeline.  This creates
  /// a new swap chain which updates every frame.
  ///
  /// @param  graphics_data  The swap chain initialization data.
  /// @return                The new display context, or NULL if failed.
  ffi.Pointer<obs_display> obs_display_create(
    ffi.Pointer<gs_init_data> graphics_data,
    int backround_color,
  ) {
    _obs_display_create ??=
        _dylib.lookupFunction<_c_obs_display_create, _dart_obs_display_create>(
            'obs_display_create');
    return _obs_display_create(
      graphics_data,
      backround_color,
    );
  }

  _dart_obs_display_create _obs_display_create;

  /// Destroys a display context
  void obs_display_destroy(
    ffi.Pointer<obs_display> display,
  ) {
    _obs_display_destroy ??= _dylib.lookupFunction<_c_obs_display_destroy,
        _dart_obs_display_destroy>('obs_display_destroy');
    return _obs_display_destroy(
      display,
    );
  }

  _dart_obs_display_destroy _obs_display_destroy;

  /// Changes the size of this display
  void obs_display_resize(
    ffi.Pointer<obs_display> display,
    int cx,
    int cy,
  ) {
    _obs_display_resize ??=
        _dylib.lookupFunction<_c_obs_display_resize, _dart_obs_display_resize>(
            'obs_display_resize');
    return _obs_display_resize(
      display,
      cx,
      cy,
    );
  }

  _dart_obs_display_resize _obs_display_resize;

  /// Adds a draw callback for this display context
  ///
  /// @param  display  The display context.
  /// @param  draw     The draw callback which is called each time a frame
  /// updates.
  /// @param  param    The user data to be associated with this draw callback.
  void obs_display_add_draw_callback(
    ffi.Pointer<obs_display> display,
    ffi.Pointer<ffi.NativeFunction<_typedefC_119>> draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_display_add_draw_callback ??= _dylib.lookupFunction<
        _c_obs_display_add_draw_callback,
        _dart_obs_display_add_draw_callback>('obs_display_add_draw_callback');
    return _obs_display_add_draw_callback(
      display,
      draw,
      param,
    );
  }

  _dart_obs_display_add_draw_callback _obs_display_add_draw_callback;

  /// Removes a draw callback for this display context
  void obs_display_remove_draw_callback(
    ffi.Pointer<obs_display> display,
    ffi.Pointer<ffi.NativeFunction<_typedefC_120>> draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_display_remove_draw_callback ??= _dylib.lookupFunction<
            _c_obs_display_remove_draw_callback,
            _dart_obs_display_remove_draw_callback>(
        'obs_display_remove_draw_callback');
    return _obs_display_remove_draw_callback(
      display,
      draw,
      param,
    );
  }

  _dart_obs_display_remove_draw_callback _obs_display_remove_draw_callback;

  void obs_display_set_enabled(
    ffi.Pointer<obs_display> display,
    int enable,
  ) {
    _obs_display_set_enabled ??= _dylib.lookupFunction<
        _c_obs_display_set_enabled,
        _dart_obs_display_set_enabled>('obs_display_set_enabled');
    return _obs_display_set_enabled(
      display,
      enable,
    );
  }

  _dart_obs_display_set_enabled _obs_display_set_enabled;

  int obs_display_enabled(
    ffi.Pointer<obs_display> display,
  ) {
    _obs_display_enabled ??= _dylib.lookupFunction<_c_obs_display_enabled,
        _dart_obs_display_enabled>('obs_display_enabled');
    return _obs_display_enabled(
      display,
    );
  }

  _dart_obs_display_enabled _obs_display_enabled;

  void obs_display_set_background_color(
    ffi.Pointer<obs_display> display,
    int color,
  ) {
    _obs_display_set_background_color ??= _dylib.lookupFunction<
            _c_obs_display_set_background_color,
            _dart_obs_display_set_background_color>(
        'obs_display_set_background_color');
    return _obs_display_set_background_color(
      display,
      color,
    );
  }

  _dart_obs_display_set_background_color _obs_display_set_background_color;

  void obs_display_size(
    ffi.Pointer<obs_display> display,
    ffi.Pointer<ffi.Uint32> width,
    ffi.Pointer<ffi.Uint32> height,
  ) {
    _obs_display_size ??=
        _dylib.lookupFunction<_c_obs_display_size, _dart_obs_display_size>(
            'obs_display_size');
    return _obs_display_size(
      display,
      width,
      height,
    );
  }

  _dart_obs_display_size _obs_display_size;

  /// Returns the translated display name of a source
  ffi.Pointer<ffi.Int8> obs_source_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_source_get_display_name ??= _dylib.lookupFunction<
        _c_obs_source_get_display_name,
        _dart_obs_source_get_display_name>('obs_source_get_display_name');
    return _obs_source_get_display_name(
      id,
    );
  }

  _dart_obs_source_get_display_name _obs_source_get_display_name;

  /// Creates a source of the specified type with the specified settings.
  ///
  /// The "source" context is used for anything related to presenting
  /// or modifying video/audio.  Use obs_source_release to release it.
  ffi.Pointer<obs_source> obs_source_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> settings,
    ffi.Pointer<obs_data> hotkey_data,
  ) {
    _obs_source_create ??=
        _dylib.lookupFunction<_c_obs_source_create, _dart_obs_source_create>(
            'obs_source_create');
    return _obs_source_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  _dart_obs_source_create _obs_source_create;

  ffi.Pointer<obs_source> obs_source_create_private(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_source_create_private ??= _dylib.lookupFunction<
        _c_obs_source_create_private,
        _dart_obs_source_create_private>('obs_source_create_private');
    return _obs_source_create_private(
      id,
      name,
      settings,
    );
  }

  _dart_obs_source_create_private _obs_source_create_private;

  ffi.Pointer<obs_source> obs_source_duplicate(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.Int8> desired_name,
    int create_private,
  ) {
    _obs_source_duplicate ??= _dylib.lookupFunction<_c_obs_source_duplicate,
        _dart_obs_source_duplicate>('obs_source_duplicate');
    return _obs_source_duplicate(
      source,
      desired_name,
      create_private,
    );
  }

  _dart_obs_source_duplicate _obs_source_duplicate;

  /// Adds/releases a reference to a source.  When the last reference is
  /// released, the source is destroyed.
  void obs_source_addref(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_addref ??=
        _dylib.lookupFunction<_c_obs_source_addref, _dart_obs_source_addref>(
            'obs_source_addref');
    return _obs_source_addref(
      source,
    );
  }

  _dart_obs_source_addref _obs_source_addref;

  void obs_source_release(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_release ??=
        _dylib.lookupFunction<_c_obs_source_release, _dart_obs_source_release>(
            'obs_source_release');
    return _obs_source_release(
      source,
    );
  }

  _dart_obs_source_release _obs_source_release;

  void obs_weak_source_addref(
    ffi.Pointer<obs_weak_source> weak,
  ) {
    _obs_weak_source_addref ??= _dylib.lookupFunction<_c_obs_weak_source_addref,
        _dart_obs_weak_source_addref>('obs_weak_source_addref');
    return _obs_weak_source_addref(
      weak,
    );
  }

  _dart_obs_weak_source_addref _obs_weak_source_addref;

  void obs_weak_source_release(
    ffi.Pointer<obs_weak_source> weak,
  ) {
    _obs_weak_source_release ??= _dylib.lookupFunction<
        _c_obs_weak_source_release,
        _dart_obs_weak_source_release>('obs_weak_source_release');
    return _obs_weak_source_release(
      weak,
    );
  }

  _dart_obs_weak_source_release _obs_weak_source_release;

  ffi.Pointer<obs_source> obs_source_get_ref(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_ref ??=
        _dylib.lookupFunction<_c_obs_source_get_ref, _dart_obs_source_get_ref>(
            'obs_source_get_ref');
    return _obs_source_get_ref(
      source,
    );
  }

  _dart_obs_source_get_ref _obs_source_get_ref;

  ffi.Pointer<obs_weak_source> obs_source_get_weak_source(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_weak_source ??= _dylib.lookupFunction<
        _c_obs_source_get_weak_source,
        _dart_obs_source_get_weak_source>('obs_source_get_weak_source');
    return _obs_source_get_weak_source(
      source,
    );
  }

  _dart_obs_source_get_weak_source _obs_source_get_weak_source;

  ffi.Pointer<obs_source> obs_weak_source_get_source(
    ffi.Pointer<obs_weak_source> weak,
  ) {
    _obs_weak_source_get_source ??= _dylib.lookupFunction<
        _c_obs_weak_source_get_source,
        _dart_obs_weak_source_get_source>('obs_weak_source_get_source');
    return _obs_weak_source_get_source(
      weak,
    );
  }

  _dart_obs_weak_source_get_source _obs_weak_source_get_source;

  int obs_weak_source_references_source(
    ffi.Pointer<obs_weak_source> weak,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_weak_source_references_source ??= _dylib.lookupFunction<
            _c_obs_weak_source_references_source,
            _dart_obs_weak_source_references_source>(
        'obs_weak_source_references_source');
    return _obs_weak_source_references_source(
      weak,
      source,
    );
  }

  _dart_obs_weak_source_references_source _obs_weak_source_references_source;

  /// Notifies all references that the source should be released
  void obs_source_remove(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_remove ??=
        _dylib.lookupFunction<_c_obs_source_remove, _dart_obs_source_remove>(
            'obs_source_remove');
    return _obs_source_remove(
      source,
    );
  }

  _dart_obs_source_remove _obs_source_remove;

  /// Returns true if the source should be released
  int obs_source_removed(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_removed ??=
        _dylib.lookupFunction<_c_obs_source_removed, _dart_obs_source_removed>(
            'obs_source_removed');
    return _obs_source_removed(
      source,
    );
  }

  _dart_obs_source_removed _obs_source_removed;

  /// Returns capability flags of a source
  int obs_source_get_output_flags(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_output_flags ??= _dylib.lookupFunction<
        _c_obs_source_get_output_flags,
        _dart_obs_source_get_output_flags>('obs_source_get_output_flags');
    return _obs_source_get_output_flags(
      source,
    );
  }

  _dart_obs_source_get_output_flags _obs_source_get_output_flags;

  /// Returns capability flags of a source type
  int obs_get_source_output_flags(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_source_output_flags ??= _dylib.lookupFunction<
        _c_obs_get_source_output_flags,
        _dart_obs_get_source_output_flags>('obs_get_source_output_flags');
    return _obs_get_source_output_flags(
      id,
    );
  }

  _dart_obs_get_source_output_flags _obs_get_source_output_flags;

  /// Gets the default settings for a source type
  ffi.Pointer<obs_data> obs_get_source_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_source_defaults ??= _dylib.lookupFunction<
        _c_obs_get_source_defaults,
        _dart_obs_get_source_defaults>('obs_get_source_defaults');
    return _obs_get_source_defaults(
      id,
    );
  }

  _dart_obs_get_source_defaults _obs_get_source_defaults;

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties> obs_get_source_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_source_properties ??= _dylib.lookupFunction<
        _c_obs_get_source_properties,
        _dart_obs_get_source_properties>('obs_get_source_properties');
    return _obs_get_source_properties(
      id,
    );
  }

  _dart_obs_get_source_properties _obs_get_source_properties;

  /// Returns whether the source has custom properties or not
  int obs_is_source_configurable(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_is_source_configurable ??= _dylib.lookupFunction<
        _c_obs_is_source_configurable,
        _dart_obs_is_source_configurable>('obs_is_source_configurable');
    return _obs_is_source_configurable(
      id,
    );
  }

  _dart_obs_is_source_configurable _obs_is_source_configurable;

  int obs_source_configurable(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_configurable ??= _dylib.lookupFunction<
        _c_obs_source_configurable,
        _dart_obs_source_configurable>('obs_source_configurable');
    return _obs_source_configurable(
      source,
    );
  }

  _dart_obs_source_configurable _obs_source_configurable;

  /// Returns the properties list for a specific existing source.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties> obs_source_properties(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_properties ??= _dylib.lookupFunction<_c_obs_source_properties,
        _dart_obs_source_properties>('obs_source_properties');
    return _obs_source_properties(
      source,
    );
  }

  _dart_obs_source_properties _obs_source_properties;

  /// Updates settings for this source
  void obs_source_update(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_source_update ??=
        _dylib.lookupFunction<_c_obs_source_update, _dart_obs_source_update>(
            'obs_source_update');
    return _obs_source_update(
      source,
      settings,
    );
  }

  _dart_obs_source_update _obs_source_update;

  /// Renders a video source.
  void obs_source_video_render(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_video_render ??= _dylib.lookupFunction<
        _c_obs_source_video_render,
        _dart_obs_source_video_render>('obs_source_video_render');
    return _obs_source_video_render(
      source,
    );
  }

  _dart_obs_source_video_render _obs_source_video_render;

  /// Gets the width of a source (if it has video)
  int obs_source_get_width(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_width ??= _dylib.lookupFunction<_c_obs_source_get_width,
        _dart_obs_source_get_width>('obs_source_get_width');
    return _obs_source_get_width(
      source,
    );
  }

  _dart_obs_source_get_width _obs_source_get_width;

  /// Gets the height of a source (if it has video)
  int obs_source_get_height(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_height ??= _dylib.lookupFunction<_c_obs_source_get_height,
        _dart_obs_source_get_height>('obs_source_get_height');
    return _obs_source_get_height(
      source,
    );
  }

  _dart_obs_source_get_height _obs_source_get_height;

  /// If the source is a filter, returns the parent source of the filter.  Only
  /// guaranteed to be valid inside of the video_render, filter_audio,
  /// filter_video, and filter_remove callbacks.
  ffi.Pointer<obs_source> obs_filter_get_parent(
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_filter_get_parent ??= _dylib.lookupFunction<_c_obs_filter_get_parent,
        _dart_obs_filter_get_parent>('obs_filter_get_parent');
    return _obs_filter_get_parent(
      filter,
    );
  }

  _dart_obs_filter_get_parent _obs_filter_get_parent;

  /// If the source is a filter, returns the target source of the filter.  Only
  /// guaranteed to be valid inside of the video_render, filter_audio,
  /// filter_video, and filter_remove callbacks.
  ffi.Pointer<obs_source> obs_filter_get_target(
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_filter_get_target ??= _dylib.lookupFunction<_c_obs_filter_get_target,
        _dart_obs_filter_get_target>('obs_filter_get_target');
    return _obs_filter_get_target(
      filter,
    );
  }

  _dart_obs_filter_get_target _obs_filter_get_target;

  /// Used to directly render a non-async source without any filter processing
  void obs_source_default_render(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_default_render ??= _dylib.lookupFunction<
        _c_obs_source_default_render,
        _dart_obs_source_default_render>('obs_source_default_render');
    return _obs_source_default_render(
      source,
    );
  }

  _dart_obs_source_default_render _obs_source_default_render;

  /// Adds a filter to the source (which is used whenever the source is used)
  void obs_source_filter_add(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_source_filter_add ??= _dylib.lookupFunction<_c_obs_source_filter_add,
        _dart_obs_source_filter_add>('obs_source_filter_add');
    return _obs_source_filter_add(
      source,
      filter,
    );
  }

  _dart_obs_source_filter_add _obs_source_filter_add;

  /// Removes a filter from the source
  void obs_source_filter_remove(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_source_filter_remove ??= _dylib.lookupFunction<
        _c_obs_source_filter_remove,
        _dart_obs_source_filter_remove>('obs_source_filter_remove');
    return _obs_source_filter_remove(
      source,
      filter,
    );
  }

  _dart_obs_source_filter_remove _obs_source_filter_remove;

  /// Modifies the order of a specific filter
  void obs_source_filter_set_order(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source> filter,
    int movement,
  ) {
    _obs_source_filter_set_order ??= _dylib.lookupFunction<
        _c_obs_source_filter_set_order,
        _dart_obs_source_filter_set_order>('obs_source_filter_set_order');
    return _obs_source_filter_set_order(
      source,
      filter,
      movement,
    );
  }

  _dart_obs_source_filter_set_order _obs_source_filter_set_order;

  /// Gets the settings string for a source
  ffi.Pointer<obs_data> obs_source_get_settings(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_settings ??= _dylib.lookupFunction<
        _c_obs_source_get_settings,
        _dart_obs_source_get_settings>('obs_source_get_settings');
    return _obs_source_get_settings(
      source,
    );
  }

  _dart_obs_source_get_settings _obs_source_get_settings;

  /// Gets the name of a source
  ffi.Pointer<ffi.Int8> obs_source_get_name(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_name ??= _dylib.lookupFunction<_c_obs_source_get_name,
        _dart_obs_source_get_name>('obs_source_get_name');
    return _obs_source_get_name(
      source,
    );
  }

  _dart_obs_source_get_name _obs_source_get_name;

  /// Sets the name of a source
  void obs_source_set_name(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_source_set_name ??= _dylib.lookupFunction<_c_obs_source_set_name,
        _dart_obs_source_set_name>('obs_source_set_name');
    return _obs_source_set_name(
      source,
      name,
    );
  }

  _dart_obs_source_set_name _obs_source_set_name;

  /// Gets the source type
  int obs_source_get_type(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_type ??= _dylib.lookupFunction<_c_obs_source_get_type,
        _dart_obs_source_get_type>('obs_source_get_type');
    return _obs_source_get_type(
      source,
    );
  }

  _dart_obs_source_get_type _obs_source_get_type;

  /// Gets the source identifier
  ffi.Pointer<ffi.Int8> obs_source_get_id(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_id ??=
        _dylib.lookupFunction<_c_obs_source_get_id, _dart_obs_source_get_id>(
            'obs_source_get_id');
    return _obs_source_get_id(
      source,
    );
  }

  _dart_obs_source_get_id _obs_source_get_id;

  ffi.Pointer<ffi.Int8> obs_source_get_unversioned_id(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_unversioned_id ??= _dylib.lookupFunction<
        _c_obs_source_get_unversioned_id,
        _dart_obs_source_get_unversioned_id>('obs_source_get_unversioned_id');
    return _obs_source_get_unversioned_id(
      source,
    );
  }

  _dart_obs_source_get_unversioned_id _obs_source_get_unversioned_id;

  /// Returns the signal handler for a source
  ffi.Pointer<signal_handler> obs_source_get_signal_handler(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_signal_handler ??= _dylib.lookupFunction<
        _c_obs_source_get_signal_handler,
        _dart_obs_source_get_signal_handler>('obs_source_get_signal_handler');
    return _obs_source_get_signal_handler(
      source,
    );
  }

  _dart_obs_source_get_signal_handler _obs_source_get_signal_handler;

  /// Returns the procedure handler for a source
  ffi.Pointer<proc_handler> obs_source_get_proc_handler(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_proc_handler ??= _dylib.lookupFunction<
        _c_obs_source_get_proc_handler,
        _dart_obs_source_get_proc_handler>('obs_source_get_proc_handler');
    return _obs_source_get_proc_handler(
      source,
    );
  }

  _dart_obs_source_get_proc_handler _obs_source_get_proc_handler;

  /// Sets the user volume for a source that has audio output
  void obs_source_set_volume(
    ffi.Pointer<obs_source> source,
    double volume,
  ) {
    _obs_source_set_volume ??= _dylib.lookupFunction<_c_obs_source_set_volume,
        _dart_obs_source_set_volume>('obs_source_set_volume');
    return _obs_source_set_volume(
      source,
      volume,
    );
  }

  _dart_obs_source_set_volume _obs_source_set_volume;

  /// Gets the user volume for a source that has audio output
  double obs_source_get_volume(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_volume ??= _dylib.lookupFunction<_c_obs_source_get_volume,
        _dart_obs_source_get_volume>('obs_source_get_volume');
    return _obs_source_get_volume(
      source,
    );
  }

  _dart_obs_source_get_volume _obs_source_get_volume;

  int obs_source_get_speaker_layout(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_speaker_layout ??= _dylib.lookupFunction<
        _c_obs_source_get_speaker_layout,
        _dart_obs_source_get_speaker_layout>('obs_source_get_speaker_layout');
    return _obs_source_get_speaker_layout(
      source,
    );
  }

  _dart_obs_source_get_speaker_layout _obs_source_get_speaker_layout;

  /// Sets the balance value for a stereo audio source
  void obs_source_set_balance_value(
    ffi.Pointer<obs_source> source,
    double balance,
  ) {
    _obs_source_set_balance_value ??= _dylib.lookupFunction<
        _c_obs_source_set_balance_value,
        _dart_obs_source_set_balance_value>('obs_source_set_balance_value');
    return _obs_source_set_balance_value(
      source,
      balance,
    );
  }

  _dart_obs_source_set_balance_value _obs_source_set_balance_value;

  /// Gets the balance value for a stereo audio source
  double obs_source_get_balance_value(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_balance_value ??= _dylib.lookupFunction<
        _c_obs_source_get_balance_value,
        _dart_obs_source_get_balance_value>('obs_source_get_balance_value');
    return _obs_source_get_balance_value(
      source,
    );
  }

  _dart_obs_source_get_balance_value _obs_source_get_balance_value;

  /// Sets the audio sync offset (in nanoseconds) for a source
  void obs_source_set_sync_offset(
    ffi.Pointer<obs_source> source,
    int offset,
  ) {
    _obs_source_set_sync_offset ??= _dylib.lookupFunction<
        _c_obs_source_set_sync_offset,
        _dart_obs_source_set_sync_offset>('obs_source_set_sync_offset');
    return _obs_source_set_sync_offset(
      source,
      offset,
    );
  }

  _dart_obs_source_set_sync_offset _obs_source_set_sync_offset;

  /// Gets the audio sync offset (in nanoseconds) for a source
  int obs_source_get_sync_offset(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_sync_offset ??= _dylib.lookupFunction<
        _c_obs_source_get_sync_offset,
        _dart_obs_source_get_sync_offset>('obs_source_get_sync_offset');
    return _obs_source_get_sync_offset(
      source,
    );
  }

  _dart_obs_source_get_sync_offset _obs_source_get_sync_offset;

  /// Enumerates active child sources used by this source
  void obs_source_enum_active_sources(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_enum_active_sources ??= _dylib.lookupFunction<
        _c_obs_source_enum_active_sources,
        _dart_obs_source_enum_active_sources>('obs_source_enum_active_sources');
    return _obs_source_enum_active_sources(
      source,
      enum_callback,
      param,
    );
  }

  _dart_obs_source_enum_active_sources _obs_source_enum_active_sources;

  /// Enumerates the entire active child source tree used by this source
  void obs_source_enum_active_tree(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_enum_active_tree ??= _dylib.lookupFunction<
        _c_obs_source_enum_active_tree,
        _dart_obs_source_enum_active_tree>('obs_source_enum_active_tree');
    return _obs_source_enum_active_tree(
      source,
      enum_callback,
      param,
    );
  }

  _dart_obs_source_enum_active_tree _obs_source_enum_active_tree;

  /// Returns true if active, false if not
  int obs_source_active(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_active ??=
        _dylib.lookupFunction<_c_obs_source_active, _dart_obs_source_active>(
            'obs_source_active');
    return _obs_source_active(
      source,
    );
  }

  _dart_obs_source_active _obs_source_active;

  /// Returns true if currently displayed somewhere (active or not), false if not
  int obs_source_showing(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_showing ??=
        _dylib.lookupFunction<_c_obs_source_showing, _dart_obs_source_showing>(
            'obs_source_showing');
    return _obs_source_showing(
      source,
    );
  }

  _dart_obs_source_showing _obs_source_showing;

  /// Sets source flags.  Note that these are different from the main output
  /// flags.  These are generally things that can be set by the source or user,
  /// while the output flags are more used to determine capabilities of a source.
  void obs_source_set_flags(
    ffi.Pointer<obs_source> source,
    int flags,
  ) {
    _obs_source_set_flags ??= _dylib.lookupFunction<_c_obs_source_set_flags,
        _dart_obs_source_set_flags>('obs_source_set_flags');
    return _obs_source_set_flags(
      source,
      flags,
    );
  }

  _dart_obs_source_set_flags _obs_source_set_flags;

  /// Gets source flags.
  int obs_source_get_flags(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_flags ??= _dylib.lookupFunction<_c_obs_source_get_flags,
        _dart_obs_source_get_flags>('obs_source_get_flags');
    return _obs_source_get_flags(
      source,
    );
  }

  _dart_obs_source_get_flags _obs_source_get_flags;

  /// Sets audio mixer flags.  These flags are used to specify which mixers
  /// the source's audio should be applied to.
  void obs_source_set_audio_mixers(
    ffi.Pointer<obs_source> source,
    int mixers,
  ) {
    _obs_source_set_audio_mixers ??= _dylib.lookupFunction<
        _c_obs_source_set_audio_mixers,
        _dart_obs_source_set_audio_mixers>('obs_source_set_audio_mixers');
    return _obs_source_set_audio_mixers(
      source,
      mixers,
    );
  }

  _dart_obs_source_set_audio_mixers _obs_source_set_audio_mixers;

  /// Gets audio mixer flags
  int obs_source_get_audio_mixers(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_audio_mixers ??= _dylib.lookupFunction<
        _c_obs_source_get_audio_mixers,
        _dart_obs_source_get_audio_mixers>('obs_source_get_audio_mixers');
    return _obs_source_get_audio_mixers(
      source,
    );
  }

  _dart_obs_source_get_audio_mixers _obs_source_get_audio_mixers;

  /// Increments the 'showing' reference counter to indicate that the source is
  /// being shown somewhere.  If the reference counter was 0, will call the 'show'
  /// callback.
  void obs_source_inc_showing(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_inc_showing ??= _dylib.lookupFunction<_c_obs_source_inc_showing,
        _dart_obs_source_inc_showing>('obs_source_inc_showing');
    return _obs_source_inc_showing(
      source,
    );
  }

  _dart_obs_source_inc_showing _obs_source_inc_showing;

  /// Increments the 'active' reference counter to indicate that the source is
  /// fully active.  If the reference counter was 0, will call the 'activate'
  /// callback.
  ///
  /// Unlike obs_source_inc_showing, this will cause children of this source to be
  /// considered showing as well (currently used by transition previews to make
  /// the stinger transition show correctly).  obs_source_inc_showing should
  /// generally be used instead.
  void obs_source_inc_active(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_inc_active ??= _dylib.lookupFunction<_c_obs_source_inc_active,
        _dart_obs_source_inc_active>('obs_source_inc_active');
    return _obs_source_inc_active(
      source,
    );
  }

  _dart_obs_source_inc_active _obs_source_inc_active;

  /// Decrements the 'showing' reference counter to indicate that the source is
  /// no longer being shown somewhere.  If the reference counter is set to 0,
  /// will call the 'hide' callback
  void obs_source_dec_showing(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_dec_showing ??= _dylib.lookupFunction<_c_obs_source_dec_showing,
        _dart_obs_source_dec_showing>('obs_source_dec_showing');
    return _obs_source_dec_showing(
      source,
    );
  }

  _dart_obs_source_dec_showing _obs_source_dec_showing;

  /// Decrements the 'active' reference counter to indicate that the source is no
  /// longer fully active.  If the reference counter is set to 0, will call the
  /// 'deactivate' callback
  ///
  /// Unlike obs_source_dec_showing, this will cause children of this source to be
  /// considered not showing as well.  obs_source_dec_showing should generally be
  /// used instead.
  void obs_source_dec_active(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_dec_active ??= _dylib.lookupFunction<_c_obs_source_dec_active,
        _dart_obs_source_dec_active>('obs_source_dec_active');
    return _obs_source_dec_active(
      source,
    );
  }

  _dart_obs_source_dec_active _obs_source_dec_active;

  /// Enumerates filters assigned to the source
  void obs_source_enum_filters(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_enum_filters ??= _dylib.lookupFunction<
        _c_obs_source_enum_filters,
        _dart_obs_source_enum_filters>('obs_source_enum_filters');
    return _obs_source_enum_filters(
      source,
      callback,
      param,
    );
  }

  _dart_obs_source_enum_filters _obs_source_enum_filters;

  /// Gets a filter of a source by its display name.
  ffi.Pointer<obs_source> obs_source_get_filter_by_name(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_source_get_filter_by_name ??= _dylib.lookupFunction<
        _c_obs_source_get_filter_by_name,
        _dart_obs_source_get_filter_by_name>('obs_source_get_filter_by_name');
    return _obs_source_get_filter_by_name(
      source,
      name,
    );
  }

  _dart_obs_source_get_filter_by_name _obs_source_get_filter_by_name;

  void obs_source_copy_filters(
    ffi.Pointer<obs_source> dst,
    ffi.Pointer<obs_source> src,
  ) {
    _obs_source_copy_filters ??= _dylib.lookupFunction<
        _c_obs_source_copy_filters,
        _dart_obs_source_copy_filters>('obs_source_copy_filters');
    return _obs_source_copy_filters(
      dst,
      src,
    );
  }

  _dart_obs_source_copy_filters _obs_source_copy_filters;

  void obs_source_copy_single_filter(
    ffi.Pointer<obs_source> dst,
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_source_copy_single_filter ??= _dylib.lookupFunction<
        _c_obs_source_copy_single_filter,
        _dart_obs_source_copy_single_filter>('obs_source_copy_single_filter');
    return _obs_source_copy_single_filter(
      dst,
      filter,
    );
  }

  _dart_obs_source_copy_single_filter _obs_source_copy_single_filter;

  int obs_source_enabled(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_enabled ??=
        _dylib.lookupFunction<_c_obs_source_enabled, _dart_obs_source_enabled>(
            'obs_source_enabled');
    return _obs_source_enabled(
      source,
    );
  }

  _dart_obs_source_enabled _obs_source_enabled;

  void obs_source_set_enabled(
    ffi.Pointer<obs_source> source,
    int enabled,
  ) {
    _obs_source_set_enabled ??= _dylib.lookupFunction<_c_obs_source_set_enabled,
        _dart_obs_source_set_enabled>('obs_source_set_enabled');
    return _obs_source_set_enabled(
      source,
      enabled,
    );
  }

  _dart_obs_source_set_enabled _obs_source_set_enabled;

  int obs_source_muted(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_muted ??=
        _dylib.lookupFunction<_c_obs_source_muted, _dart_obs_source_muted>(
            'obs_source_muted');
    return _obs_source_muted(
      source,
    );
  }

  _dart_obs_source_muted _obs_source_muted;

  void obs_source_set_muted(
    ffi.Pointer<obs_source> source,
    int muted,
  ) {
    _obs_source_set_muted ??= _dylib.lookupFunction<_c_obs_source_set_muted,
        _dart_obs_source_set_muted>('obs_source_set_muted');
    return _obs_source_set_muted(
      source,
      muted,
    );
  }

  _dart_obs_source_set_muted _obs_source_set_muted;

  int obs_source_push_to_mute_enabled(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_push_to_mute_enabled ??= _dylib.lookupFunction<
            _c_obs_source_push_to_mute_enabled,
            _dart_obs_source_push_to_mute_enabled>(
        'obs_source_push_to_mute_enabled');
    return _obs_source_push_to_mute_enabled(
      source,
    );
  }

  _dart_obs_source_push_to_mute_enabled _obs_source_push_to_mute_enabled;

  void obs_source_enable_push_to_mute(
    ffi.Pointer<obs_source> source,
    int enabled,
  ) {
    _obs_source_enable_push_to_mute ??= _dylib.lookupFunction<
        _c_obs_source_enable_push_to_mute,
        _dart_obs_source_enable_push_to_mute>('obs_source_enable_push_to_mute');
    return _obs_source_enable_push_to_mute(
      source,
      enabled,
    );
  }

  _dart_obs_source_enable_push_to_mute _obs_source_enable_push_to_mute;

  int obs_source_get_push_to_mute_delay(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_push_to_mute_delay ??= _dylib.lookupFunction<
            _c_obs_source_get_push_to_mute_delay,
            _dart_obs_source_get_push_to_mute_delay>(
        'obs_source_get_push_to_mute_delay');
    return _obs_source_get_push_to_mute_delay(
      source,
    );
  }

  _dart_obs_source_get_push_to_mute_delay _obs_source_get_push_to_mute_delay;

  void obs_source_set_push_to_mute_delay(
    ffi.Pointer<obs_source> source,
    int delay,
  ) {
    _obs_source_set_push_to_mute_delay ??= _dylib.lookupFunction<
            _c_obs_source_set_push_to_mute_delay,
            _dart_obs_source_set_push_to_mute_delay>(
        'obs_source_set_push_to_mute_delay');
    return _obs_source_set_push_to_mute_delay(
      source,
      delay,
    );
  }

  _dart_obs_source_set_push_to_mute_delay _obs_source_set_push_to_mute_delay;

  int obs_source_push_to_talk_enabled(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_push_to_talk_enabled ??= _dylib.lookupFunction<
            _c_obs_source_push_to_talk_enabled,
            _dart_obs_source_push_to_talk_enabled>(
        'obs_source_push_to_talk_enabled');
    return _obs_source_push_to_talk_enabled(
      source,
    );
  }

  _dart_obs_source_push_to_talk_enabled _obs_source_push_to_talk_enabled;

  void obs_source_enable_push_to_talk(
    ffi.Pointer<obs_source> source,
    int enabled,
  ) {
    _obs_source_enable_push_to_talk ??= _dylib.lookupFunction<
        _c_obs_source_enable_push_to_talk,
        _dart_obs_source_enable_push_to_talk>('obs_source_enable_push_to_talk');
    return _obs_source_enable_push_to_talk(
      source,
      enabled,
    );
  }

  _dart_obs_source_enable_push_to_talk _obs_source_enable_push_to_talk;

  int obs_source_get_push_to_talk_delay(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_push_to_talk_delay ??= _dylib.lookupFunction<
            _c_obs_source_get_push_to_talk_delay,
            _dart_obs_source_get_push_to_talk_delay>(
        'obs_source_get_push_to_talk_delay');
    return _obs_source_get_push_to_talk_delay(
      source,
    );
  }

  _dart_obs_source_get_push_to_talk_delay _obs_source_get_push_to_talk_delay;

  void obs_source_set_push_to_talk_delay(
    ffi.Pointer<obs_source> source,
    int delay,
  ) {
    _obs_source_set_push_to_talk_delay ??= _dylib.lookupFunction<
            _c_obs_source_set_push_to_talk_delay,
            _dart_obs_source_set_push_to_talk_delay>(
        'obs_source_set_push_to_talk_delay');
    return _obs_source_set_push_to_talk_delay(
      source,
      delay,
    );
  }

  _dart_obs_source_set_push_to_talk_delay _obs_source_set_push_to_talk_delay;

  void obs_source_add_audio_capture_callback(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_add_audio_capture_callback ??= _dylib.lookupFunction<
            _c_obs_source_add_audio_capture_callback,
            _dart_obs_source_add_audio_capture_callback>(
        'obs_source_add_audio_capture_callback');
    return _obs_source_add_audio_capture_callback(
      source,
      callback,
      param,
    );
  }

  _dart_obs_source_add_audio_capture_callback
      _obs_source_add_audio_capture_callback;

  void obs_source_remove_audio_capture_callback(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_remove_audio_capture_callback ??= _dylib.lookupFunction<
            _c_obs_source_remove_audio_capture_callback,
            _dart_obs_source_remove_audio_capture_callback>(
        'obs_source_remove_audio_capture_callback');
    return _obs_source_remove_audio_capture_callback(
      source,
      callback,
      param,
    );
  }

  _dart_obs_source_remove_audio_capture_callback
      _obs_source_remove_audio_capture_callback;

  void obs_source_set_deinterlace_mode(
    ffi.Pointer<obs_source> source,
    int mode,
  ) {
    _obs_source_set_deinterlace_mode ??= _dylib.lookupFunction<
            _c_obs_source_set_deinterlace_mode,
            _dart_obs_source_set_deinterlace_mode>(
        'obs_source_set_deinterlace_mode');
    return _obs_source_set_deinterlace_mode(
      source,
      mode,
    );
  }

  _dart_obs_source_set_deinterlace_mode _obs_source_set_deinterlace_mode;

  int obs_source_get_deinterlace_mode(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_deinterlace_mode ??= _dylib.lookupFunction<
            _c_obs_source_get_deinterlace_mode,
            _dart_obs_source_get_deinterlace_mode>(
        'obs_source_get_deinterlace_mode');
    return _obs_source_get_deinterlace_mode(
      source,
    );
  }

  _dart_obs_source_get_deinterlace_mode _obs_source_get_deinterlace_mode;

  void obs_source_set_deinterlace_field_order(
    ffi.Pointer<obs_source> source,
    int field_order,
  ) {
    _obs_source_set_deinterlace_field_order ??= _dylib.lookupFunction<
            _c_obs_source_set_deinterlace_field_order,
            _dart_obs_source_set_deinterlace_field_order>(
        'obs_source_set_deinterlace_field_order');
    return _obs_source_set_deinterlace_field_order(
      source,
      field_order,
    );
  }

  _dart_obs_source_set_deinterlace_field_order
      _obs_source_set_deinterlace_field_order;

  int obs_source_get_deinterlace_field_order(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_deinterlace_field_order ??= _dylib.lookupFunction<
            _c_obs_source_get_deinterlace_field_order,
            _dart_obs_source_get_deinterlace_field_order>(
        'obs_source_get_deinterlace_field_order');
    return _obs_source_get_deinterlace_field_order(
      source,
    );
  }

  _dart_obs_source_get_deinterlace_field_order
      _obs_source_get_deinterlace_field_order;

  void obs_source_set_monitoring_type(
    ffi.Pointer<obs_source> source,
    int type,
  ) {
    _obs_source_set_monitoring_type ??= _dylib.lookupFunction<
        _c_obs_source_set_monitoring_type,
        _dart_obs_source_set_monitoring_type>('obs_source_set_monitoring_type');
    return _obs_source_set_monitoring_type(
      source,
      type,
    );
  }

  _dart_obs_source_set_monitoring_type _obs_source_set_monitoring_type;

  int obs_source_get_monitoring_type(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_monitoring_type ??= _dylib.lookupFunction<
        _c_obs_source_get_monitoring_type,
        _dart_obs_source_get_monitoring_type>('obs_source_get_monitoring_type');
    return _obs_source_get_monitoring_type(
      source,
    );
  }

  _dart_obs_source_get_monitoring_type _obs_source_get_monitoring_type;

  /// Gets private front-end settings data.  This data is saved/loaded
  /// automatically.  Returns an incremented reference.
  ffi.Pointer<obs_data> obs_source_get_private_settings(
    ffi.Pointer<obs_source> item,
  ) {
    _obs_source_get_private_settings ??= _dylib.lookupFunction<
            _c_obs_source_get_private_settings,
            _dart_obs_source_get_private_settings>(
        'obs_source_get_private_settings');
    return _obs_source_get_private_settings(
      item,
    );
  }

  _dart_obs_source_get_private_settings _obs_source_get_private_settings;

  ffi.Pointer<ffi.Void> obs_source_get_type_data(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_type_data ??= _dylib.lookupFunction<
        _c_obs_source_get_type_data,
        _dart_obs_source_get_type_data>('obs_source_get_type_data');
    return _obs_source_get_type_data(
      source,
    );
  }

  _dart_obs_source_get_type_data _obs_source_get_type_data;

  /// Helper function to set the color matrix information when drawing the source.
  ///
  /// @param  color_matrix     The color matrix.  Assigns to the 'color_matrix'
  /// effect variable.
  /// @param  color_range_min  The minimum color range.  Assigns to the
  /// 'color_range_min' effect variable.  If NULL,
  /// {0.0f, 0.0f, 0.0f} is used.
  /// @param  color_range_max  The maximum color range.  Assigns to the
  /// 'color_range_max' effect variable.  If NULL,
  /// {1.0f, 1.0f, 1.0f} is used.
  void obs_source_draw_set_color_matrix(
    ffi.Pointer<matrix4> color_matrix,
    ffi.Pointer<vec3> color_range_min,
    ffi.Pointer<vec3> color_range_max,
  ) {
    _obs_source_draw_set_color_matrix ??= _dylib.lookupFunction<
            _c_obs_source_draw_set_color_matrix,
            _dart_obs_source_draw_set_color_matrix>(
        'obs_source_draw_set_color_matrix');
    return _obs_source_draw_set_color_matrix(
      color_matrix,
      color_range_min,
      color_range_max,
    );
  }

  _dart_obs_source_draw_set_color_matrix _obs_source_draw_set_color_matrix;

  /// Helper function to draw sprites for a source (synchronous video).
  ///
  /// @param  image   The sprite texture to draw.  Assigns to the 'image' variable
  /// of the current effect.
  /// @param  x       X position of the sprite.
  /// @param  y       Y position of the sprite.
  /// @param  cx      Width of the sprite.  If 0, uses the texture width.
  /// @param  cy      Height of the sprite.  If 0, uses the texture height.
  /// @param  flip    Specifies whether to flip the image vertically.
  void obs_source_draw(
    ffi.Pointer<gs_texture> image,
    int x,
    int y,
    int cx,
    int cy,
    int flip,
  ) {
    _obs_source_draw ??=
        _dylib.lookupFunction<_c_obs_source_draw, _dart_obs_source_draw>(
            'obs_source_draw');
    return _obs_source_draw(
      image,
      x,
      y,
      cx,
      cy,
      flip,
    );
  }

  _dart_obs_source_draw _obs_source_draw;

  /// Outputs asynchronous video data.  Set to NULL to deactivate the texture
  ///
  /// NOTE: Non-YUV formats will always be treated as full range with this
  /// function!  Use obs_source_output_video2 instead if partial range support is
  /// desired for non-YUV video formats.
  void obs_source_output_video(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_output_video ??= _dylib.lookupFunction<
        _c_obs_source_output_video,
        _dart_obs_source_output_video>('obs_source_output_video');
    return _obs_source_output_video(
      source,
      frame,
    );
  }

  _dart_obs_source_output_video _obs_source_output_video;

  void obs_source_output_video2(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame2> frame,
  ) {
    _obs_source_output_video2 ??= _dylib.lookupFunction<
        _c_obs_source_output_video2,
        _dart_obs_source_output_video2>('obs_source_output_video2');
    return _obs_source_output_video2(
      source,
      frame,
    );
  }

  _dart_obs_source_output_video2 _obs_source_output_video2;

  void obs_source_set_async_rotation(
    ffi.Pointer<obs_source> source,
    int rotation,
  ) {
    _obs_source_set_async_rotation ??= _dylib.lookupFunction<
        _c_obs_source_set_async_rotation,
        _dart_obs_source_set_async_rotation>('obs_source_set_async_rotation');
    return _obs_source_set_async_rotation(
      source,
      rotation,
    );
  }

  _dart_obs_source_set_async_rotation _obs_source_set_async_rotation;

  /// Preloads asynchronous video data to allow instantaneous playback
  ///
  /// NOTE: Non-YUV formats will always be treated as full range with this
  /// function!  Use obs_source_preload_video2 instead if partial range support is
  /// desired for non-YUV video formats.
  void obs_source_preload_video(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_preload_video ??= _dylib.lookupFunction<
        _c_obs_source_preload_video,
        _dart_obs_source_preload_video>('obs_source_preload_video');
    return _obs_source_preload_video(
      source,
      frame,
    );
  }

  _dart_obs_source_preload_video _obs_source_preload_video;

  void obs_source_preload_video2(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame2> frame,
  ) {
    _obs_source_preload_video2 ??= _dylib.lookupFunction<
        _c_obs_source_preload_video2,
        _dart_obs_source_preload_video2>('obs_source_preload_video2');
    return _obs_source_preload_video2(
      source,
      frame,
    );
  }

  _dart_obs_source_preload_video2 _obs_source_preload_video2;

  /// Shows any preloaded video data
  void obs_source_show_preloaded_video(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_show_preloaded_video ??= _dylib.lookupFunction<
            _c_obs_source_show_preloaded_video,
            _dart_obs_source_show_preloaded_video>(
        'obs_source_show_preloaded_video');
    return _obs_source_show_preloaded_video(
      source,
    );
  }

  _dart_obs_source_show_preloaded_video _obs_source_show_preloaded_video;

  /// Sets current async video frame immediately
  ///
  /// NOTE: Non-YUV formats will always be treated as full range with this
  /// function!  Use obs_source_preload_video2 instead if partial range support is
  /// desired for non-YUV video formats.
  void obs_source_set_video_frame(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_set_video_frame ??= _dylib.lookupFunction<
        _c_obs_source_set_video_frame,
        _dart_obs_source_set_video_frame>('obs_source_set_video_frame');
    return _obs_source_set_video_frame(
      source,
      frame,
    );
  }

  _dart_obs_source_set_video_frame _obs_source_set_video_frame;

  void obs_source_set_video_frame2(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame2> frame,
  ) {
    _obs_source_set_video_frame2 ??= _dylib.lookupFunction<
        _c_obs_source_set_video_frame2,
        _dart_obs_source_set_video_frame2>('obs_source_set_video_frame2');
    return _obs_source_set_video_frame2(
      source,
      frame,
    );
  }

  _dart_obs_source_set_video_frame2 _obs_source_set_video_frame2;

  /// Outputs audio data (always asynchronous)
  void obs_source_output_audio(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_audio> audio,
  ) {
    _obs_source_output_audio ??= _dylib.lookupFunction<
        _c_obs_source_output_audio,
        _dart_obs_source_output_audio>('obs_source_output_audio');
    return _obs_source_output_audio(
      source,
      audio,
    );
  }

  _dart_obs_source_output_audio _obs_source_output_audio;

  /// Signal an update to any currently used properties via 'update_properties'
  void obs_source_update_properties(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_update_properties ??= _dylib.lookupFunction<
        _c_obs_source_update_properties,
        _dart_obs_source_update_properties>('obs_source_update_properties');
    return _obs_source_update_properties(
      source,
    );
  }

  _dart_obs_source_update_properties _obs_source_update_properties;

  /// Gets the current async video frame
  ffi.Pointer<obs_source_frame> obs_source_get_frame(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_frame ??= _dylib.lookupFunction<_c_obs_source_get_frame,
        _dart_obs_source_get_frame>('obs_source_get_frame');
    return _obs_source_get_frame(
      source,
    );
  }

  _dart_obs_source_get_frame _obs_source_get_frame;

  /// Releases the current async video frame
  void obs_source_release_frame(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_release_frame ??= _dylib.lookupFunction<
        _c_obs_source_release_frame,
        _dart_obs_source_release_frame>('obs_source_release_frame');
    return _obs_source_release_frame(
      source,
      frame,
    );
  }

  _dart_obs_source_release_frame _obs_source_release_frame;

  /// Default RGB filter handler for generic effect filters.  Processes the
  /// filter chain and renders them to texture if needed, then the filter is
  /// drawn with
  ///
  /// After calling this, set your parameters for the effect, then call
  /// obs_source_process_filter_end to draw the filter.
  ///
  /// Returns true if filtering should continue, false if the filter is bypassed
  /// for whatever reason.
  int obs_source_process_filter_begin(
    ffi.Pointer<obs_source> filter,
    int format,
    int allow_direct,
  ) {
    _obs_source_process_filter_begin ??= _dylib.lookupFunction<
            _c_obs_source_process_filter_begin,
            _dart_obs_source_process_filter_begin>(
        'obs_source_process_filter_begin');
    return _obs_source_process_filter_begin(
      filter,
      format,
      allow_direct,
    );
  }

  _dart_obs_source_process_filter_begin _obs_source_process_filter_begin;

  /// Draws the filter.
  ///
  /// Before calling this function, first call obs_source_process_filter_begin and
  /// then set the effect parameters, and then call this function to finalize the
  /// filter.
  void obs_source_process_filter_end(
    ffi.Pointer<obs_source> filter,
    ffi.Pointer<gs_effect> effect,
    int width,
    int height,
  ) {
    _obs_source_process_filter_end ??= _dylib.lookupFunction<
        _c_obs_source_process_filter_end,
        _dart_obs_source_process_filter_end>('obs_source_process_filter_end');
    return _obs_source_process_filter_end(
      filter,
      effect,
      width,
      height,
    );
  }

  _dart_obs_source_process_filter_end _obs_source_process_filter_end;

  /// Draws the filter with a specific technique.
  ///
  /// Before calling this function, first call obs_source_process_filter_begin and
  /// then set the effect parameters, and then call this function to finalize the
  /// filter.
  void obs_source_process_filter_tech_end(
    ffi.Pointer<obs_source> filter,
    ffi.Pointer<gs_effect> effect,
    int width,
    int height,
    ffi.Pointer<ffi.Int8> tech_name,
  ) {
    _obs_source_process_filter_tech_end ??= _dylib.lookupFunction<
            _c_obs_source_process_filter_tech_end,
            _dart_obs_source_process_filter_tech_end>(
        'obs_source_process_filter_tech_end');
    return _obs_source_process_filter_tech_end(
      filter,
      effect,
      width,
      height,
      tech_name,
    );
  }

  _dart_obs_source_process_filter_tech_end _obs_source_process_filter_tech_end;

  /// Skips the filter if the filter is invalid and cannot be rendered
  void obs_source_skip_video_filter(
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_source_skip_video_filter ??= _dylib.lookupFunction<
        _c_obs_source_skip_video_filter,
        _dart_obs_source_skip_video_filter>('obs_source_skip_video_filter');
    return _obs_source_skip_video_filter(
      filter,
    );
  }

  _dart_obs_source_skip_video_filter _obs_source_skip_video_filter;

  /// Adds an active child source.  Must be called by parent sources on child
  /// sources when the child is added and active.  This ensures that the source is
  /// properly activated if the parent is active.
  ///
  /// @returns true if source can be added, false if it causes recursion
  int obs_source_add_active_child(
    ffi.Pointer<obs_source> parent,
    ffi.Pointer<obs_source> child,
  ) {
    _obs_source_add_active_child ??= _dylib.lookupFunction<
        _c_obs_source_add_active_child,
        _dart_obs_source_add_active_child>('obs_source_add_active_child');
    return _obs_source_add_active_child(
      parent,
      child,
    );
  }

  _dart_obs_source_add_active_child _obs_source_add_active_child;

  /// Removes an active child source.  Must be called by parent sources on child
  /// sources when the child is removed or inactive.  This ensures that the source
  /// is properly deactivated if the parent is no longer active.
  void obs_source_remove_active_child(
    ffi.Pointer<obs_source> parent,
    ffi.Pointer<obs_source> child,
  ) {
    _obs_source_remove_active_child ??= _dylib.lookupFunction<
        _c_obs_source_remove_active_child,
        _dart_obs_source_remove_active_child>('obs_source_remove_active_child');
    return _obs_source_remove_active_child(
      parent,
      child,
    );
  }

  _dart_obs_source_remove_active_child _obs_source_remove_active_child;

  /// Sends a mouse down/up event to a source
  void obs_source_send_mouse_click(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_mouse_event> event,
    int type,
    int mouse_up,
    int click_count,
  ) {
    _obs_source_send_mouse_click ??= _dylib.lookupFunction<
        _c_obs_source_send_mouse_click,
        _dart_obs_source_send_mouse_click>('obs_source_send_mouse_click');
    return _obs_source_send_mouse_click(
      source,
      event,
      type,
      mouse_up,
      click_count,
    );
  }

  _dart_obs_source_send_mouse_click _obs_source_send_mouse_click;

  /// Sends a mouse move event to a source.
  void obs_source_send_mouse_move(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_mouse_event> event,
    int mouse_leave,
  ) {
    _obs_source_send_mouse_move ??= _dylib.lookupFunction<
        _c_obs_source_send_mouse_move,
        _dart_obs_source_send_mouse_move>('obs_source_send_mouse_move');
    return _obs_source_send_mouse_move(
      source,
      event,
      mouse_leave,
    );
  }

  _dart_obs_source_send_mouse_move _obs_source_send_mouse_move;

  /// Sends a mouse wheel event to a source
  void obs_source_send_mouse_wheel(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_mouse_event> event,
    int x_delta,
    int y_delta,
  ) {
    _obs_source_send_mouse_wheel ??= _dylib.lookupFunction<
        _c_obs_source_send_mouse_wheel,
        _dart_obs_source_send_mouse_wheel>('obs_source_send_mouse_wheel');
    return _obs_source_send_mouse_wheel(
      source,
      event,
      x_delta,
      y_delta,
    );
  }

  _dart_obs_source_send_mouse_wheel _obs_source_send_mouse_wheel;

  /// Sends a got-focus or lost-focus event to a source
  void obs_source_send_focus(
    ffi.Pointer<obs_source> source,
    int focus,
  ) {
    _obs_source_send_focus ??= _dylib.lookupFunction<_c_obs_source_send_focus,
        _dart_obs_source_send_focus>('obs_source_send_focus');
    return _obs_source_send_focus(
      source,
      focus,
    );
  }

  _dart_obs_source_send_focus _obs_source_send_focus;

  /// Sends a key up/down event to a source
  void obs_source_send_key_click(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_key_event> event,
    int key_up,
  ) {
    _obs_source_send_key_click ??= _dylib.lookupFunction<
        _c_obs_source_send_key_click,
        _dart_obs_source_send_key_click>('obs_source_send_key_click');
    return _obs_source_send_key_click(
      source,
      event,
      key_up,
    );
  }

  _dart_obs_source_send_key_click _obs_source_send_key_click;

  /// Sets the default source flags.
  void obs_source_set_default_flags(
    ffi.Pointer<obs_source> source,
    int flags,
  ) {
    _obs_source_set_default_flags ??= _dylib.lookupFunction<
        _c_obs_source_set_default_flags,
        _dart_obs_source_set_default_flags>('obs_source_set_default_flags');
    return _obs_source_set_default_flags(
      source,
      flags,
    );
  }

  _dart_obs_source_set_default_flags _obs_source_set_default_flags;

  /// Gets the base width for a source (not taking in to account filtering)
  int obs_source_get_base_width(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_base_width ??= _dylib.lookupFunction<
        _c_obs_source_get_base_width,
        _dart_obs_source_get_base_width>('obs_source_get_base_width');
    return _obs_source_get_base_width(
      source,
    );
  }

  _dart_obs_source_get_base_width _obs_source_get_base_width;

  /// Gets the base height for a source (not taking in to account filtering)
  int obs_source_get_base_height(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_base_height ??= _dylib.lookupFunction<
        _c_obs_source_get_base_height,
        _dart_obs_source_get_base_height>('obs_source_get_base_height');
    return _obs_source_get_base_height(
      source,
    );
  }

  _dart_obs_source_get_base_height _obs_source_get_base_height;

  int obs_source_audio_pending(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_audio_pending ??= _dylib.lookupFunction<
        _c_obs_source_audio_pending,
        _dart_obs_source_audio_pending>('obs_source_audio_pending');
    return _obs_source_audio_pending(
      source,
    );
  }

  _dart_obs_source_audio_pending _obs_source_audio_pending;

  int obs_source_get_audio_timestamp(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_audio_timestamp ??= _dylib.lookupFunction<
        _c_obs_source_get_audio_timestamp,
        _dart_obs_source_get_audio_timestamp>('obs_source_get_audio_timestamp');
    return _obs_source_get_audio_timestamp(
      source,
    );
  }

  _dart_obs_source_get_audio_timestamp _obs_source_get_audio_timestamp;

  void obs_source_get_audio_mix(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_audio_mix> audio,
  ) {
    _obs_source_get_audio_mix ??= _dylib.lookupFunction<
        _c_obs_source_get_audio_mix,
        _dart_obs_source_get_audio_mix>('obs_source_get_audio_mix');
    return _obs_source_get_audio_mix(
      source,
      audio,
    );
  }

  _dart_obs_source_get_audio_mix _obs_source_get_audio_mix;

  void obs_source_set_async_unbuffered(
    ffi.Pointer<obs_source> source,
    int unbuffered,
  ) {
    _obs_source_set_async_unbuffered ??= _dylib.lookupFunction<
            _c_obs_source_set_async_unbuffered,
            _dart_obs_source_set_async_unbuffered>(
        'obs_source_set_async_unbuffered');
    return _obs_source_set_async_unbuffered(
      source,
      unbuffered,
    );
  }

  _dart_obs_source_set_async_unbuffered _obs_source_set_async_unbuffered;

  int obs_source_async_unbuffered(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_async_unbuffered ??= _dylib.lookupFunction<
        _c_obs_source_async_unbuffered,
        _dart_obs_source_async_unbuffered>('obs_source_async_unbuffered');
    return _obs_source_async_unbuffered(
      source,
    );
  }

  _dart_obs_source_async_unbuffered _obs_source_async_unbuffered;

  /// Used to decouple audio from video so that audio doesn't attempt to sync up
  /// with video.  I.E. Audio acts independently.  Only works when in unbuffered
  /// mode.
  void obs_source_set_async_decoupled(
    ffi.Pointer<obs_source> source,
    int decouple,
  ) {
    _obs_source_set_async_decoupled ??= _dylib.lookupFunction<
        _c_obs_source_set_async_decoupled,
        _dart_obs_source_set_async_decoupled>('obs_source_set_async_decoupled');
    return _obs_source_set_async_decoupled(
      source,
      decouple,
    );
  }

  _dart_obs_source_set_async_decoupled _obs_source_set_async_decoupled;

  int obs_source_async_decoupled(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_async_decoupled ??= _dylib.lookupFunction<
        _c_obs_source_async_decoupled,
        _dart_obs_source_async_decoupled>('obs_source_async_decoupled');
    return _obs_source_async_decoupled(
      source,
    );
  }

  _dart_obs_source_async_decoupled _obs_source_async_decoupled;

  void obs_source_set_audio_active(
    ffi.Pointer<obs_source> source,
    int show_1,
  ) {
    _obs_source_set_audio_active ??= _dylib.lookupFunction<
        _c_obs_source_set_audio_active,
        _dart_obs_source_set_audio_active>('obs_source_set_audio_active');
    return _obs_source_set_audio_active(
      source,
      show_1,
    );
  }

  _dart_obs_source_set_audio_active _obs_source_set_audio_active;

  int obs_source_audio_active(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_audio_active ??= _dylib.lookupFunction<
        _c_obs_source_audio_active,
        _dart_obs_source_audio_active>('obs_source_audio_active');
    return _obs_source_audio_active(
      source,
    );
  }

  _dart_obs_source_audio_active _obs_source_audio_active;

  int obs_source_get_last_obs_version(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_last_obs_version ??= _dylib.lookupFunction<
            _c_obs_source_get_last_obs_version,
            _dart_obs_source_get_last_obs_version>(
        'obs_source_get_last_obs_version');
    return _obs_source_get_last_obs_version(
      source,
    );
  }

  _dart_obs_source_get_last_obs_version _obs_source_get_last_obs_version;

  /// Media controls
  void obs_source_media_play_pause(
    ffi.Pointer<obs_source> source,
    int pause,
  ) {
    _obs_source_media_play_pause ??= _dylib.lookupFunction<
        _c_obs_source_media_play_pause,
        _dart_obs_source_media_play_pause>('obs_source_media_play_pause');
    return _obs_source_media_play_pause(
      source,
      pause,
    );
  }

  _dart_obs_source_media_play_pause _obs_source_media_play_pause;

  void obs_source_media_restart(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_restart ??= _dylib.lookupFunction<
        _c_obs_source_media_restart,
        _dart_obs_source_media_restart>('obs_source_media_restart');
    return _obs_source_media_restart(
      source,
    );
  }

  _dart_obs_source_media_restart _obs_source_media_restart;

  void obs_source_media_stop(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_stop ??= _dylib.lookupFunction<_c_obs_source_media_stop,
        _dart_obs_source_media_stop>('obs_source_media_stop');
    return _obs_source_media_stop(
      source,
    );
  }

  _dart_obs_source_media_stop _obs_source_media_stop;

  void obs_source_media_next(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_next ??= _dylib.lookupFunction<_c_obs_source_media_next,
        _dart_obs_source_media_next>('obs_source_media_next');
    return _obs_source_media_next(
      source,
    );
  }

  _dart_obs_source_media_next _obs_source_media_next;

  void obs_source_media_previous(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_previous ??= _dylib.lookupFunction<
        _c_obs_source_media_previous,
        _dart_obs_source_media_previous>('obs_source_media_previous');
    return _obs_source_media_previous(
      source,
    );
  }

  _dart_obs_source_media_previous _obs_source_media_previous;

  int obs_source_media_get_duration(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_get_duration ??= _dylib.lookupFunction<
        _c_obs_source_media_get_duration,
        _dart_obs_source_media_get_duration>('obs_source_media_get_duration');
    return _obs_source_media_get_duration(
      source,
    );
  }

  _dart_obs_source_media_get_duration _obs_source_media_get_duration;

  int obs_source_media_get_time(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_get_time ??= _dylib.lookupFunction<
        _c_obs_source_media_get_time,
        _dart_obs_source_media_get_time>('obs_source_media_get_time');
    return _obs_source_media_get_time(
      source,
    );
  }

  _dart_obs_source_media_get_time _obs_source_media_get_time;

  void obs_source_media_set_time(
    ffi.Pointer<obs_source> source,
    int ms,
  ) {
    _obs_source_media_set_time ??= _dylib.lookupFunction<
        _c_obs_source_media_set_time,
        _dart_obs_source_media_set_time>('obs_source_media_set_time');
    return _obs_source_media_set_time(
      source,
      ms,
    );
  }

  _dart_obs_source_media_set_time _obs_source_media_set_time;

  int obs_source_media_get_state(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_get_state ??= _dylib.lookupFunction<
        _c_obs_source_media_get_state,
        _dart_obs_source_media_get_state>('obs_source_media_get_state');
    return _obs_source_media_get_state(
      source,
    );
  }

  _dart_obs_source_media_get_state _obs_source_media_get_state;

  void obs_source_media_started(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_started ??= _dylib.lookupFunction<
        _c_obs_source_media_started,
        _dart_obs_source_media_started>('obs_source_media_started');
    return _obs_source_media_started(
      source,
    );
  }

  _dart_obs_source_media_started _obs_source_media_started;

  void obs_source_media_ended(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_ended ??= _dylib.lookupFunction<_c_obs_source_media_ended,
        _dart_obs_source_media_ended>('obs_source_media_ended');
    return _obs_source_media_ended(
      source,
    );
  }

  _dart_obs_source_media_ended _obs_source_media_ended;

  ffi.Pointer<obs_source> obs_transition_get_source(
    ffi.Pointer<obs_source> transition,
    int target,
  ) {
    _obs_transition_get_source ??= _dylib.lookupFunction<
        _c_obs_transition_get_source,
        _dart_obs_transition_get_source>('obs_transition_get_source');
    return _obs_transition_get_source(
      transition,
      target,
    );
  }

  _dart_obs_transition_get_source _obs_transition_get_source;

  void obs_transition_clear(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_clear ??= _dylib.lookupFunction<_c_obs_transition_clear,
        _dart_obs_transition_clear>('obs_transition_clear');
    return _obs_transition_clear(
      transition,
    );
  }

  _dart_obs_transition_clear _obs_transition_clear;

  ffi.Pointer<obs_source> obs_transition_get_active_source(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_get_active_source ??= _dylib.lookupFunction<
            _c_obs_transition_get_active_source,
            _dart_obs_transition_get_active_source>(
        'obs_transition_get_active_source');
    return _obs_transition_get_active_source(
      transition,
    );
  }

  _dart_obs_transition_get_active_source _obs_transition_get_active_source;

  int obs_transition_start(
    ffi.Pointer<obs_source> transition,
    int mode,
    int duration_ms,
    ffi.Pointer<obs_source> dest,
  ) {
    _obs_transition_start ??= _dylib.lookupFunction<_c_obs_transition_start,
        _dart_obs_transition_start>('obs_transition_start');
    return _obs_transition_start(
      transition,
      mode,
      duration_ms,
      dest,
    );
  }

  _dart_obs_transition_start _obs_transition_start;

  void obs_transition_set(
    ffi.Pointer<obs_source> transition,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_transition_set ??=
        _dylib.lookupFunction<_c_obs_transition_set, _dart_obs_transition_set>(
            'obs_transition_set');
    return _obs_transition_set(
      transition,
      source,
    );
  }

  _dart_obs_transition_set _obs_transition_set;

  void obs_transition_set_manual_time(
    ffi.Pointer<obs_source> transition,
    double t,
  ) {
    _obs_transition_set_manual_time ??= _dylib.lookupFunction<
        _c_obs_transition_set_manual_time,
        _dart_obs_transition_set_manual_time>('obs_transition_set_manual_time');
    return _obs_transition_set_manual_time(
      transition,
      t,
    );
  }

  _dart_obs_transition_set_manual_time _obs_transition_set_manual_time;

  void obs_transition_set_manual_torque(
    ffi.Pointer<obs_source> transition,
    double torque,
    double clamp,
  ) {
    _obs_transition_set_manual_torque ??= _dylib.lookupFunction<
            _c_obs_transition_set_manual_torque,
            _dart_obs_transition_set_manual_torque>(
        'obs_transition_set_manual_torque');
    return _obs_transition_set_manual_torque(
      transition,
      torque,
      clamp,
    );
  }

  _dart_obs_transition_set_manual_torque _obs_transition_set_manual_torque;

  void obs_transition_set_scale_type(
    ffi.Pointer<obs_source> transition,
    int type,
  ) {
    _obs_transition_set_scale_type ??= _dylib.lookupFunction<
        _c_obs_transition_set_scale_type,
        _dart_obs_transition_set_scale_type>('obs_transition_set_scale_type');
    return _obs_transition_set_scale_type(
      transition,
      type,
    );
  }

  _dart_obs_transition_set_scale_type _obs_transition_set_scale_type;

  int obs_transition_get_scale_type(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_get_scale_type ??= _dylib.lookupFunction<
        _c_obs_transition_get_scale_type,
        _dart_obs_transition_get_scale_type>('obs_transition_get_scale_type');
    return _obs_transition_get_scale_type(
      transition,
    );
  }

  _dart_obs_transition_get_scale_type _obs_transition_get_scale_type;

  void obs_transition_set_alignment(
    ffi.Pointer<obs_source> transition,
    int alignment,
  ) {
    _obs_transition_set_alignment ??= _dylib.lookupFunction<
        _c_obs_transition_set_alignment,
        _dart_obs_transition_set_alignment>('obs_transition_set_alignment');
    return _obs_transition_set_alignment(
      transition,
      alignment,
    );
  }

  _dart_obs_transition_set_alignment _obs_transition_set_alignment;

  int obs_transition_get_alignment(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_get_alignment ??= _dylib.lookupFunction<
        _c_obs_transition_get_alignment,
        _dart_obs_transition_get_alignment>('obs_transition_get_alignment');
    return _obs_transition_get_alignment(
      transition,
    );
  }

  _dart_obs_transition_get_alignment _obs_transition_get_alignment;

  void obs_transition_set_size(
    ffi.Pointer<obs_source> transition,
    int cx,
    int cy,
  ) {
    _obs_transition_set_size ??= _dylib.lookupFunction<
        _c_obs_transition_set_size,
        _dart_obs_transition_set_size>('obs_transition_set_size');
    return _obs_transition_set_size(
      transition,
      cx,
      cy,
    );
  }

  _dart_obs_transition_set_size _obs_transition_set_size;

  void obs_transition_get_size(
    ffi.Pointer<obs_source> transition,
    ffi.Pointer<ffi.Uint32> cx,
    ffi.Pointer<ffi.Uint32> cy,
  ) {
    _obs_transition_get_size ??= _dylib.lookupFunction<
        _c_obs_transition_get_size,
        _dart_obs_transition_get_size>('obs_transition_get_size');
    return _obs_transition_get_size(
      transition,
      cx,
      cy,
    );
  }

  _dart_obs_transition_get_size _obs_transition_get_size;

  /// Enables fixed transitions (videos or specific types of transitions that
  /// are of fixed duration and linearly interpolated
  void obs_transition_enable_fixed(
    ffi.Pointer<obs_source> transition,
    int enable,
    int duration_ms,
  ) {
    _obs_transition_enable_fixed ??= _dylib.lookupFunction<
        _c_obs_transition_enable_fixed,
        _dart_obs_transition_enable_fixed>('obs_transition_enable_fixed');
    return _obs_transition_enable_fixed(
      transition,
      enable,
      duration_ms,
    );
  }

  _dart_obs_transition_enable_fixed _obs_transition_enable_fixed;

  int obs_transition_fixed(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_fixed ??= _dylib.lookupFunction<_c_obs_transition_fixed,
        _dart_obs_transition_fixed>('obs_transition_fixed');
    return _obs_transition_fixed(
      transition,
    );
  }

  _dart_obs_transition_fixed _obs_transition_fixed;

  double obs_transition_get_time(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_get_time ??= _dylib.lookupFunction<
        _c_obs_transition_get_time,
        _dart_obs_transition_get_time>('obs_transition_get_time');
    return _obs_transition_get_time(
      transition,
    );
  }

  _dart_obs_transition_get_time _obs_transition_get_time;

  void obs_transition_force_stop(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_force_stop ??= _dylib.lookupFunction<
        _c_obs_transition_force_stop,
        _dart_obs_transition_force_stop>('obs_transition_force_stop');
    return _obs_transition_force_stop(
      transition,
    );
  }

  _dart_obs_transition_force_stop _obs_transition_force_stop;

  void obs_transition_video_render(
    ffi.Pointer<obs_source> transition,
    ffi.Pointer<ffi.NativeFunction<obs_transition_video_render_callback_t>>
        callback,
  ) {
    _obs_transition_video_render ??= _dylib.lookupFunction<
        _c_obs_transition_video_render,
        _dart_obs_transition_video_render>('obs_transition_video_render');
    return _obs_transition_video_render(
      transition,
      callback,
    );
  }

  _dart_obs_transition_video_render _obs_transition_video_render;

  /// Directly renders its sub-source instead of to texture.  Returns false if no
  /// longer transitioning
  int obs_transition_video_render_direct(
    ffi.Pointer<obs_source> transition,
    int target,
  ) {
    _obs_transition_video_render_direct ??= _dylib.lookupFunction<
            _c_obs_transition_video_render_direct,
            _dart_obs_transition_video_render_direct>(
        'obs_transition_video_render_direct');
    return _obs_transition_video_render_direct(
      transition,
      target,
    );
  }

  _dart_obs_transition_video_render_direct _obs_transition_video_render_direct;

  int obs_transition_audio_render(
    ffi.Pointer<obs_source> transition,
    ffi.Pointer<ffi.Uint64> ts_out,
    ffi.Pointer<obs_source_audio_mix> audio,
    int mixers,
    int channels,
    int sample_rate,
    ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
        mix_a_callback,
    ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
        mix_b_callback,
  ) {
    _obs_transition_audio_render ??= _dylib.lookupFunction<
        _c_obs_transition_audio_render,
        _dart_obs_transition_audio_render>('obs_transition_audio_render');
    return _obs_transition_audio_render(
      transition,
      ts_out,
      audio,
      mixers,
      channels,
      sample_rate,
      mix_a_callback,
      mix_b_callback,
    );
  }

  _dart_obs_transition_audio_render _obs_transition_audio_render;

  void obs_transition_swap_begin(
    ffi.Pointer<obs_source> tr_dest,
    ffi.Pointer<obs_source> tr_source,
  ) {
    _obs_transition_swap_begin ??= _dylib.lookupFunction<
        _c_obs_transition_swap_begin,
        _dart_obs_transition_swap_begin>('obs_transition_swap_begin');
    return _obs_transition_swap_begin(
      tr_dest,
      tr_source,
    );
  }

  _dart_obs_transition_swap_begin _obs_transition_swap_begin;

  void obs_transition_swap_end(
    ffi.Pointer<obs_source> tr_dest,
    ffi.Pointer<obs_source> tr_source,
  ) {
    _obs_transition_swap_end ??= _dylib.lookupFunction<
        _c_obs_transition_swap_end,
        _dart_obs_transition_swap_end>('obs_transition_swap_end');
    return _obs_transition_swap_end(
      tr_dest,
      tr_source,
    );
  }

  _dart_obs_transition_swap_end _obs_transition_swap_end;

  /// Creates a scene.
  ///
  /// A scene is a source which is a container of other sources with specific
  /// display orientations.  Scenes can also be used like any other source.
  ffi.Pointer<obs_scene> obs_scene_create(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_create ??=
        _dylib.lookupFunction<_c_obs_scene_create, _dart_obs_scene_create>(
            'obs_scene_create');
    return _obs_scene_create(
      name,
    );
  }

  _dart_obs_scene_create _obs_scene_create;

  ffi.Pointer<obs_scene> obs_scene_create_private(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_create_private ??= _dylib.lookupFunction<
        _c_obs_scene_create_private,
        _dart_obs_scene_create_private>('obs_scene_create_private');
    return _obs_scene_create_private(
      name,
    );
  }

  _dart_obs_scene_create_private _obs_scene_create_private;

  /// Duplicates a scene.
  ffi.Pointer<obs_scene> obs_scene_duplicate(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
    int type,
  ) {
    _obs_scene_duplicate ??= _dylib.lookupFunction<_c_obs_scene_duplicate,
        _dart_obs_scene_duplicate>('obs_scene_duplicate');
    return _obs_scene_duplicate(
      scene,
      name,
      type,
    );
  }

  _dart_obs_scene_duplicate _obs_scene_duplicate;

  void obs_scene_addref(
    ffi.Pointer<obs_scene> scene,
  ) {
    _obs_scene_addref ??=
        _dylib.lookupFunction<_c_obs_scene_addref, _dart_obs_scene_addref>(
            'obs_scene_addref');
    return _obs_scene_addref(
      scene,
    );
  }

  _dart_obs_scene_addref _obs_scene_addref;

  void obs_scene_release(
    ffi.Pointer<obs_scene> scene,
  ) {
    _obs_scene_release ??=
        _dylib.lookupFunction<_c_obs_scene_release, _dart_obs_scene_release>(
            'obs_scene_release');
    return _obs_scene_release(
      scene,
    );
  }

  _dart_obs_scene_release _obs_scene_release;

  /// Gets the scene's source context
  ffi.Pointer<obs_source> obs_scene_get_source(
    ffi.Pointer<obs_scene> scene,
  ) {
    _obs_scene_get_source ??= _dylib.lookupFunction<_c_obs_scene_get_source,
        _dart_obs_scene_get_source>('obs_scene_get_source');
    return _obs_scene_get_source(
      scene,
    );
  }

  _dart_obs_scene_get_source _obs_scene_get_source;

  /// Gets the scene from its source, or NULL if not a scene
  ffi.Pointer<obs_scene> obs_scene_from_source(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_scene_from_source ??= _dylib.lookupFunction<_c_obs_scene_from_source,
        _dart_obs_scene_from_source>('obs_scene_from_source');
    return _obs_scene_from_source(
      source,
    );
  }

  _dart_obs_scene_from_source _obs_scene_from_source;

  /// Determines whether a source is within a scene
  ffi.Pointer<obs_scene_item> obs_scene_find_source(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_find_source ??= _dylib.lookupFunction<_c_obs_scene_find_source,
        _dart_obs_scene_find_source>('obs_scene_find_source');
    return _obs_scene_find_source(
      scene,
      name,
    );
  }

  _dart_obs_scene_find_source _obs_scene_find_source;

  ffi.Pointer<obs_scene_item> obs_scene_find_source_recursive(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_find_source_recursive ??= _dylib.lookupFunction<
            _c_obs_scene_find_source_recursive,
            _dart_obs_scene_find_source_recursive>(
        'obs_scene_find_source_recursive');
    return _obs_scene_find_source_recursive(
      scene,
      name,
    );
  }

  _dart_obs_scene_find_source_recursive _obs_scene_find_source_recursive;

  ffi.Pointer<obs_scene_item> obs_scene_find_sceneitem_by_id(
    ffi.Pointer<obs_scene> scene,
    int id,
  ) {
    _obs_scene_find_sceneitem_by_id ??= _dylib.lookupFunction<
        _c_obs_scene_find_sceneitem_by_id,
        _dart_obs_scene_find_sceneitem_by_id>('obs_scene_find_sceneitem_by_id');
    return _obs_scene_find_sceneitem_by_id(
      scene,
      id,
    );
  }

  _dart_obs_scene_find_sceneitem_by_id _obs_scene_find_sceneitem_by_id;

  /// Enumerates sources within a scene
  void obs_scene_enum_items(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.NativeFunction<_typedefC_121>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_scene_enum_items ??= _dylib.lookupFunction<_c_obs_scene_enum_items,
        _dart_obs_scene_enum_items>('obs_scene_enum_items');
    return _obs_scene_enum_items(
      scene,
      callback,
      param,
    );
  }

  _dart_obs_scene_enum_items _obs_scene_enum_items;

  int obs_scene_reorder_items(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Pointer<obs_scene_item>> item_order,
    int item_order_size,
  ) {
    _obs_scene_reorder_items ??= _dylib.lookupFunction<
        _c_obs_scene_reorder_items,
        _dart_obs_scene_reorder_items>('obs_scene_reorder_items');
    return _obs_scene_reorder_items(
      scene,
      item_order,
      item_order_size,
    );
  }

  _dart_obs_scene_reorder_items _obs_scene_reorder_items;

  int obs_scene_reorder_items2(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<obs_sceneitem_order_info> item_order,
    int item_order_size,
  ) {
    _obs_scene_reorder_items2 ??= _dylib.lookupFunction<
        _c_obs_scene_reorder_items2,
        _dart_obs_scene_reorder_items2>('obs_scene_reorder_items2');
    return _obs_scene_reorder_items2(
      scene,
      item_order,
      item_order_size,
    );
  }

  _dart_obs_scene_reorder_items2 _obs_scene_reorder_items2;

  /// Adds/creates a new scene item for a source
  ffi.Pointer<obs_scene_item> obs_scene_add(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_scene_add ??= _dylib
        .lookupFunction<_c_obs_scene_add, _dart_obs_scene_add>('obs_scene_add');
    return _obs_scene_add(
      scene,
      source,
    );
  }

  _dart_obs_scene_add _obs_scene_add;

  void obs_scene_atomic_update(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.NativeFunction<obs_scene_atomic_update_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_scene_atomic_update ??= _dylib.lookupFunction<
        _c_obs_scene_atomic_update,
        _dart_obs_scene_atomic_update>('obs_scene_atomic_update');
    return _obs_scene_atomic_update(
      scene,
      func,
      data,
    );
  }

  _dart_obs_scene_atomic_update _obs_scene_atomic_update;

  void obs_sceneitem_addref(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_addref ??= _dylib.lookupFunction<_c_obs_sceneitem_addref,
        _dart_obs_sceneitem_addref>('obs_sceneitem_addref');
    return _obs_sceneitem_addref(
      item,
    );
  }

  _dart_obs_sceneitem_addref _obs_sceneitem_addref;

  void obs_sceneitem_release(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_release ??= _dylib.lookupFunction<_c_obs_sceneitem_release,
        _dart_obs_sceneitem_release>('obs_sceneitem_release');
    return _obs_sceneitem_release(
      item,
    );
  }

  _dart_obs_sceneitem_release _obs_sceneitem_release;

  /// Removes a scene item.
  void obs_sceneitem_remove(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_remove ??= _dylib.lookupFunction<_c_obs_sceneitem_remove,
        _dart_obs_sceneitem_remove>('obs_sceneitem_remove');
    return _obs_sceneitem_remove(
      item,
    );
  }

  _dart_obs_sceneitem_remove _obs_sceneitem_remove;

  /// Gets the scene parent associated with the scene item.
  ffi.Pointer<obs_scene> obs_sceneitem_get_scene(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_scene ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_scene,
        _dart_obs_sceneitem_get_scene>('obs_sceneitem_get_scene');
    return _obs_sceneitem_get_scene(
      item,
    );
  }

  _dart_obs_sceneitem_get_scene _obs_sceneitem_get_scene;

  /// Gets the source of a scene item.
  ffi.Pointer<obs_source> obs_sceneitem_get_source(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_source ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_source,
        _dart_obs_sceneitem_get_source>('obs_sceneitem_get_source');
    return _obs_sceneitem_get_source(
      item,
    );
  }

  _dart_obs_sceneitem_get_source _obs_sceneitem_get_source;

  void obs_sceneitem_select(
    ffi.Pointer<obs_scene_item> item,
    int select,
  ) {
    _obs_sceneitem_select ??= _dylib.lookupFunction<_c_obs_sceneitem_select,
        _dart_obs_sceneitem_select>('obs_sceneitem_select');
    return _obs_sceneitem_select(
      item,
      select,
    );
  }

  _dart_obs_sceneitem_select _obs_sceneitem_select;

  int obs_sceneitem_selected(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_selected ??= _dylib.lookupFunction<_c_obs_sceneitem_selected,
        _dart_obs_sceneitem_selected>('obs_sceneitem_selected');
    return _obs_sceneitem_selected(
      item,
    );
  }

  _dart_obs_sceneitem_selected _obs_sceneitem_selected;

  int obs_sceneitem_locked(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_locked ??= _dylib.lookupFunction<_c_obs_sceneitem_locked,
        _dart_obs_sceneitem_locked>('obs_sceneitem_locked');
    return _obs_sceneitem_locked(
      item,
    );
  }

  _dart_obs_sceneitem_locked _obs_sceneitem_locked;

  int obs_sceneitem_set_locked(
    ffi.Pointer<obs_scene_item> item,
    int lock,
  ) {
    _obs_sceneitem_set_locked ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_locked,
        _dart_obs_sceneitem_set_locked>('obs_sceneitem_set_locked');
    return _obs_sceneitem_set_locked(
      item,
      lock,
    );
  }

  _dart_obs_sceneitem_set_locked _obs_sceneitem_set_locked;

  void obs_sceneitem_set_pos(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> pos,
  ) {
    _obs_sceneitem_set_pos ??= _dylib.lookupFunction<_c_obs_sceneitem_set_pos,
        _dart_obs_sceneitem_set_pos>('obs_sceneitem_set_pos');
    return _obs_sceneitem_set_pos(
      item,
      pos,
    );
  }

  _dart_obs_sceneitem_set_pos _obs_sceneitem_set_pos;

  void obs_sceneitem_set_rot(
    ffi.Pointer<obs_scene_item> item,
    double rot_deg,
  ) {
    _obs_sceneitem_set_rot ??= _dylib.lookupFunction<_c_obs_sceneitem_set_rot,
        _dart_obs_sceneitem_set_rot>('obs_sceneitem_set_rot');
    return _obs_sceneitem_set_rot(
      item,
      rot_deg,
    );
  }

  _dart_obs_sceneitem_set_rot _obs_sceneitem_set_rot;

  void obs_sceneitem_set_scale(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> scale,
  ) {
    _obs_sceneitem_set_scale ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_scale,
        _dart_obs_sceneitem_set_scale>('obs_sceneitem_set_scale');
    return _obs_sceneitem_set_scale(
      item,
      scale,
    );
  }

  _dart_obs_sceneitem_set_scale _obs_sceneitem_set_scale;

  void obs_sceneitem_set_alignment(
    ffi.Pointer<obs_scene_item> item,
    int alignment,
  ) {
    _obs_sceneitem_set_alignment ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_alignment,
        _dart_obs_sceneitem_set_alignment>('obs_sceneitem_set_alignment');
    return _obs_sceneitem_set_alignment(
      item,
      alignment,
    );
  }

  _dart_obs_sceneitem_set_alignment _obs_sceneitem_set_alignment;

  void obs_sceneitem_set_order(
    ffi.Pointer<obs_scene_item> item,
    int movement,
  ) {
    _obs_sceneitem_set_order ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_order,
        _dart_obs_sceneitem_set_order>('obs_sceneitem_set_order');
    return _obs_sceneitem_set_order(
      item,
      movement,
    );
  }

  _dart_obs_sceneitem_set_order _obs_sceneitem_set_order;

  void obs_sceneitem_set_order_position(
    ffi.Pointer<obs_scene_item> item,
    int position,
  ) {
    _obs_sceneitem_set_order_position ??= _dylib.lookupFunction<
            _c_obs_sceneitem_set_order_position,
            _dart_obs_sceneitem_set_order_position>(
        'obs_sceneitem_set_order_position');
    return _obs_sceneitem_set_order_position(
      item,
      position,
    );
  }

  _dart_obs_sceneitem_set_order_position _obs_sceneitem_set_order_position;

  void obs_sceneitem_set_bounds_type(
    ffi.Pointer<obs_scene_item> item,
    int type,
  ) {
    _obs_sceneitem_set_bounds_type ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_bounds_type,
        _dart_obs_sceneitem_set_bounds_type>('obs_sceneitem_set_bounds_type');
    return _obs_sceneitem_set_bounds_type(
      item,
      type,
    );
  }

  _dart_obs_sceneitem_set_bounds_type _obs_sceneitem_set_bounds_type;

  void obs_sceneitem_set_bounds_alignment(
    ffi.Pointer<obs_scene_item> item,
    int alignment,
  ) {
    _obs_sceneitem_set_bounds_alignment ??= _dylib.lookupFunction<
            _c_obs_sceneitem_set_bounds_alignment,
            _dart_obs_sceneitem_set_bounds_alignment>(
        'obs_sceneitem_set_bounds_alignment');
    return _obs_sceneitem_set_bounds_alignment(
      item,
      alignment,
    );
  }

  _dart_obs_sceneitem_set_bounds_alignment _obs_sceneitem_set_bounds_alignment;

  void obs_sceneitem_set_bounds(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> bounds,
  ) {
    _obs_sceneitem_set_bounds ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_bounds,
        _dart_obs_sceneitem_set_bounds>('obs_sceneitem_set_bounds');
    return _obs_sceneitem_set_bounds(
      item,
      bounds,
    );
  }

  _dart_obs_sceneitem_set_bounds _obs_sceneitem_set_bounds;

  int obs_sceneitem_get_id(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_id ??= _dylib.lookupFunction<_c_obs_sceneitem_get_id,
        _dart_obs_sceneitem_get_id>('obs_sceneitem_get_id');
    return _obs_sceneitem_get_id(
      item,
    );
  }

  _dart_obs_sceneitem_get_id _obs_sceneitem_get_id;

  void obs_sceneitem_get_pos(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> pos,
  ) {
    _obs_sceneitem_get_pos ??= _dylib.lookupFunction<_c_obs_sceneitem_get_pos,
        _dart_obs_sceneitem_get_pos>('obs_sceneitem_get_pos');
    return _obs_sceneitem_get_pos(
      item,
      pos,
    );
  }

  _dart_obs_sceneitem_get_pos _obs_sceneitem_get_pos;

  double obs_sceneitem_get_rot(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_rot ??= _dylib.lookupFunction<_c_obs_sceneitem_get_rot,
        _dart_obs_sceneitem_get_rot>('obs_sceneitem_get_rot');
    return _obs_sceneitem_get_rot(
      item,
    );
  }

  _dart_obs_sceneitem_get_rot _obs_sceneitem_get_rot;

  void obs_sceneitem_get_scale(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> scale,
  ) {
    _obs_sceneitem_get_scale ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_scale,
        _dart_obs_sceneitem_get_scale>('obs_sceneitem_get_scale');
    return _obs_sceneitem_get_scale(
      item,
      scale,
    );
  }

  _dart_obs_sceneitem_get_scale _obs_sceneitem_get_scale;

  int obs_sceneitem_get_alignment(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_alignment ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_alignment,
        _dart_obs_sceneitem_get_alignment>('obs_sceneitem_get_alignment');
    return _obs_sceneitem_get_alignment(
      item,
    );
  }

  _dart_obs_sceneitem_get_alignment _obs_sceneitem_get_alignment;

  int obs_sceneitem_get_bounds_type(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_bounds_type ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_bounds_type,
        _dart_obs_sceneitem_get_bounds_type>('obs_sceneitem_get_bounds_type');
    return _obs_sceneitem_get_bounds_type(
      item,
    );
  }

  _dart_obs_sceneitem_get_bounds_type _obs_sceneitem_get_bounds_type;

  int obs_sceneitem_get_bounds_alignment(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_bounds_alignment ??= _dylib.lookupFunction<
            _c_obs_sceneitem_get_bounds_alignment,
            _dart_obs_sceneitem_get_bounds_alignment>(
        'obs_sceneitem_get_bounds_alignment');
    return _obs_sceneitem_get_bounds_alignment(
      item,
    );
  }

  _dart_obs_sceneitem_get_bounds_alignment _obs_sceneitem_get_bounds_alignment;

  void obs_sceneitem_get_bounds(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> bounds,
  ) {
    _obs_sceneitem_get_bounds ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_bounds,
        _dart_obs_sceneitem_get_bounds>('obs_sceneitem_get_bounds');
    return _obs_sceneitem_get_bounds(
      item,
      bounds,
    );
  }

  _dart_obs_sceneitem_get_bounds _obs_sceneitem_get_bounds;

  void obs_sceneitem_get_info(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<obs_transform_info> info,
  ) {
    _obs_sceneitem_get_info ??= _dylib.lookupFunction<_c_obs_sceneitem_get_info,
        _dart_obs_sceneitem_get_info>('obs_sceneitem_get_info');
    return _obs_sceneitem_get_info(
      item,
      info,
    );
  }

  _dart_obs_sceneitem_get_info _obs_sceneitem_get_info;

  void obs_sceneitem_set_info(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<obs_transform_info> info,
  ) {
    _obs_sceneitem_set_info ??= _dylib.lookupFunction<_c_obs_sceneitem_set_info,
        _dart_obs_sceneitem_set_info>('obs_sceneitem_set_info');
    return _obs_sceneitem_set_info(
      item,
      info,
    );
  }

  _dart_obs_sceneitem_set_info _obs_sceneitem_set_info;

  void obs_sceneitem_get_draw_transform(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<matrix4> transform,
  ) {
    _obs_sceneitem_get_draw_transform ??= _dylib.lookupFunction<
            _c_obs_sceneitem_get_draw_transform,
            _dart_obs_sceneitem_get_draw_transform>(
        'obs_sceneitem_get_draw_transform');
    return _obs_sceneitem_get_draw_transform(
      item,
      transform,
    );
  }

  _dart_obs_sceneitem_get_draw_transform _obs_sceneitem_get_draw_transform;

  void obs_sceneitem_get_box_transform(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<matrix4> transform,
  ) {
    _obs_sceneitem_get_box_transform ??= _dylib.lookupFunction<
            _c_obs_sceneitem_get_box_transform,
            _dart_obs_sceneitem_get_box_transform>(
        'obs_sceneitem_get_box_transform');
    return _obs_sceneitem_get_box_transform(
      item,
      transform,
    );
  }

  _dart_obs_sceneitem_get_box_transform _obs_sceneitem_get_box_transform;

  void obs_sceneitem_get_box_scale(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> scale,
  ) {
    _obs_sceneitem_get_box_scale ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_box_scale,
        _dart_obs_sceneitem_get_box_scale>('obs_sceneitem_get_box_scale');
    return _obs_sceneitem_get_box_scale(
      item,
      scale,
    );
  }

  _dart_obs_sceneitem_get_box_scale _obs_sceneitem_get_box_scale;

  int obs_sceneitem_visible(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_visible ??= _dylib.lookupFunction<_c_obs_sceneitem_visible,
        _dart_obs_sceneitem_visible>('obs_sceneitem_visible');
    return _obs_sceneitem_visible(
      item,
    );
  }

  _dart_obs_sceneitem_visible _obs_sceneitem_visible;

  int obs_sceneitem_set_visible(
    ffi.Pointer<obs_scene_item> item,
    int visible,
  ) {
    _obs_sceneitem_set_visible ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_visible,
        _dart_obs_sceneitem_set_visible>('obs_sceneitem_set_visible');
    return _obs_sceneitem_set_visible(
      item,
      visible,
    );
  }

  _dart_obs_sceneitem_set_visible _obs_sceneitem_set_visible;

  void obs_sceneitem_set_crop(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<obs_sceneitem_crop> crop,
  ) {
    _obs_sceneitem_set_crop ??= _dylib.lookupFunction<_c_obs_sceneitem_set_crop,
        _dart_obs_sceneitem_set_crop>('obs_sceneitem_set_crop');
    return _obs_sceneitem_set_crop(
      item,
      crop,
    );
  }

  _dart_obs_sceneitem_set_crop _obs_sceneitem_set_crop;

  void obs_sceneitem_get_crop(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<obs_sceneitem_crop> crop,
  ) {
    _obs_sceneitem_get_crop ??= _dylib.lookupFunction<_c_obs_sceneitem_get_crop,
        _dart_obs_sceneitem_get_crop>('obs_sceneitem_get_crop');
    return _obs_sceneitem_get_crop(
      item,
      crop,
    );
  }

  _dart_obs_sceneitem_get_crop _obs_sceneitem_get_crop;

  void obs_sceneitem_set_scale_filter(
    ffi.Pointer<obs_scene_item> item,
    int filter,
  ) {
    _obs_sceneitem_set_scale_filter ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_scale_filter,
        _dart_obs_sceneitem_set_scale_filter>('obs_sceneitem_set_scale_filter');
    return _obs_sceneitem_set_scale_filter(
      item,
      filter,
    );
  }

  _dart_obs_sceneitem_set_scale_filter _obs_sceneitem_set_scale_filter;

  int obs_sceneitem_get_scale_filter(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_scale_filter ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_scale_filter,
        _dart_obs_sceneitem_get_scale_filter>('obs_sceneitem_get_scale_filter');
    return _obs_sceneitem_get_scale_filter(
      item,
    );
  }

  _dart_obs_sceneitem_get_scale_filter _obs_sceneitem_get_scale_filter;

  void obs_sceneitem_force_update_transform(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_force_update_transform ??= _dylib.lookupFunction<
            _c_obs_sceneitem_force_update_transform,
            _dart_obs_sceneitem_force_update_transform>(
        'obs_sceneitem_force_update_transform');
    return _obs_sceneitem_force_update_transform(
      item,
    );
  }

  _dart_obs_sceneitem_force_update_transform
      _obs_sceneitem_force_update_transform;

  void obs_sceneitem_defer_update_begin(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_defer_update_begin ??= _dylib.lookupFunction<
            _c_obs_sceneitem_defer_update_begin,
            _dart_obs_sceneitem_defer_update_begin>(
        'obs_sceneitem_defer_update_begin');
    return _obs_sceneitem_defer_update_begin(
      item,
    );
  }

  _dart_obs_sceneitem_defer_update_begin _obs_sceneitem_defer_update_begin;

  void obs_sceneitem_defer_update_end(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_defer_update_end ??= _dylib.lookupFunction<
        _c_obs_sceneitem_defer_update_end,
        _dart_obs_sceneitem_defer_update_end>('obs_sceneitem_defer_update_end');
    return _obs_sceneitem_defer_update_end(
      item,
    );
  }

  _dart_obs_sceneitem_defer_update_end _obs_sceneitem_defer_update_end;

  /// Gets private front-end settings data.  This data is saved/loaded
  /// automatically.  Returns an incremented reference.
  ffi.Pointer<obs_data> obs_sceneitem_get_private_settings(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_private_settings ??= _dylib.lookupFunction<
            _c_obs_sceneitem_get_private_settings,
            _dart_obs_sceneitem_get_private_settings>(
        'obs_sceneitem_get_private_settings');
    return _obs_sceneitem_get_private_settings(
      item,
    );
  }

  _dart_obs_sceneitem_get_private_settings _obs_sceneitem_get_private_settings;

  ffi.Pointer<obs_scene_item> obs_scene_add_group(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_add_group ??= _dylib.lookupFunction<_c_obs_scene_add_group,
        _dart_obs_scene_add_group>('obs_scene_add_group');
    return _obs_scene_add_group(
      scene,
      name,
    );
  }

  _dart_obs_scene_add_group _obs_scene_add_group;

  ffi.Pointer<obs_scene_item> obs_scene_insert_group(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
    int count,
  ) {
    _obs_scene_insert_group ??= _dylib.lookupFunction<_c_obs_scene_insert_group,
        _dart_obs_scene_insert_group>('obs_scene_insert_group');
    return _obs_scene_insert_group(
      scene,
      name,
      items,
      count,
    );
  }

  _dart_obs_scene_insert_group _obs_scene_insert_group;

  ffi.Pointer<obs_scene_item> obs_scene_add_group2(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
    int signal,
  ) {
    _obs_scene_add_group2 ??= _dylib.lookupFunction<_c_obs_scene_add_group2,
        _dart_obs_scene_add_group2>('obs_scene_add_group2');
    return _obs_scene_add_group2(
      scene,
      name,
      signal,
    );
  }

  _dart_obs_scene_add_group2 _obs_scene_add_group2;

  ffi.Pointer<obs_scene_item> obs_scene_insert_group2(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
    int count,
    int signal,
  ) {
    _obs_scene_insert_group2 ??= _dylib.lookupFunction<
        _c_obs_scene_insert_group2,
        _dart_obs_scene_insert_group2>('obs_scene_insert_group2');
    return _obs_scene_insert_group2(
      scene,
      name,
      items,
      count,
      signal,
    );
  }

  _dart_obs_scene_insert_group2 _obs_scene_insert_group2;

  ffi.Pointer<obs_scene_item> obs_scene_get_group(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_get_group ??= _dylib.lookupFunction<_c_obs_scene_get_group,
        _dart_obs_scene_get_group>('obs_scene_get_group');
    return _obs_scene_get_group(
      scene,
      name,
    );
  }

  _dart_obs_scene_get_group _obs_scene_get_group;

  int obs_sceneitem_is_group(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_is_group ??= _dylib.lookupFunction<_c_obs_sceneitem_is_group,
        _dart_obs_sceneitem_is_group>('obs_sceneitem_is_group');
    return _obs_sceneitem_is_group(
      item,
    );
  }

  _dart_obs_sceneitem_is_group _obs_sceneitem_is_group;

  ffi.Pointer<obs_scene> obs_sceneitem_group_get_scene(
    ffi.Pointer<obs_scene_item> group,
  ) {
    _obs_sceneitem_group_get_scene ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_get_scene,
        _dart_obs_sceneitem_group_get_scene>('obs_sceneitem_group_get_scene');
    return _obs_sceneitem_group_get_scene(
      group,
    );
  }

  _dart_obs_sceneitem_group_get_scene _obs_sceneitem_group_get_scene;

  void obs_sceneitem_group_ungroup(
    ffi.Pointer<obs_scene_item> group,
  ) {
    _obs_sceneitem_group_ungroup ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_ungroup,
        _dart_obs_sceneitem_group_ungroup>('obs_sceneitem_group_ungroup');
    return _obs_sceneitem_group_ungroup(
      group,
    );
  }

  _dart_obs_sceneitem_group_ungroup _obs_sceneitem_group_ungroup;

  void obs_sceneitem_group_ungroup2(
    ffi.Pointer<obs_scene_item> group,
    int signal,
  ) {
    _obs_sceneitem_group_ungroup2 ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_ungroup2,
        _dart_obs_sceneitem_group_ungroup2>('obs_sceneitem_group_ungroup2');
    return _obs_sceneitem_group_ungroup2(
      group,
      signal,
    );
  }

  _dart_obs_sceneitem_group_ungroup2 _obs_sceneitem_group_ungroup2;

  void obs_sceneitem_group_add_item(
    ffi.Pointer<obs_scene_item> group,
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_group_add_item ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_add_item,
        _dart_obs_sceneitem_group_add_item>('obs_sceneitem_group_add_item');
    return _obs_sceneitem_group_add_item(
      group,
      item,
    );
  }

  _dart_obs_sceneitem_group_add_item _obs_sceneitem_group_add_item;

  void obs_sceneitem_group_remove_item(
    ffi.Pointer<obs_scene_item> group,
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_group_remove_item ??= _dylib.lookupFunction<
            _c_obs_sceneitem_group_remove_item,
            _dart_obs_sceneitem_group_remove_item>(
        'obs_sceneitem_group_remove_item');
    return _obs_sceneitem_group_remove_item(
      group,
      item,
    );
  }

  _dart_obs_sceneitem_group_remove_item _obs_sceneitem_group_remove_item;

  ffi.Pointer<obs_scene_item> obs_sceneitem_get_group(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_group ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_group,
        _dart_obs_sceneitem_get_group>('obs_sceneitem_get_group');
    return _obs_sceneitem_get_group(
      scene,
      item,
    );
  }

  _dart_obs_sceneitem_get_group _obs_sceneitem_get_group;

  int obs_source_is_group(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_is_group ??= _dylib.lookupFunction<_c_obs_source_is_group,
        _dart_obs_source_is_group>('obs_source_is_group');
    return _obs_source_is_group(
      source,
    );
  }

  _dart_obs_source_is_group _obs_source_is_group;

  int obs_scene_is_group(
    ffi.Pointer<obs_scene> scene,
  ) {
    _obs_scene_is_group ??=
        _dylib.lookupFunction<_c_obs_scene_is_group, _dart_obs_scene_is_group>(
            'obs_scene_is_group');
    return _obs_scene_is_group(
      scene,
    );
  }

  _dart_obs_scene_is_group _obs_scene_is_group;

  void obs_sceneitem_group_enum_items(
    ffi.Pointer<obs_scene_item> group,
    ffi.Pointer<ffi.NativeFunction<_typedefC_122>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_sceneitem_group_enum_items ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_enum_items,
        _dart_obs_sceneitem_group_enum_items>('obs_sceneitem_group_enum_items');
    return _obs_sceneitem_group_enum_items(
      group,
      callback,
      param,
    );
  }

  _dart_obs_sceneitem_group_enum_items _obs_sceneitem_group_enum_items;

  /// Gets the group from its source, or NULL if not a group
  ffi.Pointer<obs_scene> obs_group_from_source(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_group_from_source ??= _dylib.lookupFunction<_c_obs_group_from_source,
        _dart_obs_group_from_source>('obs_group_from_source');
    return _obs_group_from_source(
      source,
    );
  }

  _dart_obs_group_from_source _obs_group_from_source;

  void obs_sceneitem_defer_group_resize_begin(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_defer_group_resize_begin ??= _dylib.lookupFunction<
            _c_obs_sceneitem_defer_group_resize_begin,
            _dart_obs_sceneitem_defer_group_resize_begin>(
        'obs_sceneitem_defer_group_resize_begin');
    return _obs_sceneitem_defer_group_resize_begin(
      item,
    );
  }

  _dart_obs_sceneitem_defer_group_resize_begin
      _obs_sceneitem_defer_group_resize_begin;

  void obs_sceneitem_defer_group_resize_end(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_defer_group_resize_end ??= _dylib.lookupFunction<
            _c_obs_sceneitem_defer_group_resize_end,
            _dart_obs_sceneitem_defer_group_resize_end>(
        'obs_sceneitem_defer_group_resize_end');
    return _obs_sceneitem_defer_group_resize_end(
      item,
    );
  }

  _dart_obs_sceneitem_defer_group_resize_end
      _obs_sceneitem_defer_group_resize_end;

  ffi.Pointer<ffi.Int8> obs_output_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_output_get_display_name ??= _dylib.lookupFunction<
        _c_obs_output_get_display_name,
        _dart_obs_output_get_display_name>('obs_output_get_display_name');
    return _obs_output_get_display_name(
      id,
    );
  }

  _dart_obs_output_get_display_name _obs_output_get_display_name;

  /// Creates an output.
  ///
  /// Outputs allow outputting to file, outputting to network, outputting to
  /// directshow, or other custom outputs.
  ffi.Pointer<obs_output> obs_output_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> settings,
    ffi.Pointer<obs_data> hotkey_data,
  ) {
    _obs_output_create ??=
        _dylib.lookupFunction<_c_obs_output_create, _dart_obs_output_create>(
            'obs_output_create');
    return _obs_output_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  _dart_obs_output_create _obs_output_create;

  /// Adds/releases a reference to an output.  When the last reference is
  /// released, the output is destroyed.
  void obs_output_addref(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_addref ??=
        _dylib.lookupFunction<_c_obs_output_addref, _dart_obs_output_addref>(
            'obs_output_addref');
    return _obs_output_addref(
      output,
    );
  }

  _dart_obs_output_addref _obs_output_addref;

  void obs_output_release(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_release ??=
        _dylib.lookupFunction<_c_obs_output_release, _dart_obs_output_release>(
            'obs_output_release');
    return _obs_output_release(
      output,
    );
  }

  _dart_obs_output_release _obs_output_release;

  void obs_weak_output_addref(
    ffi.Pointer<obs_weak_output> weak,
  ) {
    _obs_weak_output_addref ??= _dylib.lookupFunction<_c_obs_weak_output_addref,
        _dart_obs_weak_output_addref>('obs_weak_output_addref');
    return _obs_weak_output_addref(
      weak,
    );
  }

  _dart_obs_weak_output_addref _obs_weak_output_addref;

  void obs_weak_output_release(
    ffi.Pointer<obs_weak_output> weak,
  ) {
    _obs_weak_output_release ??= _dylib.lookupFunction<
        _c_obs_weak_output_release,
        _dart_obs_weak_output_release>('obs_weak_output_release');
    return _obs_weak_output_release(
      weak,
    );
  }

  _dart_obs_weak_output_release _obs_weak_output_release;

  ffi.Pointer<obs_output> obs_output_get_ref(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_ref ??=
        _dylib.lookupFunction<_c_obs_output_get_ref, _dart_obs_output_get_ref>(
            'obs_output_get_ref');
    return _obs_output_get_ref(
      output,
    );
  }

  _dart_obs_output_get_ref _obs_output_get_ref;

  ffi.Pointer<obs_weak_output> obs_output_get_weak_output(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_weak_output ??= _dylib.lookupFunction<
        _c_obs_output_get_weak_output,
        _dart_obs_output_get_weak_output>('obs_output_get_weak_output');
    return _obs_output_get_weak_output(
      output,
    );
  }

  _dart_obs_output_get_weak_output _obs_output_get_weak_output;

  ffi.Pointer<obs_output> obs_weak_output_get_output(
    ffi.Pointer<obs_weak_output> weak,
  ) {
    _obs_weak_output_get_output ??= _dylib.lookupFunction<
        _c_obs_weak_output_get_output,
        _dart_obs_weak_output_get_output>('obs_weak_output_get_output');
    return _obs_weak_output_get_output(
      weak,
    );
  }

  _dart_obs_weak_output_get_output _obs_weak_output_get_output;

  int obs_weak_output_references_output(
    ffi.Pointer<obs_weak_output> weak,
    ffi.Pointer<obs_output> output,
  ) {
    _obs_weak_output_references_output ??= _dylib.lookupFunction<
            _c_obs_weak_output_references_output,
            _dart_obs_weak_output_references_output>(
        'obs_weak_output_references_output');
    return _obs_weak_output_references_output(
      weak,
      output,
    );
  }

  _dart_obs_weak_output_references_output _obs_weak_output_references_output;

  ffi.Pointer<ffi.Int8> obs_output_get_name(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_name ??= _dylib.lookupFunction<_c_obs_output_get_name,
        _dart_obs_output_get_name>('obs_output_get_name');
    return _obs_output_get_name(
      output,
    );
  }

  _dart_obs_output_get_name _obs_output_get_name;

  /// Starts the output.
  int obs_output_start(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_start ??=
        _dylib.lookupFunction<_c_obs_output_start, _dart_obs_output_start>(
            'obs_output_start');
    return _obs_output_start(
      output,
    );
  }

  _dart_obs_output_start _obs_output_start;

  /// Stops the output.
  void obs_output_stop(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_stop ??=
        _dylib.lookupFunction<_c_obs_output_stop, _dart_obs_output_stop>(
            'obs_output_stop');
    return _obs_output_stop(
      output,
    );
  }

  _dart_obs_output_stop _obs_output_stop;

  /// Sets the current output delay, in seconds (if the output supports delay).
  ///
  /// If delay is currently active, it will set the delay value, but will not
  /// affect the current delay, it will only affect the next time the output is
  /// activated.
  void obs_output_set_delay(
    ffi.Pointer<obs_output> output,
    int delay_sec,
    int flags,
  ) {
    _obs_output_set_delay ??= _dylib.lookupFunction<_c_obs_output_set_delay,
        _dart_obs_output_set_delay>('obs_output_set_delay');
    return _obs_output_set_delay(
      output,
      delay_sec,
      flags,
    );
  }

  _dart_obs_output_set_delay _obs_output_set_delay;

  /// Gets the currently set delay value, in seconds.
  int obs_output_get_delay(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_delay ??= _dylib.lookupFunction<_c_obs_output_get_delay,
        _dart_obs_output_get_delay>('obs_output_get_delay');
    return _obs_output_get_delay(
      output,
    );
  }

  _dart_obs_output_get_delay _obs_output_get_delay;

  /// If delay is active, gets the currently active delay value, in seconds.
  int obs_output_get_active_delay(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_active_delay ??= _dylib.lookupFunction<
        _c_obs_output_get_active_delay,
        _dart_obs_output_get_active_delay>('obs_output_get_active_delay');
    return _obs_output_get_active_delay(
      output,
    );
  }

  _dart_obs_output_get_active_delay _obs_output_get_active_delay;

  /// Forces the output to stop.  Usually only used with delay.
  void obs_output_force_stop(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_force_stop ??= _dylib.lookupFunction<_c_obs_output_force_stop,
        _dart_obs_output_force_stop>('obs_output_force_stop');
    return _obs_output_force_stop(
      output,
    );
  }

  _dart_obs_output_force_stop _obs_output_force_stop;

  /// Returns whether the output is active
  int obs_output_active(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_active ??=
        _dylib.lookupFunction<_c_obs_output_active, _dart_obs_output_active>(
            'obs_output_active');
    return _obs_output_active(
      output,
    );
  }

  _dart_obs_output_active _obs_output_active;

  /// Returns output capability flags
  int obs_output_get_flags(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_flags ??= _dylib.lookupFunction<_c_obs_output_get_flags,
        _dart_obs_output_get_flags>('obs_output_get_flags');
    return _obs_output_get_flags(
      output,
    );
  }

  _dart_obs_output_get_flags _obs_output_get_flags;

  /// Returns output capability flags
  int obs_get_output_flags(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_output_flags ??= _dylib.lookupFunction<_c_obs_get_output_flags,
        _dart_obs_get_output_flags>('obs_get_output_flags');
    return _obs_get_output_flags(
      id,
    );
  }

  _dart_obs_get_output_flags _obs_get_output_flags;

  /// Gets the default settings for an output type
  ffi.Pointer<obs_data> obs_output_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_output_defaults ??= _dylib.lookupFunction<_c_obs_output_defaults,
        _dart_obs_output_defaults>('obs_output_defaults');
    return _obs_output_defaults(
      id,
    );
  }

  _dart_obs_output_defaults _obs_output_defaults;

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties> obs_get_output_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_output_properties ??= _dylib.lookupFunction<
        _c_obs_get_output_properties,
        _dart_obs_get_output_properties>('obs_get_output_properties');
    return _obs_get_output_properties(
      id,
    );
  }

  _dart_obs_get_output_properties _obs_get_output_properties;

  /// Returns the property list of an existing output, if any.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties> obs_output_properties(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_properties ??= _dylib.lookupFunction<_c_obs_output_properties,
        _dart_obs_output_properties>('obs_output_properties');
    return _obs_output_properties(
      output,
    );
  }

  _dart_obs_output_properties _obs_output_properties;

  /// Updates the settings for this output context
  void obs_output_update(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_output_update ??=
        _dylib.lookupFunction<_c_obs_output_update, _dart_obs_output_update>(
            'obs_output_update');
    return _obs_output_update(
      output,
      settings,
    );
  }

  _dart_obs_output_update _obs_output_update;

  /// Specifies whether the output can be paused
  int obs_output_can_pause(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_can_pause ??= _dylib.lookupFunction<_c_obs_output_can_pause,
        _dart_obs_output_can_pause>('obs_output_can_pause');
    return _obs_output_can_pause(
      output,
    );
  }

  _dart_obs_output_can_pause _obs_output_can_pause;

  /// Pauses the output (if the functionality is allowed by the output
  int obs_output_pause(
    ffi.Pointer<obs_output> output,
    int pause,
  ) {
    _obs_output_pause ??=
        _dylib.lookupFunction<_c_obs_output_pause, _dart_obs_output_pause>(
            'obs_output_pause');
    return _obs_output_pause(
      output,
      pause,
    );
  }

  _dart_obs_output_pause _obs_output_pause;

  /// Returns whether output is paused
  int obs_output_paused(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_paused ??=
        _dylib.lookupFunction<_c_obs_output_paused, _dart_obs_output_paused>(
            'obs_output_paused');
    return _obs_output_paused(
      output,
    );
  }

  _dart_obs_output_paused _obs_output_paused;

  ffi.Pointer<obs_data> obs_output_get_settings(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_settings ??= _dylib.lookupFunction<
        _c_obs_output_get_settings,
        _dart_obs_output_get_settings>('obs_output_get_settings');
    return _obs_output_get_settings(
      output,
    );
  }

  _dart_obs_output_get_settings _obs_output_get_settings;

  /// Returns the signal handler for an output
  ffi.Pointer<signal_handler> obs_output_get_signal_handler(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_signal_handler ??= _dylib.lookupFunction<
        _c_obs_output_get_signal_handler,
        _dart_obs_output_get_signal_handler>('obs_output_get_signal_handler');
    return _obs_output_get_signal_handler(
      output,
    );
  }

  _dart_obs_output_get_signal_handler _obs_output_get_signal_handler;

  /// Returns the procedure handler for an output
  ffi.Pointer<proc_handler> obs_output_get_proc_handler(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_proc_handler ??= _dylib.lookupFunction<
        _c_obs_output_get_proc_handler,
        _dart_obs_output_get_proc_handler>('obs_output_get_proc_handler');
    return _obs_output_get_proc_handler(
      output,
    );
  }

  _dart_obs_output_get_proc_handler _obs_output_get_proc_handler;

  /// Sets the current audio/video media contexts associated with this output,
  /// required for non-encoded outputs.  Can be null.
  void obs_output_set_media(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<video_output> video,
    ffi.Pointer<audio_output> audio,
  ) {
    _obs_output_set_media ??= _dylib.lookupFunction<_c_obs_output_set_media,
        _dart_obs_output_set_media>('obs_output_set_media');
    return _obs_output_set_media(
      output,
      video,
      audio,
    );
  }

  _dart_obs_output_set_media _obs_output_set_media;

  /// Returns the video media context associated with this output
  ffi.Pointer<video_output> obs_output_video(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_video ??=
        _dylib.lookupFunction<_c_obs_output_video, _dart_obs_output_video>(
            'obs_output_video');
    return _obs_output_video(
      output,
    );
  }

  _dart_obs_output_video _obs_output_video;

  /// Returns the audio media context associated with this output
  ffi.Pointer<audio_output> obs_output_audio(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_audio ??=
        _dylib.lookupFunction<_c_obs_output_audio, _dart_obs_output_audio>(
            'obs_output_audio');
    return _obs_output_audio(
      output,
    );
  }

  _dart_obs_output_audio _obs_output_audio;

  /// Sets the current audio mixer for non-encoded outputs
  void obs_output_set_mixer(
    ffi.Pointer<obs_output> output,
    int mixer_idx,
  ) {
    _obs_output_set_mixer ??= _dylib.lookupFunction<_c_obs_output_set_mixer,
        _dart_obs_output_set_mixer>('obs_output_set_mixer');
    return _obs_output_set_mixer(
      output,
      mixer_idx,
    );
  }

  _dart_obs_output_set_mixer _obs_output_set_mixer;

  /// Gets the current audio mixer for non-encoded outputs
  int obs_output_get_mixer(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_mixer ??= _dylib.lookupFunction<_c_obs_output_get_mixer,
        _dart_obs_output_get_mixer>('obs_output_get_mixer');
    return _obs_output_get_mixer(
      output,
    );
  }

  _dart_obs_output_get_mixer _obs_output_get_mixer;

  /// Sets the current audio mixes (mask) for a non-encoded multi-track output
  void obs_output_set_mixers(
    ffi.Pointer<obs_output> output,
    int mixers,
  ) {
    _obs_output_set_mixers ??= _dylib.lookupFunction<_c_obs_output_set_mixers,
        _dart_obs_output_set_mixers>('obs_output_set_mixers');
    return _obs_output_set_mixers(
      output,
      mixers,
    );
  }

  _dart_obs_output_set_mixers _obs_output_set_mixers;

  /// Gets the current audio mixes (mask) for a non-encoded multi-track output
  int obs_output_get_mixers(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_mixers ??= _dylib.lookupFunction<_c_obs_output_get_mixers,
        _dart_obs_output_get_mixers>('obs_output_get_mixers');
    return _obs_output_get_mixers(
      output,
    );
  }

  _dart_obs_output_get_mixers _obs_output_get_mixers;

  /// Sets the current video encoder associated with this output,
  /// required for encoded outputs
  void obs_output_set_video_encoder(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_output_set_video_encoder ??= _dylib.lookupFunction<
        _c_obs_output_set_video_encoder,
        _dart_obs_output_set_video_encoder>('obs_output_set_video_encoder');
    return _obs_output_set_video_encoder(
      output,
      encoder,
    );
  }

  _dart_obs_output_set_video_encoder _obs_output_set_video_encoder;

  /// Sets the current audio encoder associated with this output,
  /// required for encoded outputs.
  ///
  /// The idx parameter specifies the audio encoder index to set the encoder to.
  /// Only used with outputs that have multiple audio outputs (RTMP typically),
  /// otherwise the parameter is ignored.
  void obs_output_set_audio_encoder(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<obs_encoder> encoder,
    int idx,
  ) {
    _obs_output_set_audio_encoder ??= _dylib.lookupFunction<
        _c_obs_output_set_audio_encoder,
        _dart_obs_output_set_audio_encoder>('obs_output_set_audio_encoder');
    return _obs_output_set_audio_encoder(
      output,
      encoder,
      idx,
    );
  }

  _dart_obs_output_set_audio_encoder _obs_output_set_audio_encoder;

  /// Returns the current video encoder associated with this output
  ffi.Pointer<obs_encoder> obs_output_get_video_encoder(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_video_encoder ??= _dylib.lookupFunction<
        _c_obs_output_get_video_encoder,
        _dart_obs_output_get_video_encoder>('obs_output_get_video_encoder');
    return _obs_output_get_video_encoder(
      output,
    );
  }

  _dart_obs_output_get_video_encoder _obs_output_get_video_encoder;

  /// Returns the current audio encoder associated with this output
  ///
  /// The idx parameter specifies the audio encoder index.  Only used with
  /// outputs that have multiple audio outputs, otherwise the parameter is
  /// ignored.
  ffi.Pointer<obs_encoder> obs_output_get_audio_encoder(
    ffi.Pointer<obs_output> output,
    int idx,
  ) {
    _obs_output_get_audio_encoder ??= _dylib.lookupFunction<
        _c_obs_output_get_audio_encoder,
        _dart_obs_output_get_audio_encoder>('obs_output_get_audio_encoder');
    return _obs_output_get_audio_encoder(
      output,
      idx,
    );
  }

  _dart_obs_output_get_audio_encoder _obs_output_get_audio_encoder;

  /// Sets the current service associated with this output.
  void obs_output_set_service(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<obs_service> service,
  ) {
    _obs_output_set_service ??= _dylib.lookupFunction<_c_obs_output_set_service,
        _dart_obs_output_set_service>('obs_output_set_service');
    return _obs_output_set_service(
      output,
      service,
    );
  }

  _dart_obs_output_set_service _obs_output_set_service;

  /// Gets the current service associated with this output.
  ffi.Pointer<obs_service> obs_output_get_service(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_service ??= _dylib.lookupFunction<_c_obs_output_get_service,
        _dart_obs_output_get_service>('obs_output_get_service');
    return _obs_output_get_service(
      output,
    );
  }

  _dart_obs_output_get_service _obs_output_get_service;

  /// Sets the reconnect settings.  Set retry_count to 0 to disable reconnecting.
  void obs_output_set_reconnect_settings(
    ffi.Pointer<obs_output> output,
    int retry_count,
    int retry_sec,
  ) {
    _obs_output_set_reconnect_settings ??= _dylib.lookupFunction<
            _c_obs_output_set_reconnect_settings,
            _dart_obs_output_set_reconnect_settings>(
        'obs_output_set_reconnect_settings');
    return _obs_output_set_reconnect_settings(
      output,
      retry_count,
      retry_sec,
    );
  }

  _dart_obs_output_set_reconnect_settings _obs_output_set_reconnect_settings;

  int obs_output_get_total_bytes(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_total_bytes ??= _dylib.lookupFunction<
        _c_obs_output_get_total_bytes,
        _dart_obs_output_get_total_bytes>('obs_output_get_total_bytes');
    return _obs_output_get_total_bytes(
      output,
    );
  }

  _dart_obs_output_get_total_bytes _obs_output_get_total_bytes;

  int obs_output_get_frames_dropped(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_frames_dropped ??= _dylib.lookupFunction<
        _c_obs_output_get_frames_dropped,
        _dart_obs_output_get_frames_dropped>('obs_output_get_frames_dropped');
    return _obs_output_get_frames_dropped(
      output,
    );
  }

  _dart_obs_output_get_frames_dropped _obs_output_get_frames_dropped;

  int obs_output_get_total_frames(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_total_frames ??= _dylib.lookupFunction<
        _c_obs_output_get_total_frames,
        _dart_obs_output_get_total_frames>('obs_output_get_total_frames');
    return _obs_output_get_total_frames(
      output,
    );
  }

  _dart_obs_output_get_total_frames _obs_output_get_total_frames;

  /// Sets the preferred scaled resolution for this output.  Set width and height
  /// to 0 to disable scaling.
  ///
  /// If this output uses an encoder, it will call obs_encoder_set_scaled_size on
  /// the encoder before the stream is started.  If the encoder is already active,
  /// then this function will trigger a warning and do nothing.
  void obs_output_set_preferred_size(
    ffi.Pointer<obs_output> output,
    int width,
    int height,
  ) {
    _obs_output_set_preferred_size ??= _dylib.lookupFunction<
        _c_obs_output_set_preferred_size,
        _dart_obs_output_set_preferred_size>('obs_output_set_preferred_size');
    return _obs_output_set_preferred_size(
      output,
      width,
      height,
    );
  }

  _dart_obs_output_set_preferred_size _obs_output_set_preferred_size;

  /// For video outputs, returns the width of the encoded image
  int obs_output_get_width(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_width ??= _dylib.lookupFunction<_c_obs_output_get_width,
        _dart_obs_output_get_width>('obs_output_get_width');
    return _obs_output_get_width(
      output,
    );
  }

  _dart_obs_output_get_width _obs_output_get_width;

  /// For video outputs, returns the height of the encoded image
  int obs_output_get_height(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_height ??= _dylib.lookupFunction<_c_obs_output_get_height,
        _dart_obs_output_get_height>('obs_output_get_height');
    return _obs_output_get_height(
      output,
    );
  }

  _dart_obs_output_get_height _obs_output_get_height;

  ffi.Pointer<ffi.Int8> obs_output_get_id(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_id ??=
        _dylib.lookupFunction<_c_obs_output_get_id, _dart_obs_output_get_id>(
            'obs_output_get_id');
    return _obs_output_get_id(
      output,
    );
  }

  _dart_obs_output_get_id _obs_output_get_id;

  double obs_output_get_congestion(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_congestion ??= _dylib.lookupFunction<
        _c_obs_output_get_congestion,
        _dart_obs_output_get_congestion>('obs_output_get_congestion');
    return _obs_output_get_congestion(
      output,
    );
  }

  _dart_obs_output_get_congestion _obs_output_get_congestion;

  int obs_output_get_connect_time_ms(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_connect_time_ms ??= _dylib.lookupFunction<
        _c_obs_output_get_connect_time_ms,
        _dart_obs_output_get_connect_time_ms>('obs_output_get_connect_time_ms');
    return _obs_output_get_connect_time_ms(
      output,
    );
  }

  _dart_obs_output_get_connect_time_ms _obs_output_get_connect_time_ms;

  int obs_output_reconnecting(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_reconnecting ??= _dylib.lookupFunction<
        _c_obs_output_reconnecting,
        _dart_obs_output_reconnecting>('obs_output_reconnecting');
    return _obs_output_reconnecting(
      output,
    );
  }

  _dart_obs_output_reconnecting _obs_output_reconnecting;

  /// Pass a string of the last output error, for UI use
  void obs_output_set_last_error(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<ffi.Int8> message,
  ) {
    _obs_output_set_last_error ??= _dylib.lookupFunction<
        _c_obs_output_set_last_error,
        _dart_obs_output_set_last_error>('obs_output_set_last_error');
    return _obs_output_set_last_error(
      output,
      message,
    );
  }

  _dart_obs_output_set_last_error _obs_output_set_last_error;

  ffi.Pointer<ffi.Int8> obs_output_get_last_error(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_last_error ??= _dylib.lookupFunction<
        _c_obs_output_get_last_error,
        _dart_obs_output_get_last_error>('obs_output_get_last_error');
    return _obs_output_get_last_error(
      output,
    );
  }

  _dart_obs_output_get_last_error _obs_output_get_last_error;

  ffi.Pointer<ffi.Int8> obs_output_get_supported_video_codecs(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_supported_video_codecs ??= _dylib.lookupFunction<
            _c_obs_output_get_supported_video_codecs,
            _dart_obs_output_get_supported_video_codecs>(
        'obs_output_get_supported_video_codecs');
    return _obs_output_get_supported_video_codecs(
      output,
    );
  }

  _dart_obs_output_get_supported_video_codecs
      _obs_output_get_supported_video_codecs;

  ffi.Pointer<ffi.Int8> obs_output_get_supported_audio_codecs(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_supported_audio_codecs ??= _dylib.lookupFunction<
            _c_obs_output_get_supported_audio_codecs,
            _dart_obs_output_get_supported_audio_codecs>(
        'obs_output_get_supported_audio_codecs');
    return _obs_output_get_supported_audio_codecs(
      output,
    );
  }

  _dart_obs_output_get_supported_audio_codecs
      _obs_output_get_supported_audio_codecs;

  ffi.Pointer<ffi.Void> obs_output_get_type_data(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_type_data ??= _dylib.lookupFunction<
        _c_obs_output_get_type_data,
        _dart_obs_output_get_type_data>('obs_output_get_type_data');
    return _obs_output_get_type_data(
      output,
    );
  }

  _dart_obs_output_get_type_data _obs_output_get_type_data;

  /// Optionally sets the video conversion info.  Used only for raw output
  void obs_output_set_video_conversion(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<video_scale_info> conversion,
  ) {
    _obs_output_set_video_conversion ??= _dylib.lookupFunction<
            _c_obs_output_set_video_conversion,
            _dart_obs_output_set_video_conversion>(
        'obs_output_set_video_conversion');
    return _obs_output_set_video_conversion(
      output,
      conversion,
    );
  }

  _dart_obs_output_set_video_conversion _obs_output_set_video_conversion;

  /// Optionally sets the audio conversion info.  Used only for raw output
  void obs_output_set_audio_conversion(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<audio_convert_info> conversion,
  ) {
    _obs_output_set_audio_conversion ??= _dylib.lookupFunction<
            _c_obs_output_set_audio_conversion,
            _dart_obs_output_set_audio_conversion>(
        'obs_output_set_audio_conversion');
    return _obs_output_set_audio_conversion(
      output,
      conversion,
    );
  }

  _dart_obs_output_set_audio_conversion _obs_output_set_audio_conversion;

  /// Returns whether data capture can begin with the specified flags
  int obs_output_can_begin_data_capture(
    ffi.Pointer<obs_output> output,
    int flags,
  ) {
    _obs_output_can_begin_data_capture ??= _dylib.lookupFunction<
            _c_obs_output_can_begin_data_capture,
            _dart_obs_output_can_begin_data_capture>(
        'obs_output_can_begin_data_capture');
    return _obs_output_can_begin_data_capture(
      output,
      flags,
    );
  }

  _dart_obs_output_can_begin_data_capture _obs_output_can_begin_data_capture;

  /// Initializes encoders (if any)
  int obs_output_initialize_encoders(
    ffi.Pointer<obs_output> output,
    int flags,
  ) {
    _obs_output_initialize_encoders ??= _dylib.lookupFunction<
        _c_obs_output_initialize_encoders,
        _dart_obs_output_initialize_encoders>('obs_output_initialize_encoders');
    return _obs_output_initialize_encoders(
      output,
      flags,
    );
  }

  _dart_obs_output_initialize_encoders _obs_output_initialize_encoders;

  /// Begins data capture from media/encoders.
  ///
  /// @param  output  Output context
  /// @param  flags   Set this to 0 to use default output flags set in the
  /// obs_output_info structure, otherwise set to a either
  /// OBS_OUTPUT_VIDEO or OBS_OUTPUT_AUDIO to specify whether to
  /// connect audio or video.  This is useful for things like
  /// ffmpeg which may or may not always want to use both audio
  /// and video.
  /// @return         true if successful, false otherwise.
  int obs_output_begin_data_capture(
    ffi.Pointer<obs_output> output,
    int flags,
  ) {
    _obs_output_begin_data_capture ??= _dylib.lookupFunction<
        _c_obs_output_begin_data_capture,
        _dart_obs_output_begin_data_capture>('obs_output_begin_data_capture');
    return _obs_output_begin_data_capture(
      output,
      flags,
    );
  }

  _dart_obs_output_begin_data_capture _obs_output_begin_data_capture;

  /// Ends data capture from media/encoders
  void obs_output_end_data_capture(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_end_data_capture ??= _dylib.lookupFunction<
        _c_obs_output_end_data_capture,
        _dart_obs_output_end_data_capture>('obs_output_end_data_capture');
    return _obs_output_end_data_capture(
      output,
    );
  }

  _dart_obs_output_end_data_capture _obs_output_end_data_capture;

  /// Signals that the output has stopped itself.
  ///
  /// @param  output  Output context
  /// @param  code    Error code (or OBS_OUTPUT_SUCCESS if not an error)
  void obs_output_signal_stop(
    ffi.Pointer<obs_output> output,
    int code,
  ) {
    _obs_output_signal_stop ??= _dylib.lookupFunction<_c_obs_output_signal_stop,
        _dart_obs_output_signal_stop>('obs_output_signal_stop');
    return _obs_output_signal_stop(
      output,
      code,
    );
  }

  _dart_obs_output_signal_stop _obs_output_signal_stop;

  int obs_output_get_pause_offset(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_pause_offset ??= _dylib.lookupFunction<
        _c_obs_output_get_pause_offset,
        _dart_obs_output_get_pause_offset>('obs_output_get_pause_offset');
    return _obs_output_get_pause_offset(
      output,
    );
  }

  _dart_obs_output_get_pause_offset _obs_output_get_pause_offset;

  ffi.Pointer<ffi.Int8> obs_encoder_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_encoder_get_display_name ??= _dylib.lookupFunction<
        _c_obs_encoder_get_display_name,
        _dart_obs_encoder_get_display_name>('obs_encoder_get_display_name');
    return _obs_encoder_get_display_name(
      id,
    );
  }

  _dart_obs_encoder_get_display_name _obs_encoder_get_display_name;

  /// Creates a video encoder context
  ///
  /// @param  id        Video encoder ID
  /// @param  name      Name to assign to this context
  /// @param  settings  Settings
  /// @return           The video encoder context, or NULL if failed or not found.
  ffi.Pointer<obs_encoder> obs_video_encoder_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> settings,
    ffi.Pointer<obs_data> hotkey_data,
  ) {
    _obs_video_encoder_create ??= _dylib.lookupFunction<
        _c_obs_video_encoder_create,
        _dart_obs_video_encoder_create>('obs_video_encoder_create');
    return _obs_video_encoder_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  _dart_obs_video_encoder_create _obs_video_encoder_create;

  /// Creates an audio encoder context
  ///
  /// @param  id        Audio Encoder ID
  /// @param  name      Name to assign to this context
  /// @param  settings  Settings
  /// @param  mixer_idx Index of the mixer to use for this audio encoder
  /// @return           The video encoder context, or NULL if failed or not found.
  ffi.Pointer<obs_encoder> obs_audio_encoder_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> settings,
    int mixer_idx,
    ffi.Pointer<obs_data> hotkey_data,
  ) {
    _obs_audio_encoder_create ??= _dylib.lookupFunction<
        _c_obs_audio_encoder_create,
        _dart_obs_audio_encoder_create>('obs_audio_encoder_create');
    return _obs_audio_encoder_create(
      id,
      name,
      settings,
      mixer_idx,
      hotkey_data,
    );
  }

  _dart_obs_audio_encoder_create _obs_audio_encoder_create;

  /// Adds/releases a reference to an encoder.  When the last reference is
  /// released, the encoder is destroyed.
  void obs_encoder_addref(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_addref ??=
        _dylib.lookupFunction<_c_obs_encoder_addref, _dart_obs_encoder_addref>(
            'obs_encoder_addref');
    return _obs_encoder_addref(
      encoder,
    );
  }

  _dart_obs_encoder_addref _obs_encoder_addref;

  void obs_encoder_release(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_release ??= _dylib.lookupFunction<_c_obs_encoder_release,
        _dart_obs_encoder_release>('obs_encoder_release');
    return _obs_encoder_release(
      encoder,
    );
  }

  _dart_obs_encoder_release _obs_encoder_release;

  void obs_weak_encoder_addref(
    ffi.Pointer<obs_weak_encoder> weak,
  ) {
    _obs_weak_encoder_addref ??= _dylib.lookupFunction<
        _c_obs_weak_encoder_addref,
        _dart_obs_weak_encoder_addref>('obs_weak_encoder_addref');
    return _obs_weak_encoder_addref(
      weak,
    );
  }

  _dart_obs_weak_encoder_addref _obs_weak_encoder_addref;

  void obs_weak_encoder_release(
    ffi.Pointer<obs_weak_encoder> weak,
  ) {
    _obs_weak_encoder_release ??= _dylib.lookupFunction<
        _c_obs_weak_encoder_release,
        _dart_obs_weak_encoder_release>('obs_weak_encoder_release');
    return _obs_weak_encoder_release(
      weak,
    );
  }

  _dart_obs_weak_encoder_release _obs_weak_encoder_release;

  ffi.Pointer<obs_encoder> obs_encoder_get_ref(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_ref ??= _dylib.lookupFunction<_c_obs_encoder_get_ref,
        _dart_obs_encoder_get_ref>('obs_encoder_get_ref');
    return _obs_encoder_get_ref(
      encoder,
    );
  }

  _dart_obs_encoder_get_ref _obs_encoder_get_ref;

  ffi.Pointer<obs_weak_encoder> obs_encoder_get_weak_encoder(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_weak_encoder ??= _dylib.lookupFunction<
        _c_obs_encoder_get_weak_encoder,
        _dart_obs_encoder_get_weak_encoder>('obs_encoder_get_weak_encoder');
    return _obs_encoder_get_weak_encoder(
      encoder,
    );
  }

  _dart_obs_encoder_get_weak_encoder _obs_encoder_get_weak_encoder;

  ffi.Pointer<obs_encoder> obs_weak_encoder_get_encoder(
    ffi.Pointer<obs_weak_encoder> weak,
  ) {
    _obs_weak_encoder_get_encoder ??= _dylib.lookupFunction<
        _c_obs_weak_encoder_get_encoder,
        _dart_obs_weak_encoder_get_encoder>('obs_weak_encoder_get_encoder');
    return _obs_weak_encoder_get_encoder(
      weak,
    );
  }

  _dart_obs_weak_encoder_get_encoder _obs_weak_encoder_get_encoder;

  int obs_weak_encoder_references_encoder(
    ffi.Pointer<obs_weak_encoder> weak,
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_weak_encoder_references_encoder ??= _dylib.lookupFunction<
            _c_obs_weak_encoder_references_encoder,
            _dart_obs_weak_encoder_references_encoder>(
        'obs_weak_encoder_references_encoder');
    return _obs_weak_encoder_references_encoder(
      weak,
      encoder,
    );
  }

  _dart_obs_weak_encoder_references_encoder
      _obs_weak_encoder_references_encoder;

  void obs_encoder_set_name(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_encoder_set_name ??= _dylib.lookupFunction<_c_obs_encoder_set_name,
        _dart_obs_encoder_set_name>('obs_encoder_set_name');
    return _obs_encoder_set_name(
      encoder,
      name,
    );
  }

  _dart_obs_encoder_set_name _obs_encoder_set_name;

  ffi.Pointer<ffi.Int8> obs_encoder_get_name(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_name ??= _dylib.lookupFunction<_c_obs_encoder_get_name,
        _dart_obs_encoder_get_name>('obs_encoder_get_name');
    return _obs_encoder_get_name(
      encoder,
    );
  }

  _dart_obs_encoder_get_name _obs_encoder_get_name;

  /// Returns the codec of an encoder by the id
  ffi.Pointer<ffi.Int8> obs_get_encoder_codec(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_encoder_codec ??= _dylib.lookupFunction<_c_obs_get_encoder_codec,
        _dart_obs_get_encoder_codec>('obs_get_encoder_codec');
    return _obs_get_encoder_codec(
      id,
    );
  }

  _dart_obs_get_encoder_codec _obs_get_encoder_codec;

  /// Returns the type of an encoder by the id
  int obs_get_encoder_type(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_encoder_type ??= _dylib.lookupFunction<_c_obs_get_encoder_type,
        _dart_obs_get_encoder_type>('obs_get_encoder_type');
    return _obs_get_encoder_type(
      id,
    );
  }

  _dart_obs_get_encoder_type _obs_get_encoder_type;

  /// Returns the codec of the encoder
  ffi.Pointer<ffi.Int8> obs_encoder_get_codec(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_codec ??= _dylib.lookupFunction<_c_obs_encoder_get_codec,
        _dart_obs_encoder_get_codec>('obs_encoder_get_codec');
    return _obs_encoder_get_codec(
      encoder,
    );
  }

  _dart_obs_encoder_get_codec _obs_encoder_get_codec;

  /// Returns the type of an encoder
  int obs_encoder_get_type(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_type ??= _dylib.lookupFunction<_c_obs_encoder_get_type,
        _dart_obs_encoder_get_type>('obs_encoder_get_type');
    return _obs_encoder_get_type(
      encoder,
    );
  }

  _dart_obs_encoder_get_type _obs_encoder_get_type;

  /// Sets the scaled resolution for a video encoder.  Set width and height to 0
  /// to disable scaling.  If the encoder is active, this function will trigger
  /// a warning, and do nothing.
  void obs_encoder_set_scaled_size(
    ffi.Pointer<obs_encoder> encoder,
    int width,
    int height,
  ) {
    _obs_encoder_set_scaled_size ??= _dylib.lookupFunction<
        _c_obs_encoder_set_scaled_size,
        _dart_obs_encoder_set_scaled_size>('obs_encoder_set_scaled_size');
    return _obs_encoder_set_scaled_size(
      encoder,
      width,
      height,
    );
  }

  _dart_obs_encoder_set_scaled_size _obs_encoder_set_scaled_size;

  /// For video encoders, returns true if pre-encode scaling is enabled
  int obs_encoder_scaling_enabled(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_scaling_enabled ??= _dylib.lookupFunction<
        _c_obs_encoder_scaling_enabled,
        _dart_obs_encoder_scaling_enabled>('obs_encoder_scaling_enabled');
    return _obs_encoder_scaling_enabled(
      encoder,
    );
  }

  _dart_obs_encoder_scaling_enabled _obs_encoder_scaling_enabled;

  /// For video encoders, returns the width of the encoded image
  int obs_encoder_get_width(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_width ??= _dylib.lookupFunction<_c_obs_encoder_get_width,
        _dart_obs_encoder_get_width>('obs_encoder_get_width');
    return _obs_encoder_get_width(
      encoder,
    );
  }

  _dart_obs_encoder_get_width _obs_encoder_get_width;

  /// For video encoders, returns the height of the encoded image
  int obs_encoder_get_height(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_height ??= _dylib.lookupFunction<_c_obs_encoder_get_height,
        _dart_obs_encoder_get_height>('obs_encoder_get_height');
    return _obs_encoder_get_height(
      encoder,
    );
  }

  _dart_obs_encoder_get_height _obs_encoder_get_height;

  /// For audio encoders, returns the sample rate of the audio
  int obs_encoder_get_sample_rate(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_sample_rate ??= _dylib.lookupFunction<
        _c_obs_encoder_get_sample_rate,
        _dart_obs_encoder_get_sample_rate>('obs_encoder_get_sample_rate');
    return _obs_encoder_get_sample_rate(
      encoder,
    );
  }

  _dart_obs_encoder_get_sample_rate _obs_encoder_get_sample_rate;

  /// Sets the preferred video format for a video encoder.  If the encoder can use
  /// the format specified, it will force a conversion to that format if the
  /// obs output format does not match the preferred format.
  ///
  /// If the format is set to VIDEO_FORMAT_NONE, will revert to the default
  /// functionality of converting only when absolutely necessary.
  void obs_encoder_set_preferred_video_format(
    ffi.Pointer<obs_encoder> encoder,
    int format,
  ) {
    _obs_encoder_set_preferred_video_format ??= _dylib.lookupFunction<
            _c_obs_encoder_set_preferred_video_format,
            _dart_obs_encoder_set_preferred_video_format>(
        'obs_encoder_set_preferred_video_format');
    return _obs_encoder_set_preferred_video_format(
      encoder,
      format,
    );
  }

  _dart_obs_encoder_set_preferred_video_format
      _obs_encoder_set_preferred_video_format;

  int obs_encoder_get_preferred_video_format(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_preferred_video_format ??= _dylib.lookupFunction<
            _c_obs_encoder_get_preferred_video_format,
            _dart_obs_encoder_get_preferred_video_format>(
        'obs_encoder_get_preferred_video_format');
    return _obs_encoder_get_preferred_video_format(
      encoder,
    );
  }

  _dart_obs_encoder_get_preferred_video_format
      _obs_encoder_get_preferred_video_format;

  /// Gets the default settings for an encoder type
  ffi.Pointer<obs_data> obs_encoder_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_encoder_defaults ??= _dylib.lookupFunction<_c_obs_encoder_defaults,
        _dart_obs_encoder_defaults>('obs_encoder_defaults');
    return _obs_encoder_defaults(
      id,
    );
  }

  _dart_obs_encoder_defaults _obs_encoder_defaults;

  ffi.Pointer<obs_data> obs_encoder_get_defaults(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_defaults ??= _dylib.lookupFunction<
        _c_obs_encoder_get_defaults,
        _dart_obs_encoder_get_defaults>('obs_encoder_get_defaults');
    return _obs_encoder_get_defaults(
      encoder,
    );
  }

  _dart_obs_encoder_get_defaults _obs_encoder_get_defaults;

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties> obs_get_encoder_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_encoder_properties ??= _dylib.lookupFunction<
        _c_obs_get_encoder_properties,
        _dart_obs_get_encoder_properties>('obs_get_encoder_properties');
    return _obs_get_encoder_properties(
      id,
    );
  }

  _dart_obs_get_encoder_properties _obs_get_encoder_properties;

  /// Returns the property list of an existing encoder, if any.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties> obs_encoder_properties(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_properties ??= _dylib.lookupFunction<_c_obs_encoder_properties,
        _dart_obs_encoder_properties>('obs_encoder_properties');
    return _obs_encoder_properties(
      encoder,
    );
  }

  _dart_obs_encoder_properties _obs_encoder_properties;

  /// Updates the settings of the encoder context.  Usually used for changing
  /// bitrate while active
  void obs_encoder_update(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_encoder_update ??=
        _dylib.lookupFunction<_c_obs_encoder_update, _dart_obs_encoder_update>(
            'obs_encoder_update');
    return _obs_encoder_update(
      encoder,
      settings,
    );
  }

  _dart_obs_encoder_update _obs_encoder_update;

  /// Gets extra data (headers) associated with this context
  int obs_encoder_get_extra_data(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> extra_data,
    ffi.Pointer<ffi.Uint64> size,
  ) {
    _obs_encoder_get_extra_data ??= _dylib.lookupFunction<
        _c_obs_encoder_get_extra_data,
        _dart_obs_encoder_get_extra_data>('obs_encoder_get_extra_data');
    return _obs_encoder_get_extra_data(
      encoder,
      extra_data,
      size,
    );
  }

  _dart_obs_encoder_get_extra_data _obs_encoder_get_extra_data;

  /// Returns the current settings for this encoder
  ffi.Pointer<obs_data> obs_encoder_get_settings(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_settings ??= _dylib.lookupFunction<
        _c_obs_encoder_get_settings,
        _dart_obs_encoder_get_settings>('obs_encoder_get_settings');
    return _obs_encoder_get_settings(
      encoder,
    );
  }

  _dart_obs_encoder_get_settings _obs_encoder_get_settings;

  /// Sets the video output context to be used with this encoder
  void obs_encoder_set_video(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<video_output> video,
  ) {
    _obs_encoder_set_video ??= _dylib.lookupFunction<_c_obs_encoder_set_video,
        _dart_obs_encoder_set_video>('obs_encoder_set_video');
    return _obs_encoder_set_video(
      encoder,
      video,
    );
  }

  _dart_obs_encoder_set_video _obs_encoder_set_video;

  /// Sets the audio output context to be used with this encoder
  void obs_encoder_set_audio(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<audio_output> audio,
  ) {
    _obs_encoder_set_audio ??= _dylib.lookupFunction<_c_obs_encoder_set_audio,
        _dart_obs_encoder_set_audio>('obs_encoder_set_audio');
    return _obs_encoder_set_audio(
      encoder,
      audio,
    );
  }

  _dart_obs_encoder_set_audio _obs_encoder_set_audio;

  /// Returns the video output context used with this encoder, or NULL if not
  /// a video context
  ffi.Pointer<video_output> obs_encoder_video(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_video ??=
        _dylib.lookupFunction<_c_obs_encoder_video, _dart_obs_encoder_video>(
            'obs_encoder_video');
    return _obs_encoder_video(
      encoder,
    );
  }

  _dart_obs_encoder_video _obs_encoder_video;

  /// Returns the audio output context used with this encoder, or NULL if not
  /// a audio context
  ffi.Pointer<audio_output> obs_encoder_audio(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_audio ??=
        _dylib.lookupFunction<_c_obs_encoder_audio, _dart_obs_encoder_audio>(
            'obs_encoder_audio');
    return _obs_encoder_audio(
      encoder,
    );
  }

  _dart_obs_encoder_audio _obs_encoder_audio;

  /// Returns true if encoder is active, false otherwise
  int obs_encoder_active(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_active ??=
        _dylib.lookupFunction<_c_obs_encoder_active, _dart_obs_encoder_active>(
            'obs_encoder_active');
    return _obs_encoder_active(
      encoder,
    );
  }

  _dart_obs_encoder_active _obs_encoder_active;

  ffi.Pointer<ffi.Void> obs_encoder_get_type_data(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_type_data ??= _dylib.lookupFunction<
        _c_obs_encoder_get_type_data,
        _dart_obs_encoder_get_type_data>('obs_encoder_get_type_data');
    return _obs_encoder_get_type_data(
      encoder,
    );
  }

  _dart_obs_encoder_get_type_data _obs_encoder_get_type_data;

  ffi.Pointer<ffi.Int8> obs_encoder_get_id(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_id ??=
        _dylib.lookupFunction<_c_obs_encoder_get_id, _dart_obs_encoder_get_id>(
            'obs_encoder_get_id');
    return _obs_encoder_get_id(
      encoder,
    );
  }

  _dart_obs_encoder_get_id _obs_encoder_get_id;

  int obs_get_encoder_caps(
    ffi.Pointer<ffi.Int8> encoder_id,
  ) {
    _obs_get_encoder_caps ??= _dylib.lookupFunction<_c_obs_get_encoder_caps,
        _dart_obs_get_encoder_caps>('obs_get_encoder_caps');
    return _obs_get_encoder_caps(
      encoder_id,
    );
  }

  _dart_obs_get_encoder_caps _obs_get_encoder_caps;

  int obs_encoder_get_caps(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_caps ??= _dylib.lookupFunction<_c_obs_encoder_get_caps,
        _dart_obs_encoder_get_caps>('obs_encoder_get_caps');
    return _obs_encoder_get_caps(
      encoder,
    );
  }

  _dart_obs_encoder_get_caps _obs_encoder_get_caps;

  /// Duplicates an encoder packet
  void obs_duplicate_encoder_packet(
    ffi.Pointer<encoder_packet> dst,
    ffi.Pointer<encoder_packet> src,
  ) {
    _obs_duplicate_encoder_packet ??= _dylib.lookupFunction<
        _c_obs_duplicate_encoder_packet,
        _dart_obs_duplicate_encoder_packet>('obs_duplicate_encoder_packet');
    return _obs_duplicate_encoder_packet(
      dst,
      src,
    );
  }

  _dart_obs_duplicate_encoder_packet _obs_duplicate_encoder_packet;

  void obs_free_encoder_packet(
    ffi.Pointer<encoder_packet> packet,
  ) {
    _obs_free_encoder_packet ??= _dylib.lookupFunction<
        _c_obs_free_encoder_packet,
        _dart_obs_free_encoder_packet>('obs_free_encoder_packet');
    return _obs_free_encoder_packet(
      packet,
    );
  }

  _dart_obs_free_encoder_packet _obs_free_encoder_packet;

  void obs_encoder_packet_ref(
    ffi.Pointer<encoder_packet> dst,
    ffi.Pointer<encoder_packet> src,
  ) {
    _obs_encoder_packet_ref ??= _dylib.lookupFunction<_c_obs_encoder_packet_ref,
        _dart_obs_encoder_packet_ref>('obs_encoder_packet_ref');
    return _obs_encoder_packet_ref(
      dst,
      src,
    );
  }

  _dart_obs_encoder_packet_ref _obs_encoder_packet_ref;

  void obs_encoder_packet_release(
    ffi.Pointer<encoder_packet> packet,
  ) {
    _obs_encoder_packet_release ??= _dylib.lookupFunction<
        _c_obs_encoder_packet_release,
        _dart_obs_encoder_packet_release>('obs_encoder_packet_release');
    return _obs_encoder_packet_release(
      packet,
    );
  }

  _dart_obs_encoder_packet_release _obs_encoder_packet_release;

  ffi.Pointer<ffi.Void> obs_encoder_create_rerouted(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Int8> reroute_id,
  ) {
    _obs_encoder_create_rerouted ??= _dylib.lookupFunction<
        _c_obs_encoder_create_rerouted,
        _dart_obs_encoder_create_rerouted>('obs_encoder_create_rerouted');
    return _obs_encoder_create_rerouted(
      encoder,
      reroute_id,
    );
  }

  _dart_obs_encoder_create_rerouted _obs_encoder_create_rerouted;

  /// Returns whether encoder is paused
  int obs_encoder_paused(
    ffi.Pointer<obs_encoder> output,
  ) {
    _obs_encoder_paused ??=
        _dylib.lookupFunction<_c_obs_encoder_paused, _dart_obs_encoder_paused>(
            'obs_encoder_paused');
    return _obs_encoder_paused(
      output,
    );
  }

  _dart_obs_encoder_paused _obs_encoder_paused;

  ffi.Pointer<ffi.Int8> obs_encoder_get_last_error(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_last_error ??= _dylib.lookupFunction<
        _c_obs_encoder_get_last_error,
        _dart_obs_encoder_get_last_error>('obs_encoder_get_last_error');
    return _obs_encoder_get_last_error(
      encoder,
    );
  }

  _dart_obs_encoder_get_last_error _obs_encoder_get_last_error;

  void obs_encoder_set_last_error(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Int8> message,
  ) {
    _obs_encoder_set_last_error ??= _dylib.lookupFunction<
        _c_obs_encoder_set_last_error,
        _dart_obs_encoder_set_last_error>('obs_encoder_set_last_error');
    return _obs_encoder_set_last_error(
      encoder,
      message,
    );
  }

  _dart_obs_encoder_set_last_error _obs_encoder_set_last_error;

  ffi.Pointer<ffi.Int8> obs_service_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_service_get_display_name ??= _dylib.lookupFunction<
        _c_obs_service_get_display_name,
        _dart_obs_service_get_display_name>('obs_service_get_display_name');
    return _obs_service_get_display_name(
      id,
    );
  }

  _dart_obs_service_get_display_name _obs_service_get_display_name;

  ffi.Pointer<obs_service> obs_service_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> settings,
    ffi.Pointer<obs_data> hotkey_data,
  ) {
    _obs_service_create ??=
        _dylib.lookupFunction<_c_obs_service_create, _dart_obs_service_create>(
            'obs_service_create');
    return _obs_service_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  _dart_obs_service_create _obs_service_create;

  ffi.Pointer<obs_service> obs_service_create_private(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_service_create_private ??= _dylib.lookupFunction<
        _c_obs_service_create_private,
        _dart_obs_service_create_private>('obs_service_create_private');
    return _obs_service_create_private(
      id,
      name,
      settings,
    );
  }

  _dart_obs_service_create_private _obs_service_create_private;

  /// Adds/releases a reference to a service.  When the last reference is
  /// released, the service is destroyed.
  void obs_service_addref(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_addref ??=
        _dylib.lookupFunction<_c_obs_service_addref, _dart_obs_service_addref>(
            'obs_service_addref');
    return _obs_service_addref(
      service,
    );
  }

  _dart_obs_service_addref _obs_service_addref;

  void obs_service_release(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_release ??= _dylib.lookupFunction<_c_obs_service_release,
        _dart_obs_service_release>('obs_service_release');
    return _obs_service_release(
      service,
    );
  }

  _dart_obs_service_release _obs_service_release;

  void obs_weak_service_addref(
    ffi.Pointer<obs_weak_service> weak,
  ) {
    _obs_weak_service_addref ??= _dylib.lookupFunction<
        _c_obs_weak_service_addref,
        _dart_obs_weak_service_addref>('obs_weak_service_addref');
    return _obs_weak_service_addref(
      weak,
    );
  }

  _dart_obs_weak_service_addref _obs_weak_service_addref;

  void obs_weak_service_release(
    ffi.Pointer<obs_weak_service> weak,
  ) {
    _obs_weak_service_release ??= _dylib.lookupFunction<
        _c_obs_weak_service_release,
        _dart_obs_weak_service_release>('obs_weak_service_release');
    return _obs_weak_service_release(
      weak,
    );
  }

  _dart_obs_weak_service_release _obs_weak_service_release;

  ffi.Pointer<obs_service> obs_service_get_ref(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_ref ??= _dylib.lookupFunction<_c_obs_service_get_ref,
        _dart_obs_service_get_ref>('obs_service_get_ref');
    return _obs_service_get_ref(
      service,
    );
  }

  _dart_obs_service_get_ref _obs_service_get_ref;

  ffi.Pointer<obs_weak_service> obs_service_get_weak_service(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_weak_service ??= _dylib.lookupFunction<
        _c_obs_service_get_weak_service,
        _dart_obs_service_get_weak_service>('obs_service_get_weak_service');
    return _obs_service_get_weak_service(
      service,
    );
  }

  _dart_obs_service_get_weak_service _obs_service_get_weak_service;

  ffi.Pointer<obs_service> obs_weak_service_get_service(
    ffi.Pointer<obs_weak_service> weak,
  ) {
    _obs_weak_service_get_service ??= _dylib.lookupFunction<
        _c_obs_weak_service_get_service,
        _dart_obs_weak_service_get_service>('obs_weak_service_get_service');
    return _obs_weak_service_get_service(
      weak,
    );
  }

  _dart_obs_weak_service_get_service _obs_weak_service_get_service;

  int obs_weak_service_references_service(
    ffi.Pointer<obs_weak_service> weak,
    ffi.Pointer<obs_service> service,
  ) {
    _obs_weak_service_references_service ??= _dylib.lookupFunction<
            _c_obs_weak_service_references_service,
            _dart_obs_weak_service_references_service>(
        'obs_weak_service_references_service');
    return _obs_weak_service_references_service(
      weak,
      service,
    );
  }

  _dart_obs_weak_service_references_service
      _obs_weak_service_references_service;

  ffi.Pointer<ffi.Int8> obs_service_get_name(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_name ??= _dylib.lookupFunction<_c_obs_service_get_name,
        _dart_obs_service_get_name>('obs_service_get_name');
    return _obs_service_get_name(
      service,
    );
  }

  _dart_obs_service_get_name _obs_service_get_name;

  /// Gets the default settings for a service
  ffi.Pointer<obs_data> obs_service_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_service_defaults ??= _dylib.lookupFunction<_c_obs_service_defaults,
        _dart_obs_service_defaults>('obs_service_defaults');
    return _obs_service_defaults(
      id,
    );
  }

  _dart_obs_service_defaults _obs_service_defaults;

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties> obs_get_service_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_service_properties ??= _dylib.lookupFunction<
        _c_obs_get_service_properties,
        _dart_obs_get_service_properties>('obs_get_service_properties');
    return _obs_get_service_properties(
      id,
    );
  }

  _dart_obs_get_service_properties _obs_get_service_properties;

  /// Returns the property list of an existing service context, if any.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties> obs_service_properties(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_properties ??= _dylib.lookupFunction<_c_obs_service_properties,
        _dart_obs_service_properties>('obs_service_properties');
    return _obs_service_properties(
      service,
    );
  }

  _dart_obs_service_properties _obs_service_properties;

  /// Gets the service type
  ffi.Pointer<ffi.Int8> obs_service_get_type(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_type ??= _dylib.lookupFunction<_c_obs_service_get_type,
        _dart_obs_service_get_type>('obs_service_get_type');
    return _obs_service_get_type(
      service,
    );
  }

  _dart_obs_service_get_type _obs_service_get_type;

  /// Updates the settings of the service context
  void obs_service_update(
    ffi.Pointer<obs_service> service,
    ffi.Pointer<obs_data> settings,
  ) {
    _obs_service_update ??=
        _dylib.lookupFunction<_c_obs_service_update, _dart_obs_service_update>(
            'obs_service_update');
    return _obs_service_update(
      service,
      settings,
    );
  }

  _dart_obs_service_update _obs_service_update;

  /// Returns the current settings for this service
  ffi.Pointer<obs_data> obs_service_get_settings(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_settings ??= _dylib.lookupFunction<
        _c_obs_service_get_settings,
        _dart_obs_service_get_settings>('obs_service_get_settings');
    return _obs_service_get_settings(
      service,
    );
  }

  _dart_obs_service_get_settings _obs_service_get_settings;

  /// Returns the URL for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_url(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_url ??= _dylib.lookupFunction<_c_obs_service_get_url,
        _dart_obs_service_get_url>('obs_service_get_url');
    return _obs_service_get_url(
      service,
    );
  }

  _dart_obs_service_get_url _obs_service_get_url;

  /// Returns the stream key (if any) for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_key(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_key ??= _dylib.lookupFunction<_c_obs_service_get_key,
        _dart_obs_service_get_key>('obs_service_get_key');
    return _obs_service_get_key(
      service,
    );
  }

  _dart_obs_service_get_key _obs_service_get_key;

  /// Returns the username (if any) for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_username(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_username ??= _dylib.lookupFunction<
        _c_obs_service_get_username,
        _dart_obs_service_get_username>('obs_service_get_username');
    return _obs_service_get_username(
      service,
    );
  }

  _dart_obs_service_get_username _obs_service_get_username;

  /// Returns the password (if any) for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_password(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_password ??= _dylib.lookupFunction<
        _c_obs_service_get_password,
        _dart_obs_service_get_password>('obs_service_get_password');
    return _obs_service_get_password(
      service,
    );
  }

  _dart_obs_service_get_password _obs_service_get_password;

  /// Applies service-specific video encoder settings.
  ///
  /// @param  video_encoder_settings  Video encoder settings.  Optional.
  /// @param  audio_encoder_settings  Audio encoder settings.  Optional.
  void obs_service_apply_encoder_settings(
    ffi.Pointer<obs_service> service,
    ffi.Pointer<obs_data> video_encoder_settings,
    ffi.Pointer<obs_data> audio_encoder_settings,
  ) {
    _obs_service_apply_encoder_settings ??= _dylib.lookupFunction<
            _c_obs_service_apply_encoder_settings,
            _dart_obs_service_apply_encoder_settings>(
        'obs_service_apply_encoder_settings');
    return _obs_service_apply_encoder_settings(
      service,
      video_encoder_settings,
      audio_encoder_settings,
    );
  }

  _dart_obs_service_apply_encoder_settings _obs_service_apply_encoder_settings;

  ffi.Pointer<ffi.Void> obs_service_get_type_data(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_type_data ??= _dylib.lookupFunction<
        _c_obs_service_get_type_data,
        _dart_obs_service_get_type_data>('obs_service_get_type_data');
    return _obs_service_get_type_data(
      service,
    );
  }

  _dart_obs_service_get_type_data _obs_service_get_type_data;

  ffi.Pointer<ffi.Int8> obs_service_get_id(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_id ??=
        _dylib.lookupFunction<_c_obs_service_get_id, _dart_obs_service_get_id>(
            'obs_service_get_id');
    return _obs_service_get_id(
      service,
    );
  }

  _dart_obs_service_get_id _obs_service_get_id;

  ffi.Pointer<ffi.Int8> obs_service_get_output_type(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_output_type ??= _dylib.lookupFunction<
        _c_obs_service_get_output_type,
        _dart_obs_service_get_output_type>('obs_service_get_output_type');
    return _obs_service_get_output_type(
      service,
    );
  }

  _dart_obs_service_get_output_type _obs_service_get_output_type;

  void obs_source_frame_init(
    ffi.Pointer<obs_source_frame> frame,
    int format,
    int width,
    int height,
  ) {
    _obs_source_frame_init ??= _dylib.lookupFunction<_c_obs_source_frame_init,
        _dart_obs_source_frame_init>('obs_source_frame_init');
    return _obs_source_frame_init(
      frame,
      format,
      width,
      height,
    );
  }

  _dart_obs_source_frame_init _obs_source_frame_init;

  void obs_source_frame_free(
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_frame_free ??= _dylib.lookupFunction<_c_obs_source_frame_free,
        _dart_obs_source_frame_free>('obs_source_frame_free');
    return _obs_source_frame_free(
      frame,
    );
  }

  _dart_obs_source_frame_free _obs_source_frame_free;

  ffi.Pointer<obs_source_frame> obs_source_frame_create(
    int format,
    int width,
    int height,
  ) {
    _obs_source_frame_create ??= _dylib.lookupFunction<
        _c_obs_source_frame_create,
        _dart_obs_source_frame_create>('obs_source_frame_create');
    return _obs_source_frame_create(
      format,
      width,
      height,
    );
  }

  _dart_obs_source_frame_create _obs_source_frame_create;

  void obs_source_frame_destroy(
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_frame_destroy ??= _dylib.lookupFunction<
        _c_obs_source_frame_destroy,
        _dart_obs_source_frame_destroy>('obs_source_frame_destroy');
    return _obs_source_frame_destroy(
      frame,
    );
  }

  _dart_obs_source_frame_destroy _obs_source_frame_destroy;

  void obs_source_frame_copy(
    ffi.Pointer<obs_source_frame> dst,
    ffi.Pointer<obs_source_frame> src,
  ) {
    _obs_source_frame_copy ??= _dylib.lookupFunction<_c_obs_source_frame_copy,
        _dart_obs_source_frame_copy>('obs_source_frame_copy');
    return _obs_source_frame_copy(
      dst,
      src,
    );
  }

  _dart_obs_source_frame_copy _obs_source_frame_copy;

  /// Adds a frame callback for this source.
  ///
  /// @param  source   The source.
  /// @param  frame    The frame callback which is called each time a frame
  /// updates.
  /// @param  param    The user data to be associated with this frame callback.
  void obs_source_add_frame_callback(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<_typedefC_123>> frame,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_add_frame_callback ??= _dylib.lookupFunction<
        _c_obs_source_add_frame_callback,
        _dart_obs_source_add_frame_callback>('obs_source_add_frame_callback');
    return _obs_source_add_frame_callback(
      source,
      frame,
      param,
    );
  }

  _dart_obs_source_add_frame_callback _obs_source_add_frame_callback;

  /// Removes a frame callback for this source
  void obs_source_remove_frame_callback(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<_typedefC_124>> frame,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_remove_frame_callback ??= _dylib.lookupFunction<
            _c_obs_source_remove_frame_callback,
            _dart_obs_source_remove_frame_callback>(
        'obs_source_remove_frame_callback');
    return _obs_source_remove_frame_callback(
      source,
      frame,
      param,
    );
  }

  _dart_obs_source_remove_frame_callback _obs_source_remove_frame_callback;

  int obs_source_get_icon_type(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_source_get_icon_type ??= _dylib.lookupFunction<
        _c_obs_source_get_icon_type,
        _dart_obs_source_get_icon_type>('obs_source_get_icon_type');
    return _obs_source_get_icon_type(
      id,
    );
  }

  _dart_obs_source_get_icon_type _obs_source_get_icon_type;
}

class base_allocator extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> malloc;

  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> realloc;

  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> free;
}

class profiler_snapshot extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class profiler_snapshot_entry extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class profiler_time_entry extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class profiler_name_store extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class text_lookup extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class vec2 extends ffi.Struct {
  @ffi.Double()
  double x;

  @ffi.Double()
  double y;
}

class vec3 extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class vec4 extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class quat extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class axisang extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class plane extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class matrix3 extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class matrix4 extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

abstract class gs_draw_mode {
  static const int GS_POINTS = 0;
  static const int GS_LINES = 1;
  static const int GS_LINESTRIP = 2;
  static const int GS_TRIS = 3;
  static const int GS_TRISTRIP = 4;
}

abstract class gs_color_format {
  static const int GS_UNKNOWN = 0;
  static const int GS_A8 = 1;
  static const int GS_R8 = 2;
  static const int GS_RGBA = 3;
  static const int GS_BGRX = 4;
  static const int GS_BGRA = 5;
  static const int GS_R10G10B10A2 = 6;
  static const int GS_RGBA16 = 7;
  static const int GS_R16 = 8;
  static const int GS_RGBA16F = 9;
  static const int GS_RGBA32F = 10;
  static const int GS_RG16F = 11;
  static const int GS_RG32F = 12;
  static const int GS_R16F = 13;
  static const int GS_R32F = 14;
  static const int GS_DXT1 = 15;
  static const int GS_DXT3 = 16;
  static const int GS_DXT5 = 17;
  static const int GS_R8G8 = 18;
}

abstract class gs_zstencil_format {
  static const int GS_ZS_NONE = 0;
  static const int GS_Z16 = 1;
  static const int GS_Z24_S8 = 2;
  static const int GS_Z32F = 3;
  static const int GS_Z32F_S8X24 = 4;
}

abstract class gs_index_type {
  static const int GS_UNSIGNED_SHORT = 0;
  static const int GS_UNSIGNED_LONG = 1;
}

abstract class gs_cull_mode {
  static const int GS_BACK = 0;
  static const int GS_FRONT = 1;
  static const int GS_NEITHER = 2;
}

abstract class gs_blend_type {
  static const int GS_BLEND_ZERO = 0;
  static const int GS_BLEND_ONE = 1;
  static const int GS_BLEND_SRCCOLOR = 2;
  static const int GS_BLEND_INVSRCCOLOR = 3;
  static const int GS_BLEND_SRCALPHA = 4;
  static const int GS_BLEND_INVSRCALPHA = 5;
  static const int GS_BLEND_DSTCOLOR = 6;
  static const int GS_BLEND_INVDSTCOLOR = 7;
  static const int GS_BLEND_DSTALPHA = 8;
  static const int GS_BLEND_INVDSTALPHA = 9;
  static const int GS_BLEND_SRCALPHASAT = 10;
}

abstract class gs_depth_test {
  static const int GS_NEVER = 0;
  static const int GS_LESS = 1;
  static const int GS_LEQUAL = 2;
  static const int GS_EQUAL = 3;
  static const int GS_GEQUAL = 4;
  static const int GS_GREATER = 5;
  static const int GS_NOTEQUAL = 6;
  static const int GS_ALWAYS = 7;
}

abstract class gs_stencil_side {
  static const int GS_STENCIL_FRONT = 1;
  static const int GS_STENCIL_BACK = 2;
  static const int GS_STENCIL_BOTH = 3;
}

abstract class gs_stencil_op_type {
  static const int GS_KEEP = 0;
  static const int GS_ZERO = 1;
  static const int GS_REPLACE = 2;
  static const int GS_INCR = 3;
  static const int GS_DECR = 4;
  static const int GS_INVERT = 5;
}

abstract class gs_cube_sides {
  static const int GS_POSITIVE_X = 0;
  static const int GS_NEGATIVE_X = 1;
  static const int GS_POSITIVE_Y = 2;
  static const int GS_NEGATIVE_Y = 3;
  static const int GS_POSITIVE_Z = 4;
  static const int GS_NEGATIVE_Z = 5;
}

abstract class gs_sample_filter {
  static const int GS_FILTER_POINT = 0;
  static const int GS_FILTER_LINEAR = 1;
  static const int GS_FILTER_ANISOTROPIC = 2;
  static const int GS_FILTER_MIN_MAG_POINT_MIP_LINEAR = 3;
  static const int GS_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4;
  static const int GS_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5;
  static const int GS_FILTER_MIN_LINEAR_MAG_MIP_POINT = 6;
  static const int GS_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 7;
  static const int GS_FILTER_MIN_MAG_LINEAR_MIP_POINT = 8;
}

abstract class gs_address_mode {
  static const int GS_ADDRESS_CLAMP = 0;
  static const int GS_ADDRESS_WRAP = 1;
  static const int GS_ADDRESS_MIRROR = 2;
  static const int GS_ADDRESS_BORDER = 3;
  static const int GS_ADDRESS_MIRRORONCE = 4;
}

abstract class gs_texture_type {
  static const int GS_TEXTURE_2D = 0;
  static const int GS_TEXTURE_3D = 1;
  static const int GS_TEXTURE_CUBE = 2;
}

class gs_device_loss extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> device_loss_release;

  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> device_loss_rebuild;

  ffi.Pointer<ffi.Void> data;
}

class gs_monitor_info extends ffi.Struct {
  @ffi.Int32()
  int rotation_degrees;

  @ffi.Int64()
  int x;

  @ffi.Int64()
  int y;

  @ffi.Int64()
  int cx;

  @ffi.Int64()
  int cy;
}

class gs_tvertarray extends ffi.Struct {
  @ffi.Uint64()
  int width;

  ffi.Pointer<ffi.Void> array;
}

class gs_vb_data extends ffi.Struct {
  @ffi.Uint64()
  int num;

  ffi.Pointer<vec3> points;

  ffi.Pointer<vec3> normals;

  ffi.Pointer<vec3> tangents;

  ffi.Pointer<ffi.Uint32> colors;

  @ffi.Uint64()
  int num_tex;

  ffi.Pointer<gs_tvertarray> tvarray;
}

class gs_sampler_info extends ffi.Struct {
  @ffi.Int32()
  int filter;

  @ffi.Int32()
  int address_u;

  @ffi.Int32()
  int address_v;

  @ffi.Int32()
  int address_w;

  @ffi.Int32()
  int max_anisotropy;

  @ffi.Uint32()
  int border_color;
}

class gs_display_mode extends ffi.Struct {
  @ffi.Uint32()
  int width;

  @ffi.Uint32()
  int height;

  @ffi.Uint32()
  int bits;

  @ffi.Uint32()
  int freq;
}

class gs_rect extends ffi.Struct {
  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int cx;

  @ffi.Int32()
  int cy;
}

class gs_texture extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_stage_surface extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_zstencil_buffer extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_vertex_buffer extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_index_buffer extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_sampler_state extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_shader extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_swap_chain extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_timer extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_texrender extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_shader_param extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_effect extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_effect_technique extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_effect_pass extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_effect_param extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_device extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class graphics_subsystem extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_timer_range extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class gs_texture_render extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

abstract class gs_shader_param_type {
  static const int GS_SHADER_PARAM_UNKNOWN = 0;
  static const int GS_SHADER_PARAM_BOOL = 1;
  static const int GS_SHADER_PARAM_FLOAT = 2;
  static const int GS_SHADER_PARAM_INT = 3;
  static const int GS_SHADER_PARAM_STRING = 4;
  static const int GS_SHADER_PARAM_VEC2 = 5;
  static const int GS_SHADER_PARAM_VEC3 = 6;
  static const int GS_SHADER_PARAM_VEC4 = 7;
  static const int GS_SHADER_PARAM_INT2 = 8;
  static const int GS_SHADER_PARAM_INT3 = 9;
  static const int GS_SHADER_PARAM_INT4 = 10;
  static const int GS_SHADER_PARAM_MATRIX4X4 = 11;
  static const int GS_SHADER_PARAM_TEXTURE = 12;
}

class gs_shader_param_info extends ffi.Struct {
  @ffi.Int32()
  int type;

  ffi.Pointer<ffi.Int8> name;
}

abstract class gs_shader_type {
  static const int GS_SHADER_VERTEX = 0;
  static const int GS_SHADER_PIXEL = 1;
}

class gs_effect_param_info extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int type;
}

class objc_ivar extends ffi.Struct {
  ffi.Pointer<ffi.Int8> ivar_name;

  ffi.Pointer<ffi.Int8> ivar_type;

  @ffi.Int32()
  int ivar_offset;

  @ffi.Int32()
  int space;
}

class objc_ivar_list extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class SEL extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class objc_method extends ffi.Struct {
  ffi.Pointer<SEL> method_name;

  ffi.Pointer<ffi.Int8> method_types;

  ffi.Pointer<ffi.NativeFunction<IMP>> method_imp;
}

class objc_method_list extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class objc_cache extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class objc_protocol_list extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class Class extends ffi.Struct {
  ffi.Pointer<Class> isa;

  ffi.Pointer<Class> super_class;

  ffi.Pointer<ffi.Int8> name;

  @ffi.Int64()
  int version;

  @ffi.Int64()
  int info;

  @ffi.Int64()
  int instance_size;

  ffi.Pointer<objc_ivar_list> ivars;

  ffi.Pointer<ffi.Pointer<objc_method_list>> methodLists;

  ffi.Pointer<objc_cache> cache;

  ffi.Pointer<objc_protocol_list> protocols;
}

class id extends ffi.Struct {
  ffi.Pointer<Class> isa;
}

class gs_window extends ffi.Struct {
  ffi.Pointer<id> view;
}

class gs_init_data extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class input_t extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class audio_output extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

abstract class audio_format {
  static const int AUDIO_FORMAT_UNKNOWN = 0;
  static const int AUDIO_FORMAT_U8BIT = 1;
  static const int AUDIO_FORMAT_16BIT = 2;
  static const int AUDIO_FORMAT_32BIT = 3;
  static const int AUDIO_FORMAT_FLOAT = 4;
  static const int AUDIO_FORMAT_U8BIT_PLANAR = 5;
  static const int AUDIO_FORMAT_16BIT_PLANAR = 6;
  static const int AUDIO_FORMAT_32BIT_PLANAR = 7;
  static const int AUDIO_FORMAT_FLOAT_PLANAR = 8;
}

/// The speaker layout describes where the speakers are located in the room.
/// For OBS it dictates:
/// *  how many channels are available and
/// *  which channels are used for which speakers.
///
/// Standard channel layouts where retrieved from ffmpeg documentation at:
/// https://trac.ffmpeg.org/wiki/AudioChannelManipulation
abstract class speaker_layout {
  /// < Unknown setting, fallback is stereo.
  static const int SPEAKERS_UNKNOWN = 0;

  /// < Channels: MONO
  static const int SPEAKERS_MONO = 1;

  /// < Channels: FL, FR
  static const int SPEAKERS_STEREO = 2;

  /// < Channels: FL, FR, LFE
  static const int SPEAKERS_2POINT1 = 3;

  /// < Channels: FL, FR, FC, RC
  static const int SPEAKERS_4POINT0 = 4;

  /// < Channels: FL, FR, FC, LFE, RC
  static const int SPEAKERS_4POINT1 = 5;

  /// < Channels: FL, FR, FC, LFE, RL, RR
  static const int SPEAKERS_5POINT1 = 6;

  /// < Channels: FL, FR, FC, LFE, RL, RR, SL, SR
  static const int SPEAKERS_7POINT1 = 8;
}

class audio_data extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class audio_output_data extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class audio_output_info extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  int samples_per_sec;

  @ffi.Int32()
  int format;

  @ffi.Int32()
  int speakers;

  ffi.Pointer<ffi.NativeFunction<audio_input_callback_t>> input_callback;

  ffi.Pointer<ffi.Void> input_param;
}

class audio_convert_info extends ffi.Struct {
  @ffi.Uint32()
  int samples_per_sec;

  @ffi.Int32()
  int format;

  @ffi.Int32()
  int speakers;
}

class video_frame extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class video_output extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

abstract class video_format {
  static const int VIDEO_FORMAT_NONE = 0;
  static const int VIDEO_FORMAT_I420 = 1;
  static const int VIDEO_FORMAT_NV12 = 2;
  static const int VIDEO_FORMAT_YVYU = 3;
  static const int VIDEO_FORMAT_YUY2 = 4;
  static const int VIDEO_FORMAT_UYVY = 5;
  static const int VIDEO_FORMAT_RGBA = 6;
  static const int VIDEO_FORMAT_BGRA = 7;
  static const int VIDEO_FORMAT_BGRX = 8;
  static const int VIDEO_FORMAT_Y800 = 9;
  static const int VIDEO_FORMAT_I444 = 10;
  static const int VIDEO_FORMAT_BGR3 = 11;
  static const int VIDEO_FORMAT_I422 = 12;
  static const int VIDEO_FORMAT_I40A = 13;
  static const int VIDEO_FORMAT_I42A = 14;
  static const int VIDEO_FORMAT_YUVA = 15;
  static const int VIDEO_FORMAT_AYUV = 16;
}

abstract class video_colorspace {
  static const int VIDEO_CS_DEFAULT = 0;
  static const int VIDEO_CS_601 = 1;
  static const int VIDEO_CS_709 = 2;
  static const int VIDEO_CS_SRGB = 3;
}

abstract class video_range_type {
  static const int VIDEO_RANGE_DEFAULT = 0;
  static const int VIDEO_RANGE_PARTIAL = 1;
  static const int VIDEO_RANGE_FULL = 2;
}

class video_data extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class video_output_info extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int fps_num;

  @ffi.Uint32()
  int fps_den;

  @ffi.Uint32()
  int width;

  @ffi.Uint32()
  int height;

  @ffi.Uint64()
  int cache_size;

  @ffi.Int32()
  int colorspace;

  @ffi.Int32()
  int range;
}

abstract class video_scale_type {
  static const int VIDEO_SCALE_DEFAULT = 0;
  static const int VIDEO_SCALE_POINT = 1;
  static const int VIDEO_SCALE_FAST_BILINEAR = 2;
  static const int VIDEO_SCALE_BILINEAR = 3;
  static const int VIDEO_SCALE_BICUBIC = 4;
}

class video_scale_info extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int width;

  @ffi.Uint32()
  int height;

  @ffi.Int32()
  int range;

  @ffi.Int32()
  int colorspace;
}

class signal_handler extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class calldata_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> stack;

  @ffi.Uint64()
  int size;

  @ffi.Uint64()
  int capacity;

  @ffi.Uint8()
  int fixed;
}

class proc_handler extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_data extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_data_item extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_data_array extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

abstract class obs_data_type {
  static const int OBS_DATA_NULL = 0;
  static const int OBS_DATA_STRING = 1;
  static const int OBS_DATA_NUMBER = 2;
  static const int OBS_DATA_BOOLEAN = 3;
  static const int OBS_DATA_OBJECT = 4;
  static const int OBS_DATA_ARRAY = 5;
}

abstract class obs_data_number_type {
  static const int OBS_DATA_NUM_INVALID = 0;
  static const int OBS_DATA_NUM_INT = 1;
  static const int OBS_DATA_NUM_DOUBLE = 2;
}

class media_frames_per_second extends ffi.Struct {
  @ffi.Uint32()
  int numerator;

  @ffi.Uint32()
  int denominator;
}

/// Modal UI definition structure
class obs_modal_ui extends ffi.Struct {
  /// < Identifier associated with this UI
  ffi.Pointer<ffi.Int8> id;

  /// < Task of the UI
  ffi.Pointer<ffi.Int8> task;

  /// < UI target (UI toolkit or program name)
  ffi.Pointer<ffi.Int8> target;

  /// Callback to execute modal interface.
  ///
  /// The @b object variable points to the input/output/encoder/etc.  The
  /// @b ui_data variable points to the UI parent or UI-specific data to
  /// be used with the custom user interface.
  ///
  /// What @b ui_data points to differs depending on the target, and you
  /// should use discretion and consistency when using this variable to
  /// relay information to the UI function.  For example, it would be
  /// ideal to have @b ui_data point to a parent, QWidget for Qt, or a
  /// wxWindow for wxWidgets, etc., though it's up to the discretion of
  /// the developer to define that value.  Because of the nature of void
  /// pointers, discretion and consistency is advised.
  ///
  /// @param  object   Pointer/handle to the data associated with this
  /// call.
  /// @param  ui_data  UI data to pass associated with this specific
  /// target, if any.
  /// @return          @b true if user completed the task, or
  /// @b false if user cancelled the task.
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> exec;

  ffi.Pointer<ffi.Void> type_data;

  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> free_type_data;
}

/// Modeless UI definition structure
class obs_modeless_ui extends ffi.Struct {
  /// < Identifier associated with this UI
  ffi.Pointer<ffi.Int8> id;

  /// < Task of the UI
  ffi.Pointer<ffi.Int8> task;

  /// < UI target (UI toolkit or program name)
  ffi.Pointer<ffi.Int8> target;

  /// Callback to create modeless interface.
  ///
  /// This function is almost identical to the modal exec function,
  /// except modeless UI calls return immediately, and typically are
  /// supposed to return a pointer or handle to the specific UI object
  /// that was created.  For example, a Qt object would ideally return a
  /// pointer to a QWidget.  Again, discretion and consistency is advised
  /// for the return value.
  ///
  /// @param   object  Pointer/handle to the data associated with this
  /// call.
  /// @param  ui_data  UI data to pass associated with this specific
  /// target, if any.
  /// @return          Pointer/handle to the modeless UI associated with
  /// the specific target.
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> create;

  ffi.Pointer<ffi.Void> type_data;

  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> free_type_data;
}

abstract class obs_property_type {
  static const int OBS_PROPERTY_INVALID = 0;
  static const int OBS_PROPERTY_BOOL = 1;
  static const int OBS_PROPERTY_INT = 2;
  static const int OBS_PROPERTY_FLOAT = 3;
  static const int OBS_PROPERTY_TEXT = 4;
  static const int OBS_PROPERTY_PATH = 5;
  static const int OBS_PROPERTY_LIST = 6;
  static const int OBS_PROPERTY_COLOR = 7;
  static const int OBS_PROPERTY_BUTTON = 8;
  static const int OBS_PROPERTY_FONT = 9;
  static const int OBS_PROPERTY_EDITABLE_LIST = 10;
  static const int OBS_PROPERTY_FRAME_RATE = 11;
  static const int OBS_PROPERTY_GROUP = 12;
}

abstract class obs_combo_format {
  static const int OBS_COMBO_FORMAT_INVALID = 0;
  static const int OBS_COMBO_FORMAT_INT = 1;
  static const int OBS_COMBO_FORMAT_FLOAT = 2;
  static const int OBS_COMBO_FORMAT_STRING = 3;
}

abstract class obs_combo_type {
  static const int OBS_COMBO_TYPE_INVALID = 0;
  static const int OBS_COMBO_TYPE_EDITABLE = 1;
  static const int OBS_COMBO_TYPE_LIST = 2;
}

abstract class obs_editable_list_type {
  static const int OBS_EDITABLE_LIST_TYPE_STRINGS = 0;
  static const int OBS_EDITABLE_LIST_TYPE_FILES = 1;
  static const int OBS_EDITABLE_LIST_TYPE_FILES_AND_URLS = 2;
}

abstract class obs_path_type {
  static const int OBS_PATH_FILE = 0;
  static const int OBS_PATH_FILE_SAVE = 1;
  static const int OBS_PATH_DIRECTORY = 2;
}

abstract class obs_text_type {
  static const int OBS_TEXT_DEFAULT = 0;
  static const int OBS_TEXT_PASSWORD = 1;
  static const int OBS_TEXT_MULTILINE = 2;
}

abstract class obs_number_type {
  static const int OBS_NUMBER_SCROLLER = 0;
  static const int OBS_NUMBER_SLIDER = 1;
}

abstract class obs_group_type {
  static const int OBS_COMBO_INVALID = 0;
  static const int OBS_GROUP_NORMAL = 1;
  static const int OBS_GROUP_CHECKABLE = 2;
}

class obs_properties extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_property extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

abstract class obs_interaction_flags {
  static const int INTERACT_NONE = 0;
  static const int INTERACT_CAPS_KEY = 1;
  static const int INTERACT_SHIFT_KEY = 2;
  static const int INTERACT_CONTROL_KEY = 4;
  static const int INTERACT_ALT_KEY = 8;
  static const int INTERACT_MOUSE_LEFT = 16;
  static const int INTERACT_MOUSE_MIDDLE = 32;
  static const int INTERACT_MOUSE_RIGHT = 64;
  static const int INTERACT_COMMAND_KEY = 128;
  static const int INTERACT_NUMLOCK_KEY = 256;
  static const int INTERACT_IS_KEY_PAD = 512;
  static const int INTERACT_IS_LEFT = 1024;
  static const int INTERACT_IS_RIGHT = 2048;
}

abstract class obs_mouse_button_type {
  static const int MOUSE_LEFT = 0;
  static const int MOUSE_MIDDLE = 1;
  static const int MOUSE_RIGHT = 2;
}

class obs_mouse_event extends ffi.Struct {
  @ffi.Uint32()
  int modifiers;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;
}

class obs_key_event extends ffi.Struct {
  @ffi.Uint32()
  int modifiers;

  ffi.Pointer<ffi.Int8> text;

  @ffi.Uint32()
  int native_modifiers;

  @ffi.Uint32()
  int native_scancode;

  @ffi.Uint32()
  int native_vkey;
}

class obs_display extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_view extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_source extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_scene extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_scene_item extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_output extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_encoder extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_service extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_module extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_fader extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_volmeter extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_weak_source extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_weak_output extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_weak_encoder extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_weak_service extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

abstract class obs_source_type {
  static const int OBS_SOURCE_TYPE_INPUT = 0;
  static const int OBS_SOURCE_TYPE_FILTER = 1;
  static const int OBS_SOURCE_TYPE_TRANSITION = 2;
  static const int OBS_SOURCE_TYPE_SCENE = 3;
}

abstract class obs_balance_type {
  static const int OBS_BALANCE_TYPE_SINE_LAW = 0;
  static const int OBS_BALANCE_TYPE_SQUARE_LAW = 1;
  static const int OBS_BALANCE_TYPE_LINEAR = 2;
}

abstract class obs_icon_type {
  static const int OBS_ICON_TYPE_UNKNOWN = 0;
  static const int OBS_ICON_TYPE_IMAGE = 1;
  static const int OBS_ICON_TYPE_COLOR = 2;
  static const int OBS_ICON_TYPE_SLIDESHOW = 3;
  static const int OBS_ICON_TYPE_AUDIO_INPUT = 4;
  static const int OBS_ICON_TYPE_AUDIO_OUTPUT = 5;
  static const int OBS_ICON_TYPE_DESKTOP_CAPTURE = 6;
  static const int OBS_ICON_TYPE_WINDOW_CAPTURE = 7;
  static const int OBS_ICON_TYPE_GAME_CAPTURE = 8;
  static const int OBS_ICON_TYPE_CAMERA = 9;
  static const int OBS_ICON_TYPE_TEXT = 10;
  static const int OBS_ICON_TYPE_MEDIA = 11;
  static const int OBS_ICON_TYPE_BROWSER = 12;
  static const int OBS_ICON_TYPE_CUSTOM = 13;
}

abstract class obs_media_state {
  static const int OBS_MEDIA_STATE_NONE = 0;
  static const int OBS_MEDIA_STATE_PLAYING = 1;
  static const int OBS_MEDIA_STATE_OPENING = 2;
  static const int OBS_MEDIA_STATE_BUFFERING = 3;
  static const int OBS_MEDIA_STATE_PAUSED = 4;
  static const int OBS_MEDIA_STATE_STOPPED = 5;
  static const int OBS_MEDIA_STATE_ENDED = 6;
  static const int OBS_MEDIA_STATE_ERROR = 7;
}

class obs_source_audio_mix extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

/// Source asynchronous video output structure.  Used with
/// obs_source_output_video to output asynchronous video.  Video is buffered as
/// necessary to play according to timestamps.  When used with audio output,
/// audio is synced to video as it is played.
///
/// If a YUV format is specified, it will be automatically upsampled and
/// converted to RGB via shader on the graphics processor.
///
/// NOTE: Non-YUV formats will always be treated as full range with this
/// structure!  Use obs_source_frame2 along with obs_source_output_video2
/// instead if partial range support is desired for non-YUV video formats.
class obs_source_frame extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

/// Sent to source filters via the filter_audio callback to allow filtering of
/// audio data
class obs_audio_data extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

/// Source definition structure
class obs_source_info extends ffi.Struct {
  /// Unique string identifier for the source
  ffi.Pointer<ffi.Int8> id;

  /// Type of source.
  ///
  /// OBS_SOURCE_TYPE_INPUT for input sources,
  /// OBS_SOURCE_TYPE_FILTER for filter sources, and
  /// OBS_SOURCE_TYPE_TRANSITION for transition sources.
  @ffi.Int32()
  int type;

  /// Source output flags
  @ffi.Uint32()
  int output_flags;

  /// Get the translated name of the source type
  ///
  /// @param  type_data  The type_data variable of this structure
  /// @return               The translated name of the source type
  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> get_name;

  /// Creates the source data for the source
  ///
  /// @param  settings  Settings to initialize the source with
  /// @param  source    Source that this data is associated with
  /// @return           The data associated with this source
  ffi.Pointer<ffi.NativeFunction<_typedefC_16>> create;

  /// Destroys the private data for the source
  ///
  /// Async sources must not call obs_source_output_video after returning
  /// from destroy
  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> destroy;

  /// Returns the width of the source.  Required if this is an input
  /// source and has non-async video
  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> get_width;

  /// Returns the height of the source.  Required if this is an input
  /// source and has non-async video
  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> get_height;

  /// Gets the default settings for this source
  ///
  /// @param[out]  settings  Data to assign default settings to
  /// @deprecated            Use get_defaults2 if type_data is needed
  ffi.Pointer<ffi.NativeFunction<_typedefC_20>> get_defaults;

  /// Gets the property information of this source
  ///
  /// @return         The properties data
  /// @deprecated     Use get_properties2 if type_data is needed
  ffi.Pointer<ffi.NativeFunction<_typedefC_21>> get_properties;

  /// Updates the settings for this source
  ///
  /// @param data      Source data
  /// @param settings  New settings for this source
  ffi.Pointer<ffi.NativeFunction<_typedefC_22>> update;

  /// Called when the source has been activated in the main view
  ffi.Pointer<ffi.NativeFunction<_typedefC_23>> activate;

  /// Called when the source has been deactivated from the main view
  /// (no longer being played/displayed)
  ffi.Pointer<ffi.NativeFunction<_typedefC_24>> deactivate;

  /// Called when the source is visible
  ffi.Pointer<ffi.NativeFunction<_typedefC_25>> show_1;

  /// Called when the source is no longer visible
  ffi.Pointer<ffi.NativeFunction<_typedefC_26>> hide_1;

  /// Called each video frame with the time elapsed
  ///
  /// @param  data     Source data
  /// @param  seconds  Seconds elapsed since the last frame
  ffi.Pointer<ffi.NativeFunction<_typedefC_27>> video_tick;

  /// Called when rendering the source with the graphics subsystem.
  ///
  /// If this is an input/transition source, this is called to draw the
  /// source texture with the graphics subsystem using the specified
  /// effect.
  ///
  /// If this is a filter source, it wraps source draw calls (for
  /// example applying a custom effect with custom parameters to a
  /// source).  In this case, it's highly recommended to use the
  /// obs_source_process_filter function to automatically handle
  /// effect-based filter processing.  However, you can implement custom
  /// draw handling as desired as well.
  ///
  /// If the source output flags do not include SOURCE_CUSTOM_DRAW, all
  /// a source needs to do is set the "image" parameter of the effect to
  /// the desired texture, and then draw.  If the output flags include
  /// SOURCE_COLOR_MATRIX, you may optionally set the "color_matrix"
  /// parameter of the effect to a custom 4x4 conversion matrix (by
  /// default it will be set to an YUV->RGB conversion matrix)
  ///
  /// @param data    Source data
  /// @param effect  Effect to be used with this source.  If the source
  /// output flags include SOURCE_CUSTOM_DRAW, this will
  /// be NULL, and the source is expected to process with
  /// an effect manually.
  ffi.Pointer<ffi.NativeFunction<_typedefC_28>> video_render;

  /// Called to filter raw async video data.
  ///
  /// @note          This function is only used with filter sources.
  ///
  /// @param  data   Filter data
  /// @param  frame  Video frame to filter
  /// @return        New video frame data.  This can defer video data to
  /// be drawn later if time is needed for processing
  ffi.Pointer<ffi.NativeFunction<_typedefC_29>> filter_video;

  /// Called to filter raw audio data.
  ///
  /// @note          This function is only used with filter sources.
  ///
  /// @param  data   Filter data
  /// @param  audio  Audio data to filter.
  /// @return        Modified or new audio data.  You can directly modify
  /// the data passed and return it, or you can defer audio
  /// data for later if time is needed for processing.  If
  /// you are returning new data, that data must exist
  /// until the next call to the filter_audio callback or
  /// until the filter is removed/destroyed.
  ffi.Pointer<ffi.NativeFunction<_typedefC_30>> filter_audio;

  /// Called to enumerate all active sources being used within this
  /// source.  If the source has children that render audio/video it must
  /// implement this callback.
  ///
  /// @param  data           Filter data
  /// @param  enum_callback  Enumeration callback
  /// @param  param          User data to pass to callback
  ffi.Pointer<ffi.NativeFunction<_typedefC_31>> enum_active_sources;

  /// Called when saving a source.  This is a separate function because
  /// sometimes a source needs to know when it is being saved so it
  /// doesn't always have to update the current settings until a certain
  /// point.
  ///
  /// @param  data      Source data
  /// @param  settings  Settings
  ffi.Pointer<ffi.NativeFunction<_typedefC_32>> save;

  /// Called when loading a source from saved data.  This should be called
  /// after all the loading sources have actually been created because
  /// sometimes there are sources that depend on each other.
  ///
  /// @param  data      Source data
  /// @param  settings  Settings
  ffi.Pointer<ffi.NativeFunction<_typedefC_33>> load;

  /// Called when interacting with a source and a mouse-down or mouse-up
  /// occurs.
  ///
  /// @param data         Source data
  /// @param event        Mouse event properties
  /// @param type         Mouse button pushed
  /// @param mouse_up     Mouse event type (true if mouse-up)
  /// @param click_count  Mouse click count (1 for single click, etc.)
  ffi.Pointer<ffi.NativeFunction<_typedefC_34>> mouse_click;

  /// Called when interacting with a source and a mouse-move occurs.
  ///
  /// @param data         Source data
  /// @param event        Mouse event properties
  /// @param mouse_leave  Mouse leave state (true if mouse left source)
  ffi.Pointer<ffi.NativeFunction<_typedefC_35>> mouse_move;

  /// Called when interacting with a source and a mouse-wheel occurs.
  ///
  /// @param data         Source data
  /// @param event        Mouse event properties
  /// @param x_delta      Movement delta in the horizontal direction
  /// @param y_delta      Movement delta in the vertical direction
  ffi.Pointer<ffi.NativeFunction<_typedefC_36>> mouse_wheel;

  /// Called when interacting with a source and gain focus/lost focus event
  /// occurs.
  ///
  /// @param data         Source data
  /// @param focus        Focus state (true if focus gained)
  ffi.Pointer<ffi.NativeFunction<_typedefC_37>> focus;

  /// Called when interacting with a source and a key-up or key-down
  /// occurs.
  ///
  /// @param data         Source data
  /// @param event        Key event properties
  /// @param focus        Key event type (true if mouse-up)
  ffi.Pointer<ffi.NativeFunction<_typedefC_38>> key_click;

  /// Called when the filter is removed from a source
  ///
  /// @param  data    Filter data
  /// @param  source  Source that the filter being removed from
  ffi.Pointer<ffi.NativeFunction<_typedefC_39>> filter_remove;

  /// Private data associated with this entry
  ffi.Pointer<ffi.Void> type_data;

  /// If defined, called to free private data on shutdown
  ffi.Pointer<ffi.NativeFunction<_typedefC_40>> free_type_data;

  ffi.Pointer<ffi.NativeFunction<_typedefC_41>> audio_render;

  /// Called to enumerate all active and inactive sources being used
  /// within this source.  If this callback isn't implemented,
  /// enum_active_sources will be called instead.
  ///
  /// This is typically used if a source can have inactive child sources.
  ///
  /// @param  data           Filter data
  /// @param  enum_callback  Enumeration callback
  /// @param  param          User data to pass to callback
  ffi.Pointer<ffi.NativeFunction<_typedefC_42>> enum_all_sources;

  ffi.Pointer<ffi.NativeFunction<_typedefC_43>> transition_start;

  ffi.Pointer<ffi.NativeFunction<_typedefC_44>> transition_stop;

  /// Gets the default settings for this source
  ///
  /// If get_defaults is also defined both will be called, and the first
  /// call will be to get_defaults, then to get_defaults2.
  ///
  /// @param       type_data The type_data variable of this structure
  /// @param[out]  settings  Data to assign default settings to
  ffi.Pointer<ffi.NativeFunction<_typedefC_45>> get_defaults2;

  /// Gets the property information of this source
  ///
  /// @param data      Source data
  /// @param type_data The type_data variable of this structure
  /// @return          The properties data
  ffi.Pointer<ffi.NativeFunction<_typedefC_46>> get_properties2;

  ffi.Pointer<ffi.NativeFunction<_typedefC_47>> audio_mix;

  /// Icon type for the source
  @ffi.Int32()
  int icon_type;

  /// Media controls
  ffi.Pointer<ffi.NativeFunction<_typedefC_48>> media_play_pause;

  ffi.Pointer<ffi.NativeFunction<_typedefC_49>> media_restart;

  ffi.Pointer<ffi.NativeFunction<_typedefC_50>> media_stop;

  ffi.Pointer<ffi.NativeFunction<_typedefC_51>> media_next;

  ffi.Pointer<ffi.NativeFunction<_typedefC_52>> media_previous;

  ffi.Pointer<ffi.NativeFunction<_typedefC_53>> media_get_duration;

  ffi.Pointer<ffi.NativeFunction<_typedefC_54>> media_get_time;

  ffi.Pointer<ffi.NativeFunction<_typedefC_55>> media_set_time;

  ffi.Pointer<ffi.NativeFunction<_typedefC_56>> media_get_state;

  @ffi.Uint32()
  int version;

  ffi.Pointer<ffi.Int8> unversioned_id;
}

/// Specifies the encoder type
abstract class obs_encoder_type {
  /// < The encoder provides an audio codec
  static const int OBS_ENCODER_AUDIO = 0;

  /// < The encoder provides a video codec
  static const int OBS_ENCODER_VIDEO = 1;
}

/// Encoder output packet
class encoder_packet extends ffi.Struct {
  /// < Packet data
  ffi.Pointer<ffi.Uint8> data;

  /// < Packet size
  @ffi.Uint64()
  int size;

  /// < Presentation timestamp
  @ffi.Int64()
  int pts;

  /// < Decode timestamp
  @ffi.Int64()
  int dts;

  /// < Timebase numerator
  @ffi.Int32()
  int timebase_num;

  /// < Timebase denominator
  @ffi.Int32()
  int timebase_den;

  /// < Encoder type
  @ffi.Int32()
  int type;

  /// < Is a keyframe
  @ffi.Uint8()
  int keyframe;

  @ffi.Int64()
  int dts_usec;

  @ffi.Int64()
  int sys_dts_usec;

  /// Packet priority
  ///
  /// This is generally use by video encoders to specify the priority
  /// of the packet.
  @ffi.Int32()
  int priority;

  /// Dropped packet priority
  ///
  /// If this packet needs to be dropped, the next packet must be of this
  /// priority or higher to continue transmission.
  @ffi.Int32()
  int drop_priority;

  /// Audio track index (used with outputs)
  @ffi.Uint64()
  int track_idx;

  /// Encoder from which the track originated from
  ffi.Pointer<obs_encoder> encoder;
}

/// Encoder input frame
class encoder_frame extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

/// Encoder interface
///
/// Encoders have a limited usage with OBS.  You are not generally supposed to
/// implement every encoder out there.  Generally, these are limited or specific
/// encoders for h264/aac for streaming and recording.  It doesn't have to be
/// *just* h264 or aac of course, but generally those are the expected encoders.
///
/// That being said, other encoders will be kept in mind for future use.
class obs_encoder_info extends ffi.Struct {
  /// Specifies the named identifier of this encoder
  ffi.Pointer<ffi.Int8> id;

  /// Specifies the encoder type (video or audio)
  @ffi.Int32()
  int type;

  /// Specifies the codec
  ffi.Pointer<ffi.Int8> codec;

  /// Gets the full translated name of this encoder
  ///
  /// @param  type_data  The type_data variable of this structure
  /// @return            Translated name of the encoder
  ffi.Pointer<ffi.NativeFunction<_typedefC_57>> get_name;

  /// Creates the encoder with the specified settings
  ///
  /// @param  settings  Settings for the encoder
  /// @param  encoder   OBS encoder context
  /// @return           Data associated with this encoder context, or
  /// NULL if initialization failed.
  ffi.Pointer<ffi.NativeFunction<_typedefC_58>> create;

  /// Destroys the encoder data
  ///
  /// @param  data  Data associated with this encoder context
  ffi.Pointer<ffi.NativeFunction<_typedefC_59>> destroy;

  /// Encodes frame(s), and outputs encoded packets as they become
  /// available.
  ///
  /// @param       data             Data associated with this encoder
  /// context
  /// @param[in]   frame            Raw audio/video data to encode
  /// @param[out]  packet           Encoder packet output, if any
  /// @param[out]  received_packet  Set to true if a packet was received,
  /// false otherwise
  /// @return                       true if successful, false otherwise.
  ffi.Pointer<ffi.NativeFunction<_typedefC_60>> encode;

  /// Audio encoder only:  Returns the frame size for this encoder
  ffi.Pointer<ffi.NativeFunction<_typedefC_61>> get_frame_size;

  /// Gets the default settings for this encoder
  ///
  /// @param[out]  settings  Data to assign default settings to
  ffi.Pointer<ffi.NativeFunction<_typedefC_62>> get_defaults;

  /// Gets the property information of this encoder
  ///
  /// @return         The properties data
  ffi.Pointer<ffi.NativeFunction<_typedefC_63>> get_properties;

  /// Updates the settings for this encoder (usually used for things like
  /// changing bitrate while active)
  ///
  /// @param  data      Data associated with this encoder context
  /// @param  settings  New settings for this encoder
  /// @return           true if successful, false otherwise
  ffi.Pointer<ffi.NativeFunction<_typedefC_64>> update;

  /// Returns extra data associated with this encoder (usually header)
  ///
  /// @param  data             Data associated with this encoder context
  /// @param[out]  extra_data  Pointer to receive the extra data
  /// @param[out]  size        Pointer to receive the size of the extra
  /// data
  /// @return                  true if extra data available, false
  /// otherwise
  ffi.Pointer<ffi.NativeFunction<_typedefC_65>> get_extra_data;

  /// Gets the SEI data, if any
  ///
  /// @param       data      Data associated with this encoder context
  /// @param[out]  sei_data  Pointer to receive the SEI data
  /// @param[out]  size      Pointer to receive the SEI data size
  /// @return                true if SEI data available, false otherwise
  ffi.Pointer<ffi.NativeFunction<_typedefC_66>> get_sei_data;

  /// Returns desired audio format and sample information
  ///
  /// @param          data  Data associated with this encoder context
  /// @param[in/out]  info  Audio format information
  ffi.Pointer<ffi.NativeFunction<_typedefC_67>> get_audio_info;

  /// Returns desired video format information
  ///
  /// @param          data  Data associated with this encoder context
  /// @param[in/out]  info  Video format information
  ffi.Pointer<ffi.NativeFunction<_typedefC_68>> get_video_info;

  ffi.Pointer<ffi.Void> type_data;

  ffi.Pointer<ffi.NativeFunction<_typedefC_69>> free_type_data;

  @ffi.Uint32()
  int caps;

  /// Gets the default settings for this encoder
  ///
  /// If get_defaults is also defined both will be called, and the first
  /// call will be to get_defaults, then to get_defaults2.
  ///
  /// @param[out]  settings  Data to assign default settings to
  /// @param[in]   typedata  Type Data
  ffi.Pointer<ffi.NativeFunction<_typedefC_70>> get_defaults2;

  /// Gets the property information of this encoder
  ///
  /// @param[in]   data      Pointer from create (or null)
  /// @param[in]   typedata  Type Data
  /// @return                The properties data
  ffi.Pointer<ffi.NativeFunction<_typedefC_71>> get_properties2;

  ffi.Pointer<ffi.NativeFunction<_typedefC_72>> encode_texture;
}

class obs_output_info extends ffi.Struct {
  ffi.Pointer<ffi.Int8> id;

  @ffi.Uint32()
  int flags;

  ffi.Pointer<ffi.NativeFunction<_typedefC_73>> get_name;

  ffi.Pointer<ffi.NativeFunction<_typedefC_74>> create;

  ffi.Pointer<ffi.NativeFunction<_typedefC_75>> destroy;

  ffi.Pointer<ffi.NativeFunction<_typedefC_76>> start;

  ffi.Pointer<ffi.NativeFunction<_typedefC_77>> stop;

  ffi.Pointer<ffi.NativeFunction<_typedefC_78>> raw_video;

  ffi.Pointer<ffi.NativeFunction<_typedefC_79>> raw_audio;

  ffi.Pointer<ffi.NativeFunction<_typedefC_80>> encoded_packet;

  ffi.Pointer<ffi.NativeFunction<_typedefC_81>> update;

  ffi.Pointer<ffi.NativeFunction<_typedefC_82>> get_defaults;

  ffi.Pointer<ffi.NativeFunction<_typedefC_83>> get_properties;

  ffi.Pointer<ffi.NativeFunction<_typedefC_84>> unused1;

  ffi.Pointer<ffi.NativeFunction<_typedefC_85>> get_total_bytes;

  ffi.Pointer<ffi.NativeFunction<_typedefC_86>> get_dropped_frames;

  ffi.Pointer<ffi.Void> type_data;

  ffi.Pointer<ffi.NativeFunction<_typedefC_87>> free_type_data;

  ffi.Pointer<ffi.NativeFunction<_typedefC_88>> get_congestion;

  ffi.Pointer<ffi.NativeFunction<_typedefC_89>> get_connect_time_ms;

  ffi.Pointer<ffi.Int8> encoded_video_codecs;

  ffi.Pointer<ffi.Int8> encoded_audio_codecs;

  ffi.Pointer<ffi.NativeFunction<_typedefC_90>> raw_audio2;
}

class obs_service_info extends ffi.Struct {
  ffi.Pointer<ffi.Int8> id;

  ffi.Pointer<ffi.NativeFunction<_typedefC_91>> get_name;

  ffi.Pointer<ffi.NativeFunction<_typedefC_92>> create;

  ffi.Pointer<ffi.NativeFunction<_typedefC_93>> destroy;

  ffi.Pointer<ffi.NativeFunction<_typedefC_94>> activate;

  ffi.Pointer<ffi.NativeFunction<_typedefC_95>> deactivate;

  ffi.Pointer<ffi.NativeFunction<_typedefC_96>> update;

  ffi.Pointer<ffi.NativeFunction<_typedefC_97>> get_defaults;

  ffi.Pointer<ffi.NativeFunction<_typedefC_98>> get_properties;

  /// Called when getting ready to start up an output, before the encoders
  /// and output are initialized
  ///
  /// @param  data    Internal service data
  /// @param  output  Output context
  /// @return         true to allow the output to start up,
  /// false to prevent output from starting up
  ffi.Pointer<ffi.NativeFunction<_typedefC_99>> initialize;

  ffi.Pointer<ffi.NativeFunction<_typedefC_100>> get_url;

  ffi.Pointer<ffi.NativeFunction<_typedefC_101>> get_key;

  ffi.Pointer<ffi.NativeFunction<_typedefC_102>> get_username;

  ffi.Pointer<ffi.NativeFunction<_typedefC_103>> get_password;

  ffi.Pointer<ffi.NativeFunction<_typedefC_104>> deprecated_1;

  ffi.Pointer<ffi.NativeFunction<_typedefC_105>> apply_encoder_settings;

  ffi.Pointer<ffi.Void> type_data;

  ffi.Pointer<ffi.NativeFunction<_typedefC_106>> free_type_data;

  ffi.Pointer<ffi.NativeFunction<_typedefC_107>> get_output_type;
}

/// @brief Fader types
abstract class obs_fader_type {
  /// @brief A simple cubic fader for controlling audio levels
  ///
  /// This is a very common type of software fader since it yields good
  /// results while being quite performant.
  /// The input value is mapped to mul values with the simple formula x^3.
  static const int OBS_FADER_CUBIC = 0;

  /// @brief A fader compliant to IEC 60-268-18
  ///
  /// This type of fader has several segments with different slopes that
  /// map deflection linearly to dB values. The segments are defined as
  /// in the following table:
  ///
  /// @code
  /// Deflection           | Volume
  /// ------------------------------------------
  /// [ 100   %, 75   % ]  | [   0 dB,   -9 dB ]
  /// [  75   %, 50   % ]  | [  -9 dB,  -20 dB ]
  /// [  50   %, 30   % ]  | [ -20 dB,  -30 dB ]
  /// [  30   %, 15   % ]  | [ -30 dB,  -40 dB ]
  /// [  15   %,  7.5 % ]  | [ -40 dB,  -50 dB ]
  /// [   7.5 %,  2.5 % ]  | [ -50 dB,  -60 dB ]
  /// [   2.5 %,  0   % ]  | [ -60 dB, -inf dB ]
  /// @endcode
  static const int OBS_FADER_IEC = 1;

  /// @brief Logarithmic fader
  static const int OBS_FADER_LOG = 2;
}

/// @brief Peak meter types
abstract class obs_peak_meter_type {
  /// @brief A simple peak meter measuring the maximum of all samples.
  ///
  /// This was a very common type of peak meter used for audio, but
  /// is not very accurate with regards to further audio processing.
  static const int SAMPLE_PEAK_METER = 0;

  /// @brief An accurate peak meter measure the maximum of inter-samples.
  ///
  /// This meter is more computational intensive due to 4x oversampling
  /// to determine the true peak to an accuracy of +/- 0.5 dB.
  static const int TRUE_PEAK_METER = 1;
}

abstract class obs_key {
  static const int OBS_KEY_NONE = 0;
  static const int OBS_KEY_RETURN = 1;
  static const int OBS_KEY_ENTER = 2;
  static const int OBS_KEY_ESCAPE = 3;
  static const int OBS_KEY_TAB = 4;
  static const int OBS_KEY_BACKTAB = 5;
  static const int OBS_KEY_BACKSPACE = 6;
  static const int OBS_KEY_INSERT = 7;
  static const int OBS_KEY_DELETE = 8;
  static const int OBS_KEY_PAUSE = 9;
  static const int OBS_KEY_PRINT = 10;
  static const int OBS_KEY_SYSREQ = 11;
  static const int OBS_KEY_CLEAR = 12;
  static const int OBS_KEY_HOME = 13;
  static const int OBS_KEY_END = 14;
  static const int OBS_KEY_LEFT = 15;
  static const int OBS_KEY_UP = 16;
  static const int OBS_KEY_RIGHT = 17;
  static const int OBS_KEY_DOWN = 18;
  static const int OBS_KEY_PAGEUP = 19;
  static const int OBS_KEY_PAGEDOWN = 20;
  static const int OBS_KEY_SHIFT = 21;
  static const int OBS_KEY_CONTROL = 22;
  static const int OBS_KEY_META = 23;
  static const int OBS_KEY_ALT = 24;
  static const int OBS_KEY_ALTGR = 25;
  static const int OBS_KEY_CAPSLOCK = 26;
  static const int OBS_KEY_NUMLOCK = 27;
  static const int OBS_KEY_SCROLLLOCK = 28;
  static const int OBS_KEY_F1 = 29;
  static const int OBS_KEY_F2 = 30;
  static const int OBS_KEY_F3 = 31;
  static const int OBS_KEY_F4 = 32;
  static const int OBS_KEY_F5 = 33;
  static const int OBS_KEY_F6 = 34;
  static const int OBS_KEY_F7 = 35;
  static const int OBS_KEY_F8 = 36;
  static const int OBS_KEY_F9 = 37;
  static const int OBS_KEY_F10 = 38;
  static const int OBS_KEY_F11 = 39;
  static const int OBS_KEY_F12 = 40;
  static const int OBS_KEY_F13 = 41;
  static const int OBS_KEY_F14 = 42;
  static const int OBS_KEY_F15 = 43;
  static const int OBS_KEY_F16 = 44;
  static const int OBS_KEY_F17 = 45;
  static const int OBS_KEY_F18 = 46;
  static const int OBS_KEY_F19 = 47;
  static const int OBS_KEY_F20 = 48;
  static const int OBS_KEY_F21 = 49;
  static const int OBS_KEY_F22 = 50;
  static const int OBS_KEY_F23 = 51;
  static const int OBS_KEY_F24 = 52;
  static const int OBS_KEY_F25 = 53;
  static const int OBS_KEY_F26 = 54;
  static const int OBS_KEY_F27 = 55;
  static const int OBS_KEY_F28 = 56;
  static const int OBS_KEY_F29 = 57;
  static const int OBS_KEY_F30 = 58;
  static const int OBS_KEY_F31 = 59;
  static const int OBS_KEY_F32 = 60;
  static const int OBS_KEY_F33 = 61;
  static const int OBS_KEY_F34 = 62;
  static const int OBS_KEY_F35 = 63;
  static const int OBS_KEY_MENU = 64;
  static const int OBS_KEY_HYPER_L = 65;
  static const int OBS_KEY_HYPER_R = 66;
  static const int OBS_KEY_HELP = 67;
  static const int OBS_KEY_DIRECTION_L = 68;
  static const int OBS_KEY_DIRECTION_R = 69;
  static const int OBS_KEY_SPACE = 70;
  static const int OBS_KEY_EXCLAM = 71;
  static const int OBS_KEY_QUOTEDBL = 72;
  static const int OBS_KEY_NUMBERSIGN = 73;
  static const int OBS_KEY_DOLLAR = 74;
  static const int OBS_KEY_PERCENT = 75;
  static const int OBS_KEY_AMPERSAND = 76;
  static const int OBS_KEY_APOSTROPHE = 77;
  static const int OBS_KEY_PARENLEFT = 78;
  static const int OBS_KEY_PARENRIGHT = 79;
  static const int OBS_KEY_ASTERISK = 80;
  static const int OBS_KEY_PLUS = 81;
  static const int OBS_KEY_COMMA = 82;
  static const int OBS_KEY_MINUS = 83;
  static const int OBS_KEY_PERIOD = 84;
  static const int OBS_KEY_SLASH = 85;
  static const int OBS_KEY_0 = 86;
  static const int OBS_KEY_1 = 87;
  static const int OBS_KEY_2 = 88;
  static const int OBS_KEY_3 = 89;
  static const int OBS_KEY_4 = 90;
  static const int OBS_KEY_5 = 91;
  static const int OBS_KEY_6 = 92;
  static const int OBS_KEY_7 = 93;
  static const int OBS_KEY_8 = 94;
  static const int OBS_KEY_9 = 95;
  static const int OBS_KEY_NUMEQUAL = 96;
  static const int OBS_KEY_NUMASTERISK = 97;
  static const int OBS_KEY_NUMPLUS = 98;
  static const int OBS_KEY_NUMCOMMA = 99;
  static const int OBS_KEY_NUMMINUS = 100;
  static const int OBS_KEY_NUMPERIOD = 101;
  static const int OBS_KEY_NUMSLASH = 102;
  static const int OBS_KEY_NUM0 = 103;
  static const int OBS_KEY_NUM1 = 104;
  static const int OBS_KEY_NUM2 = 105;
  static const int OBS_KEY_NUM3 = 106;
  static const int OBS_KEY_NUM4 = 107;
  static const int OBS_KEY_NUM5 = 108;
  static const int OBS_KEY_NUM6 = 109;
  static const int OBS_KEY_NUM7 = 110;
  static const int OBS_KEY_NUM8 = 111;
  static const int OBS_KEY_NUM9 = 112;
  static const int OBS_KEY_COLON = 113;
  static const int OBS_KEY_SEMICOLON = 114;
  static const int OBS_KEY_QUOTE = 115;
  static const int OBS_KEY_LESS = 116;
  static const int OBS_KEY_EQUAL = 117;
  static const int OBS_KEY_GREATER = 118;
  static const int OBS_KEY_QUESTION = 119;
  static const int OBS_KEY_AT = 120;
  static const int OBS_KEY_A = 121;
  static const int OBS_KEY_B = 122;
  static const int OBS_KEY_C = 123;
  static const int OBS_KEY_D = 124;
  static const int OBS_KEY_E = 125;
  static const int OBS_KEY_F = 126;
  static const int OBS_KEY_G = 127;
  static const int OBS_KEY_H = 128;
  static const int OBS_KEY_I = 129;
  static const int OBS_KEY_J = 130;
  static const int OBS_KEY_K = 131;
  static const int OBS_KEY_L = 132;
  static const int OBS_KEY_M = 133;
  static const int OBS_KEY_N = 134;
  static const int OBS_KEY_O = 135;
  static const int OBS_KEY_P = 136;
  static const int OBS_KEY_Q = 137;
  static const int OBS_KEY_R = 138;
  static const int OBS_KEY_S = 139;
  static const int OBS_KEY_T = 140;
  static const int OBS_KEY_U = 141;
  static const int OBS_KEY_V = 142;
  static const int OBS_KEY_W = 143;
  static const int OBS_KEY_X = 144;
  static const int OBS_KEY_Y = 145;
  static const int OBS_KEY_Z = 146;
  static const int OBS_KEY_BRACKETLEFT = 147;
  static const int OBS_KEY_BACKSLASH = 148;
  static const int OBS_KEY_BRACKETRIGHT = 149;
  static const int OBS_KEY_ASCIICIRCUM = 150;
  static const int OBS_KEY_UNDERSCORE = 151;
  static const int OBS_KEY_QUOTELEFT = 152;
  static const int OBS_KEY_BRACELEFT = 153;
  static const int OBS_KEY_BAR = 154;
  static const int OBS_KEY_BRACERIGHT = 155;
  static const int OBS_KEY_ASCIITILDE = 156;
  static const int OBS_KEY_NOBREAKSPACE = 157;
  static const int OBS_KEY_EXCLAMDOWN = 158;
  static const int OBS_KEY_CENT = 159;
  static const int OBS_KEY_STERLING = 160;
  static const int OBS_KEY_CURRENCY = 161;
  static const int OBS_KEY_YEN = 162;
  static const int OBS_KEY_BROKENBAR = 163;
  static const int OBS_KEY_SECTION = 164;
  static const int OBS_KEY_DIAERESIS = 165;
  static const int OBS_KEY_COPYRIGHT = 166;
  static const int OBS_KEY_ORDFEMININE = 167;
  static const int OBS_KEY_GUILLEMOTLEFT = 168;
  static const int OBS_KEY_NOTSIGN = 169;
  static const int OBS_KEY_HYPHEN = 170;
  static const int OBS_KEY_REGISTERED = 171;
  static const int OBS_KEY_MACRON = 172;
  static const int OBS_KEY_DEGREE = 173;
  static const int OBS_KEY_PLUSMINUS = 174;
  static const int OBS_KEY_TWOSUPERIOR = 175;
  static const int OBS_KEY_THREESUPERIOR = 176;
  static const int OBS_KEY_ACUTE = 177;
  static const int OBS_KEY_MU = 178;
  static const int OBS_KEY_PARAGRAPH = 179;
  static const int OBS_KEY_PERIODCENTERED = 180;
  static const int OBS_KEY_CEDILLA = 181;
  static const int OBS_KEY_ONESUPERIOR = 182;
  static const int OBS_KEY_MASCULINE = 183;
  static const int OBS_KEY_GUILLEMOTRIGHT = 184;
  static const int OBS_KEY_ONEQUARTER = 185;
  static const int OBS_KEY_ONEHALF = 186;
  static const int OBS_KEY_THREEQUARTERS = 187;
  static const int OBS_KEY_QUESTIONDOWN = 188;
  static const int OBS_KEY_AGRAVE = 189;
  static const int OBS_KEY_AACUTE = 190;
  static const int OBS_KEY_ACIRCUMFLEX = 191;
  static const int OBS_KEY_ATILDE = 192;
  static const int OBS_KEY_ADIAERESIS = 193;
  static const int OBS_KEY_ARING = 194;
  static const int OBS_KEY_AE = 195;
  static const int OBS_KEY_CCEDILLA = 196;
  static const int OBS_KEY_EGRAVE = 197;
  static const int OBS_KEY_EACUTE = 198;
  static const int OBS_KEY_ECIRCUMFLEX = 199;
  static const int OBS_KEY_EDIAERESIS = 200;
  static const int OBS_KEY_IGRAVE = 201;
  static const int OBS_KEY_IACUTE = 202;
  static const int OBS_KEY_ICIRCUMFLEX = 203;
  static const int OBS_KEY_IDIAERESIS = 204;
  static const int OBS_KEY_ETH = 205;
  static const int OBS_KEY_NTILDE = 206;
  static const int OBS_KEY_OGRAVE = 207;
  static const int OBS_KEY_OACUTE = 208;
  static const int OBS_KEY_OCIRCUMFLEX = 209;
  static const int OBS_KEY_OTILDE = 210;
  static const int OBS_KEY_ODIAERESIS = 211;
  static const int OBS_KEY_MULTIPLY = 212;
  static const int OBS_KEY_OOBLIQUE = 213;
  static const int OBS_KEY_UGRAVE = 214;
  static const int OBS_KEY_UACUTE = 215;
  static const int OBS_KEY_UCIRCUMFLEX = 216;
  static const int OBS_KEY_UDIAERESIS = 217;
  static const int OBS_KEY_YACUTE = 218;
  static const int OBS_KEY_THORN = 219;
  static const int OBS_KEY_SSHARP = 220;
  static const int OBS_KEY_DIVISION = 221;
  static const int OBS_KEY_YDIAERESIS = 222;
  static const int OBS_KEY_MULTI_KEY = 223;
  static const int OBS_KEY_CODEINPUT = 224;
  static const int OBS_KEY_SINGLECANDIDATE = 225;
  static const int OBS_KEY_MULTIPLECANDIDATE = 226;
  static const int OBS_KEY_PREVIOUSCANDIDATE = 227;
  static const int OBS_KEY_MODE_SWITCH = 228;
  static const int OBS_KEY_KANJI = 229;
  static const int OBS_KEY_MUHENKAN = 230;
  static const int OBS_KEY_HENKAN = 231;
  static const int OBS_KEY_ROMAJI = 232;
  static const int OBS_KEY_HIRAGANA = 233;
  static const int OBS_KEY_KATAKANA = 234;
  static const int OBS_KEY_HIRAGANA_KATAKANA = 235;
  static const int OBS_KEY_ZENKAKU = 236;
  static const int OBS_KEY_HANKAKU = 237;
  static const int OBS_KEY_ZENKAKU_HANKAKU = 238;
  static const int OBS_KEY_TOUROKU = 239;
  static const int OBS_KEY_MASSYO = 240;
  static const int OBS_KEY_KANA_LOCK = 241;
  static const int OBS_KEY_KANA_SHIFT = 242;
  static const int OBS_KEY_EISU_SHIFT = 243;
  static const int OBS_KEY_EISU_TOGGLE = 244;
  static const int OBS_KEY_HANGUL = 245;
  static const int OBS_KEY_HANGUL_START = 246;
  static const int OBS_KEY_HANGUL_END = 247;
  static const int OBS_KEY_HANGUL_HANJA = 248;
  static const int OBS_KEY_HANGUL_JAMO = 249;
  static const int OBS_KEY_HANGUL_ROMAJA = 250;
  static const int OBS_KEY_HANGUL_JEONJA = 251;
  static const int OBS_KEY_HANGUL_BANJA = 252;
  static const int OBS_KEY_HANGUL_PREHANJA = 253;
  static const int OBS_KEY_HANGUL_POSTHANJA = 254;
  static const int OBS_KEY_HANGUL_SPECIAL = 255;
  static const int OBS_KEY_DEAD_GRAVE = 256;
  static const int OBS_KEY_DEAD_ACUTE = 257;
  static const int OBS_KEY_DEAD_CIRCUMFLEX = 258;
  static const int OBS_KEY_DEAD_TILDE = 259;
  static const int OBS_KEY_DEAD_MACRON = 260;
  static const int OBS_KEY_DEAD_BREVE = 261;
  static const int OBS_KEY_DEAD_ABOVEDOT = 262;
  static const int OBS_KEY_DEAD_DIAERESIS = 263;
  static const int OBS_KEY_DEAD_ABOVERING = 264;
  static const int OBS_KEY_DEAD_DOUBLEACUTE = 265;
  static const int OBS_KEY_DEAD_CARON = 266;
  static const int OBS_KEY_DEAD_CEDILLA = 267;
  static const int OBS_KEY_DEAD_OGONEK = 268;
  static const int OBS_KEY_DEAD_IOTA = 269;
  static const int OBS_KEY_DEAD_VOICED_SOUND = 270;
  static const int OBS_KEY_DEAD_SEMIVOICED_SOUND = 271;
  static const int OBS_KEY_DEAD_BELOWDOT = 272;
  static const int OBS_KEY_DEAD_HOOK = 273;
  static const int OBS_KEY_DEAD_HORN = 274;
  static const int OBS_KEY_BACK = 275;
  static const int OBS_KEY_FORWARD = 276;
  static const int OBS_KEY_STOP = 277;
  static const int OBS_KEY_REFRESH = 278;
  static const int OBS_KEY_VOLUMEDOWN = 279;
  static const int OBS_KEY_VOLUMEMUTE = 280;
  static const int OBS_KEY_VOLUMEUP = 281;
  static const int OBS_KEY_BASSBOOST = 282;
  static const int OBS_KEY_BASSUP = 283;
  static const int OBS_KEY_BASSDOWN = 284;
  static const int OBS_KEY_TREBLEUP = 285;
  static const int OBS_KEY_TREBLEDOWN = 286;
  static const int OBS_KEY_MEDIAPLAY = 287;
  static const int OBS_KEY_MEDIASTOP = 288;
  static const int OBS_KEY_MEDIAPREVIOUS = 289;
  static const int OBS_KEY_MEDIANEXT = 290;
  static const int OBS_KEY_MEDIARECORD = 291;
  static const int OBS_KEY_MEDIAPAUSE = 292;
  static const int OBS_KEY_MEDIATOGGLEPLAYPAUSE = 293;
  static const int OBS_KEY_HOMEPAGE = 294;
  static const int OBS_KEY_FAVORITES = 295;
  static const int OBS_KEY_SEARCH = 296;
  static const int OBS_KEY_STANDBY = 297;
  static const int OBS_KEY_OPENURL = 298;
  static const int OBS_KEY_LAUNCHMAIL = 299;
  static const int OBS_KEY_LAUNCHMEDIA = 300;
  static const int OBS_KEY_LAUNCH0 = 301;
  static const int OBS_KEY_LAUNCH1 = 302;
  static const int OBS_KEY_LAUNCH2 = 303;
  static const int OBS_KEY_LAUNCH3 = 304;
  static const int OBS_KEY_LAUNCH4 = 305;
  static const int OBS_KEY_LAUNCH5 = 306;
  static const int OBS_KEY_LAUNCH6 = 307;
  static const int OBS_KEY_LAUNCH7 = 308;
  static const int OBS_KEY_LAUNCH8 = 309;
  static const int OBS_KEY_LAUNCH9 = 310;
  static const int OBS_KEY_LAUNCHA = 311;
  static const int OBS_KEY_LAUNCHB = 312;
  static const int OBS_KEY_LAUNCHC = 313;
  static const int OBS_KEY_LAUNCHD = 314;
  static const int OBS_KEY_LAUNCHE = 315;
  static const int OBS_KEY_LAUNCHF = 316;
  static const int OBS_KEY_LAUNCHG = 317;
  static const int OBS_KEY_LAUNCHH = 318;
  static const int OBS_KEY_MONBRIGHTNESSUP = 319;
  static const int OBS_KEY_MONBRIGHTNESSDOWN = 320;
  static const int OBS_KEY_KEYBOARDLIGHTONOFF = 321;
  static const int OBS_KEY_KEYBOARDBRIGHTNESSUP = 322;
  static const int OBS_KEY_KEYBOARDBRIGHTNESSDOWN = 323;
  static const int OBS_KEY_POWEROFF = 324;
  static const int OBS_KEY_WAKEUP = 325;
  static const int OBS_KEY_EJECT = 326;
  static const int OBS_KEY_SCREENSAVER = 327;
  static const int OBS_KEY_WWW = 328;
  static const int OBS_KEY_MEMO = 329;
  static const int OBS_KEY_LIGHTBULB = 330;
  static const int OBS_KEY_SHOP = 331;
  static const int OBS_KEY_HISTORY = 332;
  static const int OBS_KEY_ADDFAVORITE = 333;
  static const int OBS_KEY_HOTLINKS = 334;
  static const int OBS_KEY_BRIGHTNESSADJUST = 335;
  static const int OBS_KEY_FINANCE = 336;
  static const int OBS_KEY_COMMUNITY = 337;
  static const int OBS_KEY_AUDIOREWIND = 338;
  static const int OBS_KEY_BACKFORWARD = 339;
  static const int OBS_KEY_APPLICATIONLEFT = 340;
  static const int OBS_KEY_APPLICATIONRIGHT = 341;
  static const int OBS_KEY_BOOK = 342;
  static const int OBS_KEY_CD = 343;
  static const int OBS_KEY_CALCULATOR = 344;
  static const int OBS_KEY_TODOLIST = 345;
  static const int OBS_KEY_CLEARGRAB = 346;
  static const int OBS_KEY_CLOSE = 347;
  static const int OBS_KEY_COPY = 348;
  static const int OBS_KEY_CUT = 349;
  static const int OBS_KEY_DISPLAY = 350;
  static const int OBS_KEY_DOS = 351;
  static const int OBS_KEY_DOCUMENTS = 352;
  static const int OBS_KEY_EXCEL = 353;
  static const int OBS_KEY_EXPLORER = 354;
  static const int OBS_KEY_GAME = 355;
  static const int OBS_KEY_GO = 356;
  static const int OBS_KEY_ITOUCH = 357;
  static const int OBS_KEY_LOGOFF = 358;
  static const int OBS_KEY_MARKET = 359;
  static const int OBS_KEY_MEETING = 360;
  static const int OBS_KEY_MENUKB = 361;
  static const int OBS_KEY_MENUPB = 362;
  static const int OBS_KEY_MYSITES = 363;
  static const int OBS_KEY_NEWS = 364;
  static const int OBS_KEY_OFFICEHOME = 365;
  static const int OBS_KEY_OPTION = 366;
  static const int OBS_KEY_PASTE = 367;
  static const int OBS_KEY_PHONE = 368;
  static const int OBS_KEY_CALENDAR = 369;
  static const int OBS_KEY_REPLY = 370;
  static const int OBS_KEY_RELOAD = 371;
  static const int OBS_KEY_ROTATEWINDOWS = 372;
  static const int OBS_KEY_ROTATIONPB = 373;
  static const int OBS_KEY_ROTATIONKB = 374;
  static const int OBS_KEY_SAVE = 375;
  static const int OBS_KEY_SEND = 376;
  static const int OBS_KEY_SPELL = 377;
  static const int OBS_KEY_SPLITSCREEN = 378;
  static const int OBS_KEY_SUPPORT = 379;
  static const int OBS_KEY_TASKPANE = 380;
  static const int OBS_KEY_TERMINAL = 381;
  static const int OBS_KEY_TOOLS = 382;
  static const int OBS_KEY_TRAVEL = 383;
  static const int OBS_KEY_VIDEO = 384;
  static const int OBS_KEY_WORD = 385;
  static const int OBS_KEY_XFER = 386;
  static const int OBS_KEY_ZOOMIN = 387;
  static const int OBS_KEY_ZOOMOUT = 388;
  static const int OBS_KEY_AWAY = 389;
  static const int OBS_KEY_MESSENGER = 390;
  static const int OBS_KEY_WEBCAM = 391;
  static const int OBS_KEY_MAILFORWARD = 392;
  static const int OBS_KEY_PICTURES = 393;
  static const int OBS_KEY_MUSIC = 394;
  static const int OBS_KEY_BATTERY = 395;
  static const int OBS_KEY_BLUETOOTH = 396;
  static const int OBS_KEY_WLAN = 397;
  static const int OBS_KEY_UWB = 398;
  static const int OBS_KEY_AUDIOFORWARD = 399;
  static const int OBS_KEY_AUDIOREPEAT = 400;
  static const int OBS_KEY_AUDIORANDOMPLAY = 401;
  static const int OBS_KEY_SUBTITLE = 402;
  static const int OBS_KEY_AUDIOCYCLETRACK = 403;
  static const int OBS_KEY_TIME = 404;
  static const int OBS_KEY_HIBERNATE = 405;
  static const int OBS_KEY_VIEW = 406;
  static const int OBS_KEY_TOPMENU = 407;
  static const int OBS_KEY_POWERDOWN = 408;
  static const int OBS_KEY_SUSPEND = 409;
  static const int OBS_KEY_CONTRASTADJUST = 410;
  static const int OBS_KEY_MEDIALAST = 411;
  static const int OBS_KEY_CALL = 412;
  static const int OBS_KEY_CAMERA = 413;
  static const int OBS_KEY_CAMERAFOCUS = 414;
  static const int OBS_KEY_CONTEXT1 = 415;
  static const int OBS_KEY_CONTEXT2 = 416;
  static const int OBS_KEY_CONTEXT3 = 417;
  static const int OBS_KEY_CONTEXT4 = 418;
  static const int OBS_KEY_FLIP = 419;
  static const int OBS_KEY_HANGUP = 420;
  static const int OBS_KEY_NO = 421;
  static const int OBS_KEY_SELECT = 422;
  static const int OBS_KEY_YES = 423;
  static const int OBS_KEY_TOGGLECALLHANGUP = 424;
  static const int OBS_KEY_VOICEDIAL = 425;
  static const int OBS_KEY_LASTNUMBERREDIAL = 426;
  static const int OBS_KEY_EXECUTE = 427;
  static const int OBS_KEY_PRINTER = 428;
  static const int OBS_KEY_PLAY = 429;
  static const int OBS_KEY_SLEEP = 430;
  static const int OBS_KEY_ZOOM = 431;
  static const int OBS_KEY_CANCEL = 432;
  static const int OBS_KEY_MOUSE1 = 433;
  static const int OBS_KEY_MOUSE2 = 434;
  static const int OBS_KEY_MOUSE3 = 435;
  static const int OBS_KEY_MOUSE4 = 436;
  static const int OBS_KEY_MOUSE5 = 437;
  static const int OBS_KEY_MOUSE6 = 438;
  static const int OBS_KEY_MOUSE7 = 439;
  static const int OBS_KEY_MOUSE8 = 440;
  static const int OBS_KEY_MOUSE9 = 441;
  static const int OBS_KEY_MOUSE10 = 442;
  static const int OBS_KEY_MOUSE11 = 443;
  static const int OBS_KEY_MOUSE12 = 444;
  static const int OBS_KEY_MOUSE13 = 445;
  static const int OBS_KEY_MOUSE14 = 446;
  static const int OBS_KEY_MOUSE15 = 447;
  static const int OBS_KEY_MOUSE16 = 448;
  static const int OBS_KEY_MOUSE17 = 449;
  static const int OBS_KEY_MOUSE18 = 450;
  static const int OBS_KEY_MOUSE19 = 451;
  static const int OBS_KEY_MOUSE20 = 452;
  static const int OBS_KEY_MOUSE21 = 453;
  static const int OBS_KEY_MOUSE22 = 454;
  static const int OBS_KEY_MOUSE23 = 455;
  static const int OBS_KEY_MOUSE24 = 456;
  static const int OBS_KEY_MOUSE25 = 457;
  static const int OBS_KEY_MOUSE26 = 458;
  static const int OBS_KEY_MOUSE27 = 459;
  static const int OBS_KEY_MOUSE28 = 460;
  static const int OBS_KEY_MOUSE29 = 461;
  static const int OBS_KEY_BACKSLASH_RT102 = 462;
  static const int OBS_KEY_OPEN = 463;
  static const int OBS_KEY_FIND = 464;
  static const int OBS_KEY_REDO = 465;
  static const int OBS_KEY_UNDO = 466;
  static const int OBS_KEY_FRONT = 467;
  static const int OBS_KEY_PROPS = 468;
  static const int OBS_KEY_VK_CANCEL = 469;
  static const int OBS_KEY_0x07 = 470;
  static const int OBS_KEY_0x0A = 471;
  static const int OBS_KEY_0x0B = 472;
  static const int OBS_KEY_0x0E = 473;
  static const int OBS_KEY_0x0F = 474;
  static const int OBS_KEY_0x16 = 475;
  static const int OBS_KEY_VK_JUNJA = 476;
  static const int OBS_KEY_VK_FINAL = 477;
  static const int OBS_KEY_0x1A = 478;
  static const int OBS_KEY_VK_ACCEPT = 479;
  static const int OBS_KEY_VK_MODECHANGE = 480;
  static const int OBS_KEY_VK_SELECT = 481;
  static const int OBS_KEY_VK_PRINT = 482;
  static const int OBS_KEY_VK_EXECUTE = 483;
  static const int OBS_KEY_VK_HELP = 484;
  static const int OBS_KEY_0x30 = 485;
  static const int OBS_KEY_0x31 = 486;
  static const int OBS_KEY_0x32 = 487;
  static const int OBS_KEY_0x33 = 488;
  static const int OBS_KEY_0x34 = 489;
  static const int OBS_KEY_0x35 = 490;
  static const int OBS_KEY_0x36 = 491;
  static const int OBS_KEY_0x37 = 492;
  static const int OBS_KEY_0x38 = 493;
  static const int OBS_KEY_0x39 = 494;
  static const int OBS_KEY_0x3A = 495;
  static const int OBS_KEY_0x3B = 496;
  static const int OBS_KEY_0x3C = 497;
  static const int OBS_KEY_0x3D = 498;
  static const int OBS_KEY_0x3E = 499;
  static const int OBS_KEY_0x3F = 500;
  static const int OBS_KEY_0x40 = 501;
  static const int OBS_KEY_0x41 = 502;
  static const int OBS_KEY_0x42 = 503;
  static const int OBS_KEY_0x43 = 504;
  static const int OBS_KEY_0x44 = 505;
  static const int OBS_KEY_0x45 = 506;
  static const int OBS_KEY_0x46 = 507;
  static const int OBS_KEY_0x47 = 508;
  static const int OBS_KEY_0x48 = 509;
  static const int OBS_KEY_0x49 = 510;
  static const int OBS_KEY_0x4A = 511;
  static const int OBS_KEY_0x4B = 512;
  static const int OBS_KEY_0x4C = 513;
  static const int OBS_KEY_0x4D = 514;
  static const int OBS_KEY_0x4E = 515;
  static const int OBS_KEY_0x4F = 516;
  static const int OBS_KEY_0x50 = 517;
  static const int OBS_KEY_0x51 = 518;
  static const int OBS_KEY_0x52 = 519;
  static const int OBS_KEY_0x53 = 520;
  static const int OBS_KEY_0x54 = 521;
  static const int OBS_KEY_0x55 = 522;
  static const int OBS_KEY_0x56 = 523;
  static const int OBS_KEY_0x57 = 524;
  static const int OBS_KEY_0x58 = 525;
  static const int OBS_KEY_0x59 = 526;
  static const int OBS_KEY_0x5A = 527;
  static const int OBS_KEY_VK_LWIN = 528;
  static const int OBS_KEY_VK_RWIN = 529;
  static const int OBS_KEY_VK_APPS = 530;
  static const int OBS_KEY_0x5E = 531;
  static const int OBS_KEY_VK_SLEEP = 532;
  static const int OBS_KEY_VK_SEPARATOR = 533;
  static const int OBS_KEY_0x88 = 534;
  static const int OBS_KEY_0x89 = 535;
  static const int OBS_KEY_0x8A = 536;
  static const int OBS_KEY_0x8B = 537;
  static const int OBS_KEY_0x8C = 538;
  static const int OBS_KEY_0x8D = 539;
  static const int OBS_KEY_0x8E = 540;
  static const int OBS_KEY_0x8F = 541;
  static const int OBS_KEY_VK_OEM_FJ_JISHO = 542;
  static const int OBS_KEY_VK_OEM_FJ_LOYA = 543;
  static const int OBS_KEY_VK_OEM_FJ_ROYA = 544;
  static const int OBS_KEY_0x97 = 545;
  static const int OBS_KEY_0x98 = 546;
  static const int OBS_KEY_0x99 = 547;
  static const int OBS_KEY_0x9A = 548;
  static const int OBS_KEY_0x9B = 549;
  static const int OBS_KEY_0x9C = 550;
  static const int OBS_KEY_0x9D = 551;
  static const int OBS_KEY_0x9E = 552;
  static const int OBS_KEY_0x9F = 553;
  static const int OBS_KEY_VK_LSHIFT = 554;
  static const int OBS_KEY_VK_RSHIFT = 555;
  static const int OBS_KEY_VK_LCONTROL = 556;
  static const int OBS_KEY_VK_RCONTROL = 557;
  static const int OBS_KEY_VK_LMENU = 558;
  static const int OBS_KEY_VK_RMENU = 559;
  static const int OBS_KEY_VK_BROWSER_BACK = 560;
  static const int OBS_KEY_VK_BROWSER_FORWARD = 561;
  static const int OBS_KEY_VK_BROWSER_REFRESH = 562;
  static const int OBS_KEY_VK_BROWSER_STOP = 563;
  static const int OBS_KEY_VK_BROWSER_SEARCH = 564;
  static const int OBS_KEY_VK_BROWSER_FAVORITES = 565;
  static const int OBS_KEY_VK_BROWSER_HOME = 566;
  static const int OBS_KEY_VK_VOLUME_MUTE = 567;
  static const int OBS_KEY_VK_VOLUME_DOWN = 568;
  static const int OBS_KEY_VK_VOLUME_UP = 569;
  static const int OBS_KEY_VK_MEDIA_NEXT_TRACK = 570;
  static const int OBS_KEY_VK_MEDIA_PREV_TRACK = 571;
  static const int OBS_KEY_VK_MEDIA_STOP = 572;
  static const int OBS_KEY_VK_MEDIA_PLAY_PAUSE = 573;
  static const int OBS_KEY_VK_LAUNCH_MAIL = 574;
  static const int OBS_KEY_VK_LAUNCH_MEDIA_SELECT = 575;
  static const int OBS_KEY_VK_LAUNCH_APP1 = 576;
  static const int OBS_KEY_VK_LAUNCH_APP2 = 577;
  static const int OBS_KEY_0xB8 = 578;
  static const int OBS_KEY_0xB9 = 579;
  static const int OBS_KEY_0xC1 = 580;
  static const int OBS_KEY_0xC2 = 581;
  static const int OBS_KEY_0xC3 = 582;
  static const int OBS_KEY_0xC4 = 583;
  static const int OBS_KEY_0xC5 = 584;
  static const int OBS_KEY_0xC6 = 585;
  static const int OBS_KEY_0xC7 = 586;
  static const int OBS_KEY_0xC8 = 587;
  static const int OBS_KEY_0xC9 = 588;
  static const int OBS_KEY_0xCA = 589;
  static const int OBS_KEY_0xCB = 590;
  static const int OBS_KEY_0xCC = 591;
  static const int OBS_KEY_0xCD = 592;
  static const int OBS_KEY_0xCE = 593;
  static const int OBS_KEY_0xCF = 594;
  static const int OBS_KEY_0xD0 = 595;
  static const int OBS_KEY_0xD1 = 596;
  static const int OBS_KEY_0xD2 = 597;
  static const int OBS_KEY_0xD3 = 598;
  static const int OBS_KEY_0xD4 = 599;
  static const int OBS_KEY_0xD5 = 600;
  static const int OBS_KEY_0xD6 = 601;
  static const int OBS_KEY_0xD7 = 602;
  static const int OBS_KEY_0xD8 = 603;
  static const int OBS_KEY_0xD9 = 604;
  static const int OBS_KEY_0xDA = 605;
  static const int OBS_KEY_VK_OEM_8 = 606;
  static const int OBS_KEY_0xE0 = 607;
  static const int OBS_KEY_VK_OEM_AX = 608;
  static const int OBS_KEY_VK_ICO_HELP = 609;
  static const int OBS_KEY_VK_ICO_00 = 610;
  static const int OBS_KEY_VK_PROCESSKEY = 611;
  static const int OBS_KEY_VK_ICO_CLEAR = 612;
  static const int OBS_KEY_VK_PACKET = 613;
  static const int OBS_KEY_0xE8 = 614;
  static const int OBS_KEY_VK_OEM_RESET = 615;
  static const int OBS_KEY_VK_OEM_JUMP = 616;
  static const int OBS_KEY_VK_OEM_PA1 = 617;
  static const int OBS_KEY_VK_OEM_PA2 = 618;
  static const int OBS_KEY_VK_OEM_PA3 = 619;
  static const int OBS_KEY_VK_OEM_WSCTRL = 620;
  static const int OBS_KEY_VK_OEM_CUSEL = 621;
  static const int OBS_KEY_VK_OEM_ATTN = 622;
  static const int OBS_KEY_VK_OEM_FINISH = 623;
  static const int OBS_KEY_VK_OEM_COPY = 624;
  static const int OBS_KEY_VK_OEM_AUTO = 625;
  static const int OBS_KEY_VK_OEM_ENLW = 626;
  static const int OBS_KEY_VK_ATTN = 627;
  static const int OBS_KEY_VK_CRSEL = 628;
  static const int OBS_KEY_VK_EXSEL = 629;
  static const int OBS_KEY_VK_EREOF = 630;
  static const int OBS_KEY_VK_PLAY = 631;
  static const int OBS_KEY_VK_ZOOM = 632;
  static const int OBS_KEY_VK_NONAME = 633;
  static const int OBS_KEY_VK_PA1 = 634;
  static const int OBS_KEY_VK_OEM_CLEAR = 635;
  static const int OBS_KEY_LAST_VALUE = 636;
}

class obs_key_combination extends ffi.Struct {
  @ffi.Uint32()
  int modifiers;

  @ffi.Int32()
  int key;
}

class obs_hotkey extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_hotkey_binding extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

abstract class obs_hotkey_registerer_type {
  static const int OBS_HOTKEY_REGISTERER_FRONTEND = 0;
  static const int OBS_HOTKEY_REGISTERER_SOURCE = 1;
  static const int OBS_HOTKEY_REGISTERER_OUTPUT = 2;
  static const int OBS_HOTKEY_REGISTERER_ENCODER = 3;
  static const int OBS_HOTKEY_REGISTERER_SERVICE = 4;
}

class obs_hotkeys_translations extends ffi.Struct {
  ffi.Pointer<ffi.Int8> insert;

  ffi.Pointer<ffi.Int8> del;

  ffi.Pointer<ffi.Int8> home;

  ffi.Pointer<ffi.Int8> end;

  ffi.Pointer<ffi.Int8> page_up;

  ffi.Pointer<ffi.Int8> page_down;

  ffi.Pointer<ffi.Int8> num_lock;

  ffi.Pointer<ffi.Int8> scroll_lock;

  ffi.Pointer<ffi.Int8> caps_lock;

  ffi.Pointer<ffi.Int8> backspace;

  ffi.Pointer<ffi.Int8> tab;

  ffi.Pointer<ffi.Int8> print;

  ffi.Pointer<ffi.Int8> pause;

  ffi.Pointer<ffi.Int8> left;

  ffi.Pointer<ffi.Int8> right;

  ffi.Pointer<ffi.Int8> up;

  ffi.Pointer<ffi.Int8> down;

  ffi.Pointer<ffi.Int8> shift;

  ffi.Pointer<ffi.Int8> alt;

  ffi.Pointer<ffi.Int8> control;

  ffi.Pointer<ffi.Int8> meta;

  ffi.Pointer<ffi.Int8> menu;

  ffi.Pointer<ffi.Int8> space;

  ffi.Pointer<ffi.Int8> numpad_num;

  ffi.Pointer<ffi.Int8> numpad_divide;

  ffi.Pointer<ffi.Int8> numpad_multiply;

  ffi.Pointer<ffi.Int8> numpad_minus;

  ffi.Pointer<ffi.Int8> numpad_plus;

  ffi.Pointer<ffi.Int8> numpad_decimal;

  ffi.Pointer<ffi.Int8> apple_keypad_num;

  ffi.Pointer<ffi.Int8> apple_keypad_divide;

  ffi.Pointer<ffi.Int8> apple_keypad_multiply;

  ffi.Pointer<ffi.Int8> apple_keypad_minus;

  ffi.Pointer<ffi.Int8> apple_keypad_plus;

  ffi.Pointer<ffi.Int8> apple_keypad_decimal;

  ffi.Pointer<ffi.Int8> apple_keypad_equal;

  ffi.Pointer<ffi.Int8> mouse_num;

  ffi.Pointer<ffi.Int8> escape;
}

class dstr extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

/// Used for changing the order of items (for example, filters in a source,
/// or items in a scene)
abstract class obs_order_movement {
  static const int OBS_ORDER_MOVE_UP = 0;
  static const int OBS_ORDER_MOVE_DOWN = 1;
  static const int OBS_ORDER_MOVE_TOP = 2;
  static const int OBS_ORDER_MOVE_BOTTOM = 3;
}

/// Used with obs_source_process_filter to specify whether the filter should
/// render the source directly with the specified effect, or whether it should
/// render it to a texture
abstract class obs_allow_direct_render {
  static const int OBS_NO_DIRECT_RENDERING = 0;
  static const int OBS_ALLOW_DIRECT_RENDERING = 1;
}

abstract class obs_scale_type {
  static const int OBS_SCALE_DISABLE = 0;
  static const int OBS_SCALE_POINT = 1;
  static const int OBS_SCALE_BICUBIC = 2;
  static const int OBS_SCALE_BILINEAR = 3;
  static const int OBS_SCALE_LANCZOS = 4;
  static const int OBS_SCALE_AREA = 5;
}

/// Used with scene items to indicate the type of bounds to use for scene items.
/// Mostly determines how the image will be scaled within those bounds, or
/// whether to use bounds at all.
abstract class obs_bounds_type {
  /// < no bounds
  static const int OBS_BOUNDS_NONE = 0;

  /// < stretch (ignores base scale)
  static const int OBS_BOUNDS_STRETCH = 1;

  /// < scales to inner rectangle
  static const int OBS_BOUNDS_SCALE_INNER = 2;

  /// < scales to outer rectangle
  static const int OBS_BOUNDS_SCALE_OUTER = 3;

  /// < scales to the width
  static const int OBS_BOUNDS_SCALE_TO_WIDTH = 4;

  /// < scales to the height
  static const int OBS_BOUNDS_SCALE_TO_HEIGHT = 5;

  /// < no scaling, maximum size only
  static const int OBS_BOUNDS_MAX_ONLY = 6;
}

class obs_transform_info extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

/// Video initialization structure
class obs_video_info extends ffi.Struct {
  /// Graphics module to use (usually "libobs-opengl" or "libobs-d3d11")
  ffi.Pointer<ffi.Int8> graphics_module;

  /// < Output FPS numerator
  @ffi.Uint32()
  int fps_num;

  /// < Output FPS denominator
  @ffi.Uint32()
  int fps_den;

  /// < Base compositing width
  @ffi.Uint32()
  int base_width;

  /// < Base compositing height
  @ffi.Uint32()
  int base_height;

  /// < Output width
  @ffi.Uint32()
  int output_width;

  /// < Output height
  @ffi.Uint32()
  int output_height;

  /// < Output format
  @ffi.Int32()
  int output_format;

  /// Video adapter index to use (NOTE: avoid for optimus laptops)
  @ffi.Uint32()
  int adapter;

  /// Use shaders to convert to different color formats
  @ffi.Uint8()
  int gpu_conversion;

  /// < YUV type (if YUV)
  @ffi.Int32()
  int colorspace;

  /// < YUV range (if YUV)
  @ffi.Int32()
  int range;

  /// < How to scale if scaling
  @ffi.Int32()
  int scale_type;
}

/// Audio initialization structure
class obs_audio_info extends ffi.Struct {
  @ffi.Uint32()
  int samples_per_sec;

  @ffi.Int32()
  int speakers;
}

/// Source audio output structure.  Used with obs_source_output_audio to output
/// source audio.  Audio is automatically resampled and remixed as necessary.
class obs_source_audio extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

class obs_source_frame2 extends ffi.Struct {
  @ffi.Int64()
  int incomplete_struct;
}

/// Access to the argc/argv used to start OBS. What you see is what you get.
class obs_cmdline_args extends ffi.Struct {
  @ffi.Int32()
  int argc;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv;
}

class obs_module_info extends ffi.Struct {
  ffi.Pointer<ffi.Int8> bin_path;

  ffi.Pointer<ffi.Int8> data_path;
}

abstract class obs_base_effect {
  /// < RGB/YUV
  static const int OBS_EFFECT_DEFAULT = 0;

  /// < RGB/YUV (using texture_rect)
  static const int OBS_EFFECT_DEFAULT_RECT = 1;

  /// < RGB/YUV (alpha set to 1.0)
  static const int OBS_EFFECT_OPAQUE = 2;

  /// < RGB/YUV (solid color only)
  static const int OBS_EFFECT_SOLID = 3;

  /// < Bicubic downscale
  static const int OBS_EFFECT_BICUBIC = 4;

  /// < Lanczos downscale
  static const int OBS_EFFECT_LANCZOS = 5;

  /// < Bilinear low resolution downscale
  static const int OBS_EFFECT_BILINEAR_LOWRES = 6;

  /// < Premultiplied alpha
  static const int OBS_EFFECT_PREMULTIPLIED_ALPHA = 7;

  /// < RGB/YUV (repeating)
  static const int OBS_EFFECT_REPEAT = 8;

  /// < Area rescale
  static const int OBS_EFFECT_AREA = 9;
}

abstract class obs_obj_type {
  static const int OBS_OBJ_TYPE_INVALID = 0;
  static const int OBS_OBJ_TYPE_SOURCE = 1;
  static const int OBS_OBJ_TYPE_OUTPUT = 2;
  static const int OBS_OBJ_TYPE_ENCODER = 3;
  static const int OBS_OBJ_TYPE_SERVICE = 4;
}

abstract class obs_task_type {
  static const int OBS_TASK_UI = 0;
  static const int OBS_TASK_GRAPHICS = 1;
}

abstract class obs_deinterlace_mode {
  static const int OBS_DEINTERLACE_MODE_DISABLE = 0;
  static const int OBS_DEINTERLACE_MODE_DISCARD = 1;
  static const int OBS_DEINTERLACE_MODE_RETRO = 2;
  static const int OBS_DEINTERLACE_MODE_BLEND = 3;
  static const int OBS_DEINTERLACE_MODE_BLEND_2X = 4;
  static const int OBS_DEINTERLACE_MODE_LINEAR = 5;
  static const int OBS_DEINTERLACE_MODE_LINEAR_2X = 6;
  static const int OBS_DEINTERLACE_MODE_YADIF = 7;
  static const int OBS_DEINTERLACE_MODE_YADIF_2X = 8;
}

abstract class obs_deinterlace_field_order {
  static const int OBS_DEINTERLACE_FIELD_ORDER_TOP = 0;
  static const int OBS_DEINTERLACE_FIELD_ORDER_BOTTOM = 1;
}

abstract class obs_monitoring_type {
  static const int OBS_MONITORING_TYPE_NONE = 0;
  static const int OBS_MONITORING_TYPE_MONITOR_ONLY = 1;
  static const int OBS_MONITORING_TYPE_MONITOR_AND_OUTPUT = 2;
}

abstract class obs_transition_target {
  static const int OBS_TRANSITION_SOURCE_A = 0;
  static const int OBS_TRANSITION_SOURCE_B = 1;
}

abstract class obs_transition_mode {
  static const int OBS_TRANSITION_MODE_AUTO = 0;
  static const int OBS_TRANSITION_MODE_MANUAL = 1;
}

abstract class obs_transition_scale_type {
  static const int OBS_TRANSITION_SCALE_MAX_ONLY = 0;
  static const int OBS_TRANSITION_SCALE_ASPECT = 1;
  static const int OBS_TRANSITION_SCALE_STRETCH = 2;
}

abstract class obs_scene_duplicate_type {
  /// < Source refs only
  static const int OBS_SCENE_DUP_REFS = 0;

  /// < Fully duplicate
  static const int OBS_SCENE_DUP_COPY = 1;

  /// < Source refs only (as private)
  static const int OBS_SCENE_DUP_PRIVATE_REFS = 2;

  /// < Fully duplicate (as private)
  static const int OBS_SCENE_DUP_PRIVATE_COPY = 3;
}

class obs_sceneitem_order_info extends ffi.Struct {
  ffi.Pointer<obs_scene_item> group;

  ffi.Pointer<obs_scene_item> item;
}

class obs_sceneitem_crop extends ffi.Struct {
  @ffi.Int32()
  int left;

  @ffi.Int32()
  int top;

  @ffi.Int32()
  int right;

  @ffi.Int32()
  int bottom;
}

const int GS_MAX_TEXTURES = 8;

const int GS_BUILD_MIPMAPS = 1;

const int GS_DYNAMIC = 2;

const int GS_RENDER_TARGET = 4;

const int GS_GL_DUMMYTEX = 8;

const int GS_DUP_BUFFER = 16;

const int GS_SHARED_TEX = 32;

const int GS_SHARED_KM_TEX = 64;

const int GS_SUCCESS = 0;

const int GS_ERROR_FAIL = -1;

const int GS_ERROR_MODULE_NOT_FOUND = -2;

const int GS_ERROR_NOT_SUPPORTED = -3;

const int GS_DEVICE_OPENGL = 1;

const int GS_DEVICE_DIRECT3D_11 = 2;

const int GS_FLIP_U = 1;

const int GS_FLIP_V = 2;

const int GS_CLEAR_COLOR = 1;

const int GS_CLEAR_DEPTH = 2;

const int GS_CLEAR_STENCIL = 4;

const int GS_USE_DEBUG_MARKERS = 0;

const int MAX_AUDIO_MIXES = 6;

const int MAX_AUDIO_CHANNELS = 8;

const int AUDIO_OUTPUT_FRAMES = 1024;

const int TOTAL_AUDIO_SIZE = 196608;

const int AUDIO_OUTPUT_SUCCESS = 0;

const int AUDIO_OUTPUT_INVALIDPARAM = -1;

const int AUDIO_OUTPUT_FAIL = -2;

const int VIDEO_OUTPUT_SUCCESS = 0;

const int VIDEO_OUTPUT_INVALIDPARAM = -1;

const int VIDEO_OUTPUT_FAIL = -2;

const int LIBOBS_API_MAJOR_VER = 26;

const int LIBOBS_API_MINOR_VER = 0;

const int LIBOBS_API_PATCH_VER = 2;

const int LIBOBS_API_VER = 436207618;

const String OBS_VERSION = 'unknown';

const String OBS_DATA_PATH = '../../data';

const String OBS_INSTALL_PREFIX = '';

const String OBS_PLUGIN_DESTINATION = 'obs-plugins';

const String OBS_RELATIVE_PREFIX = '../../';

const int OBS_RELEASE_CANDIDATE_MAJOR = 0;

const int OBS_RELEASE_CANDIDATE_MINOR = 0;

const int OBS_RELEASE_CANDIDATE_PATCH = 0;

const int OBS_RELEASE_CANDIDATE_VER = 0;

const int OBS_RELEASE_CANDIDATE = 0;

const String OBS_INSTALL_DATA_PATH = '../../data';

const int MAX_CHANNELS = 64;

const int OBS_ALIGN_CENTER = 0;

const int OBS_ALIGN_LEFT = 1;

const int OBS_ALIGN_RIGHT = 2;

const int OBS_ALIGN_TOP = 4;

const int OBS_ALIGN_BOTTOM = 8;

const int MODULE_SUCCESS = 0;

const int MODULE_ERROR = -1;

const int MODULE_FILE_NOT_FOUND = -2;

const int MODULE_MISSING_EXPORTS = -3;

const int MODULE_INCOMPATIBLE_VER = -4;

const int OBS_OUTPUT_SUCCESS = 0;

const int OBS_OUTPUT_BAD_PATH = -1;

const int OBS_OUTPUT_CONNECT_FAILED = -2;

const int OBS_OUTPUT_INVALID_STREAM = -3;

const int OBS_OUTPUT_ERROR = -4;

const int OBS_OUTPUT_DISCONNECTED = -5;

const int OBS_OUTPUT_UNSUPPORTED = -6;

const int OBS_OUTPUT_NO_SPACE = -7;

const int OBS_OUTPUT_ENCODE_ERROR = -8;

const int OBS_VIDEO_SUCCESS = 0;

const int OBS_VIDEO_FAIL = -1;

const int OBS_VIDEO_NOT_SUPPORTED = -2;

const int OBS_VIDEO_INVALID_PARAM = -3;

const int OBS_VIDEO_CURRENTLY_ACTIVE = -4;

const int OBS_VIDEO_MODULE_NOT_FOUND = -5;

const int OBS_UI_SUCCESS = 0;

const int OBS_UI_CANCEL = -1;

const int OBS_UI_NOTFOUND = -2;

const int OBS_PROPERTIES_DEFER_UPDATE = 1;

const int OBS_FONT_BOLD = 1;

const int OBS_FONT_ITALIC = 2;

const int OBS_FONT_UNDERLINE = 4;

const int OBS_FONT_STRIKEOUT = 8;

const int OBS_SOURCE_VIDEO = 1;

const int OBS_SOURCE_AUDIO = 2;

const int OBS_SOURCE_ASYNC = 4;

const int OBS_SOURCE_ASYNC_VIDEO = 5;

const int OBS_SOURCE_CUSTOM_DRAW = 8;

const int OBS_SOURCE_INTERACTION = 32;

const int OBS_SOURCE_COMPOSITE = 64;

const int OBS_SOURCE_DO_NOT_DUPLICATE = 128;

const int OBS_SOURCE_DEPRECATED = 256;

const int OBS_SOURCE_DO_NOT_SELF_MONITOR = 512;

const int OBS_SOURCE_CAP_DISABLED = 1024;

const int OBS_SOURCE_CAP_OBSOLETE = 1024;

const int OBS_SOURCE_MONITOR_BY_DEFAULT = 2048;

const int OBS_SOURCE_SUBMIX = 4096;

const int OBS_SOURCE_CONTROLLABLE_MEDIA = 8192;

const int OBS_ENCODER_CAP_DEPRECATED = 1;

const int OBS_ENCODER_CAP_PASS_TEXTURE = 2;

const int OBS_ENCODER_CAP_DYN_BITRATE = 4;

const int OBS_ENCODER_CAP_INTERNAL = 8;

const int OBS_OUTPUT_VIDEO = 1;

const int OBS_OUTPUT_AUDIO = 2;

const int OBS_OUTPUT_AV = 3;

const int OBS_OUTPUT_ENCODED = 4;

const int OBS_OUTPUT_SERVICE = 8;

const int OBS_OUTPUT_MULTI_TRACK = 16;

const int OBS_OUTPUT_CAN_PAUSE = 32;

const int OBS_INVALID_HOTKEY_ID = -1;

const int OBS_INVALID_HOTKEY_PAIR_ID = -1;

const int XINPUT_MOUSE_LEN = 33;

const int OBS_SOURCE_FLAG_UNUSED_1 = 1;

const int OBS_SOURCE_FLAG_FORCE_MONO = 2;

const int OBS_OUTPUT_DELAY_PRESERVE = 1;

typedef _c_base_set_allocator = ffi.Void Function(
  ffi.Pointer<base_allocator> defs,
);

typedef _dart_base_set_allocator = void Function(
  ffi.Pointer<base_allocator> defs,
);

typedef _c_bmalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 size,
);

typedef _dart_bmalloc = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_brealloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  ffi.Uint64 size,
);

typedef _dart_brealloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  int size,
);

typedef _c_bfree = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_bfree = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_base_get_alignment = ffi.Int32 Function();

typedef _dart_base_get_alignment = int Function();

typedef _c_bnum_allocs = ffi.Int64 Function();

typedef _dart_bnum_allocs = int Function();

typedef _c_bmemdup = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  ffi.Uint64 size,
);

typedef _dart_bmemdup = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  int size,
);

typedef _c_bzalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 size,
);

typedef _dart_bzalloc = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_bstrdup_n = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Uint64 n,
);

typedef _dart_bstrdup_n = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
  int n,
);

typedef _c_bwstrdup_n = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> str,
  ffi.Uint64 n,
);

typedef _dart_bwstrdup_n = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> str,
  int n,
);

typedef _c_bstrdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_bstrdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_bwstrdup = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> str,
);

typedef _dart_bwstrdup = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> str,
);

typedef _c_profile_register_root = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint64 expected_time_between_calls,
);

typedef _dart_profile_register_root = void Function(
  ffi.Pointer<ffi.Int8> name,
  int expected_time_between_calls,
);

typedef _c_profile_start = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_profile_start = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_profile_end = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_profile_end = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_profile_reenable_thread = ffi.Void Function();

typedef _dart_profile_reenable_thread = void Function();

typedef _c_profiler_start = ffi.Void Function();

typedef _dart_profiler_start = void Function();

typedef _c_profiler_stop = ffi.Void Function();

typedef _dart_profiler_stop = void Function();

typedef _c_profiler_print = ffi.Void Function(
  ffi.Pointer<profiler_snapshot> snap,
);

typedef _dart_profiler_print = void Function(
  ffi.Pointer<profiler_snapshot> snap,
);

typedef _c_profiler_print_time_between_calls = ffi.Void Function(
  ffi.Pointer<profiler_snapshot> snap,
);

typedef _dart_profiler_print_time_between_calls = void Function(
  ffi.Pointer<profiler_snapshot> snap,
);

typedef _c_profiler_free = ffi.Void Function();

typedef _dart_profiler_free = void Function();

typedef _c_profiler_name_store_create = ffi.Pointer<profiler_name_store>
    Function();

typedef _dart_profiler_name_store_create = ffi.Pointer<profiler_name_store>
    Function();

typedef _c_profiler_name_store_free = ffi.Void Function(
  ffi.Pointer<profiler_name_store> store,
);

typedef _dart_profiler_name_store_free = void Function(
  ffi.Pointer<profiler_name_store> store,
);

typedef _c_profile_store_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<profiler_name_store> store,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_profile_store_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<profiler_name_store> store,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_profile_snapshot_create = ffi.Pointer<profiler_snapshot> Function();

typedef _dart_profile_snapshot_create = ffi.Pointer<profiler_snapshot>
    Function();

typedef _c_profile_snapshot_free = ffi.Void Function(
  ffi.Pointer<profiler_snapshot> snap,
);

typedef _dart_profile_snapshot_free = void Function(
  ffi.Pointer<profiler_snapshot> snap,
);

typedef _c_profiler_snapshot_dump_csv = ffi.Uint8 Function(
  ffi.Pointer<profiler_snapshot> snap,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_profiler_snapshot_dump_csv = int Function(
  ffi.Pointer<profiler_snapshot> snap,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_profiler_snapshot_dump_csv_gz = ffi.Uint8 Function(
  ffi.Pointer<profiler_snapshot> snap,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_profiler_snapshot_dump_csv_gz = int Function(
  ffi.Pointer<profiler_snapshot> snap,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_profiler_snapshot_num_roots = ffi.Uint64 Function(
  ffi.Pointer<profiler_snapshot> snap,
);

typedef _dart_profiler_snapshot_num_roots = int Function(
  ffi.Pointer<profiler_snapshot> snap,
);

typedef profiler_entry_enum_func = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<profiler_snapshot_entry>,
);

typedef _c_profiler_snapshot_enumerate_roots = ffi.Void Function(
  ffi.Pointer<profiler_snapshot> snap,
  ffi.Pointer<ffi.NativeFunction<profiler_entry_enum_func>> func,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_profiler_snapshot_enumerate_roots = void Function(
  ffi.Pointer<profiler_snapshot> snap,
  ffi.Pointer<ffi.NativeFunction<profiler_entry_enum_func>> func,
  ffi.Pointer<ffi.Void> context,
);

typedef profiler_name_filter_func = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Uint8>,
);

typedef _c_profiler_snapshot_filter_roots = ffi.Void Function(
  ffi.Pointer<profiler_snapshot> snap,
  ffi.Pointer<ffi.NativeFunction<profiler_name_filter_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_profiler_snapshot_filter_roots = void Function(
  ffi.Pointer<profiler_snapshot> snap,
  ffi.Pointer<ffi.NativeFunction<profiler_name_filter_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_profiler_snapshot_num_children = ffi.Uint64 Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _dart_profiler_snapshot_num_children = int Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _c_profiler_snapshot_enumerate_children = ffi.Void Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
  ffi.Pointer<ffi.NativeFunction<profiler_entry_enum_func>> func,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_profiler_snapshot_enumerate_children = void Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
  ffi.Pointer<ffi.NativeFunction<profiler_entry_enum_func>> func,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_profiler_snapshot_entry_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _dart_profiler_snapshot_entry_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _c_profiler_snapshot_entry_min_time = ffi.Uint64 Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _dart_profiler_snapshot_entry_min_time = int Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _c_profiler_snapshot_entry_max_time = ffi.Uint64 Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _dart_profiler_snapshot_entry_max_time = int Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _c_profiler_snapshot_entry_overall_count = ffi.Uint64 Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _dart_profiler_snapshot_entry_overall_count = int Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _c_profiler_snapshot_entry_expected_time_between_calls = ffi.Uint64
    Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _dart_profiler_snapshot_entry_expected_time_between_calls = int
    Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _c_profiler_snapshot_entry_min_time_between_calls = ffi.Uint64 Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _dart_profiler_snapshot_entry_min_time_between_calls = int Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _c_profiler_snapshot_entry_max_time_between_calls = ffi.Uint64 Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _dart_profiler_snapshot_entry_max_time_between_calls = int Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _c_profiler_snapshot_entry_overall_between_calls_count = ffi.Uint64
    Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _dart_profiler_snapshot_entry_overall_between_calls_count = int
    Function(
  ffi.Pointer<profiler_snapshot_entry> entry,
);

typedef _c_text_lookup_create = ffi.Pointer<text_lookup> Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_text_lookup_create = ffi.Pointer<text_lookup> Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_text_lookup_add = ffi.Uint8 Function(
  ffi.Pointer<text_lookup> lookup,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_text_lookup_add = int Function(
  ffi.Pointer<text_lookup> lookup,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_text_lookup_destroy = ffi.Void Function(
  ffi.Pointer<text_lookup> lookup,
);

typedef _dart_text_lookup_destroy = void Function(
  ffi.Pointer<text_lookup> lookup,
);

typedef _c_text_lookup_getstr = ffi.Uint8 Function(
  ffi.Pointer<text_lookup> lookup,
  ffi.Pointer<ffi.Int8> lookup_val,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> out,
);

typedef _dart_text_lookup_getstr = int Function(
  ffi.Pointer<text_lookup> lookup,
  ffi.Pointer<ffi.Int8> lookup_val,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> out,
);

typedef _c_gs_vbdata_create = ffi.Pointer<gs_vb_data> Function();

typedef _dart_gs_vbdata_create = ffi.Pointer<gs_vb_data> Function();

typedef _c_gs_vbdata_destroy = ffi.Void Function(
  ffi.Pointer<gs_vb_data> data,
);

typedef _dart_gs_vbdata_destroy = void Function(
  ffi.Pointer<gs_vb_data> data,
);

typedef _c_gs_shader_destroy = ffi.Void Function(
  ffi.Pointer<gs_shader> shader,
);

typedef _dart_gs_shader_destroy = void Function(
  ffi.Pointer<gs_shader> shader,
);

typedef _c_gs_shader_get_num_params = ffi.Int32 Function(
  ffi.Pointer<gs_shader> shader,
);

typedef _dart_gs_shader_get_num_params = int Function(
  ffi.Pointer<gs_shader> shader,
);

typedef _c_gs_shader_get_param_by_idx = ffi.Pointer<gs_shader_param> Function(
  ffi.Pointer<gs_shader> shader,
  ffi.Uint32 param,
);

typedef _dart_gs_shader_get_param_by_idx = ffi.Pointer<gs_shader_param>
    Function(
  ffi.Pointer<gs_shader> shader,
  int param,
);

typedef _c_gs_shader_get_param_by_name = ffi.Pointer<gs_shader_param> Function(
  ffi.Pointer<gs_shader> shader,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gs_shader_get_param_by_name = ffi.Pointer<gs_shader_param>
    Function(
  ffi.Pointer<gs_shader> shader,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gs_shader_get_viewproj_matrix = ffi.Pointer<gs_shader_param>
    Function(
  ffi.Pointer<gs_shader> shader,
);

typedef _dart_gs_shader_get_viewproj_matrix = ffi.Pointer<gs_shader_param>
    Function(
  ffi.Pointer<gs_shader> shader,
);

typedef _c_gs_shader_get_world_matrix = ffi.Pointer<gs_shader_param> Function(
  ffi.Pointer<gs_shader> shader,
);

typedef _dart_gs_shader_get_world_matrix = ffi.Pointer<gs_shader_param>
    Function(
  ffi.Pointer<gs_shader> shader,
);

typedef _c_gs_shader_get_param_info = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<gs_shader_param_info> info,
);

typedef _dart_gs_shader_get_param_info = void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<gs_shader_param_info> info,
);

typedef _c_gs_shader_set_bool = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Uint8 val,
);

typedef _dart_gs_shader_set_bool = void Function(
  ffi.Pointer<gs_shader_param> param,
  int val,
);

typedef _c_gs_shader_set_float = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Float val,
);

typedef _dart_gs_shader_set_float = void Function(
  ffi.Pointer<gs_shader_param> param,
  double val,
);

typedef _c_gs_shader_set_int = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Int32 val,
);

typedef _dart_gs_shader_set_int = void Function(
  ffi.Pointer<gs_shader_param> param,
  int val,
);

typedef _c_gs_shader_set_matrix3 = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<matrix3> val,
);

typedef _dart_gs_shader_set_matrix3 = void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<matrix3> val,
);

typedef _c_gs_shader_set_matrix4 = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<matrix4> val,
);

typedef _dart_gs_shader_set_matrix4 = void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<matrix4> val,
);

typedef _c_gs_shader_set_vec2 = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<vec2> val,
);

typedef _dart_gs_shader_set_vec2 = void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<vec2> val,
);

typedef _c_gs_shader_set_vec3 = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<vec3> val,
);

typedef _dart_gs_shader_set_vec3 = void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<vec3> val,
);

typedef _c_gs_shader_set_vec4 = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<vec4> val,
);

typedef _dart_gs_shader_set_vec4 = void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<vec4> val,
);

typedef _c_gs_shader_set_texture = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<gs_texture> val,
);

typedef _dart_gs_shader_set_texture = void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<gs_texture> val,
);

typedef _c_gs_shader_set_val = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint64 size,
);

typedef _dart_gs_shader_set_val = void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<ffi.Void> val,
  int size,
);

typedef _c_gs_shader_set_default = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
);

typedef _dart_gs_shader_set_default = void Function(
  ffi.Pointer<gs_shader_param> param,
);

typedef _c_gs_shader_set_next_sampler = ffi.Void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<gs_sampler_state> sampler,
);

typedef _dart_gs_shader_set_next_sampler = void Function(
  ffi.Pointer<gs_shader_param> param,
  ffi.Pointer<gs_sampler_state> sampler,
);

typedef _c_gs_effect_destroy = ffi.Void Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _dart_gs_effect_destroy = void Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _c_gs_effect_get_technique = ffi.Pointer<gs_effect_technique> Function(
  ffi.Pointer<gs_effect> effect,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gs_effect_get_technique = ffi.Pointer<gs_effect_technique>
    Function(
  ffi.Pointer<gs_effect> effect,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gs_effect_get_current_technique = ffi.Pointer<gs_effect_technique>
    Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _dart_gs_effect_get_current_technique = ffi.Pointer<gs_effect_technique>
    Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _c_gs_technique_begin = ffi.Uint64 Function(
  ffi.Pointer<gs_effect_technique> technique,
);

typedef _dart_gs_technique_begin = int Function(
  ffi.Pointer<gs_effect_technique> technique,
);

typedef _c_gs_technique_end = ffi.Void Function(
  ffi.Pointer<gs_effect_technique> technique,
);

typedef _dart_gs_technique_end = void Function(
  ffi.Pointer<gs_effect_technique> technique,
);

typedef _c_gs_technique_begin_pass = ffi.Uint8 Function(
  ffi.Pointer<gs_effect_technique> technique,
  ffi.Uint64 pass,
);

typedef _dart_gs_technique_begin_pass = int Function(
  ffi.Pointer<gs_effect_technique> technique,
  int pass,
);

typedef _c_gs_technique_begin_pass_by_name = ffi.Uint8 Function(
  ffi.Pointer<gs_effect_technique> technique,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gs_technique_begin_pass_by_name = int Function(
  ffi.Pointer<gs_effect_technique> technique,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gs_technique_end_pass = ffi.Void Function(
  ffi.Pointer<gs_effect_technique> technique,
);

typedef _dart_gs_technique_end_pass = void Function(
  ffi.Pointer<gs_effect_technique> technique,
);

typedef _c_gs_technique_get_pass_by_idx = ffi.Pointer<gs_effect_pass> Function(
  ffi.Pointer<gs_effect_technique> technique,
  ffi.Uint64 pass,
);

typedef _dart_gs_technique_get_pass_by_idx = ffi.Pointer<gs_effect_pass>
    Function(
  ffi.Pointer<gs_effect_technique> technique,
  int pass,
);

typedef _c_gs_technique_get_pass_by_name = ffi.Pointer<gs_effect_pass> Function(
  ffi.Pointer<gs_effect_technique> technique,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gs_technique_get_pass_by_name = ffi.Pointer<gs_effect_pass>
    Function(
  ffi.Pointer<gs_effect_technique> technique,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gs_effect_get_num_params = ffi.Uint64 Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _dart_gs_effect_get_num_params = int Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _c_gs_effect_get_param_by_idx = ffi.Pointer<gs_effect_param> Function(
  ffi.Pointer<gs_effect> effect,
  ffi.Uint64 param,
);

typedef _dart_gs_effect_get_param_by_idx = ffi.Pointer<gs_effect_param>
    Function(
  ffi.Pointer<gs_effect> effect,
  int param,
);

typedef _c_gs_effect_get_param_by_name = ffi.Pointer<gs_effect_param> Function(
  ffi.Pointer<gs_effect> effect,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gs_effect_get_param_by_name = ffi.Pointer<gs_effect_param>
    Function(
  ffi.Pointer<gs_effect> effect,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gs_param_get_num_annotations = ffi.Uint64 Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _dart_gs_param_get_num_annotations = int Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _c_gs_param_get_annotation_by_idx = ffi.Pointer<gs_effect_param>
    Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Uint64 annotation,
);

typedef _dart_gs_param_get_annotation_by_idx = ffi.Pointer<gs_effect_param>
    Function(
  ffi.Pointer<gs_effect_param> param,
  int annotation,
);

typedef _c_gs_param_get_annotation_by_name = ffi.Pointer<gs_effect_param>
    Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gs_param_get_annotation_by_name = ffi.Pointer<gs_effect_param>
    Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gs_effect_loop = ffi.Uint8 Function(
  ffi.Pointer<gs_effect> effect,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gs_effect_loop = int Function(
  ffi.Pointer<gs_effect> effect,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gs_effect_update_params = ffi.Void Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _dart_gs_effect_update_params = void Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _c_gs_effect_get_viewproj_matrix = ffi.Pointer<gs_effect_param>
    Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _dart_gs_effect_get_viewproj_matrix = ffi.Pointer<gs_effect_param>
    Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _c_gs_effect_get_world_matrix = ffi.Pointer<gs_effect_param> Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _dart_gs_effect_get_world_matrix = ffi.Pointer<gs_effect_param>
    Function(
  ffi.Pointer<gs_effect> effect,
);

typedef _c_gs_effect_get_param_info = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<gs_effect_param_info> info,
);

typedef _dart_gs_effect_get_param_info = void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<gs_effect_param_info> info,
);

typedef _c_gs_effect_set_bool = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Uint8 val,
);

typedef _dart_gs_effect_set_bool = void Function(
  ffi.Pointer<gs_effect_param> param,
  int val,
);

typedef _c_gs_effect_set_float = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Float val,
);

typedef _dart_gs_effect_set_float = void Function(
  ffi.Pointer<gs_effect_param> param,
  double val,
);

typedef _c_gs_effect_set_int = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Int32 val,
);

typedef _dart_gs_effect_set_int = void Function(
  ffi.Pointer<gs_effect_param> param,
  int val,
);

typedef _c_gs_effect_set_matrix4 = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<matrix4> val,
);

typedef _dart_gs_effect_set_matrix4 = void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<matrix4> val,
);

typedef _c_gs_effect_set_vec2 = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<vec2> val,
);

typedef _dart_gs_effect_set_vec2 = void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<vec2> val,
);

typedef _c_gs_effect_set_vec3 = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<vec3> val,
);

typedef _dart_gs_effect_set_vec3 = void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<vec3> val,
);

typedef _c_gs_effect_set_vec4 = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<vec4> val,
);

typedef _dart_gs_effect_set_vec4 = void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<vec4> val,
);

typedef _c_gs_effect_set_texture = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<gs_texture> val,
);

typedef _dart_gs_effect_set_texture = void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<gs_texture> val,
);

typedef _c_gs_effect_set_val = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint64 size,
);

typedef _dart_gs_effect_set_val = void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<ffi.Void> val,
  int size,
);

typedef _c_gs_effect_set_default = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _dart_gs_effect_set_default = void Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _c_gs_effect_get_val_size = ffi.Uint64 Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _dart_gs_effect_get_val_size = int Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _c_gs_effect_get_val = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _dart_gs_effect_get_val = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _c_gs_effect_get_default_val_size = ffi.Uint64 Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _dart_gs_effect_get_default_val_size = int Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _c_gs_effect_get_default_val = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _dart_gs_effect_get_default_val = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<gs_effect_param> param,
);

typedef _c_gs_effect_set_next_sampler = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<gs_sampler_state> sampler,
);

typedef _dart_gs_effect_set_next_sampler = void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Pointer<gs_sampler_state> sampler,
);

typedef _c_gs_effect_set_color = ffi.Void Function(
  ffi.Pointer<gs_effect_param> param,
  ffi.Uint32 argb,
);

typedef _dart_gs_effect_set_color = void Function(
  ffi.Pointer<gs_effect_param> param,
  int argb,
);

typedef _c_gs_texrender_create = ffi.Pointer<gs_texture_render> Function(
  ffi.Int32 format,
  ffi.Int32 zsformat,
);

typedef _dart_gs_texrender_create = ffi.Pointer<gs_texture_render> Function(
  int format,
  int zsformat,
);

typedef _c_gs_texrender_destroy = ffi.Void Function(
  ffi.Pointer<gs_texture_render> texrender,
);

typedef _dart_gs_texrender_destroy = void Function(
  ffi.Pointer<gs_texture_render> texrender,
);

typedef _c_gs_texrender_begin = ffi.Uint8 Function(
  ffi.Pointer<gs_texture_render> texrender,
  ffi.Uint32 cx,
  ffi.Uint32 cy,
);

typedef _dart_gs_texrender_begin = int Function(
  ffi.Pointer<gs_texture_render> texrender,
  int cx,
  int cy,
);

typedef _c_gs_texrender_end = ffi.Void Function(
  ffi.Pointer<gs_texture_render> texrender,
);

typedef _dart_gs_texrender_end = void Function(
  ffi.Pointer<gs_texture_render> texrender,
);

typedef _c_gs_texrender_reset = ffi.Void Function(
  ffi.Pointer<gs_texture_render> texrender,
);

typedef _dart_gs_texrender_reset = void Function(
  ffi.Pointer<gs_texture_render> texrender,
);

typedef _c_gs_texrender_get_texture = ffi.Pointer<gs_texture> Function(
  ffi.Pointer<gs_texture_render> texrender,
);

typedef _dart_gs_texrender_get_texture = ffi.Pointer<gs_texture> Function(
  ffi.Pointer<gs_texture_render> texrender,
);

typedef _c_gs_get_device_name = ffi.Pointer<ffi.Int8> Function();

typedef _dart_gs_get_device_name = ffi.Pointer<ffi.Int8> Function();

typedef _c_gs_get_device_type = ffi.Int32 Function();

typedef _dart_gs_get_device_type = int Function();

typedef _typedefC_6 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint32,
);

typedef _c_gs_enum_adapters = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_gs_enum_adapters = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_gs_create = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<graphics_subsystem>> graphics,
  ffi.Pointer<ffi.Int8> module,
  ffi.Uint32 adapter,
);

typedef _dart_gs_create = int Function(
  ffi.Pointer<ffi.Pointer<graphics_subsystem>> graphics,
  ffi.Pointer<ffi.Int8> module,
  int adapter,
);

typedef _c_gs_destroy = ffi.Void Function(
  ffi.Pointer<graphics_subsystem> graphics,
);

typedef _dart_gs_destroy = void Function(
  ffi.Pointer<graphics_subsystem> graphics,
);

typedef _c_gs_enter_context = ffi.Void Function(
  ffi.Pointer<graphics_subsystem> graphics,
);

typedef _dart_gs_enter_context = void Function(
  ffi.Pointer<graphics_subsystem> graphics,
);

typedef _c_gs_leave_context = ffi.Void Function();

typedef _dart_gs_leave_context = void Function();

typedef _c_gs_get_context = ffi.Pointer<graphics_subsystem> Function();

typedef _dart_gs_get_context = ffi.Pointer<graphics_subsystem> Function();

typedef _c_gs_get_device_obj = ffi.Pointer<ffi.Void> Function();

typedef _dart_gs_get_device_obj = ffi.Pointer<ffi.Void> Function();

typedef _c_gs_matrix_push = ffi.Void Function();

typedef _dart_gs_matrix_push = void Function();

typedef _c_gs_matrix_pop = ffi.Void Function();

typedef _dart_gs_matrix_pop = void Function();

typedef _c_gs_matrix_identity = ffi.Void Function();

typedef _dart_gs_matrix_identity = void Function();

typedef _c_gs_matrix_transpose = ffi.Void Function();

typedef _dart_gs_matrix_transpose = void Function();

typedef _c_gs_matrix_set = ffi.Void Function(
  ffi.Pointer<matrix4> matrix,
);

typedef _dart_gs_matrix_set = void Function(
  ffi.Pointer<matrix4> matrix,
);

typedef _c_gs_matrix_get = ffi.Void Function(
  ffi.Pointer<matrix4> dst,
);

typedef _dart_gs_matrix_get = void Function(
  ffi.Pointer<matrix4> dst,
);

typedef _c_gs_matrix_mul = ffi.Void Function(
  ffi.Pointer<matrix4> matrix,
);

typedef _dart_gs_matrix_mul = void Function(
  ffi.Pointer<matrix4> matrix,
);

typedef _c_gs_matrix_rotquat = ffi.Void Function(
  ffi.Pointer<quat> rot,
);

typedef _dart_gs_matrix_rotquat = void Function(
  ffi.Pointer<quat> rot,
);

typedef _c_gs_matrix_rotaa = ffi.Void Function(
  ffi.Pointer<axisang> rot,
);

typedef _dart_gs_matrix_rotaa = void Function(
  ffi.Pointer<axisang> rot,
);

typedef _c_gs_matrix_translate = ffi.Void Function(
  ffi.Pointer<vec3> pos,
);

typedef _dart_gs_matrix_translate = void Function(
  ffi.Pointer<vec3> pos,
);

typedef _c_gs_matrix_scale = ffi.Void Function(
  ffi.Pointer<vec3> scale,
);

typedef _dart_gs_matrix_scale = void Function(
  ffi.Pointer<vec3> scale,
);

typedef _c_gs_matrix_rotaa4f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
  ffi.Float angle,
);

typedef _dart_gs_matrix_rotaa4f = void Function(
  double x,
  double y,
  double z,
  double angle,
);

typedef _c_gs_matrix_translate3f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_gs_matrix_translate3f = void Function(
  double x,
  double y,
  double z,
);

typedef _c_gs_matrix_scale3f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_gs_matrix_scale3f = void Function(
  double x,
  double y,
  double z,
);

typedef _c_gs_render_start = ffi.Void Function(
  ffi.Uint8 b_new,
);

typedef _dart_gs_render_start = void Function(
  int b_new,
);

typedef _c_gs_render_stop = ffi.Void Function(
  ffi.Int32 mode,
);

typedef _dart_gs_render_stop = void Function(
  int mode,
);

typedef _c_gs_render_save = ffi.Pointer<gs_vertex_buffer> Function();

typedef _dart_gs_render_save = ffi.Pointer<gs_vertex_buffer> Function();

typedef _c_gs_vertex2f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_gs_vertex2f = void Function(
  double x,
  double y,
);

typedef _c_gs_vertex3f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_gs_vertex3f = void Function(
  double x,
  double y,
  double z,
);

typedef _c_gs_normal3f = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_gs_normal3f = void Function(
  double x,
  double y,
  double z,
);

typedef _c_gs_color = ffi.Void Function(
  ffi.Uint32 color,
);

typedef _dart_gs_color = void Function(
  int color,
);

typedef _c_gs_texcoord = ffi.Void Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Int32 unit,
);

typedef _dart_gs_texcoord = void Function(
  double x,
  double y,
  int unit,
);

typedef _c_gs_vertex2v = ffi.Void Function(
  ffi.Pointer<vec2> v,
);

typedef _dart_gs_vertex2v = void Function(
  ffi.Pointer<vec2> v,
);

typedef _c_gs_vertex3v = ffi.Void Function(
  ffi.Pointer<vec3> v,
);

typedef _dart_gs_vertex3v = void Function(
  ffi.Pointer<vec3> v,
);

typedef _c_gs_normal3v = ffi.Void Function(
  ffi.Pointer<vec3> v,
);

typedef _dart_gs_normal3v = void Function(
  ffi.Pointer<vec3> v,
);

typedef _c_gs_color4v = ffi.Void Function(
  ffi.Pointer<vec4> v,
);

typedef _dart_gs_color4v = void Function(
  ffi.Pointer<vec4> v,
);

typedef _c_gs_texcoord2v = ffi.Void Function(
  ffi.Pointer<vec2> v,
  ffi.Int32 unit,
);

typedef _dart_gs_texcoord2v = void Function(
  ffi.Pointer<vec2> v,
  int unit,
);

typedef _c_gs_get_input = ffi.Pointer<input_t> Function();

typedef _dart_gs_get_input = ffi.Pointer<input_t> Function();

typedef _c_gs_get_effect = ffi.Pointer<gs_effect> Function();

typedef _dart_gs_get_effect = ffi.Pointer<gs_effect> Function();

typedef _c_gs_effect_create_from_file = ffi.Pointer<gs_effect> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _dart_gs_effect_create_from_file = ffi.Pointer<gs_effect> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _c_gs_effect_create = ffi.Pointer<gs_effect> Function(
  ffi.Pointer<ffi.Int8> effect_string,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _dart_gs_effect_create = ffi.Pointer<gs_effect> Function(
  ffi.Pointer<ffi.Int8> effect_string,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _c_gs_vertexshader_create_from_file = ffi.Pointer<gs_shader> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _dart_gs_vertexshader_create_from_file = ffi.Pointer<gs_shader>
    Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _c_gs_pixelshader_create_from_file = ffi.Pointer<gs_shader> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _dart_gs_pixelshader_create_from_file = ffi.Pointer<gs_shader> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _c_gs_texture_create_from_file = ffi.Pointer<gs_texture> Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_gs_texture_create_from_file = ffi.Pointer<gs_texture> Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_gs_create_texture_file_data = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int32> format,
  ffi.Pointer<ffi.Uint32> cx,
  ffi.Pointer<ffi.Uint32> cy,
);

typedef _dart_gs_create_texture_file_data = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int32> format,
  ffi.Pointer<ffi.Uint32> cx,
  ffi.Pointer<ffi.Uint32> cy,
);

typedef _c_gs_draw_sprite = ffi.Void Function(
  ffi.Pointer<gs_texture> tex,
  ffi.Uint32 flip,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_gs_draw_sprite = void Function(
  ffi.Pointer<gs_texture> tex,
  int flip,
  int width,
  int height,
);

typedef _c_gs_draw_sprite_subregion = ffi.Void Function(
  ffi.Pointer<gs_texture> tex,
  ffi.Uint32 flip,
  ffi.Uint32 x,
  ffi.Uint32 y,
  ffi.Uint32 cx,
  ffi.Uint32 cy,
);

typedef _dart_gs_draw_sprite_subregion = void Function(
  ffi.Pointer<gs_texture> tex,
  int flip,
  int x,
  int y,
  int cx,
  int cy,
);

typedef _c_gs_draw_cube_backdrop = ffi.Void Function(
  ffi.Pointer<gs_texture> cubetex,
  ffi.Pointer<quat> rot,
  ffi.Float left,
  ffi.Float right,
  ffi.Float top,
  ffi.Float bottom,
  ffi.Float znear,
);

typedef _dart_gs_draw_cube_backdrop = void Function(
  ffi.Pointer<gs_texture> cubetex,
  ffi.Pointer<quat> rot,
  double left,
  double right,
  double top,
  double bottom,
  double znear,
);

typedef _c_gs_reset_viewport = ffi.Void Function();

typedef _dart_gs_reset_viewport = void Function();

typedef _c_gs_set_2d_mode = ffi.Void Function();

typedef _dart_gs_set_2d_mode = void Function();

typedef _c_gs_set_3d_mode = ffi.Void Function(
  ffi.Double fovy,
  ffi.Double znear,
  ffi.Double zvar,
);

typedef _dart_gs_set_3d_mode = void Function(
  double fovy,
  double znear,
  double zvar,
);

typedef _c_gs_viewport_push = ffi.Void Function();

typedef _dart_gs_viewport_push = void Function();

typedef _c_gs_viewport_pop = ffi.Void Function();

typedef _dart_gs_viewport_pop = void Function();

typedef _c_gs_texture_set_image = ffi.Void Function(
  ffi.Pointer<gs_texture> tex,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Uint32 linesize,
  ffi.Uint8 invert,
);

typedef _dart_gs_texture_set_image = void Function(
  ffi.Pointer<gs_texture> tex,
  ffi.Pointer<ffi.Uint8> data,
  int linesize,
  int invert,
);

typedef _c_gs_cubetexture_set_image = ffi.Void Function(
  ffi.Pointer<gs_texture> cubetex,
  ffi.Uint32 side,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint32 linesize,
  ffi.Uint8 invert,
);

typedef _dart_gs_cubetexture_set_image = void Function(
  ffi.Pointer<gs_texture> cubetex,
  int side,
  ffi.Pointer<ffi.Void> data,
  int linesize,
  int invert,
);

typedef _c_gs_perspective = ffi.Void Function(
  ffi.Float fovy,
  ffi.Float aspect,
  ffi.Float znear,
  ffi.Float zfar,
);

typedef _dart_gs_perspective = void Function(
  double fovy,
  double aspect,
  double znear,
  double zfar,
);

typedef _c_gs_blend_state_push = ffi.Void Function();

typedef _dart_gs_blend_state_push = void Function();

typedef _c_gs_blend_state_pop = ffi.Void Function();

typedef _dart_gs_blend_state_pop = void Function();

typedef _c_gs_reset_blend_state = ffi.Void Function();

typedef _dart_gs_reset_blend_state = void Function();

typedef _c_gs_swapchain_create = ffi.Pointer<gs_swap_chain> Function(
  ffi.Pointer<gs_init_data> data,
);

typedef _dart_gs_swapchain_create = ffi.Pointer<gs_swap_chain> Function(
  ffi.Pointer<gs_init_data> data,
);

typedef _c_gs_resize = ffi.Void Function(
  ffi.Uint32 x,
  ffi.Uint32 y,
);

typedef _dart_gs_resize = void Function(
  int x,
  int y,
);

typedef _c_gs_get_size = ffi.Void Function(
  ffi.Pointer<ffi.Uint32> x,
  ffi.Pointer<ffi.Uint32> y,
);

typedef _dart_gs_get_size = void Function(
  ffi.Pointer<ffi.Uint32> x,
  ffi.Pointer<ffi.Uint32> y,
);

typedef _c_gs_get_width = ffi.Uint32 Function();

typedef _dart_gs_get_width = int Function();

typedef _c_gs_get_height = ffi.Uint32 Function();

typedef _dart_gs_get_height = int Function();

typedef _c_gs_texture_create = ffi.Pointer<gs_texture> Function(
  ffi.Uint32 width,
  ffi.Uint32 height,
  ffi.Int32 color_format,
  ffi.Uint32 levels,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
  ffi.Uint32 flags,
);

typedef _dart_gs_texture_create = ffi.Pointer<gs_texture> Function(
  int width,
  int height,
  int color_format,
  int levels,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
  int flags,
);

typedef _c_gs_cubetexture_create = ffi.Pointer<gs_texture> Function(
  ffi.Uint32 size,
  ffi.Int32 color_format,
  ffi.Uint32 levels,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
  ffi.Uint32 flags,
);

typedef _dart_gs_cubetexture_create = ffi.Pointer<gs_texture> Function(
  int size,
  int color_format,
  int levels,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
  int flags,
);

typedef _c_gs_voltexture_create = ffi.Pointer<gs_texture> Function(
  ffi.Uint32 width,
  ffi.Uint32 height,
  ffi.Uint32 depth,
  ffi.Int32 color_format,
  ffi.Uint32 levels,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
  ffi.Uint32 flags,
);

typedef _dart_gs_voltexture_create = ffi.Pointer<gs_texture> Function(
  int width,
  int height,
  int depth,
  int color_format,
  int levels,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
  int flags,
);

typedef _c_gs_zstencil_create = ffi.Pointer<gs_zstencil_buffer> Function(
  ffi.Uint32 width,
  ffi.Uint32 height,
  ffi.Int32 format,
);

typedef _dart_gs_zstencil_create = ffi.Pointer<gs_zstencil_buffer> Function(
  int width,
  int height,
  int format,
);

typedef _c_gs_stagesurface_create = ffi.Pointer<gs_stage_surface> Function(
  ffi.Uint32 width,
  ffi.Uint32 height,
  ffi.Int32 color_format,
);

typedef _dart_gs_stagesurface_create = ffi.Pointer<gs_stage_surface> Function(
  int width,
  int height,
  int color_format,
);

typedef _c_gs_samplerstate_create = ffi.Pointer<gs_sampler_state> Function(
  ffi.Pointer<gs_sampler_info> info,
);

typedef _dart_gs_samplerstate_create = ffi.Pointer<gs_sampler_state> Function(
  ffi.Pointer<gs_sampler_info> info,
);

typedef _c_gs_vertexshader_create = ffi.Pointer<gs_shader> Function(
  ffi.Pointer<ffi.Int8> shader,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _dart_gs_vertexshader_create = ffi.Pointer<gs_shader> Function(
  ffi.Pointer<ffi.Int8> shader,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _c_gs_pixelshader_create = ffi.Pointer<gs_shader> Function(
  ffi.Pointer<ffi.Int8> shader,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _dart_gs_pixelshader_create = ffi.Pointer<gs_shader> Function(
  ffi.Pointer<ffi.Int8> shader,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_string,
);

typedef _c_gs_vertexbuffer_create = ffi.Pointer<gs_vertex_buffer> Function(
  ffi.Pointer<gs_vb_data> data,
  ffi.Uint32 flags,
);

typedef _dart_gs_vertexbuffer_create = ffi.Pointer<gs_vertex_buffer> Function(
  ffi.Pointer<gs_vb_data> data,
  int flags,
);

typedef _c_gs_indexbuffer_create = ffi.Pointer<gs_index_buffer> Function(
  ffi.Int32 type,
  ffi.Pointer<ffi.Void> indices,
  ffi.Uint64 num,
  ffi.Uint32 flags,
);

typedef _dart_gs_indexbuffer_create = ffi.Pointer<gs_index_buffer> Function(
  int type,
  ffi.Pointer<ffi.Void> indices,
  int num,
  int flags,
);

typedef _c_gs_timer_create = ffi.Pointer<gs_timer> Function();

typedef _dart_gs_timer_create = ffi.Pointer<gs_timer> Function();

typedef _c_gs_timer_range_create = ffi.Pointer<gs_timer_range> Function();

typedef _dart_gs_timer_range_create = ffi.Pointer<gs_timer_range> Function();

typedef _c_gs_get_texture_type = ffi.Int32 Function(
  ffi.Pointer<gs_texture> texture,
);

typedef _dart_gs_get_texture_type = int Function(
  ffi.Pointer<gs_texture> texture,
);

typedef _c_gs_load_vertexbuffer = ffi.Void Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
);

typedef _dart_gs_load_vertexbuffer = void Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
);

typedef _c_gs_load_indexbuffer = ffi.Void Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _dart_gs_load_indexbuffer = void Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _c_gs_load_texture = ffi.Void Function(
  ffi.Pointer<gs_texture> tex,
  ffi.Int32 unit,
);

typedef _dart_gs_load_texture = void Function(
  ffi.Pointer<gs_texture> tex,
  int unit,
);

typedef _c_gs_load_samplerstate = ffi.Void Function(
  ffi.Pointer<gs_sampler_state> samplerstate,
  ffi.Int32 unit,
);

typedef _dart_gs_load_samplerstate = void Function(
  ffi.Pointer<gs_sampler_state> samplerstate,
  int unit,
);

typedef _c_gs_load_vertexshader = ffi.Void Function(
  ffi.Pointer<gs_shader> vertshader,
);

typedef _dart_gs_load_vertexshader = void Function(
  ffi.Pointer<gs_shader> vertshader,
);

typedef _c_gs_load_pixelshader = ffi.Void Function(
  ffi.Pointer<gs_shader> pixelshader,
);

typedef _dart_gs_load_pixelshader = void Function(
  ffi.Pointer<gs_shader> pixelshader,
);

typedef _c_gs_load_default_samplerstate = ffi.Void Function(
  ffi.Uint8 b_3d,
  ffi.Int32 unit,
);

typedef _dart_gs_load_default_samplerstate = void Function(
  int b_3d,
  int unit,
);

typedef _c_gs_get_vertex_shader = ffi.Pointer<gs_shader> Function();

typedef _dart_gs_get_vertex_shader = ffi.Pointer<gs_shader> Function();

typedef _c_gs_get_pixel_shader = ffi.Pointer<gs_shader> Function();

typedef _dart_gs_get_pixel_shader = ffi.Pointer<gs_shader> Function();

typedef _c_gs_get_render_target = ffi.Pointer<gs_texture> Function();

typedef _dart_gs_get_render_target = ffi.Pointer<gs_texture> Function();

typedef _c_gs_get_zstencil_target = ffi.Pointer<gs_zstencil_buffer> Function();

typedef _dart_gs_get_zstencil_target = ffi.Pointer<gs_zstencil_buffer>
    Function();

typedef _c_gs_set_render_target = ffi.Void Function(
  ffi.Pointer<gs_texture> tex,
  ffi.Pointer<gs_zstencil_buffer> zstencil,
);

typedef _dart_gs_set_render_target = void Function(
  ffi.Pointer<gs_texture> tex,
  ffi.Pointer<gs_zstencil_buffer> zstencil,
);

typedef _c_gs_set_cube_render_target = ffi.Void Function(
  ffi.Pointer<gs_texture> cubetex,
  ffi.Int32 side,
  ffi.Pointer<gs_zstencil_buffer> zstencil,
);

typedef _dart_gs_set_cube_render_target = void Function(
  ffi.Pointer<gs_texture> cubetex,
  int side,
  ffi.Pointer<gs_zstencil_buffer> zstencil,
);

typedef _c_gs_copy_texture = ffi.Void Function(
  ffi.Pointer<gs_texture> dst,
  ffi.Pointer<gs_texture> src,
);

typedef _dart_gs_copy_texture = void Function(
  ffi.Pointer<gs_texture> dst,
  ffi.Pointer<gs_texture> src,
);

typedef _c_gs_copy_texture_region = ffi.Void Function(
  ffi.Pointer<gs_texture> dst,
  ffi.Uint32 dst_x,
  ffi.Uint32 dst_y,
  ffi.Pointer<gs_texture> src,
  ffi.Uint32 src_x,
  ffi.Uint32 src_y,
  ffi.Uint32 src_w,
  ffi.Uint32 src_h,
);

typedef _dart_gs_copy_texture_region = void Function(
  ffi.Pointer<gs_texture> dst,
  int dst_x,
  int dst_y,
  ffi.Pointer<gs_texture> src,
  int src_x,
  int src_y,
  int src_w,
  int src_h,
);

typedef _c_gs_stage_texture = ffi.Void Function(
  ffi.Pointer<gs_stage_surface> dst,
  ffi.Pointer<gs_texture> src,
);

typedef _dart_gs_stage_texture = void Function(
  ffi.Pointer<gs_stage_surface> dst,
  ffi.Pointer<gs_texture> src,
);

typedef _c_gs_begin_frame = ffi.Void Function();

typedef _dart_gs_begin_frame = void Function();

typedef _c_gs_begin_scene = ffi.Void Function();

typedef _dart_gs_begin_scene = void Function();

typedef _c_gs_draw = ffi.Void Function(
  ffi.Int32 draw_mode,
  ffi.Uint32 start_vert,
  ffi.Uint32 num_verts,
);

typedef _dart_gs_draw = void Function(
  int draw_mode,
  int start_vert,
  int num_verts,
);

typedef _c_gs_end_scene = ffi.Void Function();

typedef _dart_gs_end_scene = void Function();

typedef _c_gs_load_swapchain = ffi.Void Function(
  ffi.Pointer<gs_swap_chain> swapchain,
);

typedef _dart_gs_load_swapchain = void Function(
  ffi.Pointer<gs_swap_chain> swapchain,
);

typedef _c_gs_clear = ffi.Void Function(
  ffi.Uint32 clear_flags,
  ffi.Pointer<vec4> color,
  ffi.Float depth,
  ffi.Uint8 stencil,
);

typedef _dart_gs_clear = void Function(
  int clear_flags,
  ffi.Pointer<vec4> color,
  double depth,
  int stencil,
);

typedef _c_gs_present = ffi.Void Function();

typedef _dart_gs_present = void Function();

typedef _c_gs_flush = ffi.Void Function();

typedef _dart_gs_flush = void Function();

typedef _c_gs_set_cull_mode = ffi.Void Function(
  ffi.Int32 mode,
);

typedef _dart_gs_set_cull_mode = void Function(
  int mode,
);

typedef _c_gs_get_cull_mode = ffi.Int32 Function();

typedef _dart_gs_get_cull_mode = int Function();

typedef _c_gs_enable_blending = ffi.Void Function(
  ffi.Uint8 enable,
);

typedef _dart_gs_enable_blending = void Function(
  int enable,
);

typedef _c_gs_enable_depth_test = ffi.Void Function(
  ffi.Uint8 enable,
);

typedef _dart_gs_enable_depth_test = void Function(
  int enable,
);

typedef _c_gs_enable_stencil_test = ffi.Void Function(
  ffi.Uint8 enable,
);

typedef _dart_gs_enable_stencil_test = void Function(
  int enable,
);

typedef _c_gs_enable_stencil_write = ffi.Void Function(
  ffi.Uint8 enable,
);

typedef _dart_gs_enable_stencil_write = void Function(
  int enable,
);

typedef _c_gs_enable_color = ffi.Void Function(
  ffi.Uint8 red,
  ffi.Uint8 green,
  ffi.Uint8 blue,
  ffi.Uint8 alpha,
);

typedef _dart_gs_enable_color = void Function(
  int red,
  int green,
  int blue,
  int alpha,
);

typedef _c_gs_blend_function = ffi.Void Function(
  ffi.Int32 src,
  ffi.Int32 dest,
);

typedef _dart_gs_blend_function = void Function(
  int src,
  int dest,
);

typedef _c_gs_blend_function_separate = ffi.Void Function(
  ffi.Int32 src_c,
  ffi.Int32 dest_c,
  ffi.Int32 src_a,
  ffi.Int32 dest_a,
);

typedef _dart_gs_blend_function_separate = void Function(
  int src_c,
  int dest_c,
  int src_a,
  int dest_a,
);

typedef _c_gs_depth_function = ffi.Void Function(
  ffi.Int32 test,
);

typedef _dart_gs_depth_function = void Function(
  int test,
);

typedef _c_gs_stencil_function = ffi.Void Function(
  ffi.Int32 side,
  ffi.Int32 test,
);

typedef _dart_gs_stencil_function = void Function(
  int side,
  int test,
);

typedef _c_gs_stencil_op = ffi.Void Function(
  ffi.Int32 side,
  ffi.Int32 fail,
  ffi.Int32 zfail,
  ffi.Int32 zpass,
);

typedef _dart_gs_stencil_op = void Function(
  int side,
  int fail,
  int zfail,
  int zpass,
);

typedef _c_gs_set_viewport = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_gs_set_viewport = void Function(
  int x,
  int y,
  int width,
  int height,
);

typedef _c_gs_get_viewport = ffi.Void Function(
  ffi.Pointer<gs_rect> rect,
);

typedef _dart_gs_get_viewport = void Function(
  ffi.Pointer<gs_rect> rect,
);

typedef _c_gs_set_scissor_rect = ffi.Void Function(
  ffi.Pointer<gs_rect> rect,
);

typedef _dart_gs_set_scissor_rect = void Function(
  ffi.Pointer<gs_rect> rect,
);

typedef _c_gs_ortho = ffi.Void Function(
  ffi.Float left,
  ffi.Float right,
  ffi.Float top,
  ffi.Float bottom,
  ffi.Float znear,
  ffi.Float zfar,
);

typedef _dart_gs_ortho = void Function(
  double left,
  double right,
  double top,
  double bottom,
  double znear,
  double zfar,
);

typedef _c_gs_frustum = ffi.Void Function(
  ffi.Float left,
  ffi.Float right,
  ffi.Float top,
  ffi.Float bottom,
  ffi.Float znear,
  ffi.Float zfar,
);

typedef _dart_gs_frustum = void Function(
  double left,
  double right,
  double top,
  double bottom,
  double znear,
  double zfar,
);

typedef _c_gs_projection_push = ffi.Void Function();

typedef _dart_gs_projection_push = void Function();

typedef _c_gs_projection_pop = ffi.Void Function();

typedef _dart_gs_projection_pop = void Function();

typedef _c_gs_swapchain_destroy = ffi.Void Function(
  ffi.Pointer<gs_swap_chain> swapchain,
);

typedef _dart_gs_swapchain_destroy = void Function(
  ffi.Pointer<gs_swap_chain> swapchain,
);

typedef _c_gs_texture_destroy = ffi.Void Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _dart_gs_texture_destroy = void Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _c_gs_texture_get_width = ffi.Uint32 Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _dart_gs_texture_get_width = int Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _c_gs_texture_get_height = ffi.Uint32 Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _dart_gs_texture_get_height = int Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _c_gs_texture_get_color_format = ffi.Int32 Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _dart_gs_texture_get_color_format = int Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _c_gs_texture_map = ffi.Uint8 Function(
  ffi.Pointer<gs_texture> tex,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> ptr,
  ffi.Pointer<ffi.Uint32> linesize,
);

typedef _dart_gs_texture_map = int Function(
  ffi.Pointer<gs_texture> tex,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> ptr,
  ffi.Pointer<ffi.Uint32> linesize,
);

typedef _c_gs_texture_unmap = ffi.Void Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _dart_gs_texture_unmap = void Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _c_gs_texture_is_rect = ffi.Uint8 Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _dart_gs_texture_is_rect = int Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _c_gs_texture_get_obj = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _dart_gs_texture_get_obj = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<gs_texture> tex,
);

typedef _c_gs_cubetexture_destroy = ffi.Void Function(
  ffi.Pointer<gs_texture> cubetex,
);

typedef _dart_gs_cubetexture_destroy = void Function(
  ffi.Pointer<gs_texture> cubetex,
);

typedef _c_gs_cubetexture_get_size = ffi.Uint32 Function(
  ffi.Pointer<gs_texture> cubetex,
);

typedef _dart_gs_cubetexture_get_size = int Function(
  ffi.Pointer<gs_texture> cubetex,
);

typedef _c_gs_cubetexture_get_color_format = ffi.Int32 Function(
  ffi.Pointer<gs_texture> cubetex,
);

typedef _dart_gs_cubetexture_get_color_format = int Function(
  ffi.Pointer<gs_texture> cubetex,
);

typedef _c_gs_voltexture_destroy = ffi.Void Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _dart_gs_voltexture_destroy = void Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _c_gs_voltexture_get_width = ffi.Uint32 Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _dart_gs_voltexture_get_width = int Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _c_gs_voltexture_get_height = ffi.Uint32 Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _dart_gs_voltexture_get_height = int Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _c_gs_voltexture_get_depth = ffi.Uint32 Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _dart_gs_voltexture_get_depth = int Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _c_gs_voltexture_get_color_format = ffi.Int32 Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _dart_gs_voltexture_get_color_format = int Function(
  ffi.Pointer<gs_texture> voltex,
);

typedef _c_gs_stagesurface_destroy = ffi.Void Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _dart_gs_stagesurface_destroy = void Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _c_gs_stagesurface_get_width = ffi.Uint32 Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _dart_gs_stagesurface_get_width = int Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _c_gs_stagesurface_get_height = ffi.Uint32 Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _dart_gs_stagesurface_get_height = int Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _c_gs_stagesurface_get_color_format = ffi.Int32 Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _dart_gs_stagesurface_get_color_format = int Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _c_gs_stagesurface_map = ffi.Uint8 Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
  ffi.Pointer<ffi.Uint32> linesize,
);

typedef _dart_gs_stagesurface_map = int Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
  ffi.Pointer<ffi.Uint32> linesize,
);

typedef _c_gs_stagesurface_unmap = ffi.Void Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _dart_gs_stagesurface_unmap = void Function(
  ffi.Pointer<gs_stage_surface> stagesurf,
);

typedef _c_gs_zstencil_destroy = ffi.Void Function(
  ffi.Pointer<gs_zstencil_buffer> zstencil,
);

typedef _dart_gs_zstencil_destroy = void Function(
  ffi.Pointer<gs_zstencil_buffer> zstencil,
);

typedef _c_gs_samplerstate_destroy = ffi.Void Function(
  ffi.Pointer<gs_sampler_state> samplerstate,
);

typedef _dart_gs_samplerstate_destroy = void Function(
  ffi.Pointer<gs_sampler_state> samplerstate,
);

typedef _c_gs_vertexbuffer_destroy = ffi.Void Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
);

typedef _dart_gs_vertexbuffer_destroy = void Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
);

typedef _c_gs_vertexbuffer_flush = ffi.Void Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
);

typedef _dart_gs_vertexbuffer_flush = void Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
);

typedef _c_gs_vertexbuffer_flush_direct = ffi.Void Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
  ffi.Pointer<gs_vb_data> data,
);

typedef _dart_gs_vertexbuffer_flush_direct = void Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
  ffi.Pointer<gs_vb_data> data,
);

typedef _c_gs_vertexbuffer_get_data = ffi.Pointer<gs_vb_data> Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
);

typedef _dart_gs_vertexbuffer_get_data = ffi.Pointer<gs_vb_data> Function(
  ffi.Pointer<gs_vertex_buffer> vertbuffer,
);

typedef _c_gs_indexbuffer_destroy = ffi.Void Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _dart_gs_indexbuffer_destroy = void Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _c_gs_indexbuffer_flush = ffi.Void Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _dart_gs_indexbuffer_flush = void Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _c_gs_indexbuffer_flush_direct = ffi.Void Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gs_indexbuffer_flush_direct = void Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gs_indexbuffer_get_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _dart_gs_indexbuffer_get_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _c_gs_indexbuffer_get_num_indices = ffi.Uint64 Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _dart_gs_indexbuffer_get_num_indices = int Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _c_gs_indexbuffer_get_type = ffi.Int32 Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _dart_gs_indexbuffer_get_type = int Function(
  ffi.Pointer<gs_index_buffer> indexbuffer,
);

typedef _c_gs_timer_destroy = ffi.Void Function(
  ffi.Pointer<gs_timer> timer,
);

typedef _dart_gs_timer_destroy = void Function(
  ffi.Pointer<gs_timer> timer,
);

typedef _c_gs_timer_begin = ffi.Void Function(
  ffi.Pointer<gs_timer> timer,
);

typedef _dart_gs_timer_begin = void Function(
  ffi.Pointer<gs_timer> timer,
);

typedef _c_gs_timer_end = ffi.Void Function(
  ffi.Pointer<gs_timer> timer,
);

typedef _dart_gs_timer_end = void Function(
  ffi.Pointer<gs_timer> timer,
);

typedef _c_gs_timer_get_data = ffi.Uint8 Function(
  ffi.Pointer<gs_timer> timer,
  ffi.Pointer<ffi.Uint64> ticks,
);

typedef _dart_gs_timer_get_data = int Function(
  ffi.Pointer<gs_timer> timer,
  ffi.Pointer<ffi.Uint64> ticks,
);

typedef _c_gs_timer_range_destroy = ffi.Void Function(
  ffi.Pointer<gs_timer_range> timer,
);

typedef _dart_gs_timer_range_destroy = void Function(
  ffi.Pointer<gs_timer_range> timer,
);

typedef _c_gs_timer_range_begin = ffi.Void Function(
  ffi.Pointer<gs_timer_range> range,
);

typedef _dart_gs_timer_range_begin = void Function(
  ffi.Pointer<gs_timer_range> range,
);

typedef _c_gs_timer_range_end = ffi.Void Function(
  ffi.Pointer<gs_timer_range> range,
);

typedef _dart_gs_timer_range_end = void Function(
  ffi.Pointer<gs_timer_range> range,
);

typedef _c_gs_timer_range_get_data = ffi.Uint8 Function(
  ffi.Pointer<gs_timer_range> range,
  ffi.Pointer<ffi.Uint8> disjoint,
  ffi.Pointer<ffi.Uint64> frequency,
);

typedef _dart_gs_timer_range_get_data = int Function(
  ffi.Pointer<gs_timer_range> range,
  ffi.Pointer<ffi.Uint8> disjoint,
  ffi.Pointer<ffi.Uint64> frequency,
);

typedef _c_gs_nv12_available = ffi.Uint8 Function();

typedef _dart_gs_nv12_available = int Function();

typedef _c_gs_debug_marker_begin = ffi.Void Function(
  ffi.Pointer<ffi.Float> color,
  ffi.Pointer<ffi.Int8> markername,
);

typedef _dart_gs_debug_marker_begin = void Function(
  ffi.Pointer<ffi.Float> color,
  ffi.Pointer<ffi.Int8> markername,
);

typedef _c_gs_debug_marker_begin_format = ffi.Void Function(
  ffi.Pointer<ffi.Float> color,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_gs_debug_marker_begin_format = void Function(
  ffi.Pointer<ffi.Float> color,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_gs_debug_marker_end = ffi.Void Function();

typedef _dart_gs_debug_marker_end = void Function();

typedef _c_gs_texture_create_from_iosurface = ffi.Pointer<gs_texture> Function(
  ffi.Pointer<ffi.Void> iosurf,
);

typedef _dart_gs_texture_create_from_iosurface = ffi.Pointer<gs_texture>
    Function(
  ffi.Pointer<ffi.Void> iosurf,
);

typedef _c_gs_texture_rebind_iosurface = ffi.Uint8 Function(
  ffi.Pointer<gs_texture> texture,
  ffi.Pointer<ffi.Void> iosurf,
);

typedef _dart_gs_texture_rebind_iosurface = int Function(
  ffi.Pointer<gs_texture> texture,
  ffi.Pointer<ffi.Void> iosurf,
);

typedef _c_gs_get_format_bpp = ffi.Uint32 Function(
  ffi.Int32 format,
);

typedef _dart_gs_get_format_bpp = int Function(
  int format,
);

typedef _c_gs_is_compressed_format = ffi.Uint8 Function(
  ffi.Int32 format,
);

typedef _dart_gs_is_compressed_format = int Function(
  int format,
);

typedef _c_gs_get_total_levels = ffi.Uint32 Function(
  ffi.Uint32 width,
  ffi.Uint32 height,
  ffi.Uint32 depth,
);

typedef _dart_gs_get_total_levels = int Function(
  int width,
  int height,
  int depth,
);

typedef _c_vec2_zero = ffi.Void Function(
  ffi.Pointer<vec2> dst,
);

typedef _dart_vec2_zero = void Function(
  ffi.Pointer<vec2> dst,
);

typedef _c_vec2_set = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_vec2_set = void Function(
  ffi.Pointer<vec2> dst,
  double x,
  double y,
);

typedef _c_vec2_copy = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _dart_vec2_copy = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _c_vec2_add = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _dart_vec2_add = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _c_vec2_sub = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _dart_vec2_sub = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _c_vec2_mul = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _dart_vec2_mul = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _c_vec2_div = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _dart_vec2_div = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _c_vec2_addf = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Float f,
);

typedef _dart_vec2_addf = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  double f,
);

typedef _c_vec2_subf = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Float f,
);

typedef _dart_vec2_subf = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  double f,
);

typedef _c_vec2_mulf = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Float f,
);

typedef _dart_vec2_mulf = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  double f,
);

typedef _c_vec2_divf = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Float f,
);

typedef _dart_vec2_divf = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  double f,
);

typedef _c_vec2_neg = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _dart_vec2_neg = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _c_vec2_dot = ffi.Float Function(
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _dart_vec2_dot = double Function(
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _c_vec2_len = ffi.Float Function(
  ffi.Pointer<vec2> v,
);

typedef _dart_vec2_len = double Function(
  ffi.Pointer<vec2> v,
);

typedef _c_vec2_dist = ffi.Float Function(
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _dart_vec2_dist = double Function(
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
);

typedef _c_vec2_minf = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Float val,
);

typedef _dart_vec2_minf = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  double val,
);

typedef _c_vec2_min = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Pointer<vec2> min_v,
);

typedef _dart_vec2_min = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Pointer<vec2> min_v,
);

typedef _c_vec2_maxf = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Float val,
);

typedef _dart_vec2_maxf = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  double val,
);

typedef _c_vec2_max = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Pointer<vec2> max_v,
);

typedef _dart_vec2_max = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
  ffi.Pointer<vec2> max_v,
);

typedef _c_vec2_abs = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _dart_vec2_abs = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _c_vec2_floor = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _dart_vec2_floor = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _c_vec2_ceil = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _dart_vec2_ceil = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _c_vec2_close = ffi.Int32 Function(
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
  ffi.Float epsilon,
);

typedef _dart_vec2_close = int Function(
  ffi.Pointer<vec2> v1,
  ffi.Pointer<vec2> v2,
  double epsilon,
);

typedef _c_vec2_norm = ffi.Void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _dart_vec2_norm = void Function(
  ffi.Pointer<vec2> dst,
  ffi.Pointer<vec2> v,
);

typedef _c_vec3_zero = ffi.Void Function(
  ffi.Pointer<vec3> v,
);

typedef _dart_vec3_zero = void Function(
  ffi.Pointer<vec3> v,
);

typedef _c_vec3_set = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_vec3_set = void Function(
  ffi.Pointer<vec3> dst,
  double x,
  double y,
  double z,
);

typedef _c_vec3_copy = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _dart_vec3_copy = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _c_vec3_from_vec4 = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec4> v,
);

typedef _dart_vec3_from_vec4 = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec4> v,
);

typedef _c_vec3_add = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _dart_vec3_add = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _c_vec3_sub = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _dart_vec3_sub = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _c_vec3_mul = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _dart_vec3_mul = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _c_vec3_div = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _dart_vec3_div = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _c_vec3_addf = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Float f,
);

typedef _dart_vec3_addf = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  double f,
);

typedef _c_vec3_subf = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Float f,
);

typedef _dart_vec3_subf = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  double f,
);

typedef _c_vec3_mulf = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Float f,
);

typedef _dart_vec3_mulf = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  double f,
);

typedef _c_vec3_divf = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Float f,
);

typedef _dart_vec3_divf = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  double f,
);

typedef _c_vec3_dot = ffi.Float Function(
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _dart_vec3_dot = double Function(
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _c_vec3_cross = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _dart_vec3_cross = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _c_vec3_neg = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _dart_vec3_neg = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _c_vec3_len = ffi.Float Function(
  ffi.Pointer<vec3> v,
);

typedef _dart_vec3_len = double Function(
  ffi.Pointer<vec3> v,
);

typedef _c_vec3_dist = ffi.Float Function(
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _dart_vec3_dist = double Function(
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _c_vec3_norm = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _dart_vec3_norm = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _c_vec3_close = ffi.Uint8 Function(
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
  ffi.Float epsilon,
);

typedef _dart_vec3_close = int Function(
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
  double epsilon,
);

typedef _c_vec3_min = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _dart_vec3_min = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _c_vec3_minf = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Float f,
);

typedef _dart_vec3_minf = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  double f,
);

typedef _c_vec3_max = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _dart_vec3_max = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v1,
  ffi.Pointer<vec3> v2,
);

typedef _c_vec3_maxf = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Float f,
);

typedef _dart_vec3_maxf = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  double f,
);

typedef _c_vec3_abs = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _dart_vec3_abs = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _c_vec3_floor = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _dart_vec3_floor = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _c_vec3_ceil = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _dart_vec3_ceil = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
);

typedef _c_vec3_plane_dist = ffi.Float Function(
  ffi.Pointer<vec3> v,
  ffi.Pointer<plane> p,
);

typedef _dart_vec3_plane_dist = double Function(
  ffi.Pointer<vec3> v,
  ffi.Pointer<plane> p,
);

typedef _c_vec3_transform = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<matrix4> m,
);

typedef _dart_vec3_transform = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<matrix4> m,
);

typedef _c_vec3_rotate = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<matrix3> m,
);

typedef _dart_vec3_rotate = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<matrix3> m,
);

typedef _c_vec3_transform3x4 = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<matrix3> m,
);

typedef _dart_vec3_transform3x4 = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<matrix3> m,
);

typedef _c_vec3_mirror = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<plane> p,
);

typedef _dart_vec3_mirror = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<plane> p,
);

typedef _c_vec3_mirrorv = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<vec3> vec,
);

typedef _dart_vec3_mirrorv = void Function(
  ffi.Pointer<vec3> dst,
  ffi.Pointer<vec3> v,
  ffi.Pointer<vec3> vec,
);

typedef _c_vec3_rand = ffi.Void Function(
  ffi.Pointer<vec3> dst,
  ffi.Int32 positive_only,
);

typedef _dart_vec3_rand = void Function(
  ffi.Pointer<vec3> dst,
  int positive_only,
);

typedef _c_get_audio_channels = ffi.Uint32 Function(
  ffi.Int32 speakers,
);

typedef _dart_get_audio_channels = int Function(
  int speakers,
);

typedef _c_get_audio_bytes_per_channel = ffi.Uint64 Function(
  ffi.Int32 format,
);

typedef _dart_get_audio_bytes_per_channel = int Function(
  int format,
);

typedef _c_is_audio_planar = ffi.Uint8 Function(
  ffi.Int32 format,
);

typedef _dart_is_audio_planar = int Function(
  int format,
);

typedef _c_get_audio_planes = ffi.Uint64 Function(
  ffi.Int32 format,
  ffi.Int32 speakers,
);

typedef _dart_get_audio_planes = int Function(
  int format,
  int speakers,
);

typedef _c_get_audio_size = ffi.Uint64 Function(
  ffi.Int32 format,
  ffi.Int32 speakers,
  ffi.Uint32 frames,
);

typedef _dart_get_audio_size = int Function(
  int format,
  int speakers,
  int frames,
);

typedef _c_audio_frames_to_ns = ffi.Uint64 Function(
  ffi.Uint64 sample_rate,
  ffi.Uint64 frames,
);

typedef _dart_audio_frames_to_ns = int Function(
  int sample_rate,
  int frames,
);

typedef _c_ns_to_audio_frames = ffi.Uint64 Function(
  ffi.Uint64 sample_rate,
  ffi.Uint64 frames,
);

typedef _dart_ns_to_audio_frames = int Function(
  int sample_rate,
  int frames,
);

typedef _c_audio_output_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<audio_output>> audio,
  ffi.Pointer<audio_output_info> info,
);

typedef _dart_audio_output_open = int Function(
  ffi.Pointer<ffi.Pointer<audio_output>> audio,
  ffi.Pointer<audio_output_info> info,
);

typedef _c_audio_output_close = ffi.Void Function(
  ffi.Pointer<audio_output> audio,
);

typedef _dart_audio_output_close = void Function(
  ffi.Pointer<audio_output> audio,
);

typedef audio_output_callback_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<audio_data>,
);

typedef _c_audio_output_connect = ffi.Uint8 Function(
  ffi.Pointer<audio_output> video,
  ffi.Uint64 mix_idx,
  ffi.Pointer<audio_convert_info> conversion,
  ffi.Pointer<ffi.NativeFunction<audio_output_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_audio_output_connect = int Function(
  ffi.Pointer<audio_output> video,
  int mix_idx,
  ffi.Pointer<audio_convert_info> conversion,
  ffi.Pointer<ffi.NativeFunction<audio_output_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_audio_output_disconnect = ffi.Void Function(
  ffi.Pointer<audio_output> video,
  ffi.Uint64 mix_idx,
  ffi.Pointer<ffi.NativeFunction<audio_output_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_audio_output_disconnect = void Function(
  ffi.Pointer<audio_output> video,
  int mix_idx,
  ffi.Pointer<ffi.NativeFunction<audio_output_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_audio_output_active = ffi.Uint8 Function(
  ffi.Pointer<audio_output> audio,
);

typedef _dart_audio_output_active = int Function(
  ffi.Pointer<audio_output> audio,
);

typedef _c_audio_output_get_block_size = ffi.Uint64 Function(
  ffi.Pointer<audio_output> audio,
);

typedef _dart_audio_output_get_block_size = int Function(
  ffi.Pointer<audio_output> audio,
);

typedef _c_audio_output_get_planes = ffi.Uint64 Function(
  ffi.Pointer<audio_output> audio,
);

typedef _dart_audio_output_get_planes = int Function(
  ffi.Pointer<audio_output> audio,
);

typedef _c_audio_output_get_channels = ffi.Uint64 Function(
  ffi.Pointer<audio_output> audio,
);

typedef _dart_audio_output_get_channels = int Function(
  ffi.Pointer<audio_output> audio,
);

typedef _c_audio_output_get_sample_rate = ffi.Uint32 Function(
  ffi.Pointer<audio_output> audio,
);

typedef _dart_audio_output_get_sample_rate = int Function(
  ffi.Pointer<audio_output> audio,
);

typedef _c_audio_output_get_info = ffi.Pointer<audio_output_info> Function(
  ffi.Pointer<audio_output> audio,
);

typedef _dart_audio_output_get_info = ffi.Pointer<audio_output_info> Function(
  ffi.Pointer<audio_output> audio,
);

typedef _c_format_is_yuv = ffi.Uint8 Function(
  ffi.Int32 format,
);

typedef _dart_format_is_yuv = int Function(
  int format,
);

typedef _c_get_video_format_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 format,
);

typedef _dart_get_video_format_name = ffi.Pointer<ffi.Int8> Function(
  int format,
);

typedef _c_get_video_colorspace_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 cs,
);

typedef _dart_get_video_colorspace_name = ffi.Pointer<ffi.Int8> Function(
  int cs,
);

typedef _c_resolve_video_range = ffi.Int32 Function(
  ffi.Int32 format,
  ffi.Int32 range,
);

typedef _dart_resolve_video_range = int Function(
  int format,
  int range,
);

typedef _c_get_video_range_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 format,
  ffi.Int32 range,
);

typedef _dart_get_video_range_name = ffi.Pointer<ffi.Int8> Function(
  int format,
  int range,
);

typedef _c_video_format_from_fourcc = ffi.Int32 Function(
  ffi.Uint32 fourcc,
);

typedef _dart_video_format_from_fourcc = int Function(
  int fourcc,
);

typedef _c_video_format_get_parameters = ffi.Uint8 Function(
  ffi.Int32 color_space,
  ffi.Int32 range,
  ffi.Pointer<ffi.Float> matrix,
  ffi.Pointer<ffi.Float> min_range,
  ffi.Pointer<ffi.Float> max_range,
);

typedef _dart_video_format_get_parameters = int Function(
  int color_space,
  int range,
  ffi.Pointer<ffi.Float> matrix,
  ffi.Pointer<ffi.Float> min_range,
  ffi.Pointer<ffi.Float> max_range,
);

typedef _c_video_output_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<video_output>> video,
  ffi.Pointer<video_output_info> info,
);

typedef _dart_video_output_open = int Function(
  ffi.Pointer<ffi.Pointer<video_output>> video,
  ffi.Pointer<video_output_info> info,
);

typedef _c_video_output_close = ffi.Void Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_close = void Function(
  ffi.Pointer<video_output> video,
);

typedef _typedefC_7 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<video_data>,
);

typedef _c_video_output_connect = ffi.Uint8 Function(
  ffi.Pointer<video_output> video,
  ffi.Pointer<video_scale_info> conversion,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_video_output_connect = int Function(
  ffi.Pointer<video_output> video,
  ffi.Pointer<video_scale_info> conversion,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_8 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<video_data>,
);

typedef _c_video_output_disconnect = ffi.Void Function(
  ffi.Pointer<video_output> video,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_video_output_disconnect = void Function(
  ffi.Pointer<video_output> video,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_video_output_active = ffi.Uint8 Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_active = int Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_get_info = ffi.Pointer<video_output_info> Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_get_info = ffi.Pointer<video_output_info> Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_lock_frame = ffi.Uint8 Function(
  ffi.Pointer<video_output> video,
  ffi.Pointer<video_frame> frame,
  ffi.Int32 count,
  ffi.Uint64 timestamp,
);

typedef _dart_video_output_lock_frame = int Function(
  ffi.Pointer<video_output> video,
  ffi.Pointer<video_frame> frame,
  int count,
  int timestamp,
);

typedef _c_video_output_unlock_frame = ffi.Void Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_unlock_frame = void Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_get_frame_time = ffi.Uint64 Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_get_frame_time = int Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_stop = ffi.Void Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_stop = void Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_stopped = ffi.Uint8 Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_stopped = int Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_get_format = ffi.Int32 Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_get_format = int Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_get_width = ffi.Uint32 Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_get_width = int Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_get_height = ffi.Uint32 Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_get_height = int Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_get_frame_rate = ffi.Double Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_get_frame_rate = double Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_get_skipped_frames = ffi.Uint32 Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_get_skipped_frames = int Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_get_total_frames = ffi.Uint32 Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_get_total_frames = int Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_inc_texture_encoders = ffi.Void Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_inc_texture_encoders = void Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_dec_texture_encoders = ffi.Void Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_dec_texture_encoders = void Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_inc_texture_frames = ffi.Void Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_inc_texture_frames = void Function(
  ffi.Pointer<video_output> video,
);

typedef _c_video_output_inc_texture_skipped_frames = ffi.Void Function(
  ffi.Pointer<video_output> video,
);

typedef _dart_video_output_inc_texture_skipped_frames = void Function(
  ffi.Pointer<video_output> video,
);

typedef _c_signal_handler_create = ffi.Pointer<signal_handler> Function();

typedef _dart_signal_handler_create = ffi.Pointer<signal_handler> Function();

typedef _c_signal_handler_destroy = ffi.Void Function(
  ffi.Pointer<signal_handler> handler,
);

typedef _dart_signal_handler_destroy = void Function(
  ffi.Pointer<signal_handler> handler,
);

typedef _c_signal_handler_add = ffi.Uint8 Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal_decl,
);

typedef _dart_signal_handler_add = int Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal_decl,
);

typedef _c_signal_handler_add_array = ffi.Uint8 Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signal_decls,
);

typedef _dart_signal_handler_add_array = int Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signal_decls,
);

typedef signal_callback_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<calldata_t>,
);

typedef _c_signal_handler_connect = ffi.Void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal,
  ffi.Pointer<ffi.NativeFunction<signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_signal_handler_connect = void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal,
  ffi.Pointer<ffi.NativeFunction<signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_signal_handler_connect_ref = ffi.Void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal,
  ffi.Pointer<ffi.NativeFunction<signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_signal_handler_connect_ref = void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal,
  ffi.Pointer<ffi.NativeFunction<signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_signal_handler_disconnect = ffi.Void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal,
  ffi.Pointer<ffi.NativeFunction<signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_signal_handler_disconnect = void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal,
  ffi.Pointer<ffi.NativeFunction<signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef global_signal_callback_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<calldata_t>,
);

typedef _c_signal_handler_connect_global = ffi.Void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.NativeFunction<global_signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_signal_handler_connect_global = void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.NativeFunction<global_signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_signal_handler_disconnect_global = ffi.Void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.NativeFunction<global_signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_signal_handler_disconnect_global = void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.NativeFunction<global_signal_callback_t>> callback,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_signal_handler_remove_current = ffi.Void Function();

typedef _dart_signal_handler_remove_current = void Function();

typedef _c_signal_handler_signal = ffi.Void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal,
  ffi.Pointer<calldata_t> params,
);

typedef _dart_signal_handler_signal = void Function(
  ffi.Pointer<signal_handler> handler,
  ffi.Pointer<ffi.Int8> signal,
  ffi.Pointer<calldata_t> params,
);

typedef _c_proc_handler_create = ffi.Pointer<proc_handler> Function();

typedef _dart_proc_handler_create = ffi.Pointer<proc_handler> Function();

typedef _c_proc_handler_destroy = ffi.Void Function(
  ffi.Pointer<proc_handler> handler,
);

typedef _dart_proc_handler_destroy = void Function(
  ffi.Pointer<proc_handler> handler,
);

typedef proc_handler_proc_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<calldata_t>,
);

typedef _c_proc_handler_add = ffi.Void Function(
  ffi.Pointer<proc_handler> handler,
  ffi.Pointer<ffi.Int8> decl_string,
  ffi.Pointer<ffi.NativeFunction<proc_handler_proc_t>> proc,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_proc_handler_add = void Function(
  ffi.Pointer<proc_handler> handler,
  ffi.Pointer<ffi.Int8> decl_string,
  ffi.Pointer<ffi.NativeFunction<proc_handler_proc_t>> proc,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_proc_handler_call = ffi.Uint8 Function(
  ffi.Pointer<proc_handler> handler,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<calldata_t> params,
);

typedef _dart_proc_handler_call = int Function(
  ffi.Pointer<proc_handler> handler,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<calldata_t> params,
);

typedef _c_obs_data_create = ffi.Pointer<obs_data> Function();

typedef _dart_obs_data_create = ffi.Pointer<obs_data> Function();

typedef _c_obs_data_create_from_json = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> json_string,
);

typedef _dart_obs_data_create_from_json = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> json_string,
);

typedef _c_obs_data_create_from_json_file = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> json_file,
);

typedef _dart_obs_data_create_from_json_file = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> json_file,
);

typedef _c_obs_data_create_from_json_file_safe = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> json_file,
  ffi.Pointer<ffi.Int8> backup_ext,
);

typedef _dart_obs_data_create_from_json_file_safe = ffi.Pointer<obs_data>
    Function(
  ffi.Pointer<ffi.Int8> json_file,
  ffi.Pointer<ffi.Int8> backup_ext,
);

typedef _c_obs_data_addref = ffi.Void Function(
  ffi.Pointer<obs_data> data,
);

typedef _dart_obs_data_addref = void Function(
  ffi.Pointer<obs_data> data,
);

typedef _c_obs_data_release = ffi.Void Function(
  ffi.Pointer<obs_data> data,
);

typedef _dart_obs_data_release = void Function(
  ffi.Pointer<obs_data> data,
);

typedef _c_obs_data_get_json = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data> data,
);

typedef _dart_obs_data_get_json = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data> data,
);

typedef _c_obs_data_save_json = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_obs_data_save_json = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_obs_data_save_json_safe = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> temp_ext,
  ffi.Pointer<ffi.Int8> backup_ext,
);

typedef _dart_obs_data_save_json_safe = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> temp_ext,
  ffi.Pointer<ffi.Int8> backup_ext,
);

typedef _c_obs_data_apply = ffi.Void Function(
  ffi.Pointer<obs_data> target,
  ffi.Pointer<obs_data> apply_data,
);

typedef _dart_obs_data_apply = void Function(
  ffi.Pointer<obs_data> target,
  ffi.Pointer<obs_data> apply_data,
);

typedef _c_obs_data_erase = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_erase = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_clear = ffi.Void Function(
  ffi.Pointer<obs_data> data,
);

typedef _dart_obs_data_clear = void Function(
  ffi.Pointer<obs_data> data,
);

typedef _c_obs_data_set_string = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_obs_data_set_string = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_obs_data_set_int = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int64 val,
);

typedef _dart_obs_data_set_int = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  int val,
);

typedef _c_obs_data_set_double = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Double val,
);

typedef _dart_obs_data_set_double = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  double val,
);

typedef _c_obs_data_set_bool = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint8 val,
);

typedef _dart_obs_data_set_bool = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  int val,
);

typedef _c_obs_data_set_obj = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> obj,
);

typedef _dart_obs_data_set_obj = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> obj,
);

typedef _c_obs_data_set_array = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_array> array,
);

typedef _dart_obs_data_set_array = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_array> array,
);

typedef _c_obs_data_set_default_string = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_obs_data_set_default_string = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_obs_data_set_default_int = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int64 val,
);

typedef _dart_obs_data_set_default_int = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  int val,
);

typedef _c_obs_data_set_default_double = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Double val,
);

typedef _dart_obs_data_set_default_double = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  double val,
);

typedef _c_obs_data_set_default_bool = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint8 val,
);

typedef _dart_obs_data_set_default_bool = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  int val,
);

typedef _c_obs_data_set_default_obj = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> obj,
);

typedef _dart_obs_data_set_default_obj = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> obj,
);

typedef _c_obs_data_set_autoselect_string = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_obs_data_set_autoselect_string = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_obs_data_set_autoselect_int = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int64 val,
);

typedef _dart_obs_data_set_autoselect_int = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  int val,
);

typedef _c_obs_data_set_autoselect_double = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Double val,
);

typedef _dart_obs_data_set_autoselect_double = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  double val,
);

typedef _c_obs_data_set_autoselect_bool = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint8 val,
);

typedef _dart_obs_data_set_autoselect_bool = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  int val,
);

typedef _c_obs_data_set_autoselect_obj = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> obj,
);

typedef _dart_obs_data_set_autoselect_obj = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> obj,
);

typedef _c_obs_data_get_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_int = ffi.Int64 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_int = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_double = ffi.Double Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_double = double Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_bool = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_bool = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_array = ffi.Pointer<obs_data_array> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_array = ffi.Pointer<obs_data_array> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_default_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_default_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_default_int = ffi.Int64 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_default_int = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_default_double = ffi.Double Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_default_double = double Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_default_bool = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_default_bool = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_default_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_default_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_default_array = ffi.Pointer<obs_data_array> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_default_array = ffi.Pointer<obs_data_array> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_autoselect_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_autoselect_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_autoselect_int = ffi.Int64 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_autoselect_int = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_autoselect_double = ffi.Double Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_autoselect_double = double Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_autoselect_bool = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_autoselect_bool = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_autoselect_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_autoselect_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_get_autoselect_array = ffi.Pointer<obs_data_array> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_get_autoselect_array = ffi.Pointer<obs_data_array>
    Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_array_create = ffi.Pointer<obs_data_array> Function();

typedef _dart_obs_data_array_create = ffi.Pointer<obs_data_array> Function();

typedef _c_obs_data_array_addref = ffi.Void Function(
  ffi.Pointer<obs_data_array> array,
);

typedef _dart_obs_data_array_addref = void Function(
  ffi.Pointer<obs_data_array> array,
);

typedef _c_obs_data_array_release = ffi.Void Function(
  ffi.Pointer<obs_data_array> array,
);

typedef _dart_obs_data_array_release = void Function(
  ffi.Pointer<obs_data_array> array,
);

typedef _c_obs_data_array_count = ffi.Uint64 Function(
  ffi.Pointer<obs_data_array> array,
);

typedef _dart_obs_data_array_count = int Function(
  ffi.Pointer<obs_data_array> array,
);

typedef _c_obs_data_array_item = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data_array> array,
  ffi.Uint64 idx,
);

typedef _dart_obs_data_array_item = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data_array> array,
  int idx,
);

typedef _c_obs_data_array_push_back = ffi.Uint64 Function(
  ffi.Pointer<obs_data_array> array,
  ffi.Pointer<obs_data> obj,
);

typedef _dart_obs_data_array_push_back = int Function(
  ffi.Pointer<obs_data_array> array,
  ffi.Pointer<obs_data> obj,
);

typedef _c_obs_data_array_insert = ffi.Void Function(
  ffi.Pointer<obs_data_array> array,
  ffi.Uint64 idx,
  ffi.Pointer<obs_data> obj,
);

typedef _dart_obs_data_array_insert = void Function(
  ffi.Pointer<obs_data_array> array,
  int idx,
  ffi.Pointer<obs_data> obj,
);

typedef _c_obs_data_array_push_back_array = ffi.Void Function(
  ffi.Pointer<obs_data_array> array,
  ffi.Pointer<obs_data_array> array2,
);

typedef _dart_obs_data_array_push_back_array = void Function(
  ffi.Pointer<obs_data_array> array,
  ffi.Pointer<obs_data_array> array2,
);

typedef _c_obs_data_array_erase = ffi.Void Function(
  ffi.Pointer<obs_data_array> array,
  ffi.Uint64 idx,
);

typedef _dart_obs_data_array_erase = void Function(
  ffi.Pointer<obs_data_array> array,
  int idx,
);

typedef _c_obs_data_has_user_value = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_has_user_value = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_has_default_value = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_has_default_value = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_has_autoselect_value = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_has_autoselect_value = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_item_has_user_value = ffi.Uint8 Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _dart_obs_data_item_has_user_value = int Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _c_obs_data_item_has_default_value = ffi.Uint8 Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _dart_obs_data_item_has_default_value = int Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _c_obs_data_item_has_autoselect_value = ffi.Uint8 Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _dart_obs_data_item_has_autoselect_value = int Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _c_obs_data_unset_user_value = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_unset_user_value = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_unset_default_value = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_unset_default_value = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_unset_autoselect_value = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_unset_autoselect_value = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_item_unset_user_value = ffi.Void Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _dart_obs_data_item_unset_user_value = void Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _c_obs_data_item_unset_default_value = ffi.Void Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _dart_obs_data_item_unset_default_value = void Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _c_obs_data_item_unset_autoselect_value = ffi.Void Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _dart_obs_data_item_unset_autoselect_value = void Function(
  ffi.Pointer<obs_data_item> data,
);

typedef _c_obs_data_first = ffi.Pointer<obs_data_item> Function(
  ffi.Pointer<obs_data> data,
);

typedef _dart_obs_data_first = ffi.Pointer<obs_data_item> Function(
  ffi.Pointer<obs_data> data,
);

typedef _c_obs_data_item_byname = ffi.Pointer<obs_data_item> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_data_item_byname = ffi.Pointer<obs_data_item> Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_data_item_next = ffi.Uint8 Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
);

typedef _dart_obs_data_item_next = int Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
);

typedef _c_obs_data_item_release = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
);

typedef _dart_obs_data_item_release = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
);

typedef _c_obs_data_item_remove = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
);

typedef _dart_obs_data_item_remove = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
);

typedef _c_obs_data_item_gettype = ffi.Int32 Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_gettype = int Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_numtype = ffi.Int32 Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_numtype = int Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_set_string = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_obs_data_item_set_string = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_obs_data_item_set_int = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Int64 val,
);

typedef _dart_obs_data_item_set_int = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  int val,
);

typedef _c_obs_data_item_set_double = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Double val,
);

typedef _dart_obs_data_item_set_double = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  double val,
);

typedef _c_obs_data_item_set_bool = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Uint8 val,
);

typedef _dart_obs_data_item_set_bool = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  int val,
);

typedef _c_obs_data_item_set_obj = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data> val,
);

typedef _dart_obs_data_item_set_obj = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data> val,
);

typedef _c_obs_data_item_set_array = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data_array> val,
);

typedef _dart_obs_data_item_set_array = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data_array> val,
);

typedef _c_obs_data_item_set_default_string = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_obs_data_item_set_default_string = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_obs_data_item_set_default_int = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Int64 val,
);

typedef _dart_obs_data_item_set_default_int = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  int val,
);

typedef _c_obs_data_item_set_default_double = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Double val,
);

typedef _dart_obs_data_item_set_default_double = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  double val,
);

typedef _c_obs_data_item_set_default_bool = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Uint8 val,
);

typedef _dart_obs_data_item_set_default_bool = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  int val,
);

typedef _c_obs_data_item_set_default_obj = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data> val,
);

typedef _dart_obs_data_item_set_default_obj = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data> val,
);

typedef _c_obs_data_item_set_default_array = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data_array> val,
);

typedef _dart_obs_data_item_set_default_array = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data_array> val,
);

typedef _c_obs_data_item_set_autoselect_string = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_obs_data_item_set_autoselect_string = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_obs_data_item_set_autoselect_int = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Int64 val,
);

typedef _dart_obs_data_item_set_autoselect_int = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  int val,
);

typedef _c_obs_data_item_set_autoselect_double = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Double val,
);

typedef _dart_obs_data_item_set_autoselect_double = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  double val,
);

typedef _c_obs_data_item_set_autoselect_bool = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Uint8 val,
);

typedef _dart_obs_data_item_set_autoselect_bool = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  int val,
);

typedef _c_obs_data_item_set_autoselect_obj = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data> val,
);

typedef _dart_obs_data_item_set_autoselect_obj = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data> val,
);

typedef _c_obs_data_item_set_autoselect_array = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data_array> val,
);

typedef _dart_obs_data_item_set_autoselect_array = void Function(
  ffi.Pointer<ffi.Pointer<obs_data_item>> item,
  ffi.Pointer<obs_data_array> val,
);

typedef _c_obs_data_item_get_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_int = ffi.Int64 Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_int = int Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_double = ffi.Double Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_double = double Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_bool = ffi.Uint8 Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_bool = int Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_array = ffi.Pointer<obs_data_array> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_array = ffi.Pointer<obs_data_array> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_default_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_default_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_default_int = ffi.Int64 Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_default_int = int Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_default_double = ffi.Double Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_default_double = double Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_default_bool = ffi.Uint8 Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_default_bool = int Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_default_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_default_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_default_array = ffi.Pointer<obs_data_array>
    Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_default_array = ffi.Pointer<obs_data_array>
    Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_autoselect_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_autoselect_string = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_autoselect_int = ffi.Int64 Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_autoselect_int = int Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_autoselect_double = ffi.Double Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_autoselect_double = double Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_autoselect_bool = ffi.Uint8 Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_autoselect_bool = int Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_autoselect_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_autoselect_obj = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_item_get_autoselect_array = ffi.Pointer<obs_data_array>
    Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _dart_obs_data_item_get_autoselect_array = ffi.Pointer<obs_data_array>
    Function(
  ffi.Pointer<obs_data_item> item,
);

typedef _c_obs_data_set_vec2 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _dart_obs_data_set_vec2 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _c_obs_data_set_vec3 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _dart_obs_data_set_vec3 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _c_obs_data_set_vec4 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _dart_obs_data_set_vec4 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _c_obs_data_set_quat = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _dart_obs_data_set_quat = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _c_obs_data_set_default_vec2 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _dart_obs_data_set_default_vec2 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _c_obs_data_set_default_vec3 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _dart_obs_data_set_default_vec3 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _c_obs_data_set_default_vec4 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _dart_obs_data_set_default_vec4 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _c_obs_data_set_default_quat = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _dart_obs_data_set_default_quat = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _c_obs_data_set_autoselect_vec2 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _dart_obs_data_set_autoselect_vec2 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _c_obs_data_set_autoselect_vec3 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _dart_obs_data_set_autoselect_vec3 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _c_obs_data_set_autoselect_vec4 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _dart_obs_data_set_autoselect_vec4 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _c_obs_data_set_autoselect_quat = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _dart_obs_data_set_autoselect_quat = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _c_obs_data_get_vec2 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _dart_obs_data_get_vec2 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _c_obs_data_get_vec3 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _dart_obs_data_get_vec3 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _c_obs_data_get_vec4 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _dart_obs_data_get_vec4 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _c_obs_data_get_quat = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _dart_obs_data_get_quat = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _c_obs_data_get_default_vec2 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _dart_obs_data_get_default_vec2 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _c_obs_data_get_default_vec3 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _dart_obs_data_get_default_vec3 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _c_obs_data_get_default_vec4 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _dart_obs_data_get_default_vec4 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _c_obs_data_get_default_quat = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _dart_obs_data_get_default_quat = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _c_obs_data_get_autoselect_vec2 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _dart_obs_data_get_autoselect_vec2 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec2> val,
);

typedef _c_obs_data_get_autoselect_vec3 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _dart_obs_data_get_autoselect_vec3 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec3> val,
);

typedef _c_obs_data_get_autoselect_vec4 = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _dart_obs_data_get_autoselect_vec4 = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<vec4> val,
);

typedef _c_obs_data_get_autoselect_quat = ffi.Void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _dart_obs_data_get_autoselect_quat = void Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<quat> val,
);

typedef _c_obs_data_get_frames_per_second = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _dart_obs_data_get_frames_per_second = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _c_obs_data_get_default_frames_per_second = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _dart_obs_data_get_default_frames_per_second = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _c_obs_data_get_autoselect_frames_per_second = ffi.Uint8 Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _dart_obs_data_get_autoselect_frames_per_second = int Function(
  ffi.Pointer<obs_data> data,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _c_obs_data_item_get_frames_per_second = ffi.Uint8 Function(
  ffi.Pointer<obs_data_item> item,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _dart_obs_data_item_get_frames_per_second = int Function(
  ffi.Pointer<obs_data_item> item,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _c_obs_data_item_get_default_frames_per_second = ffi.Uint8 Function(
  ffi.Pointer<obs_data_item> item,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _dart_obs_data_item_get_default_frames_per_second = int Function(
  ffi.Pointer<obs_data_item> item,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _c_obs_data_item_get_autoselect_frames_per_second = ffi.Uint8 Function(
  ffi.Pointer<obs_data_item> item,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _dart_obs_data_item_get_autoselect_frames_per_second = int Function(
  ffi.Pointer<obs_data_item> item,
  ffi.Pointer<media_frames_per_second> fps,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> option,
);

typedef _c_obs_data_newref = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data> data,
);

typedef _dart_obs_data_newref = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_data> data,
);

typedef _c_obs_register_modal_ui = ffi.Void Function(
  ffi.Pointer<obs_modal_ui> info,
);

typedef _dart_obs_register_modal_ui = void Function(
  ffi.Pointer<obs_modal_ui> info,
);

typedef _c_obs_register_modeless_ui = ffi.Void Function(
  ffi.Pointer<obs_modeless_ui> info,
);

typedef _dart_obs_register_modeless_ui = void Function(
  ffi.Pointer<obs_modeless_ui> info,
);

typedef _c_obs_exec_ui = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> task,
  ffi.Pointer<ffi.Int8> target,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> ui_data,
);

typedef _dart_obs_exec_ui = int Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> task,
  ffi.Pointer<ffi.Int8> target,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> ui_data,
);

typedef _c_obs_create_ui = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> task,
  ffi.Pointer<ffi.Int8> target,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> ui_data,
);

typedef _dart_obs_create_ui = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> task,
  ffi.Pointer<ffi.Int8> target,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> ui_data,
);

typedef _c_obs_properties_create = ffi.Pointer<obs_properties> Function();

typedef _dart_obs_properties_create = ffi.Pointer<obs_properties> Function();

typedef _typedefC_13 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_properties_create_param = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Void> param,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> destroy,
);

typedef _dart_obs_properties_create_param = ffi.Pointer<obs_properties>
    Function(
  ffi.Pointer<ffi.Void> param,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> destroy,
);

typedef _c_obs_properties_destroy = ffi.Void Function(
  ffi.Pointer<obs_properties> props,
);

typedef _dart_obs_properties_destroy = void Function(
  ffi.Pointer<obs_properties> props,
);

typedef _c_obs_properties_set_flags = ffi.Void Function(
  ffi.Pointer<obs_properties> props,
  ffi.Uint32 flags,
);

typedef _dart_obs_properties_set_flags = void Function(
  ffi.Pointer<obs_properties> props,
  int flags,
);

typedef _c_obs_properties_get_flags = ffi.Uint32 Function(
  ffi.Pointer<obs_properties> props,
);

typedef _dart_obs_properties_get_flags = int Function(
  ffi.Pointer<obs_properties> props,
);

typedef _typedefC_14 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_properties_set_param = ffi.Void Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Void> param,
  ffi.Pointer<ffi.NativeFunction<_typedefC_14>> destroy,
);

typedef _dart_obs_properties_set_param = void Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Void> param,
  ffi.Pointer<ffi.NativeFunction<_typedefC_14>> destroy,
);

typedef _c_obs_properties_get_param = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_properties> props,
);

typedef _dart_obs_properties_get_param = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_properties> props,
);

typedef _c_obs_properties_first = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
);

typedef _dart_obs_properties_first = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
);

typedef _c_obs_properties_get = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> property,
);

typedef _dart_obs_properties_get = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> property,
);

typedef _c_obs_properties_get_parent = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_properties> props,
);

typedef _dart_obs_properties_get_parent = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_properties> props,
);

typedef _c_obs_properties_remove_by_name = ffi.Void Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> property,
);

typedef _dart_obs_properties_remove_by_name = void Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> property,
);

typedef _c_obs_properties_apply_settings = ffi.Void Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_properties_apply_settings = void Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_properties_add_bool = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _dart_obs_properties_add_bool = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _c_obs_properties_add_int = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Int32 min,
  ffi.Int32 max,
  ffi.Int32 step,
);

typedef _dart_obs_properties_add_int = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  int min,
  int max,
  int step,
);

typedef _c_obs_properties_add_float = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Double min,
  ffi.Double max,
  ffi.Double step,
);

typedef _dart_obs_properties_add_float = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  double min,
  double max,
  double step,
);

typedef _c_obs_properties_add_int_slider = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Int32 min,
  ffi.Int32 max,
  ffi.Int32 step,
);

typedef _dart_obs_properties_add_int_slider = ffi.Pointer<obs_property>
    Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  int min,
  int max,
  int step,
);

typedef _c_obs_properties_add_float_slider = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Double min,
  ffi.Double max,
  ffi.Double step,
);

typedef _dart_obs_properties_add_float_slider = ffi.Pointer<obs_property>
    Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  double min,
  double max,
  double step,
);

typedef _c_obs_properties_add_text = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Int32 type,
);

typedef _dart_obs_properties_add_text = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  int type,
);

typedef _c_obs_properties_add_path = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int8> filter,
  ffi.Pointer<ffi.Int8> default_path,
);

typedef _dart_obs_properties_add_path = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  int type,
  ffi.Pointer<ffi.Int8> filter,
  ffi.Pointer<ffi.Int8> default_path,
);

typedef _c_obs_properties_add_list = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Int32 type,
  ffi.Int32 format,
);

typedef _dart_obs_properties_add_list = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  int type,
  int format,
);

typedef _c_obs_properties_add_color = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _dart_obs_properties_add_color = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef obs_property_clicked_t = ffi.Uint8 Function(
  ffi.Pointer<obs_properties>,
  ffi.Pointer<obs_property>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_properties_add_button = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.NativeFunction<obs_property_clicked_t>> callback,
);

typedef _dart_obs_properties_add_button = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.NativeFunction<obs_property_clicked_t>> callback,
);

typedef _c_obs_properties_add_button2 = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.NativeFunction<obs_property_clicked_t>> callback,
  ffi.Pointer<ffi.Void> priv,
);

typedef _dart_obs_properties_add_button2 = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.NativeFunction<obs_property_clicked_t>> callback,
  ffi.Pointer<ffi.Void> priv,
);

typedef _c_obs_properties_add_font = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _dart_obs_properties_add_font = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _c_obs_properties_add_editable_list = ffi.Pointer<obs_property>
    Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int8> filter,
  ffi.Pointer<ffi.Int8> default_path,
);

typedef _dart_obs_properties_add_editable_list = ffi.Pointer<obs_property>
    Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  int type,
  ffi.Pointer<ffi.Int8> filter,
  ffi.Pointer<ffi.Int8> default_path,
);

typedef _c_obs_properties_add_frame_rate = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _dart_obs_properties_add_frame_rate = ffi.Pointer<obs_property>
    Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _c_obs_properties_add_group = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Int32 type,
  ffi.Pointer<obs_properties> group,
);

typedef _dart_obs_properties_add_group = ffi.Pointer<obs_property> Function(
  ffi.Pointer<obs_properties> props,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  int type,
  ffi.Pointer<obs_properties> group,
);

typedef obs_property_modified_t = ffi.Uint8 Function(
  ffi.Pointer<obs_properties>,
  ffi.Pointer<obs_property>,
  ffi.Pointer<obs_data>,
);

typedef _c_obs_property_set_modified_callback = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.NativeFunction<obs_property_modified_t>> modified,
);

typedef _dart_obs_property_set_modified_callback = void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.NativeFunction<obs_property_modified_t>> modified,
);

typedef obs_property_modified2_t = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_properties>,
  ffi.Pointer<obs_property>,
  ffi.Pointer<obs_data>,
);

typedef _c_obs_property_set_modified_callback2 = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.NativeFunction<obs_property_modified2_t>> modified,
  ffi.Pointer<ffi.Void> priv,
);

typedef _dart_obs_property_set_modified_callback2 = void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.NativeFunction<obs_property_modified2_t>> modified,
  ffi.Pointer<ffi.Void> priv,
);

typedef _c_obs_property_modified = ffi.Uint8 Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_property_modified = int Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_property_button_clicked = ffi.Uint8 Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Void> obj,
);

typedef _dart_obs_property_button_clicked = int Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Void> obj,
);

typedef _c_obs_property_set_visible = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint8 visible,
);

typedef _dart_obs_property_set_visible = void Function(
  ffi.Pointer<obs_property> p,
  int visible,
);

typedef _c_obs_property_set_enabled = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint8 enabled,
);

typedef _dart_obs_property_set_enabled = void Function(
  ffi.Pointer<obs_property> p,
  int enabled,
);

typedef _c_obs_property_set_description = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> description,
);

typedef _dart_obs_property_set_description = void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> description,
);

typedef _c_obs_property_set_long_description = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> long_description,
);

typedef _dart_obs_property_set_long_description = void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> long_description,
);

typedef _c_obs_property_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_long_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_long_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_get_type = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_get_type = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_enabled = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_visible = ffi.Uint8 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_visible = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_next = ffi.Uint8 Function(
  ffi.Pointer<ffi.Pointer<obs_property>> p,
);

typedef _dart_obs_property_next = int Function(
  ffi.Pointer<ffi.Pointer<obs_property>> p,
);

typedef _c_obs_property_int_min = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_int_min = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_int_max = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_int_max = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_int_step = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_int_step = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_int_type = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_int_type = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_int_suffix = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_int_suffix = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_float_min = ffi.Double Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_float_min = double Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_float_max = ffi.Double Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_float_max = double Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_float_step = ffi.Double Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_float_step = double Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_float_type = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_float_type = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_float_suffix = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_float_suffix = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_text_type = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_text_type = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_text_monospace = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_text_monospace = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_path_type = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_path_type = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_path_filter = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_path_filter = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_path_default_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_path_default_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_list_type = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_list_type = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_list_format = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_list_format = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_int_set_limits = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Int32 min,
  ffi.Int32 max,
  ffi.Int32 step,
);

typedef _dart_obs_property_int_set_limits = void Function(
  ffi.Pointer<obs_property> p,
  int min,
  int max,
  int step,
);

typedef _c_obs_property_float_set_limits = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Double min,
  ffi.Double max,
  ffi.Double step,
);

typedef _dart_obs_property_float_set_limits = void Function(
  ffi.Pointer<obs_property> p,
  double min,
  double max,
  double step,
);

typedef _c_obs_property_int_set_suffix = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> suffix,
);

typedef _dart_obs_property_int_set_suffix = void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> suffix,
);

typedef _c_obs_property_float_set_suffix = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> suffix,
);

typedef _dart_obs_property_float_set_suffix = void Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> suffix,
);

typedef _c_obs_property_text_set_monospace = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint8 monospace,
);

typedef _dart_obs_property_text_set_monospace = void Function(
  ffi.Pointer<obs_property> p,
  int monospace,
);

typedef _c_obs_property_list_clear = ffi.Void Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_list_clear = void Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_list_add_string = ffi.Uint64 Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_obs_property_list_add_string = int Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_obs_property_list_add_int = ffi.Uint64 Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int64 val,
);

typedef _dart_obs_property_list_add_int = int Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> name,
  int val,
);

typedef _c_obs_property_list_add_float = ffi.Uint64 Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> name,
  ffi.Double val,
);

typedef _dart_obs_property_list_add_float = int Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> name,
  double val,
);

typedef _c_obs_property_list_insert_string = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_obs_property_list_insert_string = void Function(
  ffi.Pointer<obs_property> p,
  int idx,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_obs_property_list_insert_int = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int64 val,
);

typedef _dart_obs_property_list_insert_int = void Function(
  ffi.Pointer<obs_property> p,
  int idx,
  ffi.Pointer<ffi.Int8> name,
  int val,
);

typedef _c_obs_property_list_insert_float = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Int8> name,
  ffi.Double val,
);

typedef _dart_obs_property_list_insert_float = void Function(
  ffi.Pointer<obs_property> p,
  int idx,
  ffi.Pointer<ffi.Int8> name,
  double val,
);

typedef _c_obs_property_list_item_disable = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
  ffi.Uint8 disabled,
);

typedef _dart_obs_property_list_item_disable = void Function(
  ffi.Pointer<obs_property> p,
  int idx,
  int disabled,
);

typedef _c_obs_property_list_item_disabled = ffi.Uint8 Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
);

typedef _dart_obs_property_list_item_disabled = int Function(
  ffi.Pointer<obs_property> p,
  int idx,
);

typedef _c_obs_property_list_item_remove = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
);

typedef _dart_obs_property_list_item_remove = void Function(
  ffi.Pointer<obs_property> p,
  int idx,
);

typedef _c_obs_property_list_item_count = ffi.Uint64 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_list_item_count = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_list_item_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
);

typedef _dart_obs_property_list_item_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
  int idx,
);

typedef _c_obs_property_list_item_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
);

typedef _dart_obs_property_list_item_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
  int idx,
);

typedef _c_obs_property_list_item_int = ffi.Int64 Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
);

typedef _dart_obs_property_list_item_int = int Function(
  ffi.Pointer<obs_property> p,
  int idx,
);

typedef _c_obs_property_list_item_float = ffi.Double Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
);

typedef _dart_obs_property_list_item_float = double Function(
  ffi.Pointer<obs_property> p,
  int idx,
);

typedef _c_obs_property_editable_list_type = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_editable_list_type = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_editable_list_filter = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_editable_list_filter = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_editable_list_default_path = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_editable_list_default_path = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_frame_rate_clear = ffi.Void Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_frame_rate_clear = void Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_frame_rate_options_clear = ffi.Void Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_frame_rate_options_clear = void Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_frame_rate_fps_ranges_clear = ffi.Void Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_frame_rate_fps_ranges_clear = void Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_frame_rate_option_add = ffi.Uint64 Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _dart_obs_property_frame_rate_option_add = int Function(
  ffi.Pointer<obs_property> p,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _c_obs_property_frame_rate_option_insert = ffi.Void Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _dart_obs_property_frame_rate_option_insert = void Function(
  ffi.Pointer<obs_property> p,
  int idx,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
);

typedef _c_obs_property_frame_rate_options_count = ffi.Uint64 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_frame_rate_options_count = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_frame_rate_option_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
);

typedef _dart_obs_property_frame_rate_option_name = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_property> p,
  int idx,
);

typedef _c_obs_property_frame_rate_option_description = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_property> p,
  ffi.Uint64 idx,
);

typedef _dart_obs_property_frame_rate_option_description = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_property> p,
  int idx,
);

typedef _c_obs_property_frame_rate_fps_ranges_count = ffi.Uint64 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_frame_rate_fps_ranges_count = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_group_type = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_group_type = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_property_group_content = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_property_group_content = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_proprety_text_type = ffi.Int32 Function(
  ffi.Pointer<obs_property> p,
);

typedef _dart_obs_proprety_text_type = int Function(
  ffi.Pointer<obs_property> p,
);

typedef _c_obs_register_source_s = ffi.Void Function(
  ffi.Pointer<obs_source_info> info,
  ffi.Uint64 size,
);

typedef _dart_obs_register_source_s = void Function(
  ffi.Pointer<obs_source_info> info,
  int size,
);

typedef _c_obs_register_encoder_s = ffi.Void Function(
  ffi.Pointer<obs_encoder_info> info,
  ffi.Uint64 size,
);

typedef _dart_obs_register_encoder_s = void Function(
  ffi.Pointer<obs_encoder_info> info,
  int size,
);

typedef _c_obs_register_output_s = ffi.Void Function(
  ffi.Pointer<obs_output_info> info,
  ffi.Uint64 size,
);

typedef _dart_obs_register_output_s = void Function(
  ffi.Pointer<obs_output_info> info,
  int size,
);

typedef _c_obs_register_service_s = ffi.Void Function(
  ffi.Pointer<obs_service_info> info,
  ffi.Uint64 size,
);

typedef _dart_obs_register_service_s = void Function(
  ffi.Pointer<obs_service_info> info,
  int size,
);

typedef _c_obs_fader_create = ffi.Pointer<obs_fader> Function(
  ffi.Int32 type,
);

typedef _dart_obs_fader_create = ffi.Pointer<obs_fader> Function(
  int type,
);

typedef _c_obs_fader_destroy = ffi.Void Function(
  ffi.Pointer<obs_fader> fader,
);

typedef _dart_obs_fader_destroy = void Function(
  ffi.Pointer<obs_fader> fader,
);

typedef _c_obs_fader_set_db = ffi.Uint8 Function(
  ffi.Pointer<obs_fader> fader,
  ffi.Float db,
);

typedef _dart_obs_fader_set_db = int Function(
  ffi.Pointer<obs_fader> fader,
  double db,
);

typedef _c_obs_fader_get_db = ffi.Float Function(
  ffi.Pointer<obs_fader> fader,
);

typedef _dart_obs_fader_get_db = double Function(
  ffi.Pointer<obs_fader> fader,
);

typedef _c_obs_fader_set_deflection = ffi.Uint8 Function(
  ffi.Pointer<obs_fader> fader,
  ffi.Float def,
);

typedef _dart_obs_fader_set_deflection = int Function(
  ffi.Pointer<obs_fader> fader,
  double def,
);

typedef _c_obs_fader_get_deflection = ffi.Float Function(
  ffi.Pointer<obs_fader> fader,
);

typedef _dart_obs_fader_get_deflection = double Function(
  ffi.Pointer<obs_fader> fader,
);

typedef _c_obs_fader_set_mul = ffi.Uint8 Function(
  ffi.Pointer<obs_fader> fader,
  ffi.Float mul,
);

typedef _dart_obs_fader_set_mul = int Function(
  ffi.Pointer<obs_fader> fader,
  double mul,
);

typedef _c_obs_fader_get_mul = ffi.Float Function(
  ffi.Pointer<obs_fader> fader,
);

typedef _dart_obs_fader_get_mul = double Function(
  ffi.Pointer<obs_fader> fader,
);

typedef _c_obs_fader_attach_source = ffi.Uint8 Function(
  ffi.Pointer<obs_fader> fader,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_fader_attach_source = int Function(
  ffi.Pointer<obs_fader> fader,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_fader_detach_source = ffi.Void Function(
  ffi.Pointer<obs_fader> fader,
);

typedef _dart_obs_fader_detach_source = void Function(
  ffi.Pointer<obs_fader> fader,
);

typedef obs_fader_changed_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Float,
);

typedef _c_obs_fader_add_callback = ffi.Void Function(
  ffi.Pointer<obs_fader> fader,
  ffi.Pointer<ffi.NativeFunction<obs_fader_changed_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_fader_add_callback = void Function(
  ffi.Pointer<obs_fader> fader,
  ffi.Pointer<ffi.NativeFunction<obs_fader_changed_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_fader_remove_callback = ffi.Void Function(
  ffi.Pointer<obs_fader> fader,
  ffi.Pointer<ffi.NativeFunction<obs_fader_changed_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_fader_remove_callback = void Function(
  ffi.Pointer<obs_fader> fader,
  ffi.Pointer<ffi.NativeFunction<obs_fader_changed_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_volmeter_create = ffi.Pointer<obs_volmeter> Function(
  ffi.Int32 type,
);

typedef _dart_obs_volmeter_create = ffi.Pointer<obs_volmeter> Function(
  int type,
);

typedef _c_obs_volmeter_destroy = ffi.Void Function(
  ffi.Pointer<obs_volmeter> volmeter,
);

typedef _dart_obs_volmeter_destroy = void Function(
  ffi.Pointer<obs_volmeter> volmeter,
);

typedef _c_obs_volmeter_attach_source = ffi.Uint8 Function(
  ffi.Pointer<obs_volmeter> volmeter,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_volmeter_attach_source = int Function(
  ffi.Pointer<obs_volmeter> volmeter,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_volmeter_detach_source = ffi.Void Function(
  ffi.Pointer<obs_volmeter> volmeter,
);

typedef _dart_obs_volmeter_detach_source = void Function(
  ffi.Pointer<obs_volmeter> volmeter,
);

typedef _c_obs_volmeter_set_peak_meter_type = ffi.Void Function(
  ffi.Pointer<obs_volmeter> volmeter,
  ffi.Int32 peak_meter_type,
);

typedef _dart_obs_volmeter_set_peak_meter_type = void Function(
  ffi.Pointer<obs_volmeter> volmeter,
  int peak_meter_type,
);

typedef _c_obs_volmeter_set_update_interval = ffi.Void Function(
  ffi.Pointer<obs_volmeter> volmeter,
  ffi.Uint32 ms,
);

typedef _dart_obs_volmeter_set_update_interval = void Function(
  ffi.Pointer<obs_volmeter> volmeter,
  int ms,
);

typedef _c_obs_volmeter_get_update_interval = ffi.Uint32 Function(
  ffi.Pointer<obs_volmeter> volmeter,
);

typedef _dart_obs_volmeter_get_update_interval = int Function(
  ffi.Pointer<obs_volmeter> volmeter,
);

typedef _c_obs_volmeter_get_nr_channels = ffi.Int32 Function(
  ffi.Pointer<obs_volmeter> volmeter,
);

typedef _dart_obs_volmeter_get_nr_channels = int Function(
  ffi.Pointer<obs_volmeter> volmeter,
);

typedef obs_volmeter_updated_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Float>,
  ffi.Pointer<ffi.Float>,
  ffi.Pointer<ffi.Float>,
);

typedef _c_obs_volmeter_add_callback = ffi.Void Function(
  ffi.Pointer<obs_volmeter> volmeter,
  ffi.Pointer<ffi.NativeFunction<obs_volmeter_updated_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_volmeter_add_callback = void Function(
  ffi.Pointer<obs_volmeter> volmeter,
  ffi.Pointer<ffi.NativeFunction<obs_volmeter_updated_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_volmeter_remove_callback = ffi.Void Function(
  ffi.Pointer<obs_volmeter> volmeter,
  ffi.Pointer<ffi.NativeFunction<obs_volmeter_updated_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_volmeter_remove_callback = void Function(
  ffi.Pointer<obs_volmeter> volmeter,
  ffi.Pointer<ffi.NativeFunction<obs_volmeter_updated_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_mul_to_db = ffi.Float Function(
  ffi.Float mul,
);

typedef _dart_obs_mul_to_db = double Function(
  double mul,
);

typedef _c_obs_db_to_mul = ffi.Float Function(
  ffi.Float db,
);

typedef _dart_obs_db_to_mul = double Function(
  double db,
);

typedef _c_obs_hotkey_get_id = ffi.Uint64 Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _dart_obs_hotkey_get_id = int Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _c_obs_hotkey_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _dart_obs_hotkey_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _c_obs_hotkey_get_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _dart_obs_hotkey_get_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _c_obs_hotkey_get_registerer_type = ffi.Int32 Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _dart_obs_hotkey_get_registerer_type = int Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _c_obs_hotkey_get_registerer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _dart_obs_hotkey_get_registerer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _c_obs_hotkey_get_pair_partner_id = ffi.Uint64 Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _dart_obs_hotkey_get_pair_partner_id = int Function(
  ffi.Pointer<obs_hotkey> key,
);

typedef _c_obs_hotkey_binding_get_hotkey_id = ffi.Uint64 Function(
  ffi.Pointer<obs_hotkey_binding> binding,
);

typedef _dart_obs_hotkey_binding_get_hotkey_id = int Function(
  ffi.Pointer<obs_hotkey_binding> binding,
);

typedef _c_obs_hotkey_binding_get_hotkey = ffi.Pointer<obs_hotkey> Function(
  ffi.Pointer<obs_hotkey_binding> binding,
);

typedef _dart_obs_hotkey_binding_get_hotkey = ffi.Pointer<obs_hotkey> Function(
  ffi.Pointer<obs_hotkey_binding> binding,
);

typedef _c_obs_hotkey_set_name = ffi.Void Function(
  ffi.Uint64 id,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_hotkey_set_name = void Function(
  int id,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_hotkey_set_description = ffi.Void Function(
  ffi.Uint64 id,
  ffi.Pointer<ffi.Int8> desc,
);

typedef _dart_obs_hotkey_set_description = void Function(
  int id,
  ffi.Pointer<ffi.Int8> desc,
);

typedef _c_obs_hotkey_pair_set_names = ffi.Void Function(
  ffi.Uint64 id,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> name1,
);

typedef _dart_obs_hotkey_pair_set_names = void Function(
  int id,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> name1,
);

typedef _c_obs_hotkey_pair_set_descriptions = ffi.Void Function(
  ffi.Uint64 id,
  ffi.Pointer<ffi.Int8> desc0,
  ffi.Pointer<ffi.Int8> desc1,
);

typedef _dart_obs_hotkey_pair_set_descriptions = void Function(
  int id,
  ffi.Pointer<ffi.Int8> desc0,
  ffi.Pointer<ffi.Int8> desc1,
);

typedef _c_obs_hotkeys_set_translations_s = ffi.Void Function(
  ffi.Pointer<obs_hotkeys_translations> translations,
  ffi.Uint64 size,
);

typedef _dart_obs_hotkeys_set_translations_s = void Function(
  ffi.Pointer<obs_hotkeys_translations> translations,
  int size,
);

typedef _c_obs_hotkeys_set_audio_hotkeys_translations = ffi.Void Function(
  ffi.Pointer<ffi.Int8> mute,
  ffi.Pointer<ffi.Int8> unmute,
  ffi.Pointer<ffi.Int8> push_to_mute,
  ffi.Pointer<ffi.Int8> push_to_talk,
);

typedef _dart_obs_hotkeys_set_audio_hotkeys_translations = void Function(
  ffi.Pointer<ffi.Int8> mute,
  ffi.Pointer<ffi.Int8> unmute,
  ffi.Pointer<ffi.Int8> push_to_mute,
  ffi.Pointer<ffi.Int8> push_to_talk,
);

typedef _c_obs_hotkeys_set_sceneitem_hotkeys_translations = ffi.Void Function(
  ffi.Pointer<ffi.Int8> show_1,
  ffi.Pointer<ffi.Int8> hide_1,
);

typedef _dart_obs_hotkeys_set_sceneitem_hotkeys_translations = void Function(
  ffi.Pointer<ffi.Int8> show_1,
  ffi.Pointer<ffi.Int8> hide_1,
);

typedef obs_hotkey_func = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<obs_hotkey>,
  ffi.Uint8,
);

typedef _c_obs_hotkey_register_frontend = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_hotkey_register_frontend = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_hotkey_register_encoder = ffi.Uint64 Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_hotkey_register_encoder = int Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_hotkey_register_output = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_hotkey_register_output = int Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_hotkey_register_service = ffi.Uint64 Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_hotkey_register_service = int Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_hotkey_register_source = ffi.Uint64 Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_hotkey_register_source = int Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> description,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef obs_hotkey_active_func = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<obs_hotkey>,
  ffi.Uint8,
);

typedef _c_obs_hotkey_pair_register_frontend = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _dart_obs_hotkey_pair_register_frontend = int Function(
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _c_obs_hotkey_pair_register_encoder = ffi.Uint64 Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _dart_obs_hotkey_pair_register_encoder = int Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _c_obs_hotkey_pair_register_output = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _dart_obs_hotkey_pair_register_output = int Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _c_obs_hotkey_pair_register_service = ffi.Uint64 Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _dart_obs_hotkey_pair_register_service = int Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _c_obs_hotkey_pair_register_source = ffi.Uint64 Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _dart_obs_hotkey_pair_register_source = int Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name0,
  ffi.Pointer<ffi.Int8> description0,
  ffi.Pointer<ffi.Int8> name1,
  ffi.Pointer<ffi.Int8> description1,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func0,
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_active_func>> func1,
  ffi.Pointer<ffi.Void> data0,
  ffi.Pointer<ffi.Void> data1,
);

typedef _c_obs_hotkey_unregister = ffi.Void Function(
  ffi.Uint64 id,
);

typedef _dart_obs_hotkey_unregister = void Function(
  int id,
);

typedef _c_obs_hotkey_pair_unregister = ffi.Void Function(
  ffi.Uint64 id,
);

typedef _dart_obs_hotkey_pair_unregister = void Function(
  int id,
);

typedef _c_obs_hotkey_load_bindings = ffi.Void Function(
  ffi.Uint64 id,
  ffi.Pointer<obs_key_combination> combinations,
  ffi.Uint64 num,
);

typedef _dart_obs_hotkey_load_bindings = void Function(
  int id,
  ffi.Pointer<obs_key_combination> combinations,
  int num,
);

typedef _c_obs_hotkey_load = ffi.Void Function(
  ffi.Uint64 id,
  ffi.Pointer<obs_data_array> data,
);

typedef _dart_obs_hotkey_load = void Function(
  int id,
  ffi.Pointer<obs_data_array> data,
);

typedef _c_obs_hotkeys_load_encoder = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<obs_data> hotkeys,
);

typedef _dart_obs_hotkeys_load_encoder = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<obs_data> hotkeys,
);

typedef _c_obs_hotkeys_load_output = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_data> hotkeys,
);

typedef _dart_obs_hotkeys_load_output = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_data> hotkeys,
);

typedef _c_obs_hotkeys_load_service = ffi.Void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data> hotkeys,
);

typedef _dart_obs_hotkeys_load_service = void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data> hotkeys,
);

typedef _c_obs_hotkeys_load_source = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_data> hotkeys,
);

typedef _dart_obs_hotkeys_load_source = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_data> hotkeys,
);

typedef _c_obs_hotkey_pair_load = ffi.Void Function(
  ffi.Uint64 id,
  ffi.Pointer<obs_data_array> data0,
  ffi.Pointer<obs_data_array> data1,
);

typedef _dart_obs_hotkey_pair_load = void Function(
  int id,
  ffi.Pointer<obs_data_array> data0,
  ffi.Pointer<obs_data_array> data1,
);

typedef _c_obs_hotkey_save = ffi.Pointer<obs_data_array> Function(
  ffi.Uint64 id,
);

typedef _dart_obs_hotkey_save = ffi.Pointer<obs_data_array> Function(
  int id,
);

typedef _c_obs_hotkey_pair_save = ffi.Void Function(
  ffi.Uint64 id,
  ffi.Pointer<ffi.Pointer<obs_data_array>> p_data0,
  ffi.Pointer<ffi.Pointer<obs_data_array>> p_data1,
);

typedef _dart_obs_hotkey_pair_save = void Function(
  int id,
  ffi.Pointer<ffi.Pointer<obs_data_array>> p_data0,
  ffi.Pointer<ffi.Pointer<obs_data_array>> p_data1,
);

typedef _c_obs_hotkeys_save_encoder = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_hotkeys_save_encoder = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_hotkeys_save_output = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_hotkeys_save_output = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_hotkeys_save_service = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_hotkeys_save_service = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_hotkeys_save_source = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_hotkeys_save_source = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_source> source,
);

typedef obs_hotkey_enum_func = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<obs_hotkey>,
);

typedef _c_obs_enum_hotkeys = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_enum_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_enum_hotkeys = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_enum_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef obs_hotkey_binding_enum_func = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<obs_hotkey_binding>,
);

typedef _c_obs_enum_hotkey_bindings = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_binding_enum_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_enum_hotkey_bindings = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_binding_enum_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_hotkey_enable_background_press = ffi.Void Function(
  ffi.Uint8 enable,
);

typedef _dart_obs_hotkey_enable_background_press = void Function(
  int enable,
);

typedef _c_obs_hotkey_enable_strict_modifiers = ffi.Void Function(
  ffi.Uint8 enable,
);

typedef _dart_obs_hotkey_enable_strict_modifiers = void Function(
  int enable,
);

typedef obs_hotkey_callback_router_func = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Uint8,
);

typedef _c_obs_hotkey_set_callback_routing_func = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_callback_router_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_hotkey_set_callback_routing_func = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_callback_router_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_hotkey_trigger_routed_callback = ffi.Void Function(
  ffi.Uint64 id,
  ffi.Uint8 pressed,
);

typedef _dart_obs_hotkey_trigger_routed_callback = void Function(
  int id,
  int pressed,
);

typedef _c_obs_hotkey_enable_callback_rerouting = ffi.Void Function(
  ffi.Uint8 enable,
);

typedef _dart_obs_hotkey_enable_callback_rerouting = void Function(
  int enable,
);

typedef obs_hotkey_atomic_update_func = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_hotkey_update_atomic = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_atomic_update_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_hotkey_update_atomic = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_hotkey_atomic_update_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_key_to_str = ffi.Void Function(
  ffi.Int32 key,
  ffi.Pointer<dstr> str,
);

typedef _dart_obs_key_to_str = void Function(
  int key,
  ffi.Pointer<dstr> str,
);

typedef _c_obs_key_from_virtual_key = ffi.Int32 Function(
  ffi.Int32 code,
);

typedef _dart_obs_key_from_virtual_key = int Function(
  int code,
);

typedef _c_obs_key_to_virtual_key = ffi.Int32 Function(
  ffi.Int32 key,
);

typedef _dart_obs_key_to_virtual_key = int Function(
  int key,
);

typedef _c_obs_key_to_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 key,
);

typedef _dart_obs_key_to_name = ffi.Pointer<ffi.Int8> Function(
  int key,
);

typedef _c_obs_key_from_name = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_key_from_name = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_find_data_file = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_obs_find_data_file = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_obs_add_data_path = ffi.Void Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_obs_add_data_path = void Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_obs_remove_data_path = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_obs_remove_data_path = int Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_obs_startup = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> locale,
  ffi.Pointer<ffi.Int8> module_config_path,
  ffi.Pointer<profiler_name_store> store,
);

typedef _dart_obs_startup = int Function(
  ffi.Pointer<ffi.Int8> locale,
  ffi.Pointer<ffi.Int8> module_config_path,
  ffi.Pointer<profiler_name_store> store,
);

typedef _c_obs_shutdown = ffi.Void Function();

typedef _dart_obs_shutdown = void Function();

typedef _c_obs_initialized = ffi.Uint8 Function();

typedef _dart_obs_initialized = int Function();

typedef _c_obs_get_version = ffi.Uint32 Function();

typedef _dart_obs_get_version = int Function();

typedef _c_obs_get_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _dart_obs_get_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _c_obs_set_cmdline_args = ffi.Void Function(
  ffi.Int32 argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _dart_obs_set_cmdline_args = void Function(
  int argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _c_obs_set_locale = ffi.Void Function(
  ffi.Pointer<ffi.Int8> locale,
);

typedef _dart_obs_set_locale = void Function(
  ffi.Pointer<ffi.Int8> locale,
);

typedef _c_obs_get_locale = ffi.Pointer<ffi.Int8> Function();

typedef _dart_obs_get_locale = ffi.Pointer<ffi.Int8> Function();

typedef _c_obs_get_profiler_name_store = ffi.Pointer<profiler_name_store>
    Function();

typedef _dart_obs_get_profiler_name_store = ffi.Pointer<profiler_name_store>
    Function();

typedef _c_obs_reset_video = ffi.Int32 Function(
  ffi.Pointer<obs_video_info> ovi,
);

typedef _dart_obs_reset_video = int Function(
  ffi.Pointer<obs_video_info> ovi,
);

typedef _c_obs_reset_audio = ffi.Uint8 Function(
  ffi.Pointer<obs_audio_info> oai,
);

typedef _dart_obs_reset_audio = int Function(
  ffi.Pointer<obs_audio_info> oai,
);

typedef _c_obs_get_video_info = ffi.Uint8 Function(
  ffi.Pointer<obs_video_info> ovi,
);

typedef _dart_obs_get_video_info = int Function(
  ffi.Pointer<obs_video_info> ovi,
);

typedef _c_obs_get_audio_info = ffi.Uint8 Function(
  ffi.Pointer<obs_audio_info> oai,
);

typedef _dart_obs_get_audio_info = int Function(
  ffi.Pointer<obs_audio_info> oai,
);

typedef _c_obs_open_module = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<obs_module>> module,
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> data_path,
);

typedef _dart_obs_open_module = int Function(
  ffi.Pointer<ffi.Pointer<obs_module>> module,
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> data_path,
);

typedef _c_obs_init_module = ffi.Uint8 Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_init_module = int Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module = ffi.Pointer<obs_module> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_module = ffi.Pointer<obs_module> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_module_get_locale_string = ffi.Uint8 Function(
  ffi.Pointer<obs_module> mod,
  ffi.Pointer<ffi.Int8> lookup_string,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> translated_string,
);

typedef _dart_obs_module_get_locale_string = int Function(
  ffi.Pointer<obs_module> mod,
  ffi.Pointer<ffi.Int8> lookup_string,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> translated_string,
);

typedef _c_obs_module_get_locale_text = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> mod,
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_obs_module_get_locale_text = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> mod,
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_obs_log_loaded_modules = ffi.Void Function();

typedef _dart_obs_log_loaded_modules = void Function();

typedef _c_obs_get_module_file_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_file_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_author = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_author = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_binary_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_binary_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_data_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_data_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_add_module_path = ffi.Void Function(
  ffi.Pointer<ffi.Int8> bin,
  ffi.Pointer<ffi.Int8> data,
);

typedef _dart_obs_add_module_path = void Function(
  ffi.Pointer<ffi.Int8> bin,
  ffi.Pointer<ffi.Int8> data,
);

typedef _c_obs_load_all_modules = ffi.Void Function();

typedef _dart_obs_load_all_modules = void Function();

typedef _c_obs_post_load_modules = ffi.Void Function();

typedef _dart_obs_post_load_modules = void Function();

typedef obs_find_module_callback_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_module_info>,
);

typedef _c_obs_find_modules = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_find_module_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_find_modules = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_find_module_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef obs_enum_module_callback_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_module>,
);

typedef _c_obs_enum_modules = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_enum_module_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_modules = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_enum_module_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_module_load_locale = ffi.Pointer<text_lookup> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> default_locale,
  ffi.Pointer<ffi.Int8> locale,
);

typedef _dart_obs_module_load_locale = ffi.Pointer<text_lookup> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> default_locale,
  ffi.Pointer<ffi.Int8> locale,
);

typedef _c_obs_find_module_file = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_obs_find_module_file = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_obs_module_get_config_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_obs_module_get_config_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_obs_enum_source_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_source_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_input_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_input_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_input_types2 = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> unversioned_id,
);

typedef _dart_obs_enum_input_types2 = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> unversioned_id,
);

typedef _c_obs_get_latest_input_type_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> unversioned_id,
);

typedef _dart_obs_get_latest_input_type_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> unversioned_id,
);

typedef _c_obs_enum_filter_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_filter_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_transition_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_transition_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_output_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_output_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_encoder_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_encoder_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_service_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_service_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enter_graphics = ffi.Void Function();

typedef _dart_obs_enter_graphics = void Function();

typedef _c_obs_leave_graphics = ffi.Void Function();

typedef _dart_obs_leave_graphics = void Function();

typedef _c_obs_get_audio = ffi.Pointer<audio_output> Function();

typedef _dart_obs_get_audio = ffi.Pointer<audio_output> Function();

typedef _c_obs_get_video = ffi.Pointer<video_output> Function();

typedef _dart_obs_get_video = ffi.Pointer<video_output> Function();

typedef _c_obs_video_active = ffi.Uint8 Function();

typedef _dart_obs_video_active = int Function();

typedef _c_obs_set_output_source = ffi.Void Function(
  ffi.Uint32 channel,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_set_output_source = void Function(
  int channel,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_get_output_source = ffi.Pointer<obs_source> Function(
  ffi.Uint32 channel,
);

typedef _dart_obs_get_output_source = ffi.Pointer<obs_source> Function(
  int channel,
);

typedef _typedefC_108 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
);

typedef _c_obs_enum_sources = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_108>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_sources = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_108>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_109 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
);

typedef _c_obs_enum_scenes = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_109>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_scenes = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_109>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_110 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_output>,
);

typedef _c_obs_enum_outputs = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_110>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_outputs = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_110>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_111 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_encoder>,
);

typedef _c_obs_enum_encoders = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_111>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_encoders = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_111>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_112 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_service>,
);

typedef _c_obs_enum_services = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_112>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_services = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_112>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_get_source_by_name = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_source_by_name = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_get_output_by_name = ffi.Pointer<obs_output> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_output_by_name = ffi.Pointer<obs_output> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_get_encoder_by_name = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_encoder_by_name = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_get_service_by_name = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_service_by_name = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_get_base_effect = ffi.Pointer<gs_effect> Function(
  ffi.Int32 effect,
);

typedef _dart_obs_get_base_effect = ffi.Pointer<gs_effect> Function(
  int effect,
);

typedef _c_obs_get_default_rect_effect = ffi.Pointer<gs_effect> Function();

typedef _dart_obs_get_default_rect_effect = ffi.Pointer<gs_effect> Function();

typedef _c_obs_get_signal_handler = ffi.Pointer<signal_handler> Function();

typedef _dart_obs_get_signal_handler = ffi.Pointer<signal_handler> Function();

typedef _c_obs_get_proc_handler = ffi.Pointer<proc_handler> Function();

typedef _dart_obs_get_proc_handler = ffi.Pointer<proc_handler> Function();

typedef _c_obs_render_main_view = ffi.Void Function();

typedef _dart_obs_render_main_view = void Function();

typedef _c_obs_render_main_texture = ffi.Void Function();

typedef _dart_obs_render_main_texture = void Function();

typedef _c_obs_render_main_texture_src_color_only = ffi.Void Function();

typedef _dart_obs_render_main_texture_src_color_only = void Function();

typedef _c_obs_get_main_texture = ffi.Pointer<gs_texture> Function();

typedef _dart_obs_get_main_texture = ffi.Pointer<gs_texture> Function();

typedef _c_obs_set_master_volume = ffi.Void Function(
  ffi.Float volume,
);

typedef _dart_obs_set_master_volume = void Function(
  double volume,
);

typedef _c_obs_get_master_volume = ffi.Float Function();

typedef _dart_obs_get_master_volume = double Function();

typedef _c_obs_save_source = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_save_source = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_load_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_data> data,
);

typedef _dart_obs_load_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_data> data,
);

typedef _c_obs_source_save = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_save = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_load = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_load = void Function(
  ffi.Pointer<obs_source> source,
);

typedef obs_load_source_cb = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
);

typedef _c_obs_load_sources = ffi.Void Function(
  ffi.Pointer<obs_data_array> array,
  ffi.Pointer<ffi.NativeFunction<obs_load_source_cb>> cb,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _dart_obs_load_sources = void Function(
  ffi.Pointer<obs_data_array> array,
  ffi.Pointer<ffi.NativeFunction<obs_load_source_cb>> cb,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _c_obs_save_sources = ffi.Pointer<obs_data_array> Function();

typedef _dart_obs_save_sources = ffi.Pointer<obs_data_array> Function();

typedef obs_save_source_filter_cb = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
);

typedef _c_obs_save_sources_filtered = ffi.Pointer<obs_data_array> Function(
  ffi.Pointer<ffi.NativeFunction<obs_save_source_filter_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_save_sources_filtered = ffi.Pointer<obs_data_array> Function(
  ffi.Pointer<ffi.NativeFunction<obs_save_source_filter_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_obj_get_type = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _dart_obs_obj_get_type = int Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _c_obs_obj_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _dart_obs_obj_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _c_obs_obj_invalid = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _dart_obs_obj_invalid = int Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _c_obs_obj_get_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _dart_obs_obj_get_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef obs_enum_audio_device_cb = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_obs_enum_audio_monitoring_devices = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_enum_audio_device_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_enum_audio_monitoring_devices = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_enum_audio_device_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_set_audio_monitoring_device = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_set_audio_monitoring_device = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_audio_monitoring_device = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_get_audio_monitoring_device = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _typedefC_113 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Float,
);

typedef _c_obs_add_tick_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_113>> tick,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_add_tick_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_113>> tick,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_114 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Float,
);

typedef _c_obs_remove_tick_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_114>> tick,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_remove_tick_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_114>> tick,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_115 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_add_main_render_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_115>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_add_main_render_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_115>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_116 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_remove_main_render_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_116>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_remove_main_render_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_116>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_117 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<video_data>,
);

typedef _c_obs_add_raw_video_callback = ffi.Void Function(
  ffi.Pointer<video_scale_info> conversion,
  ffi.Pointer<ffi.NativeFunction<_typedefC_117>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_add_raw_video_callback = void Function(
  ffi.Pointer<video_scale_info> conversion,
  ffi.Pointer<ffi.NativeFunction<_typedefC_117>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_118 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<video_data>,
);

typedef _c_obs_remove_raw_video_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_118>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_remove_raw_video_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_118>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_get_video_frame_time = ffi.Uint64 Function();

typedef _dart_obs_get_video_frame_time = int Function();

typedef _c_obs_get_active_fps = ffi.Double Function();

typedef _dart_obs_get_active_fps = double Function();

typedef _c_obs_get_average_frame_time_ns = ffi.Uint64 Function();

typedef _dart_obs_get_average_frame_time_ns = int Function();

typedef _c_obs_get_frame_interval_ns = ffi.Uint64 Function();

typedef _dart_obs_get_frame_interval_ns = int Function();

typedef _c_obs_get_total_frames = ffi.Uint32 Function();

typedef _dart_obs_get_total_frames = int Function();

typedef _c_obs_get_lagged_frames = ffi.Uint32 Function();

typedef _dart_obs_get_lagged_frames = int Function();

typedef _c_obs_nv12_tex_active = ffi.Uint8 Function();

typedef _dart_obs_nv12_tex_active = int Function();

typedef _c_obs_apply_private_data = ffi.Void Function(
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_apply_private_data = void Function(
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_set_private_data = ffi.Void Function(
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_set_private_data = void Function(
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_get_private_data = ffi.Pointer<obs_data> Function();

typedef _dart_obs_get_private_data = ffi.Pointer<obs_data> Function();

typedef obs_task_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_queue_task = ffi.Void Function(
  ffi.Int32 type,
  ffi.Pointer<ffi.NativeFunction<obs_task_t>> task,
  ffi.Pointer<ffi.Void> param,
  ffi.Uint8 wait,
);

typedef _dart_obs_queue_task = void Function(
  int type,
  ffi.Pointer<ffi.NativeFunction<obs_task_t>> task,
  ffi.Pointer<ffi.Void> param,
  int wait,
);

typedef obs_task_handler_t = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_task_t>>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint8,
);

typedef _c_obs_set_ui_task_handler = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_task_handler_t>> handler,
);

typedef _dart_obs_set_ui_task_handler = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_task_handler_t>> handler,
);

typedef _c_obs_view_create = ffi.Pointer<obs_view> Function();

typedef _dart_obs_view_create = ffi.Pointer<obs_view> Function();

typedef _c_obs_view_destroy = ffi.Void Function(
  ffi.Pointer<obs_view> view,
);

typedef _dart_obs_view_destroy = void Function(
  ffi.Pointer<obs_view> view,
);

typedef _c_obs_view_set_source = ffi.Void Function(
  ffi.Pointer<obs_view> view,
  ffi.Uint32 channel,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_view_set_source = void Function(
  ffi.Pointer<obs_view> view,
  int channel,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_view_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_view> view,
  ffi.Uint32 channel,
);

typedef _dart_obs_view_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_view> view,
  int channel,
);

typedef _c_obs_view_render = ffi.Void Function(
  ffi.Pointer<obs_view> view,
);

typedef _dart_obs_view_render = void Function(
  ffi.Pointer<obs_view> view,
);

typedef _c_obs_display_create = ffi.Pointer<obs_display> Function(
  ffi.Pointer<gs_init_data> graphics_data,
  ffi.Uint32 backround_color,
);

typedef _dart_obs_display_create = ffi.Pointer<obs_display> Function(
  ffi.Pointer<gs_init_data> graphics_data,
  int backround_color,
);

typedef _c_obs_display_destroy = ffi.Void Function(
  ffi.Pointer<obs_display> display,
);

typedef _dart_obs_display_destroy = void Function(
  ffi.Pointer<obs_display> display,
);

typedef _c_obs_display_resize = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Uint32 cx,
  ffi.Uint32 cy,
);

typedef _dart_obs_display_resize = void Function(
  ffi.Pointer<obs_display> display,
  int cx,
  int cy,
);

typedef _typedefC_119 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_display_add_draw_callback = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.NativeFunction<_typedefC_119>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_display_add_draw_callback = void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.NativeFunction<_typedefC_119>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_120 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_display_remove_draw_callback = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.NativeFunction<_typedefC_120>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_display_remove_draw_callback = void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.NativeFunction<_typedefC_120>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_display_set_enabled = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Uint8 enable,
);

typedef _dart_obs_display_set_enabled = void Function(
  ffi.Pointer<obs_display> display,
  int enable,
);

typedef _c_obs_display_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_display> display,
);

typedef _dart_obs_display_enabled = int Function(
  ffi.Pointer<obs_display> display,
);

typedef _c_obs_display_set_background_color = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Uint32 color,
);

typedef _dart_obs_display_set_background_color = void Function(
  ffi.Pointer<obs_display> display,
  int color,
);

typedef _c_obs_display_size = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.Uint32> width,
  ffi.Pointer<ffi.Uint32> height,
);

typedef _dart_obs_display_size = void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.Uint32> width,
  ffi.Pointer<ffi.Uint32> height,
);

typedef _c_obs_source_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_source_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_source_create = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _dart_obs_source_create = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _c_obs_source_create_private = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_source_create_private = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_source_duplicate = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> desired_name,
  ffi.Uint8 create_private,
);

typedef _dart_obs_source_duplicate = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> desired_name,
  int create_private,
);

typedef _c_obs_source_addref = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_addref = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_release = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_release = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_weak_source_addref = ffi.Void Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _dart_obs_weak_source_addref = void Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _c_obs_weak_source_release = ffi.Void Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _dart_obs_weak_source_release = void Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _c_obs_source_get_ref = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_ref = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_weak_source = ffi.Pointer<obs_weak_source> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_weak_source = ffi.Pointer<obs_weak_source>
    Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_weak_source_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _dart_obs_weak_source_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _c_obs_weak_source_references_source = ffi.Uint8 Function(
  ffi.Pointer<obs_weak_source> weak,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_weak_source_references_source = int Function(
  ffi.Pointer<obs_weak_source> weak,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_remove = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_remove = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_removed = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_removed = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_output_flags = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_output_flags = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_get_source_output_flags = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_source_output_flags = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_source_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_source_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_source_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_source_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_is_source_configurable = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_is_source_configurable = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_source_configurable = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_configurable = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_update = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_source_update = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_source_video_render = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_video_render = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_width = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_width = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_height = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_height = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_filter_get_parent = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_filter_get_parent = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_filter_get_target = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_filter_get_target = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_default_render = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_default_render = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_filter_add = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_source_filter_add = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_filter_remove = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_source_filter_remove = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_filter_set_order = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
  ffi.Int32 movement,
);

typedef _dart_obs_source_filter_set_order = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
  int movement,
);

typedef _c_obs_source_get_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_name = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_source_set_name = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_source_get_type = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_type = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_unversioned_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_unversioned_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_signal_handler = ffi.Pointer<signal_handler> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_signal_handler = ffi.Pointer<signal_handler>
    Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_proc_handler = ffi.Pointer<proc_handler> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_proc_handler = ffi.Pointer<proc_handler> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_volume = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Float volume,
);

typedef _dart_obs_source_set_volume = void Function(
  ffi.Pointer<obs_source> source,
  double volume,
);

typedef _c_obs_source_get_volume = ffi.Float Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_volume = double Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_speaker_layout = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_speaker_layout = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_balance_value = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Float balance,
);

typedef _dart_obs_source_set_balance_value = void Function(
  ffi.Pointer<obs_source> source,
  double balance,
);

typedef _c_obs_source_get_balance_value = ffi.Float Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_balance_value = double Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_sync_offset = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int64 offset,
);

typedef _dart_obs_source_set_sync_offset = void Function(
  ffi.Pointer<obs_source> source,
  int offset,
);

typedef _c_obs_source_get_sync_offset = ffi.Int64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_sync_offset = int Function(
  ffi.Pointer<obs_source> source,
);

typedef obs_source_enum_proc_t = ffi.Void Function(
  ffi.Pointer<obs_source>,
  ffi.Pointer<obs_source>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_source_enum_active_sources = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_enum_active_sources = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_enum_active_tree = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_enum_active_tree = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_active = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_active = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_showing = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_showing = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_flags = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint32 flags,
);

typedef _dart_obs_source_set_flags = void Function(
  ffi.Pointer<obs_source> source,
  int flags,
);

typedef _c_obs_source_get_flags = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_flags = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_audio_mixers = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint32 mixers,
);

typedef _dart_obs_source_set_audio_mixers = void Function(
  ffi.Pointer<obs_source> source,
  int mixers,
);

typedef _c_obs_source_get_audio_mixers = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_audio_mixers = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_inc_showing = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_inc_showing = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_inc_active = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_inc_active = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_dec_showing = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_dec_showing = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_dec_active = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_dec_active = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_enum_filters = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_enum_filters = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_get_filter_by_name = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_source_get_filter_by_name = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_source_copy_filters = ffi.Void Function(
  ffi.Pointer<obs_source> dst,
  ffi.Pointer<obs_source> src,
);

typedef _dart_obs_source_copy_filters = void Function(
  ffi.Pointer<obs_source> dst,
  ffi.Pointer<obs_source> src,
);

typedef _c_obs_source_copy_single_filter = ffi.Void Function(
  ffi.Pointer<obs_source> dst,
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_source_copy_single_filter = void Function(
  ffi.Pointer<obs_source> dst,
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_enabled = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_enabled = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 enabled,
);

typedef _dart_obs_source_set_enabled = void Function(
  ffi.Pointer<obs_source> source,
  int enabled,
);

typedef _c_obs_source_muted = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_muted = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_muted = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 muted,
);

typedef _dart_obs_source_set_muted = void Function(
  ffi.Pointer<obs_source> source,
  int muted,
);

typedef _c_obs_source_push_to_mute_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_push_to_mute_enabled = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_enable_push_to_mute = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 enabled,
);

typedef _dart_obs_source_enable_push_to_mute = void Function(
  ffi.Pointer<obs_source> source,
  int enabled,
);

typedef _c_obs_source_get_push_to_mute_delay = ffi.Uint64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_push_to_mute_delay = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_push_to_mute_delay = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint64 delay,
);

typedef _dart_obs_source_set_push_to_mute_delay = void Function(
  ffi.Pointer<obs_source> source,
  int delay,
);

typedef _c_obs_source_push_to_talk_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_push_to_talk_enabled = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_enable_push_to_talk = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 enabled,
);

typedef _dart_obs_source_enable_push_to_talk = void Function(
  ffi.Pointer<obs_source> source,
  int enabled,
);

typedef _c_obs_source_get_push_to_talk_delay = ffi.Uint64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_push_to_talk_delay = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_push_to_talk_delay = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint64 delay,
);

typedef _dart_obs_source_set_push_to_talk_delay = void Function(
  ffi.Pointer<obs_source> source,
  int delay,
);

typedef obs_source_audio_capture_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
  ffi.Pointer<audio_data>,
  ffi.Uint8,
);

typedef _c_obs_source_add_audio_capture_callback = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_add_audio_capture_callback = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_remove_audio_capture_callback = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_remove_audio_capture_callback = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_set_deinterlace_mode = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int32 mode,
);

typedef _dart_obs_source_set_deinterlace_mode = void Function(
  ffi.Pointer<obs_source> source,
  int mode,
);

typedef _c_obs_source_get_deinterlace_mode = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_deinterlace_mode = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_deinterlace_field_order = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int32 field_order,
);

typedef _dart_obs_source_set_deinterlace_field_order = void Function(
  ffi.Pointer<obs_source> source,
  int field_order,
);

typedef _c_obs_source_get_deinterlace_field_order = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_deinterlace_field_order = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_monitoring_type = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int32 type,
);

typedef _dart_obs_source_set_monitoring_type = void Function(
  ffi.Pointer<obs_source> source,
  int type,
);

typedef _c_obs_source_get_monitoring_type = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_monitoring_type = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_private_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_source> item,
);

typedef _dart_obs_source_get_private_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_source> item,
);

typedef _c_obs_source_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_draw_set_color_matrix = ffi.Void Function(
  ffi.Pointer<matrix4> color_matrix,
  ffi.Pointer<vec3> color_range_min,
  ffi.Pointer<vec3> color_range_max,
);

typedef _dart_obs_source_draw_set_color_matrix = void Function(
  ffi.Pointer<matrix4> color_matrix,
  ffi.Pointer<vec3> color_range_min,
  ffi.Pointer<vec3> color_range_max,
);

typedef _c_obs_source_draw = ffi.Void Function(
  ffi.Pointer<gs_texture> image,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint32 cx,
  ffi.Uint32 cy,
  ffi.Uint8 flip,
);

typedef _dart_obs_source_draw = void Function(
  ffi.Pointer<gs_texture> image,
  int x,
  int y,
  int cx,
  int cy,
  int flip,
);

typedef _c_obs_source_output_video = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_output_video = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_output_video2 = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _dart_obs_source_output_video2 = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _c_obs_source_set_async_rotation = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int64 rotation,
);

typedef _dart_obs_source_set_async_rotation = void Function(
  ffi.Pointer<obs_source> source,
  int rotation,
);

typedef _c_obs_source_preload_video = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_preload_video = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_preload_video2 = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _dart_obs_source_preload_video2 = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _c_obs_source_show_preloaded_video = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_show_preloaded_video = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_video_frame = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_set_video_frame = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_set_video_frame2 = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _dart_obs_source_set_video_frame2 = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _c_obs_source_output_audio = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_audio> audio,
);

typedef _dart_obs_source_output_audio = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_audio> audio,
);

typedef _c_obs_source_update_properties = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_update_properties = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_frame = ffi.Pointer<obs_source_frame> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_frame = ffi.Pointer<obs_source_frame> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_release_frame = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_release_frame = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_process_filter_begin = ffi.Uint8 Function(
  ffi.Pointer<obs_source> filter,
  ffi.Int32 format,
  ffi.Int32 allow_direct,
);

typedef _dart_obs_source_process_filter_begin = int Function(
  ffi.Pointer<obs_source> filter,
  int format,
  int allow_direct,
);

typedef _c_obs_source_process_filter_end = ffi.Void Function(
  ffi.Pointer<obs_source> filter,
  ffi.Pointer<gs_effect> effect,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_source_process_filter_end = void Function(
  ffi.Pointer<obs_source> filter,
  ffi.Pointer<gs_effect> effect,
  int width,
  int height,
);

typedef _c_obs_source_process_filter_tech_end = ffi.Void Function(
  ffi.Pointer<obs_source> filter,
  ffi.Pointer<gs_effect> effect,
  ffi.Uint32 width,
  ffi.Uint32 height,
  ffi.Pointer<ffi.Int8> tech_name,
);

typedef _dart_obs_source_process_filter_tech_end = void Function(
  ffi.Pointer<obs_source> filter,
  ffi.Pointer<gs_effect> effect,
  int width,
  int height,
  ffi.Pointer<ffi.Int8> tech_name,
);

typedef _c_obs_source_skip_video_filter = ffi.Void Function(
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_source_skip_video_filter = void Function(
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_add_active_child = ffi.Uint8 Function(
  ffi.Pointer<obs_source> parent,
  ffi.Pointer<obs_source> child,
);

typedef _dart_obs_source_add_active_child = int Function(
  ffi.Pointer<obs_source> parent,
  ffi.Pointer<obs_source> child,
);

typedef _c_obs_source_remove_active_child = ffi.Void Function(
  ffi.Pointer<obs_source> parent,
  ffi.Pointer<obs_source> child,
);

typedef _dart_obs_source_remove_active_child = void Function(
  ffi.Pointer<obs_source> parent,
  ffi.Pointer<obs_source> child,
);

typedef _c_obs_source_send_mouse_click = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  ffi.Int32 type,
  ffi.Uint8 mouse_up,
  ffi.Uint32 click_count,
);

typedef _dart_obs_source_send_mouse_click = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  int type,
  int mouse_up,
  int click_count,
);

typedef _c_obs_source_send_mouse_move = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  ffi.Uint8 mouse_leave,
);

typedef _dart_obs_source_send_mouse_move = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  int mouse_leave,
);

typedef _c_obs_source_send_mouse_wheel = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  ffi.Int32 x_delta,
  ffi.Int32 y_delta,
);

typedef _dart_obs_source_send_mouse_wheel = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  int x_delta,
  int y_delta,
);

typedef _c_obs_source_send_focus = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 focus,
);

typedef _dart_obs_source_send_focus = void Function(
  ffi.Pointer<obs_source> source,
  int focus,
);

typedef _c_obs_source_send_key_click = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_key_event> event,
  ffi.Uint8 key_up,
);

typedef _dart_obs_source_send_key_click = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_key_event> event,
  int key_up,
);

typedef _c_obs_source_set_default_flags = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint32 flags,
);

typedef _dart_obs_source_set_default_flags = void Function(
  ffi.Pointer<obs_source> source,
  int flags,
);

typedef _c_obs_source_get_base_width = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_base_width = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_base_height = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_base_height = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_audio_pending = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_audio_pending = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_audio_timestamp = ffi.Uint64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_audio_timestamp = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_audio_mix = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_audio_mix> audio,
);

typedef _dart_obs_source_get_audio_mix = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_audio_mix> audio,
);

typedef _c_obs_source_set_async_unbuffered = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 unbuffered,
);

typedef _dart_obs_source_set_async_unbuffered = void Function(
  ffi.Pointer<obs_source> source,
  int unbuffered,
);

typedef _c_obs_source_async_unbuffered = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_async_unbuffered = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_async_decoupled = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 decouple,
);

typedef _dart_obs_source_set_async_decoupled = void Function(
  ffi.Pointer<obs_source> source,
  int decouple,
);

typedef _c_obs_source_async_decoupled = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_async_decoupled = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_audio_active = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 show_1,
);

typedef _dart_obs_source_set_audio_active = void Function(
  ffi.Pointer<obs_source> source,
  int show_1,
);

typedef _c_obs_source_audio_active = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_audio_active = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_last_obs_version = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_last_obs_version = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_play_pause = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 pause,
);

typedef _dart_obs_source_media_play_pause = void Function(
  ffi.Pointer<obs_source> source,
  int pause,
);

typedef _c_obs_source_media_restart = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_restart = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_stop = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_stop = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_next = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_next = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_previous = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_previous = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_get_duration = ffi.Int64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_get_duration = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_get_time = ffi.Int64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_get_time = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_set_time = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int64 ms,
);

typedef _dart_obs_source_media_set_time = void Function(
  ffi.Pointer<obs_source> source,
  int ms,
);

typedef _c_obs_source_media_get_state = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_get_state = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_started = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_started = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_ended = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_ended = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_transition_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> transition,
  ffi.Int32 target,
);

typedef _dart_obs_transition_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> transition,
  int target,
);

typedef _c_obs_transition_clear = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_clear = void Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_get_active_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_get_active_source = ffi.Pointer<obs_source>
    Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_start = ffi.Uint8 Function(
  ffi.Pointer<obs_source> transition,
  ffi.Int32 mode,
  ffi.Uint32 duration_ms,
  ffi.Pointer<obs_source> dest,
);

typedef _dart_obs_transition_start = int Function(
  ffi.Pointer<obs_source> transition,
  int mode,
  int duration_ms,
  ffi.Pointer<obs_source> dest,
);

typedef _c_obs_transition_set = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_transition_set = void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_transition_set_manual_time = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Float t,
);

typedef _dart_obs_transition_set_manual_time = void Function(
  ffi.Pointer<obs_source> transition,
  double t,
);

typedef _c_obs_transition_set_manual_torque = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Float torque,
  ffi.Float clamp,
);

typedef _dart_obs_transition_set_manual_torque = void Function(
  ffi.Pointer<obs_source> transition,
  double torque,
  double clamp,
);

typedef _c_obs_transition_set_scale_type = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Int32 type,
);

typedef _dart_obs_transition_set_scale_type = void Function(
  ffi.Pointer<obs_source> transition,
  int type,
);

typedef _c_obs_transition_get_scale_type = ffi.Int32 Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_get_scale_type = int Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_set_alignment = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Uint32 alignment,
);

typedef _dart_obs_transition_set_alignment = void Function(
  ffi.Pointer<obs_source> transition,
  int alignment,
);

typedef _c_obs_transition_get_alignment = ffi.Uint32 Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_get_alignment = int Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_set_size = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Uint32 cx,
  ffi.Uint32 cy,
);

typedef _dart_obs_transition_set_size = void Function(
  ffi.Pointer<obs_source> transition,
  int cx,
  int cy,
);

typedef _c_obs_transition_get_size = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.Uint32> cx,
  ffi.Pointer<ffi.Uint32> cy,
);

typedef _dart_obs_transition_get_size = void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.Uint32> cx,
  ffi.Pointer<ffi.Uint32> cy,
);

typedef _c_obs_transition_enable_fixed = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Uint8 enable,
  ffi.Uint32 duration_ms,
);

typedef _dart_obs_transition_enable_fixed = void Function(
  ffi.Pointer<obs_source> transition,
  int enable,
  int duration_ms,
);

typedef _c_obs_transition_fixed = ffi.Uint8 Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_fixed = int Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_get_time = ffi.Float Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_get_time = double Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_force_stop = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_force_stop = void Function(
  ffi.Pointer<obs_source> transition,
);

typedef obs_transition_video_render_callback_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<gs_texture>,
  ffi.Pointer<gs_texture>,
  ffi.Float,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_transition_video_render = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.NativeFunction<obs_transition_video_render_callback_t>>
      callback,
);

typedef _dart_obs_transition_video_render = void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.NativeFunction<obs_transition_video_render_callback_t>>
      callback,
);

typedef _c_obs_transition_video_render_direct = ffi.Uint8 Function(
  ffi.Pointer<obs_source> transition,
  ffi.Int32 target,
);

typedef _dart_obs_transition_video_render_direct = int Function(
  ffi.Pointer<obs_source> transition,
  int target,
);

typedef obs_transition_audio_mix_callback_t = ffi.Float Function(
  ffi.Pointer<ffi.Void>,
  ffi.Float,
);

typedef _c_obs_transition_audio_render = ffi.Uint8 Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.Uint64> ts_out,
  ffi.Pointer<obs_source_audio_mix> audio,
  ffi.Uint32 mixers,
  ffi.Uint64 channels,
  ffi.Uint64 sample_rate,
  ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
      mix_a_callback,
  ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
      mix_b_callback,
);

typedef _dart_obs_transition_audio_render = int Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.Uint64> ts_out,
  ffi.Pointer<obs_source_audio_mix> audio,
  int mixers,
  int channels,
  int sample_rate,
  ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
      mix_a_callback,
  ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
      mix_b_callback,
);

typedef _c_obs_transition_swap_begin = ffi.Void Function(
  ffi.Pointer<obs_source> tr_dest,
  ffi.Pointer<obs_source> tr_source,
);

typedef _dart_obs_transition_swap_begin = void Function(
  ffi.Pointer<obs_source> tr_dest,
  ffi.Pointer<obs_source> tr_source,
);

typedef _c_obs_transition_swap_end = ffi.Void Function(
  ffi.Pointer<obs_source> tr_dest,
  ffi.Pointer<obs_source> tr_source,
);

typedef _dart_obs_transition_swap_end = void Function(
  ffi.Pointer<obs_source> tr_dest,
  ffi.Pointer<obs_source> tr_source,
);

typedef _c_obs_scene_create = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_create = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_create_private = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_create_private = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_duplicate = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 type,
);

typedef _dart_obs_scene_duplicate = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  int type,
);

typedef _c_obs_scene_addref = ffi.Void Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _dart_obs_scene_addref = void Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _c_obs_scene_release = ffi.Void Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _dart_obs_scene_release = void Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _c_obs_scene_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _dart_obs_scene_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _c_obs_scene_from_source = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_scene_from_source = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_scene_find_source = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_find_source = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_find_source_recursive = ffi.Pointer<obs_scene_item>
    Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_find_source_recursive = ffi.Pointer<obs_scene_item>
    Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_find_sceneitem_by_id = ffi.Pointer<obs_scene_item>
    Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Int64 id,
);

typedef _dart_obs_scene_find_sceneitem_by_id = ffi.Pointer<obs_scene_item>
    Function(
  ffi.Pointer<obs_scene> scene,
  int id,
);

typedef _typedefC_121 = ffi.Uint8 Function(
  ffi.Pointer<obs_scene>,
  ffi.Pointer<obs_scene_item>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_scene_enum_items = ffi.Void Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.NativeFunction<_typedefC_121>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_scene_enum_items = void Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.NativeFunction<_typedefC_121>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_scene_reorder_items = ffi.Uint8 Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> item_order,
  ffi.Uint64 item_order_size,
);

typedef _dart_obs_scene_reorder_items = int Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> item_order,
  int item_order_size,
);

typedef _c_obs_scene_reorder_items2 = ffi.Uint8 Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_sceneitem_order_info> item_order,
  ffi.Uint64 item_order_size,
);

typedef _dart_obs_scene_reorder_items2 = int Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_sceneitem_order_info> item_order,
  int item_order_size,
);

typedef _c_obs_scene_add = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_scene_add = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_source> source,
);

typedef obs_scene_atomic_update_func = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_scene>,
);

typedef _c_obs_scene_atomic_update = ffi.Void Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.NativeFunction<obs_scene_atomic_update_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_scene_atomic_update = void Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.NativeFunction<obs_scene_atomic_update_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_sceneitem_addref = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_addref = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_release = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_release = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_remove = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_remove = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_scene = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_scene = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_select = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint8 select,
);

typedef _dart_obs_sceneitem_select = void Function(
  ffi.Pointer<obs_scene_item> item,
  int select,
);

typedef _c_obs_sceneitem_selected = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_selected = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_locked = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_locked = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_set_locked = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint8 lock,
);

typedef _dart_obs_sceneitem_set_locked = int Function(
  ffi.Pointer<obs_scene_item> item,
  int lock,
);

typedef _c_obs_sceneitem_set_pos = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> pos,
);

typedef _dart_obs_sceneitem_set_pos = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> pos,
);

typedef _c_obs_sceneitem_set_rot = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Float rot_deg,
);

typedef _dart_obs_sceneitem_set_rot = void Function(
  ffi.Pointer<obs_scene_item> item,
  double rot_deg,
);

typedef _c_obs_sceneitem_set_scale = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _dart_obs_sceneitem_set_scale = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _c_obs_sceneitem_set_alignment = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint32 alignment,
);

typedef _dart_obs_sceneitem_set_alignment = void Function(
  ffi.Pointer<obs_scene_item> item,
  int alignment,
);

typedef _c_obs_sceneitem_set_order = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Int32 movement,
);

typedef _dart_obs_sceneitem_set_order = void Function(
  ffi.Pointer<obs_scene_item> item,
  int movement,
);

typedef _c_obs_sceneitem_set_order_position = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Int32 position,
);

typedef _dart_obs_sceneitem_set_order_position = void Function(
  ffi.Pointer<obs_scene_item> item,
  int position,
);

typedef _c_obs_sceneitem_set_bounds_type = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Int32 type,
);

typedef _dart_obs_sceneitem_set_bounds_type = void Function(
  ffi.Pointer<obs_scene_item> item,
  int type,
);

typedef _c_obs_sceneitem_set_bounds_alignment = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint32 alignment,
);

typedef _dart_obs_sceneitem_set_bounds_alignment = void Function(
  ffi.Pointer<obs_scene_item> item,
  int alignment,
);

typedef _c_obs_sceneitem_set_bounds = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> bounds,
);

typedef _dart_obs_sceneitem_set_bounds = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> bounds,
);

typedef _c_obs_sceneitem_get_id = ffi.Int64 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_id = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_pos = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> pos,
);

typedef _dart_obs_sceneitem_get_pos = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> pos,
);

typedef _c_obs_sceneitem_get_rot = ffi.Float Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_rot = double Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_scale = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _dart_obs_sceneitem_get_scale = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _c_obs_sceneitem_get_alignment = ffi.Uint32 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_alignment = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_bounds_type = ffi.Int32 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_bounds_type = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_bounds_alignment = ffi.Uint32 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_bounds_alignment = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_bounds = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> bounds,
);

typedef _dart_obs_sceneitem_get_bounds = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> bounds,
);

typedef _c_obs_sceneitem_get_info = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_transform_info> info,
);

typedef _dart_obs_sceneitem_get_info = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_transform_info> info,
);

typedef _c_obs_sceneitem_set_info = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_transform_info> info,
);

typedef _dart_obs_sceneitem_set_info = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_transform_info> info,
);

typedef _c_obs_sceneitem_get_draw_transform = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<matrix4> transform,
);

typedef _dart_obs_sceneitem_get_draw_transform = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<matrix4> transform,
);

typedef _c_obs_sceneitem_get_box_transform = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<matrix4> transform,
);

typedef _dart_obs_sceneitem_get_box_transform = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<matrix4> transform,
);

typedef _c_obs_sceneitem_get_box_scale = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _dart_obs_sceneitem_get_box_scale = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _c_obs_sceneitem_visible = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_visible = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_set_visible = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint8 visible,
);

typedef _dart_obs_sceneitem_set_visible = int Function(
  ffi.Pointer<obs_scene_item> item,
  int visible,
);

typedef _c_obs_sceneitem_set_crop = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_sceneitem_crop> crop,
);

typedef _dart_obs_sceneitem_set_crop = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_sceneitem_crop> crop,
);

typedef _c_obs_sceneitem_get_crop = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_sceneitem_crop> crop,
);

typedef _dart_obs_sceneitem_get_crop = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_sceneitem_crop> crop,
);

typedef _c_obs_sceneitem_set_scale_filter = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Int32 filter,
);

typedef _dart_obs_sceneitem_set_scale_filter = void Function(
  ffi.Pointer<obs_scene_item> item,
  int filter,
);

typedef _c_obs_sceneitem_get_scale_filter = ffi.Int32 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_scale_filter = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_force_update_transform = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_force_update_transform = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_defer_update_begin = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_defer_update_begin = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_defer_update_end = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_defer_update_end = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_private_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_private_settings = ffi.Pointer<obs_data>
    Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_scene_add_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_add_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_insert_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
  ffi.Uint64 count,
);

typedef _dart_obs_scene_insert_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
  int count,
);

typedef _c_obs_scene_add_group2 = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint8 signal,
);

typedef _dart_obs_scene_add_group2 = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  int signal,
);

typedef _c_obs_scene_insert_group2 = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
  ffi.Uint64 count,
  ffi.Uint8 signal,
);

typedef _dart_obs_scene_insert_group2 = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
  int count,
  int signal,
);

typedef _c_obs_scene_get_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_get_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_sceneitem_is_group = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_is_group = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_group_get_scene = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene_item> group,
);

typedef _dart_obs_sceneitem_group_get_scene = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene_item> group,
);

typedef _c_obs_sceneitem_group_ungroup = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
);

typedef _dart_obs_sceneitem_group_ungroup = void Function(
  ffi.Pointer<obs_scene_item> group,
);

typedef _c_obs_sceneitem_group_ungroup2 = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Uint8 signal,
);

typedef _dart_obs_sceneitem_group_ungroup2 = void Function(
  ffi.Pointer<obs_scene_item> group,
  int signal,
);

typedef _c_obs_sceneitem_group_add_item = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_group_add_item = void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_group_remove_item = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_group_remove_item = void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_source_is_group = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_is_group = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_scene_is_group = ffi.Uint8 Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _dart_obs_scene_is_group = int Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _typedefC_122 = ffi.Uint8 Function(
  ffi.Pointer<obs_scene>,
  ffi.Pointer<obs_scene_item>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_sceneitem_group_enum_items = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<ffi.NativeFunction<_typedefC_122>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_sceneitem_group_enum_items = void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<ffi.NativeFunction<_typedefC_122>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_group_from_source = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_group_from_source = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_sceneitem_defer_group_resize_begin = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_defer_group_resize_begin = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_defer_group_resize_end = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_defer_group_resize_end = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_output_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_output_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_output_create = ffi.Pointer<obs_output> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _dart_obs_output_create = ffi.Pointer<obs_output> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _c_obs_output_addref = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_addref = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_release = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_release = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_weak_output_addref = ffi.Void Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _dart_obs_weak_output_addref = void Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _c_obs_weak_output_release = ffi.Void Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _dart_obs_weak_output_release = void Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _c_obs_output_get_ref = ffi.Pointer<obs_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_ref = ffi.Pointer<obs_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_weak_output = ffi.Pointer<obs_weak_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_weak_output = ffi.Pointer<obs_weak_output>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_weak_output_get_output = ffi.Pointer<obs_output> Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _dart_obs_weak_output_get_output = ffi.Pointer<obs_output> Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _c_obs_weak_output_references_output = ffi.Uint8 Function(
  ffi.Pointer<obs_weak_output> weak,
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_weak_output_references_output = int Function(
  ffi.Pointer<obs_weak_output> weak,
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_start = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_start = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_stop = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_stop = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_delay = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 delay_sec,
  ffi.Uint32 flags,
);

typedef _dart_obs_output_set_delay = void Function(
  ffi.Pointer<obs_output> output,
  int delay_sec,
  int flags,
);

typedef _c_obs_output_get_delay = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_delay = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_active_delay = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_active_delay = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_force_stop = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_force_stop = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_active = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_active = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_flags = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_flags = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_get_output_flags = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_output_flags = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_output_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_output_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_output_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_output_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_output_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_update = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_output_update = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_output_can_pause = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_can_pause = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_pause = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint8 pause,
);

typedef _dart_obs_output_pause = int Function(
  ffi.Pointer<obs_output> output,
  int pause,
);

typedef _c_obs_output_paused = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_paused = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_signal_handler = ffi.Pointer<signal_handler> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_signal_handler = ffi.Pointer<signal_handler>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_proc_handler = ffi.Pointer<proc_handler> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_proc_handler = ffi.Pointer<proc_handler> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_media = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<video_output> video,
  ffi.Pointer<audio_output> audio,
);

typedef _dart_obs_output_set_media = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<video_output> video,
  ffi.Pointer<audio_output> audio,
);

typedef _c_obs_output_video = ffi.Pointer<video_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_video = ffi.Pointer<video_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_audio = ffi.Pointer<audio_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_audio = ffi.Pointer<audio_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_mixer = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint64 mixer_idx,
);

typedef _dart_obs_output_set_mixer = void Function(
  ffi.Pointer<obs_output> output,
  int mixer_idx,
);

typedef _c_obs_output_get_mixer = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_mixer = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_mixers = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint64 mixers,
);

typedef _dart_obs_output_set_mixers = void Function(
  ffi.Pointer<obs_output> output,
  int mixers,
);

typedef _c_obs_output_get_mixers = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_mixers = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_video_encoder = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_output_set_video_encoder = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_output_set_audio_encoder = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_encoder> encoder,
  ffi.Uint64 idx,
);

typedef _dart_obs_output_set_audio_encoder = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_encoder> encoder,
  int idx,
);

typedef _c_obs_output_get_video_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_video_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_audio_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint64 idx,
);

typedef _dart_obs_output_get_audio_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_output> output,
  int idx,
);

typedef _c_obs_output_set_service = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_output_set_service = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_output_get_service = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_service = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_reconnect_settings = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Int32 retry_count,
  ffi.Int32 retry_sec,
);

typedef _dart_obs_output_set_reconnect_settings = void Function(
  ffi.Pointer<obs_output> output,
  int retry_count,
  int retry_sec,
);

typedef _c_obs_output_get_total_bytes = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_total_bytes = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_frames_dropped = ffi.Int32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_frames_dropped = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_total_frames = ffi.Int32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_total_frames = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_preferred_size = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_output_set_preferred_size = void Function(
  ffi.Pointer<obs_output> output,
  int width,
  int height,
);

typedef _c_obs_output_get_width = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_width = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_height = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_height = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_congestion = ffi.Float Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_congestion = double Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_connect_time_ms = ffi.Int32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_connect_time_ms = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_reconnecting = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_reconnecting = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_last_error = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_obs_output_set_last_error = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<ffi.Int8> message,
);

typedef _c_obs_output_get_last_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_last_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_supported_video_codecs = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_supported_video_codecs = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_supported_audio_codecs = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_supported_audio_codecs = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_video_conversion = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<video_scale_info> conversion,
);

typedef _dart_obs_output_set_video_conversion = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<video_scale_info> conversion,
);

typedef _c_obs_output_set_audio_conversion = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<audio_convert_info> conversion,
);

typedef _dart_obs_output_set_audio_conversion = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<audio_convert_info> conversion,
);

typedef _c_obs_output_can_begin_data_capture = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 flags,
);

typedef _dart_obs_output_can_begin_data_capture = int Function(
  ffi.Pointer<obs_output> output,
  int flags,
);

typedef _c_obs_output_initialize_encoders = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 flags,
);

typedef _dart_obs_output_initialize_encoders = int Function(
  ffi.Pointer<obs_output> output,
  int flags,
);

typedef _c_obs_output_begin_data_capture = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 flags,
);

typedef _dart_obs_output_begin_data_capture = int Function(
  ffi.Pointer<obs_output> output,
  int flags,
);

typedef _c_obs_output_end_data_capture = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_end_data_capture = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_signal_stop = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Int32 code,
);

typedef _dart_obs_output_signal_stop = void Function(
  ffi.Pointer<obs_output> output,
  int code,
);

typedef _c_obs_output_get_pause_offset = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_pause_offset = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_encoder_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_encoder_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_video_encoder_create = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _dart_obs_video_encoder_create = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _c_obs_audio_encoder_create = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  ffi.Uint64 mixer_idx,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _dart_obs_audio_encoder_create = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  int mixer_idx,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _c_obs_encoder_addref = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_addref = void Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_release = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_release = void Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_weak_encoder_addref = ffi.Void Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _dart_obs_weak_encoder_addref = void Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _c_obs_weak_encoder_release = ffi.Void Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _dart_obs_weak_encoder_release = void Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _c_obs_encoder_get_ref = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_ref = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_weak_encoder = ffi.Pointer<obs_weak_encoder>
    Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_weak_encoder = ffi.Pointer<obs_weak_encoder>
    Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_weak_encoder_get_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _dart_obs_weak_encoder_get_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _c_obs_weak_encoder_references_encoder = ffi.Uint8 Function(
  ffi.Pointer<obs_weak_encoder> weak,
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_weak_encoder_references_encoder = int Function(
  ffi.Pointer<obs_weak_encoder> weak,
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_name = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_encoder_set_name = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_encoder_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_get_encoder_codec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_encoder_codec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_encoder_type = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_encoder_type = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_encoder_get_codec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_codec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_type = ffi.Int32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_type = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_scaled_size = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_encoder_set_scaled_size = void Function(
  ffi.Pointer<obs_encoder> encoder,
  int width,
  int height,
);

typedef _c_obs_encoder_scaling_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_scaling_enabled = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_width = ffi.Uint32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_width = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_height = ffi.Uint32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_height = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_sample_rate = ffi.Uint32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_sample_rate = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_preferred_video_format = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Int32 format,
);

typedef _dart_obs_encoder_set_preferred_video_format = void Function(
  ffi.Pointer<obs_encoder> encoder,
  int format,
);

typedef _c_obs_encoder_get_preferred_video_format = ffi.Int32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_preferred_video_format = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_encoder_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_encoder_get_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_get_encoder_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_encoder_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_encoder_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_update = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_encoder_update = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_encoder_get_extra_data = ffi.Uint8 Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> extra_data,
  ffi.Pointer<ffi.Uint64> size,
);

typedef _dart_obs_encoder_get_extra_data = int Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> extra_data,
  ffi.Pointer<ffi.Uint64> size,
);

typedef _c_obs_encoder_get_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_video = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<video_output> video,
);

typedef _dart_obs_encoder_set_video = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<video_output> video,
);

typedef _c_obs_encoder_set_audio = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<audio_output> audio,
);

typedef _dart_obs_encoder_set_audio = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<audio_output> audio,
);

typedef _c_obs_encoder_video = ffi.Pointer<video_output> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_video = ffi.Pointer<video_output> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_audio = ffi.Pointer<audio_output> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_audio = ffi.Pointer<audio_output> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_active = ffi.Uint8 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_active = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_get_encoder_caps = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> encoder_id,
);

typedef _dart_obs_get_encoder_caps = int Function(
  ffi.Pointer<ffi.Int8> encoder_id,
);

typedef _c_obs_encoder_get_caps = ffi.Uint32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_caps = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_duplicate_encoder_packet = ffi.Void Function(
  ffi.Pointer<encoder_packet> dst,
  ffi.Pointer<encoder_packet> src,
);

typedef _dart_obs_duplicate_encoder_packet = void Function(
  ffi.Pointer<encoder_packet> dst,
  ffi.Pointer<encoder_packet> src,
);

typedef _c_obs_free_encoder_packet = ffi.Void Function(
  ffi.Pointer<encoder_packet> packet,
);

typedef _dart_obs_free_encoder_packet = void Function(
  ffi.Pointer<encoder_packet> packet,
);

typedef _c_obs_encoder_packet_ref = ffi.Void Function(
  ffi.Pointer<encoder_packet> dst,
  ffi.Pointer<encoder_packet> src,
);

typedef _dart_obs_encoder_packet_ref = void Function(
  ffi.Pointer<encoder_packet> dst,
  ffi.Pointer<encoder_packet> src,
);

typedef _c_obs_encoder_packet_release = ffi.Void Function(
  ffi.Pointer<encoder_packet> packet,
);

typedef _dart_obs_encoder_packet_release = void Function(
  ffi.Pointer<encoder_packet> packet,
);

typedef _c_obs_encoder_create_rerouted = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> reroute_id,
);

typedef _dart_obs_encoder_create_rerouted = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> reroute_id,
);

typedef _c_obs_encoder_paused = ffi.Uint8 Function(
  ffi.Pointer<obs_encoder> output,
);

typedef _dart_obs_encoder_paused = int Function(
  ffi.Pointer<obs_encoder> output,
);

typedef _c_obs_encoder_get_last_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_last_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_last_error = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_obs_encoder_set_last_error = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> message,
);

typedef _c_obs_service_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_service_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_service_create = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _dart_obs_service_create = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
  ffi.Pointer<obs_data> hotkey_data,
);

typedef _c_obs_service_create_private = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_service_create_private = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_service_addref = ffi.Void Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_addref = void Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_release = ffi.Void Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_release = void Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_weak_service_addref = ffi.Void Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _dart_obs_weak_service_addref = void Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _c_obs_weak_service_release = ffi.Void Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _dart_obs_weak_service_release = void Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _c_obs_service_get_ref = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_ref = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_weak_service = ffi.Pointer<obs_weak_service>
    Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_weak_service = ffi.Pointer<obs_weak_service>
    Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_weak_service_get_service = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _dart_obs_weak_service_get_service = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _c_obs_weak_service_references_service = ffi.Uint8 Function(
  ffi.Pointer<obs_weak_service> weak,
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_weak_service_references_service = int Function(
  ffi.Pointer<obs_weak_service> weak,
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_service_defaults = ffi.Pointer<obs_data> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_service_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_service_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_service_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_properties = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_type = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_type = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_update = ffi.Void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data> settings,
);

typedef _dart_obs_service_update = void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data> settings,
);

typedef _c_obs_service_get_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_settings = ffi.Pointer<obs_data> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_url = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_url = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_key = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_key = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_username = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_username = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_password = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_password = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_apply_encoder_settings = ffi.Void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data> video_encoder_settings,
  ffi.Pointer<obs_data> audio_encoder_settings,
);

typedef _dart_obs_service_apply_encoder_settings = void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data> video_encoder_settings,
  ffi.Pointer<obs_data> audio_encoder_settings,
);

typedef _c_obs_service_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_output_type = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_output_type = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_source_frame_init = ffi.Void Function(
  ffi.Pointer<obs_source_frame> frame,
  ffi.Int32 format,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_source_frame_init = void Function(
  ffi.Pointer<obs_source_frame> frame,
  int format,
  int width,
  int height,
);

typedef _c_obs_source_frame_free = ffi.Void Function(
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_frame_free = void Function(
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_frame_create = ffi.Pointer<obs_source_frame> Function(
  ffi.Int32 format,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_source_frame_create = ffi.Pointer<obs_source_frame> Function(
  int format,
  int width,
  int height,
);

typedef _c_obs_source_frame_destroy = ffi.Void Function(
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_frame_destroy = void Function(
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_frame_copy = ffi.Void Function(
  ffi.Pointer<obs_source_frame> dst,
  ffi.Pointer<obs_source_frame> src,
);

typedef _dart_obs_source_frame_copy = void Function(
  ffi.Pointer<obs_source_frame> dst,
  ffi.Pointer<obs_source_frame> src,
);

typedef _typedefC_123 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
  ffi.Pointer<obs_source_frame>,
);

typedef _c_obs_source_add_frame_callback = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<_typedefC_123>> frame,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_add_frame_callback = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<_typedefC_123>> frame,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_124 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
  ffi.Pointer<obs_source_frame>,
);

typedef _c_obs_source_remove_frame_callback = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<_typedefC_124>> frame,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_remove_frame_callback = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<_typedefC_124>> frame,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_get_icon_type = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_source_get_icon_type = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _typedefC_1 = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64,
);

typedef _typedefC_2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_4 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_5 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef IMP = ffi.Void Function();

typedef audio_input_callback_t = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint64>,
  ffi.Uint32,
  ffi.Pointer<audio_output_data>,
);

typedef _typedefC_9 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_10 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_11 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_12 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_15 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_16 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_data>,
  ffi.Pointer<obs_source>,
);

typedef _typedefC_17 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_18 = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_19 = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_20 = ffi.Void Function(
  ffi.Pointer<obs_data>,
);

typedef _typedefC_21 = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_22 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_data>,
);

typedef _typedefC_23 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_24 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_25 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_26 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_27 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Float,
);

typedef _typedefC_28 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<gs_effect>,
);

typedef _typedefC_29 = ffi.Pointer<obs_source_frame> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source_frame>,
);

typedef _typedefC_30 = ffi.Pointer<obs_audio_data> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_audio_data>,
);

typedef _typedefC_31 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_32 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_data>,
);

typedef _typedefC_33 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_data>,
);

typedef _typedefC_34 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_mouse_event>,
  ffi.Int32,
  ffi.Uint8,
  ffi.Uint32,
);

typedef _typedefC_35 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_mouse_event>,
  ffi.Uint8,
);

typedef _typedefC_36 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_mouse_event>,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_37 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint8,
);

typedef _typedefC_38 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_key_event>,
  ffi.Uint8,
);

typedef _typedefC_39 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
);

typedef _typedefC_40 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_41 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
  ffi.Pointer<obs_source_audio_mix>,
  ffi.Uint32,
  ffi.Uint64,
  ffi.Uint64,
);

typedef _typedefC_42 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_43 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_44 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_45 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_data>,
);

typedef _typedefC_46 = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_47 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
  ffi.Pointer<audio_output_data>,
  ffi.Uint64,
  ffi.Uint64,
);

typedef _typedefC_48 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint8,
);

typedef _typedefC_49 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_50 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_51 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_52 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_53 = ffi.Int64 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_54 = ffi.Int64 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_55 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
);

typedef _typedefC_56 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_57 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_58 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_data>,
  ffi.Pointer<obs_encoder>,
);

typedef _typedefC_59 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_60 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<encoder_frame>,
  ffi.Pointer<encoder_packet>,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_61 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_62 = ffi.Void Function(
  ffi.Pointer<obs_data>,
);

typedef _typedefC_63 = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_64 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_data>,
);

typedef _typedefC_65 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_66 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_67 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<audio_convert_info>,
);

typedef _typedefC_68 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<video_scale_info>,
);

typedef _typedefC_69 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_70 = ffi.Void Function(
  ffi.Pointer<obs_data>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_71 = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_72 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Int64,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint64>,
  ffi.Pointer<encoder_packet>,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_73 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_74 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_data>,
  ffi.Pointer<obs_output>,
);

typedef _typedefC_75 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_76 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_77 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_78 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<video_data>,
);

typedef _typedefC_79 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<audio_data>,
);

typedef _typedefC_80 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<encoder_packet>,
);

typedef _typedefC_81 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_data>,
);

typedef _typedefC_82 = ffi.Void Function(
  ffi.Pointer<obs_data>,
);

typedef _typedefC_83 = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_84 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_85 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_86 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_87 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_88 = ffi.Float Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_89 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_90 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<audio_data>,
);

typedef _typedefC_91 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_92 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_data>,
  ffi.Pointer<obs_service>,
);

typedef _typedefC_93 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_94 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_data>,
);

typedef _typedefC_95 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_96 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_data>,
);

typedef _typedefC_97 = ffi.Void Function(
  ffi.Pointer<obs_data>,
);

typedef _typedefC_98 = ffi.Pointer<obs_properties> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_99 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_output>,
);

typedef _typedefC_100 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_101 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_102 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_103 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_104 = ffi.Uint8 Function();

typedef _typedefC_105 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_data>,
  ffi.Pointer<obs_data>,
);

typedef _typedefC_106 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_107 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);
