// ignore: slash_for_doc_comments
/******************************************************************************
  Copyright (C) 2013-2021 by Hugh Bailey <jim@obsproject.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
******************************************************************************/

// The package ffigen generates code that generates warnings with the Dart
// analyzer, so ignore some of the rules.
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: unused_element
// ignore_for_file: unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings to obslib
class DiveObslibFFI {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  DiveObslibFFI(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  /// Find a core libobs data file
  /// @param path name of the base file
  /// @return A string containing the full path to the file.
  /// Use bfree after use.
  ffi.Pointer<ffi.Int8> obs_find_data_file(
    ffi.Pointer<ffi.Int8> file,
  ) {
    _obs_find_data_file ??=
        _dylib.lookupFunction<_c_obs_find_data_file, _dart_obs_find_data_file>(
            'obs_find_data_file');
    return _obs_find_data_file(
      file,
    );
  }

  _dart_obs_find_data_file _obs_find_data_file;

  /// Add a path to search libobs data files in.
  /// @param path Full path to directory to look in.
  /// The string is copied.
  void obs_add_data_path(
    ffi.Pointer<ffi.Int8> path,
  ) {
    _obs_add_data_path ??=
        _dylib.lookupFunction<_c_obs_add_data_path, _dart_obs_add_data_path>(
            'obs_add_data_path');
    return _obs_add_data_path(
      path,
    );
  }

  _dart_obs_add_data_path _obs_add_data_path;

  /// Remove a path from libobs core data paths.
  /// @param path The path to compare to currently set paths.
  /// It does not need to be the same pointer, but
  /// the path string must match an entry fully.
  /// @return Whether or not the path was successfully removed.
  /// If false, the path could not be found.
  int obs_remove_data_path(
    ffi.Pointer<ffi.Int8> path,
  ) {
    _obs_remove_data_path ??= _dylib.lookupFunction<_c_obs_remove_data_path,
        _dart_obs_remove_data_path>('obs_remove_data_path');
    return _obs_remove_data_path(
      path,
    );
  }

  _dart_obs_remove_data_path _obs_remove_data_path;

  /// Initializes OBS
  ///
  /// @param  locale              The locale to use for modules
  /// @param  module_config_path  Path to module config storage directory
  /// (or NULL if none)
  /// @param  store               The profiler name store for OBS to use or NULL
  int obs_startup(
    ffi.Pointer<ffi.Int8> locale,
    ffi.Pointer<ffi.Int8> module_config_path,
    ffi.Pointer<profiler_name_store_t> store,
  ) {
    _obs_startup ??=
        _dylib.lookupFunction<_c_obs_startup, _dart_obs_startup>('obs_startup');
    return _obs_startup(
      locale,
      module_config_path,
      store,
    );
  }

  _dart_obs_startup _obs_startup;

  /// Releases all data associated with OBS and terminates the OBS context
  void obs_shutdown() {
    _obs_shutdown ??= _dylib
        .lookupFunction<_c_obs_shutdown, _dart_obs_shutdown>('obs_shutdown');
    return _obs_shutdown();
  }

  _dart_obs_shutdown _obs_shutdown;

  /// @return true if the main OBS context has been initialized
  int obs_initialized() {
    _obs_initialized ??=
        _dylib.lookupFunction<_c_obs_initialized, _dart_obs_initialized>(
            'obs_initialized');
    return _obs_initialized();
  }

  _dart_obs_initialized _obs_initialized;

  /// @return The current core version
  int obs_get_version() {
    _obs_get_version ??=
        _dylib.lookupFunction<_c_obs_get_version, _dart_obs_get_version>(
            'obs_get_version');
    return _obs_get_version();
  }

  _dart_obs_get_version _obs_get_version;

  /// @return The current core version string
  ffi.Pointer<ffi.Int8> obs_get_version_string() {
    _obs_get_version_string ??= _dylib.lookupFunction<_c_obs_get_version_string,
        _dart_obs_get_version_string>('obs_get_version_string');
    return _obs_get_version_string();
  }

  _dart_obs_get_version_string _obs_get_version_string;

  /// Sets things up for calls to obs_get_cmdline_args. Called only once at startup
  /// and safely copies argv/argc from main(). Subsequent calls do nothing.
  ///
  /// @param  argc  The count of command line arguments, from main()
  /// @param  argv  An array of command line arguments, copied from main() and ends
  /// with NULL.
  void obs_set_cmdline_args(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ) {
    _obs_set_cmdline_args ??= _dylib.lookupFunction<_c_obs_set_cmdline_args,
        _dart_obs_set_cmdline_args>('obs_set_cmdline_args');
    return _obs_set_cmdline_args(
      argc,
      argv,
    );
  }

  _dart_obs_set_cmdline_args _obs_set_cmdline_args;

  /// Sets a new locale to use for modules.  This will call obs_module_set_locale
  /// for each module with the new locale.
  ///
  /// @param  locale  The locale to use for modules
  void obs_set_locale(
    ffi.Pointer<ffi.Int8> locale,
  ) {
    _obs_set_locale ??=
        _dylib.lookupFunction<_c_obs_set_locale, _dart_obs_set_locale>(
            'obs_set_locale');
    return _obs_set_locale(
      locale,
    );
  }

  _dart_obs_set_locale _obs_set_locale;

  /// @return the current locale
  ffi.Pointer<ffi.Int8> obs_get_locale() {
    _obs_get_locale ??=
        _dylib.lookupFunction<_c_obs_get_locale, _dart_obs_get_locale>(
            'obs_get_locale');
    return _obs_get_locale();
  }

  _dart_obs_get_locale _obs_get_locale;

  /// Returns the profiler name store (see util/profiler.h) used by OBS, which is
  /// either a name store passed to obs_startup, an internal name store, or NULL
  /// in case obs_initialized() returns false.
  ffi.Pointer<profiler_name_store_t> obs_get_profiler_name_store() {
    _obs_get_profiler_name_store ??= _dylib.lookupFunction<
        _c_obs_get_profiler_name_store,
        _dart_obs_get_profiler_name_store>('obs_get_profiler_name_store');
    return _obs_get_profiler_name_store();
  }

  _dart_obs_get_profiler_name_store _obs_get_profiler_name_store;

  /// Sets base video output base resolution/fps/format.
  ///
  /// @note This data cannot be changed if an output is currently active.
  /// @note The graphics module cannot be changed without fully destroying the
  /// OBS context.
  ///
  /// @param   ovi  Pointer to an obs_video_info structure containing the
  /// specification of the graphics subsystem,
  /// @return       OBS_VIDEO_SUCCESS if successful
  /// OBS_VIDEO_NOT_SUPPORTED if the adapter lacks capabilities
  /// OBS_VIDEO_INVALID_PARAM if a parameter is invalid
  /// OBS_VIDEO_CURRENTLY_ACTIVE if video is currently active
  /// OBS_VIDEO_MODULE_NOT_FOUND if the graphics module is not found
  /// OBS_VIDEO_FAIL for generic failure
  int obs_reset_video(
    ffi.Pointer<obs_video_info> ovi,
  ) {
    _obs_reset_video ??=
        _dylib.lookupFunction<_c_obs_reset_video, _dart_obs_reset_video>(
            'obs_reset_video');
    return _obs_reset_video(
      ovi,
    );
  }

  _dart_obs_reset_video _obs_reset_video;

  /// Sets base audio output format/channels/samples/etc
  ///
  /// @note Cannot reset base audio if an output is currently active.
  int obs_reset_audio(
    ffi.Pointer<obs_audio_info> oai,
  ) {
    _obs_reset_audio ??=
        _dylib.lookupFunction<_c_obs_reset_audio, _dart_obs_reset_audio>(
            'obs_reset_audio');
    return _obs_reset_audio(
      oai,
    );
  }

  _dart_obs_reset_audio _obs_reset_audio;

  /// Gets the current video settings, returns false if no video
  int obs_get_video_info(
    ffi.Pointer<obs_video_info> ovi,
  ) {
    _obs_get_video_info ??=
        _dylib.lookupFunction<_c_obs_get_video_info, _dart_obs_get_video_info>(
            'obs_get_video_info');
    return _obs_get_video_info(
      ovi,
    );
  }

  _dart_obs_get_video_info _obs_get_video_info;

  /// Gets the current audio settings, returns false if no audio
  int obs_get_audio_info(
    ffi.Pointer<obs_audio_info> oai,
  ) {
    _obs_get_audio_info ??=
        _dylib.lookupFunction<_c_obs_get_audio_info, _dart_obs_get_audio_info>(
            'obs_get_audio_info');
    return _obs_get_audio_info(
      oai,
    );
  }

  _dart_obs_get_audio_info _obs_get_audio_info;

  /// Opens a plugin module directly from a specific path.
  ///
  /// If the module already exists then the function will return successful, and
  /// the module parameter will be given the pointer to the existing module.
  ///
  /// This does not initialize the module, it only loads the module image.  To
  /// initialize the module, call obs_init_module.
  ///
  /// @param  module     The pointer to the created module.
  /// @param  path       Specifies the path to the module library file.  If the
  /// extension is not specified, it will use the extension
  /// appropriate to the operating system.
  /// @param  data_path  Specifies the path to the directory where the module's
  /// data files are stored.
  /// @returns           MODULE_SUCCESS if successful
  /// MODULE_ERROR if a generic error occurred
  /// MODULE_FILE_NOT_FOUND if the module was not found
  /// MODULE_MISSING_EXPORTS if required exports are missing
  /// MODULE_INCOMPATIBLE_VER if incompatible version
  int obs_open_module(
    ffi.Pointer<ffi.Pointer<obs_module>> module,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> data_path,
  ) {
    _obs_open_module ??=
        _dylib.lookupFunction<_c_obs_open_module, _dart_obs_open_module>(
            'obs_open_module');
    return _obs_open_module(
      module,
      path,
      data_path,
    );
  }

  _dart_obs_open_module _obs_open_module;

  /// Initializes the module, which calls its obs_module_load export.  If the
  /// module is already loaded, then this function does nothing and returns
  /// successful.
  int obs_init_module(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_init_module ??=
        _dylib.lookupFunction<_c_obs_init_module, _dart_obs_init_module>(
            'obs_init_module');
    return _obs_init_module(
      module,
    );
  }

  _dart_obs_init_module _obs_init_module;

  /// Returns a module based upon its name, or NULL if not found
  ffi.Pointer<obs_module> obs_get_module(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_module ??=
        _dylib.lookupFunction<_c_obs_get_module, _dart_obs_get_module>(
            'obs_get_module');
    return _obs_get_module(
      name,
    );
  }

  _dart_obs_get_module _obs_get_module;

  /// Returns locale text from a specific module
  int obs_module_get_locale_string(
    ffi.Pointer<obs_module> mod,
    ffi.Pointer<ffi.Int8> lookup_string,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> translated_string,
  ) {
    _obs_module_get_locale_string ??= _dylib.lookupFunction<
        _c_obs_module_get_locale_string,
        _dart_obs_module_get_locale_string>('obs_module_get_locale_string');
    return _obs_module_get_locale_string(
      mod,
      lookup_string,
      translated_string,
    );
  }

  _dart_obs_module_get_locale_string _obs_module_get_locale_string;

  ffi.Pointer<ffi.Int8> obs_module_get_locale_text(
    ffi.Pointer<obs_module> mod,
    ffi.Pointer<ffi.Int8> text,
  ) {
    _obs_module_get_locale_text ??= _dylib.lookupFunction<
        _c_obs_module_get_locale_text,
        _dart_obs_module_get_locale_text>('obs_module_get_locale_text');
    return _obs_module_get_locale_text(
      mod,
      text,
    );
  }

  _dart_obs_module_get_locale_text _obs_module_get_locale_text;

  /// Logs loaded modules
  void obs_log_loaded_modules() {
    _obs_log_loaded_modules ??= _dylib.lookupFunction<_c_obs_log_loaded_modules,
        _dart_obs_log_loaded_modules>('obs_log_loaded_modules');
    return _obs_log_loaded_modules();
  }

  _dart_obs_log_loaded_modules _obs_log_loaded_modules;

  /// Returns the module file name
  ffi.Pointer<ffi.Int8> obs_get_module_file_name(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_file_name ??= _dylib.lookupFunction<
        _c_obs_get_module_file_name,
        _dart_obs_get_module_file_name>('obs_get_module_file_name');
    return _obs_get_module_file_name(
      module,
    );
  }

  _dart_obs_get_module_file_name _obs_get_module_file_name;

  /// Returns the module full name
  ffi.Pointer<ffi.Int8> obs_get_module_name(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_name ??= _dylib.lookupFunction<_c_obs_get_module_name,
        _dart_obs_get_module_name>('obs_get_module_name');
    return _obs_get_module_name(
      module,
    );
  }

  _dart_obs_get_module_name _obs_get_module_name;

  /// Returns the module author(s)
  ffi.Pointer<ffi.Int8> obs_get_module_author(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_author ??= _dylib.lookupFunction<_c_obs_get_module_author,
        _dart_obs_get_module_author>('obs_get_module_author');
    return _obs_get_module_author(
      module,
    );
  }

  _dart_obs_get_module_author _obs_get_module_author;

  /// Returns the module description
  ffi.Pointer<ffi.Int8> obs_get_module_description(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_description ??= _dylib.lookupFunction<
        _c_obs_get_module_description,
        _dart_obs_get_module_description>('obs_get_module_description');
    return _obs_get_module_description(
      module,
    );
  }

  _dart_obs_get_module_description _obs_get_module_description;

  /// Returns the module binary path
  ffi.Pointer<ffi.Int8> obs_get_module_binary_path(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_binary_path ??= _dylib.lookupFunction<
        _c_obs_get_module_binary_path,
        _dart_obs_get_module_binary_path>('obs_get_module_binary_path');
    return _obs_get_module_binary_path(
      module,
    );
  }

  _dart_obs_get_module_binary_path _obs_get_module_binary_path;

  /// Returns the module data path
  ffi.Pointer<ffi.Int8> obs_get_module_data_path(
    ffi.Pointer<obs_module> module,
  ) {
    _obs_get_module_data_path ??= _dylib.lookupFunction<
        _c_obs_get_module_data_path,
        _dart_obs_get_module_data_path>('obs_get_module_data_path');
    return _obs_get_module_data_path(
      module,
    );
  }

  _dart_obs_get_module_data_path _obs_get_module_data_path;

  /// Adds a module search path to be used with obs_find_modules.  If the search
  /// path strings contain %module%, that text will be replaced with the module
  /// name when used.
  ///
  /// @param  bin   Specifies the module's binary directory search path.
  /// @param  data  Specifies the module's data directory search path.
  void obs_add_module_path(
    ffi.Pointer<ffi.Int8> bin,
    ffi.Pointer<ffi.Int8> data,
  ) {
    _obs_add_module_path ??= _dylib.lookupFunction<_c_obs_add_module_path,
        _dart_obs_add_module_path>('obs_add_module_path');
    return _obs_add_module_path(
      bin,
      data,
    );
  }

  _dart_obs_add_module_path _obs_add_module_path;

  /// Automatically loads all modules from module paths (convenience function)
  void obs_load_all_modules() {
    _obs_load_all_modules ??= _dylib.lookupFunction<_c_obs_load_all_modules,
        _dart_obs_load_all_modules>('obs_load_all_modules');
    return _obs_load_all_modules();
  }

  _dart_obs_load_all_modules _obs_load_all_modules;

  /// Notifies modules that all modules have been loaded.  This function should
  /// be called after all modules have been loaded.
  void obs_post_load_modules() {
    _obs_post_load_modules ??= _dylib.lookupFunction<_c_obs_post_load_modules,
        _dart_obs_post_load_modules>('obs_post_load_modules');
    return _obs_post_load_modules();
  }

  _dart_obs_post_load_modules _obs_post_load_modules;

  /// Finds all modules within the search paths added by obs_add_module_path.
  void obs_find_modules(
    ffi.Pointer<ffi.NativeFunction<obs_find_module_callback_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_find_modules ??=
        _dylib.lookupFunction<_c_obs_find_modules, _dart_obs_find_modules>(
            'obs_find_modules');
    return _obs_find_modules(
      callback,
      param,
    );
  }

  _dart_obs_find_modules _obs_find_modules;

  /// Enumerates all loaded modules
  void obs_enum_modules(
    ffi.Pointer<ffi.NativeFunction<obs_enum_module_callback_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_modules ??=
        _dylib.lookupFunction<_c_obs_enum_modules, _dart_obs_enum_modules>(
            'obs_enum_modules');
    return _obs_enum_modules(
      callback,
      param,
    );
  }

  _dart_obs_enum_modules _obs_enum_modules;

  /// Helper function for using default module locale
  ffi.Pointer<lookup_t> obs_module_load_locale(
    ffi.Pointer<obs_module> module,
    ffi.Pointer<ffi.Int8> default_locale,
    ffi.Pointer<ffi.Int8> locale,
  ) {
    _obs_module_load_locale ??= _dylib.lookupFunction<_c_obs_module_load_locale,
        _dart_obs_module_load_locale>('obs_module_load_locale');
    return _obs_module_load_locale(
      module,
      default_locale,
      locale,
    );
  }

  _dart_obs_module_load_locale _obs_module_load_locale;

  /// Returns the location of a plugin module data file.
  ///
  /// @note   Modules should use obs_module_file function defined in obs-module.h
  /// as a more elegant means of getting their files without having to
  /// specify the module parameter.
  ///
  /// @param  module  The module associated with the file to locate
  /// @param  file    The file to locate
  /// @return         Path string, or NULL if not found.  Use bfree to free string.
  ffi.Pointer<ffi.Int8> obs_find_module_file(
    ffi.Pointer<obs_module> module,
    ffi.Pointer<ffi.Int8> file,
  ) {
    _obs_find_module_file ??= _dylib.lookupFunction<_c_obs_find_module_file,
        _dart_obs_find_module_file>('obs_find_module_file');
    return _obs_find_module_file(
      module,
      file,
    );
  }

  _dart_obs_find_module_file _obs_find_module_file;

  /// Returns the path of a plugin module config file (whether it exists or not)
  ///
  /// @note   Modules should use obs_module_config_path function defined in
  /// obs-module.h as a more elegant means of getting their files without
  /// having to specify the module parameter.
  ///
  /// @param  module  The module associated with the path
  /// @param  file    The file to get a path to
  /// @return         Path string, or NULL if not found.  Use bfree to free string.
  ffi.Pointer<ffi.Int8> obs_module_get_config_path(
    ffi.Pointer<obs_module> module,
    ffi.Pointer<ffi.Int8> file,
  ) {
    _obs_module_get_config_path ??= _dylib.lookupFunction<
        _c_obs_module_get_config_path,
        _dart_obs_module_get_config_path>('obs_module_get_config_path');
    return _obs_module_get_config_path(
      module,
      file,
    );
  }

  _dart_obs_module_get_config_path _obs_module_get_config_path;

  /// Enumerates all source types (inputs, filters, transitions, etc).
  int obs_enum_source_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_source_types ??= _dylib.lookupFunction<_c_obs_enum_source_types,
        _dart_obs_enum_source_types>('obs_enum_source_types');
    return _obs_enum_source_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_source_types _obs_enum_source_types;

  /// Enumerates all available inputs source types.
  ///
  /// Inputs are general source inputs (such as capture sources, device sources,
  /// etc).
  int obs_enum_input_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_input_types ??= _dylib.lookupFunction<_c_obs_enum_input_types,
        _dart_obs_enum_input_types>('obs_enum_input_types');
    return _obs_enum_input_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_input_types _obs_enum_input_types;

  int obs_enum_input_types2(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> unversioned_id,
  ) {
    _obs_enum_input_types2 ??= _dylib.lookupFunction<_c_obs_enum_input_types2,
        _dart_obs_enum_input_types2>('obs_enum_input_types2');
    return _obs_enum_input_types2(
      idx,
      id,
      unversioned_id,
    );
  }

  _dart_obs_enum_input_types2 _obs_enum_input_types2;

  ffi.Pointer<ffi.Int8> obs_get_latest_input_type_id(
    ffi.Pointer<ffi.Int8> unversioned_id,
  ) {
    _obs_get_latest_input_type_id ??= _dylib.lookupFunction<
        _c_obs_get_latest_input_type_id,
        _dart_obs_get_latest_input_type_id>('obs_get_latest_input_type_id');
    return _obs_get_latest_input_type_id(
      unversioned_id,
    );
  }

  _dart_obs_get_latest_input_type_id _obs_get_latest_input_type_id;

  /// Enumerates all available filter source types.
  ///
  /// Filters are sources that are used to modify the video/audio output of
  /// other sources.
  int obs_enum_filter_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_filter_types ??= _dylib.lookupFunction<_c_obs_enum_filter_types,
        _dart_obs_enum_filter_types>('obs_enum_filter_types');
    return _obs_enum_filter_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_filter_types _obs_enum_filter_types;

  /// Enumerates all available transition source types.
  ///
  /// Transitions are sources used to transition between two or more other
  /// sources.
  int obs_enum_transition_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_transition_types ??= _dylib.lookupFunction<
        _c_obs_enum_transition_types,
        _dart_obs_enum_transition_types>('obs_enum_transition_types');
    return _obs_enum_transition_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_transition_types _obs_enum_transition_types;

  /// Enumerates all available output types.
  int obs_enum_output_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_output_types ??= _dylib.lookupFunction<_c_obs_enum_output_types,
        _dart_obs_enum_output_types>('obs_enum_output_types');
    return _obs_enum_output_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_output_types _obs_enum_output_types;

  /// Enumerates all available encoder types.
  int obs_enum_encoder_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_encoder_types ??= _dylib.lookupFunction<_c_obs_enum_encoder_types,
        _dart_obs_enum_encoder_types>('obs_enum_encoder_types');
    return _obs_enum_encoder_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_encoder_types _obs_enum_encoder_types;

  /// Enumerates all available service types.
  int obs_enum_service_types(
    int idx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_enum_service_types ??= _dylib.lookupFunction<_c_obs_enum_service_types,
        _dart_obs_enum_service_types>('obs_enum_service_types');
    return _obs_enum_service_types(
      idx,
      id,
    );
  }

  _dart_obs_enum_service_types _obs_enum_service_types;

  /// Helper function for entering the OBS graphics context
  void obs_enter_graphics() {
    _obs_enter_graphics ??=
        _dylib.lookupFunction<_c_obs_enter_graphics, _dart_obs_enter_graphics>(
            'obs_enter_graphics');
    return _obs_enter_graphics();
  }

  _dart_obs_enter_graphics _obs_enter_graphics;

  /// Helper function for leaving the OBS graphics context
  void obs_leave_graphics() {
    _obs_leave_graphics ??=
        _dylib.lookupFunction<_c_obs_leave_graphics, _dart_obs_leave_graphics>(
            'obs_leave_graphics');
    return _obs_leave_graphics();
  }

  _dart_obs_leave_graphics _obs_leave_graphics;

  /// Gets the main audio output handler for this OBS context
  ffi.Pointer<audio_t> obs_get_audio() {
    _obs_get_audio ??= _dylib
        .lookupFunction<_c_obs_get_audio, _dart_obs_get_audio>('obs_get_audio');
    return _obs_get_audio();
  }

  _dart_obs_get_audio _obs_get_audio;

  /// Gets the main video output handler for this OBS context
  ffi.Pointer<video_t> obs_get_video() {
    _obs_get_video ??= _dylib
        .lookupFunction<_c_obs_get_video, _dart_obs_get_video>('obs_get_video');
    return _obs_get_video();
  }

  _dart_obs_get_video _obs_get_video;

  /// Returns true if video is active, false otherwise
  int obs_video_active() {
    _obs_video_active ??=
        _dylib.lookupFunction<_c_obs_video_active, _dart_obs_video_active>(
            'obs_video_active');
    return _obs_video_active();
  }

  _dart_obs_video_active _obs_video_active;

  /// Sets the primary output source for a channel.
  void obs_set_output_source(
    int channel,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_set_output_source ??= _dylib.lookupFunction<_c_obs_set_output_source,
        _dart_obs_set_output_source>('obs_set_output_source');
    return _obs_set_output_source(
      channel,
      source,
    );
  }

  _dart_obs_set_output_source _obs_set_output_source;

  /// Gets the primary output source for a channel and increments the reference
  /// counter for that source.  Use obs_source_release to release.
  ffi.Pointer<obs_source> obs_get_output_source(
    int channel,
  ) {
    _obs_get_output_source ??= _dylib.lookupFunction<_c_obs_get_output_source,
        _dart_obs_get_output_source>('obs_get_output_source');
    return _obs_get_output_source(
      channel,
    );
  }

  _dart_obs_get_output_source _obs_get_output_source;

  /// Enumerates all input sources
  ///
  /// Callback function returns true to continue enumeration, or false to end
  /// enumeration.
  ///
  /// Use obs_source_get_ref or obs_source_get_weak_source if you want to retain
  /// a reference after obs_enum_sources finishes
  void obs_enum_sources(
    ffi.Pointer<ffi.NativeFunction<_typedefC_1>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_sources ??=
        _dylib.lookupFunction<_c_obs_enum_sources, _dart_obs_enum_sources>(
            'obs_enum_sources');
    return _obs_enum_sources(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_sources _obs_enum_sources;

  /// Enumerates scenes
  void obs_enum_scenes(
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_scenes ??=
        _dylib.lookupFunction<_c_obs_enum_scenes, _dart_obs_enum_scenes>(
            'obs_enum_scenes');
    return _obs_enum_scenes(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_scenes _obs_enum_scenes;

  /// Enumerates outputs
  void obs_enum_outputs(
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_outputs ??=
        _dylib.lookupFunction<_c_obs_enum_outputs, _dart_obs_enum_outputs>(
            'obs_enum_outputs');
    return _obs_enum_outputs(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_outputs _obs_enum_outputs;

  /// Enumerates encoders
  void obs_enum_encoders(
    ffi.Pointer<ffi.NativeFunction<_typedefC_4>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_encoders ??=
        _dylib.lookupFunction<_c_obs_enum_encoders, _dart_obs_enum_encoders>(
            'obs_enum_encoders');
    return _obs_enum_encoders(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_encoders _obs_enum_encoders;

  /// Enumerates encoders
  void obs_enum_services(
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>> enum_proc,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_enum_services ??=
        _dylib.lookupFunction<_c_obs_enum_services, _dart_obs_enum_services>(
            'obs_enum_services');
    return _obs_enum_services(
      enum_proc,
      param,
    );
  }

  _dart_obs_enum_services _obs_enum_services;

  /// Gets a source by its name.
  ///
  /// Increments the source reference counter, use obs_source_release to
  /// release it when complete.
  ffi.Pointer<obs_source> obs_get_source_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_source_by_name ??= _dylib.lookupFunction<_c_obs_get_source_by_name,
        _dart_obs_get_source_by_name>('obs_get_source_by_name');
    return _obs_get_source_by_name(
      name,
    );
  }

  _dart_obs_get_source_by_name _obs_get_source_by_name;

  /// Gets an output by its name.
  ffi.Pointer<obs_output> obs_get_output_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_output_by_name ??= _dylib.lookupFunction<_c_obs_get_output_by_name,
        _dart_obs_get_output_by_name>('obs_get_output_by_name');
    return _obs_get_output_by_name(
      name,
    );
  }

  _dart_obs_get_output_by_name _obs_get_output_by_name;

  /// Gets an encoder by its name.
  ffi.Pointer<obs_encoder> obs_get_encoder_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_encoder_by_name ??= _dylib.lookupFunction<
        _c_obs_get_encoder_by_name,
        _dart_obs_get_encoder_by_name>('obs_get_encoder_by_name');
    return _obs_get_encoder_by_name(
      name,
    );
  }

  _dart_obs_get_encoder_by_name _obs_get_encoder_by_name;

  /// Gets an service by its name.
  ffi.Pointer<obs_service> obs_get_service_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_get_service_by_name ??= _dylib.lookupFunction<
        _c_obs_get_service_by_name,
        _dart_obs_get_service_by_name>('obs_get_service_by_name');
    return _obs_get_service_by_name(
      name,
    );
  }

  _dart_obs_get_service_by_name _obs_get_service_by_name;

  /// Returns a commonly used base effect
  ffi.Pointer<gs_effect_t> obs_get_base_effect(
    int effect,
  ) {
    _obs_get_base_effect ??= _dylib.lookupFunction<_c_obs_get_base_effect,
        _dart_obs_get_base_effect>('obs_get_base_effect');
    return _obs_get_base_effect(
      effect,
    );
  }

  _dart_obs_get_base_effect _obs_get_base_effect;

  ffi.Pointer<gs_effect_t> obs_get_default_rect_effect() {
    _obs_get_default_rect_effect ??= _dylib.lookupFunction<
        _c_obs_get_default_rect_effect,
        _dart_obs_get_default_rect_effect>('obs_get_default_rect_effect');
    return _obs_get_default_rect_effect();
  }

  _dart_obs_get_default_rect_effect _obs_get_default_rect_effect;

  /// Returns the primary obs signal handler
  ffi.Pointer<signal_handler_t> obs_get_signal_handler() {
    _obs_get_signal_handler ??= _dylib.lookupFunction<_c_obs_get_signal_handler,
        _dart_obs_get_signal_handler>('obs_get_signal_handler');
    return _obs_get_signal_handler();
  }

  _dart_obs_get_signal_handler _obs_get_signal_handler;

  /// Returns the primary obs procedure handler
  ffi.Pointer<proc_handler_t> obs_get_proc_handler() {
    _obs_get_proc_handler ??= _dylib.lookupFunction<_c_obs_get_proc_handler,
        _dart_obs_get_proc_handler>('obs_get_proc_handler');
    return _obs_get_proc_handler();
  }

  _dart_obs_get_proc_handler _obs_get_proc_handler;

  /// Renders the main view
  void obs_render_main_view() {
    _obs_render_main_view ??= _dylib.lookupFunction<_c_obs_render_main_view,
        _dart_obs_render_main_view>('obs_render_main_view');
    return _obs_render_main_view();
  }

  _dart_obs_render_main_view _obs_render_main_view;

  /// Renders the last main output texture
  void obs_render_main_texture() {
    _obs_render_main_texture ??= _dylib.lookupFunction<
        _c_obs_render_main_texture,
        _dart_obs_render_main_texture>('obs_render_main_texture');
    return _obs_render_main_texture();
  }

  _dart_obs_render_main_texture _obs_render_main_texture;

  /// Renders the last main output texture ignoring background color
  void obs_render_main_texture_src_color_only() {
    _obs_render_main_texture_src_color_only ??= _dylib.lookupFunction<
            _c_obs_render_main_texture_src_color_only,
            _dart_obs_render_main_texture_src_color_only>(
        'obs_render_main_texture_src_color_only');
    return _obs_render_main_texture_src_color_only();
  }

  _dart_obs_render_main_texture_src_color_only
      _obs_render_main_texture_src_color_only;

  /// Returns the last main output texture.  This can return NULL if the texture
  /// is unavailable.
  ffi.Pointer<gs_texture_t> obs_get_main_texture() {
    _obs_get_main_texture ??= _dylib.lookupFunction<_c_obs_get_main_texture,
        _dart_obs_get_main_texture>('obs_get_main_texture');
    return _obs_get_main_texture();
  }

  _dart_obs_get_main_texture _obs_get_main_texture;

  /// Sets the master user volume
  void obs_set_master_volume(
    double volume,
  ) {
    _obs_set_master_volume ??= _dylib.lookupFunction<_c_obs_set_master_volume,
        _dart_obs_set_master_volume>('obs_set_master_volume');
    return _obs_set_master_volume(
      volume,
    );
  }

  _dart_obs_set_master_volume _obs_set_master_volume;

  /// Gets the master user volume
  double obs_get_master_volume() {
    _obs_get_master_volume ??= _dylib.lookupFunction<_c_obs_get_master_volume,
        _dart_obs_get_master_volume>('obs_get_master_volume');
    return _obs_get_master_volume();
  }

  _dart_obs_get_master_volume _obs_get_master_volume;

  /// Saves a source to settings data
  ffi.Pointer<obs_data_t> obs_save_source(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_save_source ??=
        _dylib.lookupFunction<_c_obs_save_source, _dart_obs_save_source>(
            'obs_save_source');
    return _obs_save_source(
      source,
    );
  }

  _dart_obs_save_source _obs_save_source;

  /// Loads a source from settings data
  ffi.Pointer<obs_source> obs_load_source(
    ffi.Pointer<obs_data_t> data,
  ) {
    _obs_load_source ??=
        _dylib.lookupFunction<_c_obs_load_source, _dart_obs_load_source>(
            'obs_load_source');
    return _obs_load_source(
      data,
    );
  }

  _dart_obs_load_source _obs_load_source;

  /// Send a save signal to sources
  void obs_source_save(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_save ??=
        _dylib.lookupFunction<_c_obs_source_save, _dart_obs_source_save>(
            'obs_source_save');
    return _obs_source_save(
      source,
    );
  }

  _dart_obs_source_save _obs_source_save;

  /// Send a load signal to sources
  void obs_source_load(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_load ??=
        _dylib.lookupFunction<_c_obs_source_load, _dart_obs_source_load>(
            'obs_source_load');
    return _obs_source_load(
      source,
    );
  }

  _dart_obs_source_load _obs_source_load;

  /// Loads sources from a data array
  void obs_load_sources(
    ffi.Pointer<obs_data_array_t> array,
    ffi.Pointer<ffi.NativeFunction<obs_load_source_cb>> cb,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    _obs_load_sources ??=
        _dylib.lookupFunction<_c_obs_load_sources, _dart_obs_load_sources>(
            'obs_load_sources');
    return _obs_load_sources(
      array,
      cb,
      private_data,
    );
  }

  _dart_obs_load_sources _obs_load_sources;

  /// Saves sources to a data array
  ffi.Pointer<obs_data_array_t> obs_save_sources() {
    _obs_save_sources ??=
        _dylib.lookupFunction<_c_obs_save_sources, _dart_obs_save_sources>(
            'obs_save_sources');
    return _obs_save_sources();
  }

  _dart_obs_save_sources _obs_save_sources;

  ffi.Pointer<obs_data_array_t> obs_save_sources_filtered(
    ffi.Pointer<ffi.NativeFunction<obs_save_source_filter_cb>> cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_save_sources_filtered ??= _dylib.lookupFunction<
        _c_obs_save_sources_filtered,
        _dart_obs_save_sources_filtered>('obs_save_sources_filtered');
    return _obs_save_sources_filtered(
      cb,
      data,
    );
  }

  _dart_obs_save_sources_filtered _obs_save_sources_filtered;

  int obs_obj_get_type(
    ffi.Pointer<ffi.Void> obj,
  ) {
    _obs_obj_get_type ??=
        _dylib.lookupFunction<_c_obs_obj_get_type, _dart_obs_obj_get_type>(
            'obs_obj_get_type');
    return _obs_obj_get_type(
      obj,
    );
  }

  _dart_obs_obj_get_type _obs_obj_get_type;

  ffi.Pointer<ffi.Int8> obs_obj_get_id(
    ffi.Pointer<ffi.Void> obj,
  ) {
    _obs_obj_get_id ??=
        _dylib.lookupFunction<_c_obs_obj_get_id, _dart_obs_obj_get_id>(
            'obs_obj_get_id');
    return _obs_obj_get_id(
      obj,
    );
  }

  _dart_obs_obj_get_id _obs_obj_get_id;

  int obs_obj_invalid(
    ffi.Pointer<ffi.Void> obj,
  ) {
    _obs_obj_invalid ??=
        _dylib.lookupFunction<_c_obs_obj_invalid, _dart_obs_obj_invalid>(
            'obs_obj_invalid');
    return _obs_obj_invalid(
      obj,
    );
  }

  _dart_obs_obj_invalid _obs_obj_invalid;

  ffi.Pointer<ffi.Void> obs_obj_get_data(
    ffi.Pointer<ffi.Void> obj,
  ) {
    _obs_obj_get_data ??=
        _dylib.lookupFunction<_c_obs_obj_get_data, _dart_obs_obj_get_data>(
            'obs_obj_get_data');
    return _obs_obj_get_data(
      obj,
    );
  }

  _dart_obs_obj_get_data _obs_obj_get_data;

  void obs_enum_audio_monitoring_devices(
    ffi.Pointer<ffi.NativeFunction<obs_enum_audio_device_cb>> cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_enum_audio_monitoring_devices ??= _dylib.lookupFunction<
            _c_obs_enum_audio_monitoring_devices,
            _dart_obs_enum_audio_monitoring_devices>(
        'obs_enum_audio_monitoring_devices');
    return _obs_enum_audio_monitoring_devices(
      cb,
      data,
    );
  }

  _dart_obs_enum_audio_monitoring_devices _obs_enum_audio_monitoring_devices;

  int obs_set_audio_monitoring_device(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_set_audio_monitoring_device ??= _dylib.lookupFunction<
            _c_obs_set_audio_monitoring_device,
            _dart_obs_set_audio_monitoring_device>(
        'obs_set_audio_monitoring_device');
    return _obs_set_audio_monitoring_device(
      name,
      id,
    );
  }

  _dart_obs_set_audio_monitoring_device _obs_set_audio_monitoring_device;

  void obs_get_audio_monitoring_device(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ) {
    _obs_get_audio_monitoring_device ??= _dylib.lookupFunction<
            _c_obs_get_audio_monitoring_device,
            _dart_obs_get_audio_monitoring_device>(
        'obs_get_audio_monitoring_device');
    return _obs_get_audio_monitoring_device(
      name,
      id,
    );
  }

  _dart_obs_get_audio_monitoring_device _obs_get_audio_monitoring_device;

  void obs_add_tick_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> tick,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_add_tick_callback ??= _dylib.lookupFunction<_c_obs_add_tick_callback,
        _dart_obs_add_tick_callback>('obs_add_tick_callback');
    return _obs_add_tick_callback(
      tick,
      param,
    );
  }

  _dart_obs_add_tick_callback _obs_add_tick_callback;

  void obs_remove_tick_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> tick,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_remove_tick_callback ??= _dylib.lookupFunction<
        _c_obs_remove_tick_callback,
        _dart_obs_remove_tick_callback>('obs_remove_tick_callback');
    return _obs_remove_tick_callback(
      tick,
      param,
    );
  }

  _dart_obs_remove_tick_callback _obs_remove_tick_callback;

  void obs_add_main_render_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_add_main_render_callback ??= _dylib.lookupFunction<
        _c_obs_add_main_render_callback,
        _dart_obs_add_main_render_callback>('obs_add_main_render_callback');
    return _obs_add_main_render_callback(
      draw,
      param,
    );
  }

  _dart_obs_add_main_render_callback _obs_add_main_render_callback;

  void obs_remove_main_render_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_9>> draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_remove_main_render_callback ??= _dylib.lookupFunction<
            _c_obs_remove_main_render_callback,
            _dart_obs_remove_main_render_callback>(
        'obs_remove_main_render_callback');
    return _obs_remove_main_render_callback(
      draw,
      param,
    );
  }

  _dart_obs_remove_main_render_callback _obs_remove_main_render_callback;

  void obs_add_raw_video_callback(
    ffi.Pointer<video_scale_info> conversion,
    ffi.Pointer<ffi.NativeFunction<_typedefC_10>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_add_raw_video_callback ??= _dylib.lookupFunction<
        _c_obs_add_raw_video_callback,
        _dart_obs_add_raw_video_callback>('obs_add_raw_video_callback');
    return _obs_add_raw_video_callback(
      conversion,
      callback,
      param,
    );
  }

  _dart_obs_add_raw_video_callback _obs_add_raw_video_callback;

  void obs_remove_raw_video_callback(
    ffi.Pointer<ffi.NativeFunction<_typedefC_11>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_remove_raw_video_callback ??= _dylib.lookupFunction<
        _c_obs_remove_raw_video_callback,
        _dart_obs_remove_raw_video_callback>('obs_remove_raw_video_callback');
    return _obs_remove_raw_video_callback(
      callback,
      param,
    );
  }

  _dart_obs_remove_raw_video_callback _obs_remove_raw_video_callback;

  int obs_get_video_frame_time() {
    _obs_get_video_frame_time ??= _dylib.lookupFunction<
        _c_obs_get_video_frame_time,
        _dart_obs_get_video_frame_time>('obs_get_video_frame_time');
    return _obs_get_video_frame_time();
  }

  _dart_obs_get_video_frame_time _obs_get_video_frame_time;

  double obs_get_active_fps() {
    _obs_get_active_fps ??=
        _dylib.lookupFunction<_c_obs_get_active_fps, _dart_obs_get_active_fps>(
            'obs_get_active_fps');
    return _obs_get_active_fps();
  }

  _dart_obs_get_active_fps _obs_get_active_fps;

  int obs_get_average_frame_time_ns() {
    _obs_get_average_frame_time_ns ??= _dylib.lookupFunction<
        _c_obs_get_average_frame_time_ns,
        _dart_obs_get_average_frame_time_ns>('obs_get_average_frame_time_ns');
    return _obs_get_average_frame_time_ns();
  }

  _dart_obs_get_average_frame_time_ns _obs_get_average_frame_time_ns;

  int obs_get_frame_interval_ns() {
    _obs_get_frame_interval_ns ??= _dylib.lookupFunction<
        _c_obs_get_frame_interval_ns,
        _dart_obs_get_frame_interval_ns>('obs_get_frame_interval_ns');
    return _obs_get_frame_interval_ns();
  }

  _dart_obs_get_frame_interval_ns _obs_get_frame_interval_ns;

  int obs_get_total_frames() {
    _obs_get_total_frames ??= _dylib.lookupFunction<_c_obs_get_total_frames,
        _dart_obs_get_total_frames>('obs_get_total_frames');
    return _obs_get_total_frames();
  }

  _dart_obs_get_total_frames _obs_get_total_frames;

  int obs_get_lagged_frames() {
    _obs_get_lagged_frames ??= _dylib.lookupFunction<_c_obs_get_lagged_frames,
        _dart_obs_get_lagged_frames>('obs_get_lagged_frames');
    return _obs_get_lagged_frames();
  }

  _dart_obs_get_lagged_frames _obs_get_lagged_frames;

  int obs_nv12_tex_active() {
    _obs_nv12_tex_active ??= _dylib.lookupFunction<_c_obs_nv12_tex_active,
        _dart_obs_nv12_tex_active>('obs_nv12_tex_active');
    return _obs_nv12_tex_active();
  }

  _dart_obs_nv12_tex_active _obs_nv12_tex_active;

  void obs_apply_private_data(
    ffi.Pointer<obs_data_t> settings,
  ) {
    _obs_apply_private_data ??= _dylib.lookupFunction<_c_obs_apply_private_data,
        _dart_obs_apply_private_data>('obs_apply_private_data');
    return _obs_apply_private_data(
      settings,
    );
  }

  _dart_obs_apply_private_data _obs_apply_private_data;

  void obs_set_private_data(
    ffi.Pointer<obs_data_t> settings,
  ) {
    _obs_set_private_data ??= _dylib.lookupFunction<_c_obs_set_private_data,
        _dart_obs_set_private_data>('obs_set_private_data');
    return _obs_set_private_data(
      settings,
    );
  }

  _dart_obs_set_private_data _obs_set_private_data;

  ffi.Pointer<obs_data_t> obs_get_private_data() {
    _obs_get_private_data ??= _dylib.lookupFunction<_c_obs_get_private_data,
        _dart_obs_get_private_data>('obs_get_private_data');
    return _obs_get_private_data();
  }

  _dart_obs_get_private_data _obs_get_private_data;

  void obs_queue_task(
    int type,
    ffi.Pointer<ffi.NativeFunction<obs_task_t>> task,
    ffi.Pointer<ffi.Void> param,
    int wait,
  ) {
    _obs_queue_task ??=
        _dylib.lookupFunction<_c_obs_queue_task, _dart_obs_queue_task>(
            'obs_queue_task');
    return _obs_queue_task(
      type,
      task,
      param,
      wait,
    );
  }

  _dart_obs_queue_task _obs_queue_task;

  void obs_set_ui_task_handler(
    ffi.Pointer<ffi.NativeFunction<obs_task_handler_t>> handler,
  ) {
    _obs_set_ui_task_handler ??= _dylib.lookupFunction<
        _c_obs_set_ui_task_handler,
        _dart_obs_set_ui_task_handler>('obs_set_ui_task_handler');
    return _obs_set_ui_task_handler(
      handler,
    );
  }

  _dart_obs_set_ui_task_handler _obs_set_ui_task_handler;

  /// Creates a view context.
  ///
  /// A view can be used for things like separate previews, or drawing
  /// sources separately.
  ffi.Pointer<obs_view> obs_view_create() {
    _obs_view_create ??=
        _dylib.lookupFunction<_c_obs_view_create, _dart_obs_view_create>(
            'obs_view_create');
    return _obs_view_create();
  }

  _dart_obs_view_create _obs_view_create;

  /// Destroys this view context
  void obs_view_destroy(
    ffi.Pointer<obs_view> view,
  ) {
    _obs_view_destroy ??=
        _dylib.lookupFunction<_c_obs_view_destroy, _dart_obs_view_destroy>(
            'obs_view_destroy');
    return _obs_view_destroy(
      view,
    );
  }

  _dart_obs_view_destroy _obs_view_destroy;

  /// Sets the source to be used for this view context.
  void obs_view_set_source(
    ffi.Pointer<obs_view> view,
    int channel,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_view_set_source ??= _dylib.lookupFunction<_c_obs_view_set_source,
        _dart_obs_view_set_source>('obs_view_set_source');
    return _obs_view_set_source(
      view,
      channel,
      source,
    );
  }

  _dart_obs_view_set_source _obs_view_set_source;

  /// Gets the source currently in use for this view context
  ffi.Pointer<obs_source> obs_view_get_source(
    ffi.Pointer<obs_view> view,
    int channel,
  ) {
    _obs_view_get_source ??= _dylib.lookupFunction<_c_obs_view_get_source,
        _dart_obs_view_get_source>('obs_view_get_source');
    return _obs_view_get_source(
      view,
      channel,
    );
  }

  _dart_obs_view_get_source _obs_view_get_source;

  /// Renders the sources of this view context
  void obs_view_render(
    ffi.Pointer<obs_view> view,
  ) {
    _obs_view_render ??=
        _dylib.lookupFunction<_c_obs_view_render, _dart_obs_view_render>(
            'obs_view_render');
    return _obs_view_render(
      view,
    );
  }

  _dart_obs_view_render _obs_view_render;

  /// Adds a new window display linked to the main render pipeline.  This creates
  /// a new swap chain which updates every frame.
  ///
  /// @param  graphics_data  The swap chain initialization data.
  /// @return                The new display context, or NULL if failed.
  ffi.Pointer<obs_display> obs_display_create(
    ffi.Pointer<gs_init_data> graphics_data,
    int backround_color,
  ) {
    _obs_display_create ??=
        _dylib.lookupFunction<_c_obs_display_create, _dart_obs_display_create>(
            'obs_display_create');
    return _obs_display_create(
      graphics_data,
      backround_color,
    );
  }

  _dart_obs_display_create _obs_display_create;

  /// Destroys a display context
  void obs_display_destroy(
    ffi.Pointer<obs_display> display,
  ) {
    _obs_display_destroy ??= _dylib.lookupFunction<_c_obs_display_destroy,
        _dart_obs_display_destroy>('obs_display_destroy');
    return _obs_display_destroy(
      display,
    );
  }

  _dart_obs_display_destroy _obs_display_destroy;

  /// Changes the size of this display
  void obs_display_resize(
    ffi.Pointer<obs_display> display,
    int cx,
    int cy,
  ) {
    _obs_display_resize ??=
        _dylib.lookupFunction<_c_obs_display_resize, _dart_obs_display_resize>(
            'obs_display_resize');
    return _obs_display_resize(
      display,
      cx,
      cy,
    );
  }

  _dart_obs_display_resize _obs_display_resize;

  /// Adds a draw callback for this display context
  ///
  /// @param  display  The display context.
  /// @param  draw     The draw callback which is called each time a frame
  /// updates.
  /// @param  param    The user data to be associated with this draw callback.
  void obs_display_add_draw_callback(
    ffi.Pointer<obs_display> display,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_display_add_draw_callback ??= _dylib.lookupFunction<
        _c_obs_display_add_draw_callback,
        _dart_obs_display_add_draw_callback>('obs_display_add_draw_callback');
    return _obs_display_add_draw_callback(
      display,
      draw,
      param,
    );
  }

  _dart_obs_display_add_draw_callback _obs_display_add_draw_callback;

  /// Removes a draw callback for this display context
  void obs_display_remove_draw_callback(
    ffi.Pointer<obs_display> display,
    ffi.Pointer<ffi.NativeFunction<_typedefC_13>> draw,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_display_remove_draw_callback ??= _dylib.lookupFunction<
            _c_obs_display_remove_draw_callback,
            _dart_obs_display_remove_draw_callback>(
        'obs_display_remove_draw_callback');
    return _obs_display_remove_draw_callback(
      display,
      draw,
      param,
    );
  }

  _dart_obs_display_remove_draw_callback _obs_display_remove_draw_callback;

  void obs_display_set_enabled(
    ffi.Pointer<obs_display> display,
    int enable,
  ) {
    _obs_display_set_enabled ??= _dylib.lookupFunction<
        _c_obs_display_set_enabled,
        _dart_obs_display_set_enabled>('obs_display_set_enabled');
    return _obs_display_set_enabled(
      display,
      enable,
    );
  }

  _dart_obs_display_set_enabled _obs_display_set_enabled;

  int obs_display_enabled(
    ffi.Pointer<obs_display> display,
  ) {
    _obs_display_enabled ??= _dylib.lookupFunction<_c_obs_display_enabled,
        _dart_obs_display_enabled>('obs_display_enabled');
    return _obs_display_enabled(
      display,
    );
  }

  _dart_obs_display_enabled _obs_display_enabled;

  void obs_display_set_background_color(
    ffi.Pointer<obs_display> display,
    int color,
  ) {
    _obs_display_set_background_color ??= _dylib.lookupFunction<
            _c_obs_display_set_background_color,
            _dart_obs_display_set_background_color>(
        'obs_display_set_background_color');
    return _obs_display_set_background_color(
      display,
      color,
    );
  }

  _dart_obs_display_set_background_color _obs_display_set_background_color;

  void obs_display_size(
    ffi.Pointer<obs_display> display,
    ffi.Pointer<ffi.Uint32> width,
    ffi.Pointer<ffi.Uint32> height,
  ) {
    _obs_display_size ??=
        _dylib.lookupFunction<_c_obs_display_size, _dart_obs_display_size>(
            'obs_display_size');
    return _obs_display_size(
      display,
      width,
      height,
    );
  }

  _dart_obs_display_size _obs_display_size;

  /// Returns the translated display name of a source
  ffi.Pointer<ffi.Int8> obs_source_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_source_get_display_name ??= _dylib.lookupFunction<
        _c_obs_source_get_display_name,
        _dart_obs_source_get_display_name>('obs_source_get_display_name');
    return _obs_source_get_display_name(
      id,
    );
  }

  _dart_obs_source_get_display_name _obs_source_get_display_name;

  /// Creates a source of the specified type with the specified settings.
  ///
  /// The "source" context is used for anything related to presenting
  /// or modifying video/audio.  Use obs_source_release to release it.
  ffi.Pointer<obs_source> obs_source_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    _obs_source_create ??=
        _dylib.lookupFunction<_c_obs_source_create, _dart_obs_source_create>(
            'obs_source_create');
    return _obs_source_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  _dart_obs_source_create _obs_source_create;

  ffi.Pointer<obs_source> obs_source_create_private(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
  ) {
    _obs_source_create_private ??= _dylib.lookupFunction<
        _c_obs_source_create_private,
        _dart_obs_source_create_private>('obs_source_create_private');
    return _obs_source_create_private(
      id,
      name,
      settings,
    );
  }

  _dart_obs_source_create_private _obs_source_create_private;

  ffi.Pointer<obs_source> obs_source_duplicate(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.Int8> desired_name,
    int create_private,
  ) {
    _obs_source_duplicate ??= _dylib.lookupFunction<_c_obs_source_duplicate,
        _dart_obs_source_duplicate>('obs_source_duplicate');
    return _obs_source_duplicate(
      source,
      desired_name,
      create_private,
    );
  }

  _dart_obs_source_duplicate _obs_source_duplicate;

  /// Adds/releases a reference to a source.  When the last reference is
  /// released, the source is destroyed.
  void obs_source_addref(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_addref ??=
        _dylib.lookupFunction<_c_obs_source_addref, _dart_obs_source_addref>(
            'obs_source_addref');
    return _obs_source_addref(
      source,
    );
  }

  _dart_obs_source_addref _obs_source_addref;

  void obs_source_release(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_release ??=
        _dylib.lookupFunction<_c_obs_source_release, _dart_obs_source_release>(
            'obs_source_release');
    return _obs_source_release(
      source,
    );
  }

  _dart_obs_source_release _obs_source_release;

  void obs_weak_source_addref(
    ffi.Pointer<obs_weak_source> weak,
  ) {
    _obs_weak_source_addref ??= _dylib.lookupFunction<_c_obs_weak_source_addref,
        _dart_obs_weak_source_addref>('obs_weak_source_addref');
    return _obs_weak_source_addref(
      weak,
    );
  }

  _dart_obs_weak_source_addref _obs_weak_source_addref;

  void obs_weak_source_release(
    ffi.Pointer<obs_weak_source> weak,
  ) {
    _obs_weak_source_release ??= _dylib.lookupFunction<
        _c_obs_weak_source_release,
        _dart_obs_weak_source_release>('obs_weak_source_release');
    return _obs_weak_source_release(
      weak,
    );
  }

  _dart_obs_weak_source_release _obs_weak_source_release;

  ffi.Pointer<obs_source> obs_source_get_ref(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_ref ??=
        _dylib.lookupFunction<_c_obs_source_get_ref, _dart_obs_source_get_ref>(
            'obs_source_get_ref');
    return _obs_source_get_ref(
      source,
    );
  }

  _dart_obs_source_get_ref _obs_source_get_ref;

  ffi.Pointer<obs_weak_source> obs_source_get_weak_source(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_weak_source ??= _dylib.lookupFunction<
        _c_obs_source_get_weak_source,
        _dart_obs_source_get_weak_source>('obs_source_get_weak_source');
    return _obs_source_get_weak_source(
      source,
    );
  }

  _dart_obs_source_get_weak_source _obs_source_get_weak_source;

  ffi.Pointer<obs_source> obs_weak_source_get_source(
    ffi.Pointer<obs_weak_source> weak,
  ) {
    _obs_weak_source_get_source ??= _dylib.lookupFunction<
        _c_obs_weak_source_get_source,
        _dart_obs_weak_source_get_source>('obs_weak_source_get_source');
    return _obs_weak_source_get_source(
      weak,
    );
  }

  _dart_obs_weak_source_get_source _obs_weak_source_get_source;

  int obs_weak_source_references_source(
    ffi.Pointer<obs_weak_source> weak,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_weak_source_references_source ??= _dylib.lookupFunction<
            _c_obs_weak_source_references_source,
            _dart_obs_weak_source_references_source>(
        'obs_weak_source_references_source');
    return _obs_weak_source_references_source(
      weak,
      source,
    );
  }

  _dart_obs_weak_source_references_source _obs_weak_source_references_source;

  /// Notifies all references that the source should be released
  void obs_source_remove(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_remove ??=
        _dylib.lookupFunction<_c_obs_source_remove, _dart_obs_source_remove>(
            'obs_source_remove');
    return _obs_source_remove(
      source,
    );
  }

  _dart_obs_source_remove _obs_source_remove;

  /// Returns true if the source should be released
  int obs_source_removed(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_removed ??=
        _dylib.lookupFunction<_c_obs_source_removed, _dart_obs_source_removed>(
            'obs_source_removed');
    return _obs_source_removed(
      source,
    );
  }

  _dart_obs_source_removed _obs_source_removed;

  /// Returns capability flags of a source
  int obs_source_get_output_flags(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_output_flags ??= _dylib.lookupFunction<
        _c_obs_source_get_output_flags,
        _dart_obs_source_get_output_flags>('obs_source_get_output_flags');
    return _obs_source_get_output_flags(
      source,
    );
  }

  _dart_obs_source_get_output_flags _obs_source_get_output_flags;

  /// Returns capability flags of a source type
  int obs_get_source_output_flags(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_source_output_flags ??= _dylib.lookupFunction<
        _c_obs_get_source_output_flags,
        _dart_obs_get_source_output_flags>('obs_get_source_output_flags');
    return _obs_get_source_output_flags(
      id,
    );
  }

  _dart_obs_get_source_output_flags _obs_get_source_output_flags;

  /// Gets the default settings for a source type
  ffi.Pointer<obs_data_t> obs_get_source_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_source_defaults ??= _dylib.lookupFunction<
        _c_obs_get_source_defaults,
        _dart_obs_get_source_defaults>('obs_get_source_defaults');
    return _obs_get_source_defaults(
      id,
    );
  }

  _dart_obs_get_source_defaults _obs_get_source_defaults;

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_get_source_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_source_properties ??= _dylib.lookupFunction<
        _c_obs_get_source_properties,
        _dart_obs_get_source_properties>('obs_get_source_properties');
    return _obs_get_source_properties(
      id,
    );
  }

  _dart_obs_get_source_properties _obs_get_source_properties;

  /// Returns whether the source has custom properties or not
  int obs_is_source_configurable(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_is_source_configurable ??= _dylib.lookupFunction<
        _c_obs_is_source_configurable,
        _dart_obs_is_source_configurable>('obs_is_source_configurable');
    return _obs_is_source_configurable(
      id,
    );
  }

  _dart_obs_is_source_configurable _obs_is_source_configurable;

  int obs_source_configurable(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_configurable ??= _dylib.lookupFunction<
        _c_obs_source_configurable,
        _dart_obs_source_configurable>('obs_source_configurable');
    return _obs_source_configurable(
      source,
    );
  }

  _dart_obs_source_configurable _obs_source_configurable;

  /// Returns the properties list for a specific existing source.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_source_properties(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_properties ??= _dylib.lookupFunction<_c_obs_source_properties,
        _dart_obs_source_properties>('obs_source_properties');
    return _obs_source_properties(
      source,
    );
  }

  _dart_obs_source_properties _obs_source_properties;

  /// Updates settings for this source
  void obs_source_update(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_data_t> settings,
  ) {
    _obs_source_update ??=
        _dylib.lookupFunction<_c_obs_source_update, _dart_obs_source_update>(
            'obs_source_update');
    return _obs_source_update(
      source,
      settings,
    );
  }

  _dart_obs_source_update _obs_source_update;

  /// Renders a video source.
  void obs_source_video_render(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_video_render ??= _dylib.lookupFunction<
        _c_obs_source_video_render,
        _dart_obs_source_video_render>('obs_source_video_render');
    return _obs_source_video_render(
      source,
    );
  }

  _dart_obs_source_video_render _obs_source_video_render;

  /// Gets the width of a source (if it has video)
  int obs_source_get_width(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_width ??= _dylib.lookupFunction<_c_obs_source_get_width,
        _dart_obs_source_get_width>('obs_source_get_width');
    return _obs_source_get_width(
      source,
    );
  }

  _dart_obs_source_get_width _obs_source_get_width;

  /// Gets the height of a source (if it has video)
  int obs_source_get_height(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_height ??= _dylib.lookupFunction<_c_obs_source_get_height,
        _dart_obs_source_get_height>('obs_source_get_height');
    return _obs_source_get_height(
      source,
    );
  }

  _dart_obs_source_get_height _obs_source_get_height;

  /// If the source is a filter, returns the parent source of the filter.  Only
  /// guaranteed to be valid inside of the video_render, filter_audio,
  /// filter_video, and filter_remove callbacks.
  ffi.Pointer<obs_source> obs_filter_get_parent(
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_filter_get_parent ??= _dylib.lookupFunction<_c_obs_filter_get_parent,
        _dart_obs_filter_get_parent>('obs_filter_get_parent');
    return _obs_filter_get_parent(
      filter,
    );
  }

  _dart_obs_filter_get_parent _obs_filter_get_parent;

  /// If the source is a filter, returns the target source of the filter.  Only
  /// guaranteed to be valid inside of the video_render, filter_audio,
  /// filter_video, and filter_remove callbacks.
  ffi.Pointer<obs_source> obs_filter_get_target(
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_filter_get_target ??= _dylib.lookupFunction<_c_obs_filter_get_target,
        _dart_obs_filter_get_target>('obs_filter_get_target');
    return _obs_filter_get_target(
      filter,
    );
  }

  _dart_obs_filter_get_target _obs_filter_get_target;

  /// Used to directly render a non-async source without any filter processing
  void obs_source_default_render(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_default_render ??= _dylib.lookupFunction<
        _c_obs_source_default_render,
        _dart_obs_source_default_render>('obs_source_default_render');
    return _obs_source_default_render(
      source,
    );
  }

  _dart_obs_source_default_render _obs_source_default_render;

  /// Adds a filter to the source (which is used whenever the source is used)
  void obs_source_filter_add(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_source_filter_add ??= _dylib.lookupFunction<_c_obs_source_filter_add,
        _dart_obs_source_filter_add>('obs_source_filter_add');
    return _obs_source_filter_add(
      source,
      filter,
    );
  }

  _dart_obs_source_filter_add _obs_source_filter_add;

  /// Removes a filter from the source
  void obs_source_filter_remove(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_source_filter_remove ??= _dylib.lookupFunction<
        _c_obs_source_filter_remove,
        _dart_obs_source_filter_remove>('obs_source_filter_remove');
    return _obs_source_filter_remove(
      source,
      filter,
    );
  }

  _dart_obs_source_filter_remove _obs_source_filter_remove;

  /// Modifies the order of a specific filter
  void obs_source_filter_set_order(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source> filter,
    int movement,
  ) {
    _obs_source_filter_set_order ??= _dylib.lookupFunction<
        _c_obs_source_filter_set_order,
        _dart_obs_source_filter_set_order>('obs_source_filter_set_order');
    return _obs_source_filter_set_order(
      source,
      filter,
      movement,
    );
  }

  _dart_obs_source_filter_set_order _obs_source_filter_set_order;

  /// Gets the settings string for a source
  ffi.Pointer<obs_data_t> obs_source_get_settings(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_settings ??= _dylib.lookupFunction<
        _c_obs_source_get_settings,
        _dart_obs_source_get_settings>('obs_source_get_settings');
    return _obs_source_get_settings(
      source,
    );
  }

  _dart_obs_source_get_settings _obs_source_get_settings;

  /// Gets the name of a source
  ffi.Pointer<ffi.Int8> obs_source_get_name(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_name ??= _dylib.lookupFunction<_c_obs_source_get_name,
        _dart_obs_source_get_name>('obs_source_get_name');
    return _obs_source_get_name(
      source,
    );
  }

  _dart_obs_source_get_name _obs_source_get_name;

  /// Sets the name of a source
  void obs_source_set_name(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_source_set_name ??= _dylib.lookupFunction<_c_obs_source_set_name,
        _dart_obs_source_set_name>('obs_source_set_name');
    return _obs_source_set_name(
      source,
      name,
    );
  }

  _dart_obs_source_set_name _obs_source_set_name;

  /// Gets the source type
  int obs_source_get_type(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_type ??= _dylib.lookupFunction<_c_obs_source_get_type,
        _dart_obs_source_get_type>('obs_source_get_type');
    return _obs_source_get_type(
      source,
    );
  }

  _dart_obs_source_get_type _obs_source_get_type;

  /// Gets the source identifier
  ffi.Pointer<ffi.Int8> obs_source_get_id(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_id ??=
        _dylib.lookupFunction<_c_obs_source_get_id, _dart_obs_source_get_id>(
            'obs_source_get_id');
    return _obs_source_get_id(
      source,
    );
  }

  _dart_obs_source_get_id _obs_source_get_id;

  ffi.Pointer<ffi.Int8> obs_source_get_unversioned_id(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_unversioned_id ??= _dylib.lookupFunction<
        _c_obs_source_get_unversioned_id,
        _dart_obs_source_get_unversioned_id>('obs_source_get_unversioned_id');
    return _obs_source_get_unversioned_id(
      source,
    );
  }

  _dart_obs_source_get_unversioned_id _obs_source_get_unversioned_id;

  /// Returns the signal handler for a source
  ffi.Pointer<signal_handler_t> obs_source_get_signal_handler(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_signal_handler ??= _dylib.lookupFunction<
        _c_obs_source_get_signal_handler,
        _dart_obs_source_get_signal_handler>('obs_source_get_signal_handler');
    return _obs_source_get_signal_handler(
      source,
    );
  }

  _dart_obs_source_get_signal_handler _obs_source_get_signal_handler;

  /// Returns the procedure handler for a source
  ffi.Pointer<proc_handler_t> obs_source_get_proc_handler(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_proc_handler ??= _dylib.lookupFunction<
        _c_obs_source_get_proc_handler,
        _dart_obs_source_get_proc_handler>('obs_source_get_proc_handler');
    return _obs_source_get_proc_handler(
      source,
    );
  }

  _dart_obs_source_get_proc_handler _obs_source_get_proc_handler;

  /// Sets the user volume for a source that has audio output
  void obs_source_set_volume(
    ffi.Pointer<obs_source> source,
    double volume,
  ) {
    _obs_source_set_volume ??= _dylib.lookupFunction<_c_obs_source_set_volume,
        _dart_obs_source_set_volume>('obs_source_set_volume');
    return _obs_source_set_volume(
      source,
      volume,
    );
  }

  _dart_obs_source_set_volume _obs_source_set_volume;

  /// Gets the user volume for a source that has audio output
  double obs_source_get_volume(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_volume ??= _dylib.lookupFunction<_c_obs_source_get_volume,
        _dart_obs_source_get_volume>('obs_source_get_volume');
    return _obs_source_get_volume(
      source,
    );
  }

  _dart_obs_source_get_volume _obs_source_get_volume;

  int obs_source_get_speaker_layout(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_speaker_layout ??= _dylib.lookupFunction<
        _c_obs_source_get_speaker_layout,
        _dart_obs_source_get_speaker_layout>('obs_source_get_speaker_layout');
    return _obs_source_get_speaker_layout(
      source,
    );
  }

  _dart_obs_source_get_speaker_layout _obs_source_get_speaker_layout;

  /// Sets the balance value for a stereo audio source
  void obs_source_set_balance_value(
    ffi.Pointer<obs_source> source,
    double balance,
  ) {
    _obs_source_set_balance_value ??= _dylib.lookupFunction<
        _c_obs_source_set_balance_value,
        _dart_obs_source_set_balance_value>('obs_source_set_balance_value');
    return _obs_source_set_balance_value(
      source,
      balance,
    );
  }

  _dart_obs_source_set_balance_value _obs_source_set_balance_value;

  /// Gets the balance value for a stereo audio source
  double obs_source_get_balance_value(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_balance_value ??= _dylib.lookupFunction<
        _c_obs_source_get_balance_value,
        _dart_obs_source_get_balance_value>('obs_source_get_balance_value');
    return _obs_source_get_balance_value(
      source,
    );
  }

  _dart_obs_source_get_balance_value _obs_source_get_balance_value;

  /// Sets the audio sync offset (in nanoseconds) for a source
  void obs_source_set_sync_offset(
    ffi.Pointer<obs_source> source,
    int offset,
  ) {
    _obs_source_set_sync_offset ??= _dylib.lookupFunction<
        _c_obs_source_set_sync_offset,
        _dart_obs_source_set_sync_offset>('obs_source_set_sync_offset');
    return _obs_source_set_sync_offset(
      source,
      offset,
    );
  }

  _dart_obs_source_set_sync_offset _obs_source_set_sync_offset;

  /// Gets the audio sync offset (in nanoseconds) for a source
  int obs_source_get_sync_offset(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_sync_offset ??= _dylib.lookupFunction<
        _c_obs_source_get_sync_offset,
        _dart_obs_source_get_sync_offset>('obs_source_get_sync_offset');
    return _obs_source_get_sync_offset(
      source,
    );
  }

  _dart_obs_source_get_sync_offset _obs_source_get_sync_offset;

  /// Enumerates active child sources used by this source
  void obs_source_enum_active_sources(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_enum_active_sources ??= _dylib.lookupFunction<
        _c_obs_source_enum_active_sources,
        _dart_obs_source_enum_active_sources>('obs_source_enum_active_sources');
    return _obs_source_enum_active_sources(
      source,
      enum_callback,
      param,
    );
  }

  _dart_obs_source_enum_active_sources _obs_source_enum_active_sources;

  /// Enumerates the entire active child source tree used by this source
  void obs_source_enum_active_tree(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_enum_active_tree ??= _dylib.lookupFunction<
        _c_obs_source_enum_active_tree,
        _dart_obs_source_enum_active_tree>('obs_source_enum_active_tree');
    return _obs_source_enum_active_tree(
      source,
      enum_callback,
      param,
    );
  }

  _dart_obs_source_enum_active_tree _obs_source_enum_active_tree;

  /// Returns true if active, false if not
  int obs_source_active(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_active ??=
        _dylib.lookupFunction<_c_obs_source_active, _dart_obs_source_active>(
            'obs_source_active');
    return _obs_source_active(
      source,
    );
  }

  _dart_obs_source_active _obs_source_active;

  /// Returns true if currently displayed somewhere (active or not), false if not
  int obs_source_showing(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_showing ??=
        _dylib.lookupFunction<_c_obs_source_showing, _dart_obs_source_showing>(
            'obs_source_showing');
    return _obs_source_showing(
      source,
    );
  }

  _dart_obs_source_showing _obs_source_showing;

  /// Sets source flags.  Note that these are different from the main output
  /// flags.  These are generally things that can be set by the source or user,
  /// while the output flags are more used to determine capabilities of a source.
  void obs_source_set_flags(
    ffi.Pointer<obs_source> source,
    int flags,
  ) {
    _obs_source_set_flags ??= _dylib.lookupFunction<_c_obs_source_set_flags,
        _dart_obs_source_set_flags>('obs_source_set_flags');
    return _obs_source_set_flags(
      source,
      flags,
    );
  }

  _dart_obs_source_set_flags _obs_source_set_flags;

  /// Gets source flags.
  int obs_source_get_flags(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_flags ??= _dylib.lookupFunction<_c_obs_source_get_flags,
        _dart_obs_source_get_flags>('obs_source_get_flags');
    return _obs_source_get_flags(
      source,
    );
  }

  _dart_obs_source_get_flags _obs_source_get_flags;

  /// Sets audio mixer flags.  These flags are used to specify which mixers
  /// the source's audio should be applied to.
  void obs_source_set_audio_mixers(
    ffi.Pointer<obs_source> source,
    int mixers,
  ) {
    _obs_source_set_audio_mixers ??= _dylib.lookupFunction<
        _c_obs_source_set_audio_mixers,
        _dart_obs_source_set_audio_mixers>('obs_source_set_audio_mixers');
    return _obs_source_set_audio_mixers(
      source,
      mixers,
    );
  }

  _dart_obs_source_set_audio_mixers _obs_source_set_audio_mixers;

  /// Gets audio mixer flags
  int obs_source_get_audio_mixers(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_audio_mixers ??= _dylib.lookupFunction<
        _c_obs_source_get_audio_mixers,
        _dart_obs_source_get_audio_mixers>('obs_source_get_audio_mixers');
    return _obs_source_get_audio_mixers(
      source,
    );
  }

  _dart_obs_source_get_audio_mixers _obs_source_get_audio_mixers;

  /// Increments the 'showing' reference counter to indicate that the source is
  /// being shown somewhere.  If the reference counter was 0, will call the 'show'
  /// callback.
  void obs_source_inc_showing(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_inc_showing ??= _dylib.lookupFunction<_c_obs_source_inc_showing,
        _dart_obs_source_inc_showing>('obs_source_inc_showing');
    return _obs_source_inc_showing(
      source,
    );
  }

  _dart_obs_source_inc_showing _obs_source_inc_showing;

  /// Increments the 'active' reference counter to indicate that the source is
  /// fully active.  If the reference counter was 0, will call the 'activate'
  /// callback.
  ///
  /// Unlike obs_source_inc_showing, this will cause children of this source to be
  /// considered showing as well (currently used by transition previews to make
  /// the stinger transition show correctly).  obs_source_inc_showing should
  /// generally be used instead.
  void obs_source_inc_active(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_inc_active ??= _dylib.lookupFunction<_c_obs_source_inc_active,
        _dart_obs_source_inc_active>('obs_source_inc_active');
    return _obs_source_inc_active(
      source,
    );
  }

  _dart_obs_source_inc_active _obs_source_inc_active;

  /// Decrements the 'showing' reference counter to indicate that the source is
  /// no longer being shown somewhere.  If the reference counter is set to 0,
  /// will call the 'hide' callback
  void obs_source_dec_showing(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_dec_showing ??= _dylib.lookupFunction<_c_obs_source_dec_showing,
        _dart_obs_source_dec_showing>('obs_source_dec_showing');
    return _obs_source_dec_showing(
      source,
    );
  }

  _dart_obs_source_dec_showing _obs_source_dec_showing;

  /// Decrements the 'active' reference counter to indicate that the source is no
  /// longer fully active.  If the reference counter is set to 0, will call the
  /// 'deactivate' callback
  ///
  /// Unlike obs_source_dec_showing, this will cause children of this source to be
  /// considered not showing as well.  obs_source_dec_showing should generally be
  /// used instead.
  void obs_source_dec_active(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_dec_active ??= _dylib.lookupFunction<_c_obs_source_dec_active,
        _dart_obs_source_dec_active>('obs_source_dec_active');
    return _obs_source_dec_active(
      source,
    );
  }

  _dart_obs_source_dec_active _obs_source_dec_active;

  /// Enumerates filters assigned to the source
  void obs_source_enum_filters(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_enum_filters ??= _dylib.lookupFunction<
        _c_obs_source_enum_filters,
        _dart_obs_source_enum_filters>('obs_source_enum_filters');
    return _obs_source_enum_filters(
      source,
      callback,
      param,
    );
  }

  _dart_obs_source_enum_filters _obs_source_enum_filters;

  /// Gets a filter of a source by its display name.
  ffi.Pointer<obs_source> obs_source_get_filter_by_name(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_source_get_filter_by_name ??= _dylib.lookupFunction<
        _c_obs_source_get_filter_by_name,
        _dart_obs_source_get_filter_by_name>('obs_source_get_filter_by_name');
    return _obs_source_get_filter_by_name(
      source,
      name,
    );
  }

  _dart_obs_source_get_filter_by_name _obs_source_get_filter_by_name;

  void obs_source_copy_filters(
    ffi.Pointer<obs_source> dst,
    ffi.Pointer<obs_source> src,
  ) {
    _obs_source_copy_filters ??= _dylib.lookupFunction<
        _c_obs_source_copy_filters,
        _dart_obs_source_copy_filters>('obs_source_copy_filters');
    return _obs_source_copy_filters(
      dst,
      src,
    );
  }

  _dart_obs_source_copy_filters _obs_source_copy_filters;

  void obs_source_copy_single_filter(
    ffi.Pointer<obs_source> dst,
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_source_copy_single_filter ??= _dylib.lookupFunction<
        _c_obs_source_copy_single_filter,
        _dart_obs_source_copy_single_filter>('obs_source_copy_single_filter');
    return _obs_source_copy_single_filter(
      dst,
      filter,
    );
  }

  _dart_obs_source_copy_single_filter _obs_source_copy_single_filter;

  int obs_source_enabled(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_enabled ??=
        _dylib.lookupFunction<_c_obs_source_enabled, _dart_obs_source_enabled>(
            'obs_source_enabled');
    return _obs_source_enabled(
      source,
    );
  }

  _dart_obs_source_enabled _obs_source_enabled;

  void obs_source_set_enabled(
    ffi.Pointer<obs_source> source,
    int enabled,
  ) {
    _obs_source_set_enabled ??= _dylib.lookupFunction<_c_obs_source_set_enabled,
        _dart_obs_source_set_enabled>('obs_source_set_enabled');
    return _obs_source_set_enabled(
      source,
      enabled,
    );
  }

  _dart_obs_source_set_enabled _obs_source_set_enabled;

  int obs_source_muted(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_muted ??=
        _dylib.lookupFunction<_c_obs_source_muted, _dart_obs_source_muted>(
            'obs_source_muted');
    return _obs_source_muted(
      source,
    );
  }

  _dart_obs_source_muted _obs_source_muted;

  void obs_source_set_muted(
    ffi.Pointer<obs_source> source,
    int muted,
  ) {
    _obs_source_set_muted ??= _dylib.lookupFunction<_c_obs_source_set_muted,
        _dart_obs_source_set_muted>('obs_source_set_muted');
    return _obs_source_set_muted(
      source,
      muted,
    );
  }

  _dart_obs_source_set_muted _obs_source_set_muted;

  int obs_source_push_to_mute_enabled(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_push_to_mute_enabled ??= _dylib.lookupFunction<
            _c_obs_source_push_to_mute_enabled,
            _dart_obs_source_push_to_mute_enabled>(
        'obs_source_push_to_mute_enabled');
    return _obs_source_push_to_mute_enabled(
      source,
    );
  }

  _dart_obs_source_push_to_mute_enabled _obs_source_push_to_mute_enabled;

  void obs_source_enable_push_to_mute(
    ffi.Pointer<obs_source> source,
    int enabled,
  ) {
    _obs_source_enable_push_to_mute ??= _dylib.lookupFunction<
        _c_obs_source_enable_push_to_mute,
        _dart_obs_source_enable_push_to_mute>('obs_source_enable_push_to_mute');
    return _obs_source_enable_push_to_mute(
      source,
      enabled,
    );
  }

  _dart_obs_source_enable_push_to_mute _obs_source_enable_push_to_mute;

  int obs_source_get_push_to_mute_delay(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_push_to_mute_delay ??= _dylib.lookupFunction<
            _c_obs_source_get_push_to_mute_delay,
            _dart_obs_source_get_push_to_mute_delay>(
        'obs_source_get_push_to_mute_delay');
    return _obs_source_get_push_to_mute_delay(
      source,
    );
  }

  _dart_obs_source_get_push_to_mute_delay _obs_source_get_push_to_mute_delay;

  void obs_source_set_push_to_mute_delay(
    ffi.Pointer<obs_source> source,
    int delay,
  ) {
    _obs_source_set_push_to_mute_delay ??= _dylib.lookupFunction<
            _c_obs_source_set_push_to_mute_delay,
            _dart_obs_source_set_push_to_mute_delay>(
        'obs_source_set_push_to_mute_delay');
    return _obs_source_set_push_to_mute_delay(
      source,
      delay,
    );
  }

  _dart_obs_source_set_push_to_mute_delay _obs_source_set_push_to_mute_delay;

  int obs_source_push_to_talk_enabled(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_push_to_talk_enabled ??= _dylib.lookupFunction<
            _c_obs_source_push_to_talk_enabled,
            _dart_obs_source_push_to_talk_enabled>(
        'obs_source_push_to_talk_enabled');
    return _obs_source_push_to_talk_enabled(
      source,
    );
  }

  _dart_obs_source_push_to_talk_enabled _obs_source_push_to_talk_enabled;

  void obs_source_enable_push_to_talk(
    ffi.Pointer<obs_source> source,
    int enabled,
  ) {
    _obs_source_enable_push_to_talk ??= _dylib.lookupFunction<
        _c_obs_source_enable_push_to_talk,
        _dart_obs_source_enable_push_to_talk>('obs_source_enable_push_to_talk');
    return _obs_source_enable_push_to_talk(
      source,
      enabled,
    );
  }

  _dart_obs_source_enable_push_to_talk _obs_source_enable_push_to_talk;

  int obs_source_get_push_to_talk_delay(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_push_to_talk_delay ??= _dylib.lookupFunction<
            _c_obs_source_get_push_to_talk_delay,
            _dart_obs_source_get_push_to_talk_delay>(
        'obs_source_get_push_to_talk_delay');
    return _obs_source_get_push_to_talk_delay(
      source,
    );
  }

  _dart_obs_source_get_push_to_talk_delay _obs_source_get_push_to_talk_delay;

  void obs_source_set_push_to_talk_delay(
    ffi.Pointer<obs_source> source,
    int delay,
  ) {
    _obs_source_set_push_to_talk_delay ??= _dylib.lookupFunction<
            _c_obs_source_set_push_to_talk_delay,
            _dart_obs_source_set_push_to_talk_delay>(
        'obs_source_set_push_to_talk_delay');
    return _obs_source_set_push_to_talk_delay(
      source,
      delay,
    );
  }

  _dart_obs_source_set_push_to_talk_delay _obs_source_set_push_to_talk_delay;

  void obs_source_add_audio_capture_callback(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_add_audio_capture_callback ??= _dylib.lookupFunction<
            _c_obs_source_add_audio_capture_callback,
            _dart_obs_source_add_audio_capture_callback>(
        'obs_source_add_audio_capture_callback');
    return _obs_source_add_audio_capture_callback(
      source,
      callback,
      param,
    );
  }

  _dart_obs_source_add_audio_capture_callback
      _obs_source_add_audio_capture_callback;

  void obs_source_remove_audio_capture_callback(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_remove_audio_capture_callback ??= _dylib.lookupFunction<
            _c_obs_source_remove_audio_capture_callback,
            _dart_obs_source_remove_audio_capture_callback>(
        'obs_source_remove_audio_capture_callback');
    return _obs_source_remove_audio_capture_callback(
      source,
      callback,
      param,
    );
  }

  _dart_obs_source_remove_audio_capture_callback
      _obs_source_remove_audio_capture_callback;

  void obs_source_set_deinterlace_mode(
    ffi.Pointer<obs_source> source,
    int mode,
  ) {
    _obs_source_set_deinterlace_mode ??= _dylib.lookupFunction<
            _c_obs_source_set_deinterlace_mode,
            _dart_obs_source_set_deinterlace_mode>(
        'obs_source_set_deinterlace_mode');
    return _obs_source_set_deinterlace_mode(
      source,
      mode,
    );
  }

  _dart_obs_source_set_deinterlace_mode _obs_source_set_deinterlace_mode;

  int obs_source_get_deinterlace_mode(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_deinterlace_mode ??= _dylib.lookupFunction<
            _c_obs_source_get_deinterlace_mode,
            _dart_obs_source_get_deinterlace_mode>(
        'obs_source_get_deinterlace_mode');
    return _obs_source_get_deinterlace_mode(
      source,
    );
  }

  _dart_obs_source_get_deinterlace_mode _obs_source_get_deinterlace_mode;

  void obs_source_set_deinterlace_field_order(
    ffi.Pointer<obs_source> source,
    int field_order,
  ) {
    _obs_source_set_deinterlace_field_order ??= _dylib.lookupFunction<
            _c_obs_source_set_deinterlace_field_order,
            _dart_obs_source_set_deinterlace_field_order>(
        'obs_source_set_deinterlace_field_order');
    return _obs_source_set_deinterlace_field_order(
      source,
      field_order,
    );
  }

  _dart_obs_source_set_deinterlace_field_order
      _obs_source_set_deinterlace_field_order;

  int obs_source_get_deinterlace_field_order(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_deinterlace_field_order ??= _dylib.lookupFunction<
            _c_obs_source_get_deinterlace_field_order,
            _dart_obs_source_get_deinterlace_field_order>(
        'obs_source_get_deinterlace_field_order');
    return _obs_source_get_deinterlace_field_order(
      source,
    );
  }

  _dart_obs_source_get_deinterlace_field_order
      _obs_source_get_deinterlace_field_order;

  void obs_source_set_monitoring_type(
    ffi.Pointer<obs_source> source,
    int type,
  ) {
    _obs_source_set_monitoring_type ??= _dylib.lookupFunction<
        _c_obs_source_set_monitoring_type,
        _dart_obs_source_set_monitoring_type>('obs_source_set_monitoring_type');
    return _obs_source_set_monitoring_type(
      source,
      type,
    );
  }

  _dart_obs_source_set_monitoring_type _obs_source_set_monitoring_type;

  int obs_source_get_monitoring_type(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_monitoring_type ??= _dylib.lookupFunction<
        _c_obs_source_get_monitoring_type,
        _dart_obs_source_get_monitoring_type>('obs_source_get_monitoring_type');
    return _obs_source_get_monitoring_type(
      source,
    );
  }

  _dart_obs_source_get_monitoring_type _obs_source_get_monitoring_type;

  /// Gets private front-end settings data.  This data is saved/loaded
  /// automatically.  Returns an incremented reference.
  ffi.Pointer<obs_data_t> obs_source_get_private_settings(
    ffi.Pointer<obs_source> item,
  ) {
    _obs_source_get_private_settings ??= _dylib.lookupFunction<
            _c_obs_source_get_private_settings,
            _dart_obs_source_get_private_settings>(
        'obs_source_get_private_settings');
    return _obs_source_get_private_settings(
      item,
    );
  }

  _dart_obs_source_get_private_settings _obs_source_get_private_settings;

  ffi.Pointer<ffi.Void> obs_source_get_type_data(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_type_data ??= _dylib.lookupFunction<
        _c_obs_source_get_type_data,
        _dart_obs_source_get_type_data>('obs_source_get_type_data');
    return _obs_source_get_type_data(
      source,
    );
  }

  _dart_obs_source_get_type_data _obs_source_get_type_data;

  /// Helper function to set the color matrix information when drawing the source.
  ///
  /// @param  color_matrix     The color matrix.  Assigns to the 'color_matrix'
  /// effect variable.
  /// @param  color_range_min  The minimum color range.  Assigns to the
  /// 'color_range_min' effect variable.  If NULL,
  /// {0.0f, 0.0f, 0.0f} is used.
  /// @param  color_range_max  The maximum color range.  Assigns to the
  /// 'color_range_max' effect variable.  If NULL,
  /// {1.0f, 1.0f, 1.0f} is used.
  void obs_source_draw_set_color_matrix(
    ffi.Pointer<matrix4> color_matrix,
    ffi.Pointer<vec3> color_range_min,
    ffi.Pointer<vec3> color_range_max,
  ) {
    _obs_source_draw_set_color_matrix ??= _dylib.lookupFunction<
            _c_obs_source_draw_set_color_matrix,
            _dart_obs_source_draw_set_color_matrix>(
        'obs_source_draw_set_color_matrix');
    return _obs_source_draw_set_color_matrix(
      color_matrix,
      color_range_min,
      color_range_max,
    );
  }

  _dart_obs_source_draw_set_color_matrix _obs_source_draw_set_color_matrix;

  /// Helper function to draw sprites for a source (synchronous video).
  ///
  /// @param  image   The sprite texture to draw.  Assigns to the 'image' variable
  /// of the current effect.
  /// @param  x       X position of the sprite.
  /// @param  y       Y position of the sprite.
  /// @param  cx      Width of the sprite.  If 0, uses the texture width.
  /// @param  cy      Height of the sprite.  If 0, uses the texture height.
  /// @param  flip    Specifies whether to flip the image vertically.
  void obs_source_draw(
    ffi.Pointer<gs_texture_t> image,
    int x,
    int y,
    int cx,
    int cy,
    int flip,
  ) {
    _obs_source_draw ??=
        _dylib.lookupFunction<_c_obs_source_draw, _dart_obs_source_draw>(
            'obs_source_draw');
    return _obs_source_draw(
      image,
      x,
      y,
      cx,
      cy,
      flip,
    );
  }

  _dart_obs_source_draw _obs_source_draw;

  /// Outputs asynchronous video data.  Set to NULL to deactivate the texture
  ///
  /// NOTE: Non-YUV formats will always be treated as full range with this
  /// function!  Use obs_source_output_video2 instead if partial range support is
  /// desired for non-YUV video formats.
  void obs_source_output_video(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_output_video ??= _dylib.lookupFunction<
        _c_obs_source_output_video,
        _dart_obs_source_output_video>('obs_source_output_video');
    return _obs_source_output_video(
      source,
      frame,
    );
  }

  _dart_obs_source_output_video _obs_source_output_video;

  void obs_source_output_video2(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame2> frame,
  ) {
    _obs_source_output_video2 ??= _dylib.lookupFunction<
        _c_obs_source_output_video2,
        _dart_obs_source_output_video2>('obs_source_output_video2');
    return _obs_source_output_video2(
      source,
      frame,
    );
  }

  _dart_obs_source_output_video2 _obs_source_output_video2;

  void obs_source_set_async_rotation(
    ffi.Pointer<obs_source> source,
    int rotation,
  ) {
    _obs_source_set_async_rotation ??= _dylib.lookupFunction<
        _c_obs_source_set_async_rotation,
        _dart_obs_source_set_async_rotation>('obs_source_set_async_rotation');
    return _obs_source_set_async_rotation(
      source,
      rotation,
    );
  }

  _dart_obs_source_set_async_rotation _obs_source_set_async_rotation;

  /// Preloads asynchronous video data to allow instantaneous playback
  ///
  /// NOTE: Non-YUV formats will always be treated as full range with this
  /// function!  Use obs_source_preload_video2 instead if partial range support is
  /// desired for non-YUV video formats.
  void obs_source_preload_video(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_preload_video ??= _dylib.lookupFunction<
        _c_obs_source_preload_video,
        _dart_obs_source_preload_video>('obs_source_preload_video');
    return _obs_source_preload_video(
      source,
      frame,
    );
  }

  _dart_obs_source_preload_video _obs_source_preload_video;

  void obs_source_preload_video2(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame2> frame,
  ) {
    _obs_source_preload_video2 ??= _dylib.lookupFunction<
        _c_obs_source_preload_video2,
        _dart_obs_source_preload_video2>('obs_source_preload_video2');
    return _obs_source_preload_video2(
      source,
      frame,
    );
  }

  _dart_obs_source_preload_video2 _obs_source_preload_video2;

  /// Shows any preloaded video data
  void obs_source_show_preloaded_video(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_show_preloaded_video ??= _dylib.lookupFunction<
            _c_obs_source_show_preloaded_video,
            _dart_obs_source_show_preloaded_video>(
        'obs_source_show_preloaded_video');
    return _obs_source_show_preloaded_video(
      source,
    );
  }

  _dart_obs_source_show_preloaded_video _obs_source_show_preloaded_video;

  /// Sets current async video frame immediately
  ///
  /// NOTE: Non-YUV formats will always be treated as full range with this
  /// function!  Use obs_source_preload_video2 instead if partial range support is
  /// desired for non-YUV video formats.
  void obs_source_set_video_frame(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_set_video_frame ??= _dylib.lookupFunction<
        _c_obs_source_set_video_frame,
        _dart_obs_source_set_video_frame>('obs_source_set_video_frame');
    return _obs_source_set_video_frame(
      source,
      frame,
    );
  }

  _dart_obs_source_set_video_frame _obs_source_set_video_frame;

  void obs_source_set_video_frame2(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame2> frame,
  ) {
    _obs_source_set_video_frame2 ??= _dylib.lookupFunction<
        _c_obs_source_set_video_frame2,
        _dart_obs_source_set_video_frame2>('obs_source_set_video_frame2');
    return _obs_source_set_video_frame2(
      source,
      frame,
    );
  }

  _dart_obs_source_set_video_frame2 _obs_source_set_video_frame2;

  /// Outputs audio data (always asynchronous)
  void obs_source_output_audio(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_audio> audio,
  ) {
    _obs_source_output_audio ??= _dylib.lookupFunction<
        _c_obs_source_output_audio,
        _dart_obs_source_output_audio>('obs_source_output_audio');
    return _obs_source_output_audio(
      source,
      audio,
    );
  }

  _dart_obs_source_output_audio _obs_source_output_audio;

  /// Signal an update to any currently used properties via 'update_properties'
  void obs_source_update_properties(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_update_properties ??= _dylib.lookupFunction<
        _c_obs_source_update_properties,
        _dart_obs_source_update_properties>('obs_source_update_properties');
    return _obs_source_update_properties(
      source,
    );
  }

  _dart_obs_source_update_properties _obs_source_update_properties;

  /// Gets the current async video frame
  ffi.Pointer<obs_source_frame> obs_source_get_frame(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_frame ??= _dylib.lookupFunction<_c_obs_source_get_frame,
        _dart_obs_source_get_frame>('obs_source_get_frame');
    return _obs_source_get_frame(
      source,
    );
  }

  _dart_obs_source_get_frame _obs_source_get_frame;

  /// Releases the current async video frame
  void obs_source_release_frame(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_release_frame ??= _dylib.lookupFunction<
        _c_obs_source_release_frame,
        _dart_obs_source_release_frame>('obs_source_release_frame');
    return _obs_source_release_frame(
      source,
      frame,
    );
  }

  _dart_obs_source_release_frame _obs_source_release_frame;

  /// Default RGB filter handler for generic effect filters.  Processes the
  /// filter chain and renders them to texture if needed, then the filter is
  /// drawn with
  ///
  /// After calling this, set your parameters for the effect, then call
  /// obs_source_process_filter_end to draw the filter.
  ///
  /// Returns true if filtering should continue, false if the filter is bypassed
  /// for whatever reason.
  int obs_source_process_filter_begin(
    ffi.Pointer<obs_source> filter,
    int format,
    int allow_direct,
  ) {
    _obs_source_process_filter_begin ??= _dylib.lookupFunction<
            _c_obs_source_process_filter_begin,
            _dart_obs_source_process_filter_begin>(
        'obs_source_process_filter_begin');
    return _obs_source_process_filter_begin(
      filter,
      format,
      allow_direct,
    );
  }

  _dart_obs_source_process_filter_begin _obs_source_process_filter_begin;

  /// Draws the filter.
  ///
  /// Before calling this function, first call obs_source_process_filter_begin and
  /// then set the effect parameters, and then call this function to finalize the
  /// filter.
  void obs_source_process_filter_end(
    ffi.Pointer<obs_source> filter,
    ffi.Pointer<gs_effect_t> effect,
    int width,
    int height,
  ) {
    _obs_source_process_filter_end ??= _dylib.lookupFunction<
        _c_obs_source_process_filter_end,
        _dart_obs_source_process_filter_end>('obs_source_process_filter_end');
    return _obs_source_process_filter_end(
      filter,
      effect,
      width,
      height,
    );
  }

  _dart_obs_source_process_filter_end _obs_source_process_filter_end;

  /// Draws the filter with a specific technique.
  ///
  /// Before calling this function, first call obs_source_process_filter_begin and
  /// then set the effect parameters, and then call this function to finalize the
  /// filter.
  void obs_source_process_filter_tech_end(
    ffi.Pointer<obs_source> filter,
    ffi.Pointer<gs_effect_t> effect,
    int width,
    int height,
    ffi.Pointer<ffi.Int8> tech_name,
  ) {
    _obs_source_process_filter_tech_end ??= _dylib.lookupFunction<
            _c_obs_source_process_filter_tech_end,
            _dart_obs_source_process_filter_tech_end>(
        'obs_source_process_filter_tech_end');
    return _obs_source_process_filter_tech_end(
      filter,
      effect,
      width,
      height,
      tech_name,
    );
  }

  _dart_obs_source_process_filter_tech_end _obs_source_process_filter_tech_end;

  /// Skips the filter if the filter is invalid and cannot be rendered
  void obs_source_skip_video_filter(
    ffi.Pointer<obs_source> filter,
  ) {
    _obs_source_skip_video_filter ??= _dylib.lookupFunction<
        _c_obs_source_skip_video_filter,
        _dart_obs_source_skip_video_filter>('obs_source_skip_video_filter');
    return _obs_source_skip_video_filter(
      filter,
    );
  }

  _dart_obs_source_skip_video_filter _obs_source_skip_video_filter;

  /// Adds an active child source.  Must be called by parent sources on child
  /// sources when the child is added and active.  This ensures that the source is
  /// properly activated if the parent is active.
  ///
  /// @returns true if source can be added, false if it causes recursion
  int obs_source_add_active_child(
    ffi.Pointer<obs_source> parent,
    ffi.Pointer<obs_source> child,
  ) {
    _obs_source_add_active_child ??= _dylib.lookupFunction<
        _c_obs_source_add_active_child,
        _dart_obs_source_add_active_child>('obs_source_add_active_child');
    return _obs_source_add_active_child(
      parent,
      child,
    );
  }

  _dart_obs_source_add_active_child _obs_source_add_active_child;

  /// Removes an active child source.  Must be called by parent sources on child
  /// sources when the child is removed or inactive.  This ensures that the source
  /// is properly deactivated if the parent is no longer active.
  void obs_source_remove_active_child(
    ffi.Pointer<obs_source> parent,
    ffi.Pointer<obs_source> child,
  ) {
    _obs_source_remove_active_child ??= _dylib.lookupFunction<
        _c_obs_source_remove_active_child,
        _dart_obs_source_remove_active_child>('obs_source_remove_active_child');
    return _obs_source_remove_active_child(
      parent,
      child,
    );
  }

  _dart_obs_source_remove_active_child _obs_source_remove_active_child;

  /// Sends a mouse down/up event to a source
  void obs_source_send_mouse_click(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_mouse_event> event,
    int type,
    int mouse_up,
    int click_count,
  ) {
    _obs_source_send_mouse_click ??= _dylib.lookupFunction<
        _c_obs_source_send_mouse_click,
        _dart_obs_source_send_mouse_click>('obs_source_send_mouse_click');
    return _obs_source_send_mouse_click(
      source,
      event,
      type,
      mouse_up,
      click_count,
    );
  }

  _dart_obs_source_send_mouse_click _obs_source_send_mouse_click;

  /// Sends a mouse move event to a source.
  void obs_source_send_mouse_move(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_mouse_event> event,
    int mouse_leave,
  ) {
    _obs_source_send_mouse_move ??= _dylib.lookupFunction<
        _c_obs_source_send_mouse_move,
        _dart_obs_source_send_mouse_move>('obs_source_send_mouse_move');
    return _obs_source_send_mouse_move(
      source,
      event,
      mouse_leave,
    );
  }

  _dart_obs_source_send_mouse_move _obs_source_send_mouse_move;

  /// Sends a mouse wheel event to a source
  void obs_source_send_mouse_wheel(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_mouse_event> event,
    int x_delta,
    int y_delta,
  ) {
    _obs_source_send_mouse_wheel ??= _dylib.lookupFunction<
        _c_obs_source_send_mouse_wheel,
        _dart_obs_source_send_mouse_wheel>('obs_source_send_mouse_wheel');
    return _obs_source_send_mouse_wheel(
      source,
      event,
      x_delta,
      y_delta,
    );
  }

  _dart_obs_source_send_mouse_wheel _obs_source_send_mouse_wheel;

  /// Sends a got-focus or lost-focus event to a source
  void obs_source_send_focus(
    ffi.Pointer<obs_source> source,
    int focus,
  ) {
    _obs_source_send_focus ??= _dylib.lookupFunction<_c_obs_source_send_focus,
        _dart_obs_source_send_focus>('obs_source_send_focus');
    return _obs_source_send_focus(
      source,
      focus,
    );
  }

  _dart_obs_source_send_focus _obs_source_send_focus;

  /// Sends a key up/down event to a source
  void obs_source_send_key_click(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_key_event> event,
    int key_up,
  ) {
    _obs_source_send_key_click ??= _dylib.lookupFunction<
        _c_obs_source_send_key_click,
        _dart_obs_source_send_key_click>('obs_source_send_key_click');
    return _obs_source_send_key_click(
      source,
      event,
      key_up,
    );
  }

  _dart_obs_source_send_key_click _obs_source_send_key_click;

  /// Sets the default source flags.
  void obs_source_set_default_flags(
    ffi.Pointer<obs_source> source,
    int flags,
  ) {
    _obs_source_set_default_flags ??= _dylib.lookupFunction<
        _c_obs_source_set_default_flags,
        _dart_obs_source_set_default_flags>('obs_source_set_default_flags');
    return _obs_source_set_default_flags(
      source,
      flags,
    );
  }

  _dart_obs_source_set_default_flags _obs_source_set_default_flags;

  /// Gets the base width for a source (not taking in to account filtering)
  int obs_source_get_base_width(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_base_width ??= _dylib.lookupFunction<
        _c_obs_source_get_base_width,
        _dart_obs_source_get_base_width>('obs_source_get_base_width');
    return _obs_source_get_base_width(
      source,
    );
  }

  _dart_obs_source_get_base_width _obs_source_get_base_width;

  /// Gets the base height for a source (not taking in to account filtering)
  int obs_source_get_base_height(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_base_height ??= _dylib.lookupFunction<
        _c_obs_source_get_base_height,
        _dart_obs_source_get_base_height>('obs_source_get_base_height');
    return _obs_source_get_base_height(
      source,
    );
  }

  _dart_obs_source_get_base_height _obs_source_get_base_height;

  int obs_source_audio_pending(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_audio_pending ??= _dylib.lookupFunction<
        _c_obs_source_audio_pending,
        _dart_obs_source_audio_pending>('obs_source_audio_pending');
    return _obs_source_audio_pending(
      source,
    );
  }

  _dart_obs_source_audio_pending _obs_source_audio_pending;

  int obs_source_get_audio_timestamp(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_audio_timestamp ??= _dylib.lookupFunction<
        _c_obs_source_get_audio_timestamp,
        _dart_obs_source_get_audio_timestamp>('obs_source_get_audio_timestamp');
    return _obs_source_get_audio_timestamp(
      source,
    );
  }

  _dart_obs_source_get_audio_timestamp _obs_source_get_audio_timestamp;

  void obs_source_get_audio_mix(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<obs_source_audio_mix> audio,
  ) {
    _obs_source_get_audio_mix ??= _dylib.lookupFunction<
        _c_obs_source_get_audio_mix,
        _dart_obs_source_get_audio_mix>('obs_source_get_audio_mix');
    return _obs_source_get_audio_mix(
      source,
      audio,
    );
  }

  _dart_obs_source_get_audio_mix _obs_source_get_audio_mix;

  void obs_source_set_async_unbuffered(
    ffi.Pointer<obs_source> source,
    int unbuffered,
  ) {
    _obs_source_set_async_unbuffered ??= _dylib.lookupFunction<
            _c_obs_source_set_async_unbuffered,
            _dart_obs_source_set_async_unbuffered>(
        'obs_source_set_async_unbuffered');
    return _obs_source_set_async_unbuffered(
      source,
      unbuffered,
    );
  }

  _dart_obs_source_set_async_unbuffered _obs_source_set_async_unbuffered;

  int obs_source_async_unbuffered(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_async_unbuffered ??= _dylib.lookupFunction<
        _c_obs_source_async_unbuffered,
        _dart_obs_source_async_unbuffered>('obs_source_async_unbuffered');
    return _obs_source_async_unbuffered(
      source,
    );
  }

  _dart_obs_source_async_unbuffered _obs_source_async_unbuffered;

  /// Used to decouple audio from video so that audio doesn't attempt to sync up
  /// with video.  I.E. Audio acts independently.  Only works when in unbuffered
  /// mode.
  void obs_source_set_async_decoupled(
    ffi.Pointer<obs_source> source,
    int decouple,
  ) {
    _obs_source_set_async_decoupled ??= _dylib.lookupFunction<
        _c_obs_source_set_async_decoupled,
        _dart_obs_source_set_async_decoupled>('obs_source_set_async_decoupled');
    return _obs_source_set_async_decoupled(
      source,
      decouple,
    );
  }

  _dart_obs_source_set_async_decoupled _obs_source_set_async_decoupled;

  int obs_source_async_decoupled(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_async_decoupled ??= _dylib.lookupFunction<
        _c_obs_source_async_decoupled,
        _dart_obs_source_async_decoupled>('obs_source_async_decoupled');
    return _obs_source_async_decoupled(
      source,
    );
  }

  _dart_obs_source_async_decoupled _obs_source_async_decoupled;

  void obs_source_set_audio_active(
    ffi.Pointer<obs_source> source,
    int show_1,
  ) {
    _obs_source_set_audio_active ??= _dylib.lookupFunction<
        _c_obs_source_set_audio_active,
        _dart_obs_source_set_audio_active>('obs_source_set_audio_active');
    return _obs_source_set_audio_active(
      source,
      show_1,
    );
  }

  _dart_obs_source_set_audio_active _obs_source_set_audio_active;

  int obs_source_audio_active(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_audio_active ??= _dylib.lookupFunction<
        _c_obs_source_audio_active,
        _dart_obs_source_audio_active>('obs_source_audio_active');
    return _obs_source_audio_active(
      source,
    );
  }

  _dart_obs_source_audio_active _obs_source_audio_active;

  int obs_source_get_last_obs_version(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_get_last_obs_version ??= _dylib.lookupFunction<
            _c_obs_source_get_last_obs_version,
            _dart_obs_source_get_last_obs_version>(
        'obs_source_get_last_obs_version');
    return _obs_source_get_last_obs_version(
      source,
    );
  }

  _dart_obs_source_get_last_obs_version _obs_source_get_last_obs_version;

  /// Media controls
  void obs_source_media_play_pause(
    ffi.Pointer<obs_source> source,
    int pause,
  ) {
    _obs_source_media_play_pause ??= _dylib.lookupFunction<
        _c_obs_source_media_play_pause,
        _dart_obs_source_media_play_pause>('obs_source_media_play_pause');
    return _obs_source_media_play_pause(
      source,
      pause,
    );
  }

  _dart_obs_source_media_play_pause _obs_source_media_play_pause;

  void obs_source_media_restart(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_restart ??= _dylib.lookupFunction<
        _c_obs_source_media_restart,
        _dart_obs_source_media_restart>('obs_source_media_restart');
    return _obs_source_media_restart(
      source,
    );
  }

  _dart_obs_source_media_restart _obs_source_media_restart;

  void obs_source_media_stop(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_stop ??= _dylib.lookupFunction<_c_obs_source_media_stop,
        _dart_obs_source_media_stop>('obs_source_media_stop');
    return _obs_source_media_stop(
      source,
    );
  }

  _dart_obs_source_media_stop _obs_source_media_stop;

  void obs_source_media_next(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_next ??= _dylib.lookupFunction<_c_obs_source_media_next,
        _dart_obs_source_media_next>('obs_source_media_next');
    return _obs_source_media_next(
      source,
    );
  }

  _dart_obs_source_media_next _obs_source_media_next;

  void obs_source_media_previous(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_previous ??= _dylib.lookupFunction<
        _c_obs_source_media_previous,
        _dart_obs_source_media_previous>('obs_source_media_previous');
    return _obs_source_media_previous(
      source,
    );
  }

  _dart_obs_source_media_previous _obs_source_media_previous;

  int obs_source_media_get_duration(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_get_duration ??= _dylib.lookupFunction<
        _c_obs_source_media_get_duration,
        _dart_obs_source_media_get_duration>('obs_source_media_get_duration');
    return _obs_source_media_get_duration(
      source,
    );
  }

  _dart_obs_source_media_get_duration _obs_source_media_get_duration;

  int obs_source_media_get_time(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_get_time ??= _dylib.lookupFunction<
        _c_obs_source_media_get_time,
        _dart_obs_source_media_get_time>('obs_source_media_get_time');
    return _obs_source_media_get_time(
      source,
    );
  }

  _dart_obs_source_media_get_time _obs_source_media_get_time;

  void obs_source_media_set_time(
    ffi.Pointer<obs_source> source,
    int ms,
  ) {
    _obs_source_media_set_time ??= _dylib.lookupFunction<
        _c_obs_source_media_set_time,
        _dart_obs_source_media_set_time>('obs_source_media_set_time');
    return _obs_source_media_set_time(
      source,
      ms,
    );
  }

  _dart_obs_source_media_set_time _obs_source_media_set_time;

  int obs_source_media_get_state(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_get_state ??= _dylib.lookupFunction<
        _c_obs_source_media_get_state,
        _dart_obs_source_media_get_state>('obs_source_media_get_state');
    return _obs_source_media_get_state(
      source,
    );
  }

  _dart_obs_source_media_get_state _obs_source_media_get_state;

  void obs_source_media_started(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_started ??= _dylib.lookupFunction<
        _c_obs_source_media_started,
        _dart_obs_source_media_started>('obs_source_media_started');
    return _obs_source_media_started(
      source,
    );
  }

  _dart_obs_source_media_started _obs_source_media_started;

  void obs_source_media_ended(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_media_ended ??= _dylib.lookupFunction<_c_obs_source_media_ended,
        _dart_obs_source_media_ended>('obs_source_media_ended');
    return _obs_source_media_ended(
      source,
    );
  }

  _dart_obs_source_media_ended _obs_source_media_ended;

  ffi.Pointer<obs_source> obs_transition_get_source(
    ffi.Pointer<obs_source> transition,
    int target,
  ) {
    _obs_transition_get_source ??= _dylib.lookupFunction<
        _c_obs_transition_get_source,
        _dart_obs_transition_get_source>('obs_transition_get_source');
    return _obs_transition_get_source(
      transition,
      target,
    );
  }

  _dart_obs_transition_get_source _obs_transition_get_source;

  void obs_transition_clear(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_clear ??= _dylib.lookupFunction<_c_obs_transition_clear,
        _dart_obs_transition_clear>('obs_transition_clear');
    return _obs_transition_clear(
      transition,
    );
  }

  _dart_obs_transition_clear _obs_transition_clear;

  ffi.Pointer<obs_source> obs_transition_get_active_source(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_get_active_source ??= _dylib.lookupFunction<
            _c_obs_transition_get_active_source,
            _dart_obs_transition_get_active_source>(
        'obs_transition_get_active_source');
    return _obs_transition_get_active_source(
      transition,
    );
  }

  _dart_obs_transition_get_active_source _obs_transition_get_active_source;

  int obs_transition_start(
    ffi.Pointer<obs_source> transition,
    int mode,
    int duration_ms,
    ffi.Pointer<obs_source> dest,
  ) {
    _obs_transition_start ??= _dylib.lookupFunction<_c_obs_transition_start,
        _dart_obs_transition_start>('obs_transition_start');
    return _obs_transition_start(
      transition,
      mode,
      duration_ms,
      dest,
    );
  }

  _dart_obs_transition_start _obs_transition_start;

  void obs_transition_set(
    ffi.Pointer<obs_source> transition,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_transition_set ??=
        _dylib.lookupFunction<_c_obs_transition_set, _dart_obs_transition_set>(
            'obs_transition_set');
    return _obs_transition_set(
      transition,
      source,
    );
  }

  _dart_obs_transition_set _obs_transition_set;

  void obs_transition_set_manual_time(
    ffi.Pointer<obs_source> transition,
    double t,
  ) {
    _obs_transition_set_manual_time ??= _dylib.lookupFunction<
        _c_obs_transition_set_manual_time,
        _dart_obs_transition_set_manual_time>('obs_transition_set_manual_time');
    return _obs_transition_set_manual_time(
      transition,
      t,
    );
  }

  _dart_obs_transition_set_manual_time _obs_transition_set_manual_time;

  void obs_transition_set_manual_torque(
    ffi.Pointer<obs_source> transition,
    double torque,
    double clamp,
  ) {
    _obs_transition_set_manual_torque ??= _dylib.lookupFunction<
            _c_obs_transition_set_manual_torque,
            _dart_obs_transition_set_manual_torque>(
        'obs_transition_set_manual_torque');
    return _obs_transition_set_manual_torque(
      transition,
      torque,
      clamp,
    );
  }

  _dart_obs_transition_set_manual_torque _obs_transition_set_manual_torque;

  void obs_transition_set_scale_type(
    ffi.Pointer<obs_source> transition,
    int type,
  ) {
    _obs_transition_set_scale_type ??= _dylib.lookupFunction<
        _c_obs_transition_set_scale_type,
        _dart_obs_transition_set_scale_type>('obs_transition_set_scale_type');
    return _obs_transition_set_scale_type(
      transition,
      type,
    );
  }

  _dart_obs_transition_set_scale_type _obs_transition_set_scale_type;

  int obs_transition_get_scale_type(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_get_scale_type ??= _dylib.lookupFunction<
        _c_obs_transition_get_scale_type,
        _dart_obs_transition_get_scale_type>('obs_transition_get_scale_type');
    return _obs_transition_get_scale_type(
      transition,
    );
  }

  _dart_obs_transition_get_scale_type _obs_transition_get_scale_type;

  void obs_transition_set_alignment(
    ffi.Pointer<obs_source> transition,
    int alignment,
  ) {
    _obs_transition_set_alignment ??= _dylib.lookupFunction<
        _c_obs_transition_set_alignment,
        _dart_obs_transition_set_alignment>('obs_transition_set_alignment');
    return _obs_transition_set_alignment(
      transition,
      alignment,
    );
  }

  _dart_obs_transition_set_alignment _obs_transition_set_alignment;

  int obs_transition_get_alignment(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_get_alignment ??= _dylib.lookupFunction<
        _c_obs_transition_get_alignment,
        _dart_obs_transition_get_alignment>('obs_transition_get_alignment');
    return _obs_transition_get_alignment(
      transition,
    );
  }

  _dart_obs_transition_get_alignment _obs_transition_get_alignment;

  void obs_transition_set_size(
    ffi.Pointer<obs_source> transition,
    int cx,
    int cy,
  ) {
    _obs_transition_set_size ??= _dylib.lookupFunction<
        _c_obs_transition_set_size,
        _dart_obs_transition_set_size>('obs_transition_set_size');
    return _obs_transition_set_size(
      transition,
      cx,
      cy,
    );
  }

  _dart_obs_transition_set_size _obs_transition_set_size;

  void obs_transition_get_size(
    ffi.Pointer<obs_source> transition,
    ffi.Pointer<ffi.Uint32> cx,
    ffi.Pointer<ffi.Uint32> cy,
  ) {
    _obs_transition_get_size ??= _dylib.lookupFunction<
        _c_obs_transition_get_size,
        _dart_obs_transition_get_size>('obs_transition_get_size');
    return _obs_transition_get_size(
      transition,
      cx,
      cy,
    );
  }

  _dart_obs_transition_get_size _obs_transition_get_size;

  /// Enables fixed transitions (videos or specific types of transitions that
  /// are of fixed duration and linearly interpolated
  void obs_transition_enable_fixed(
    ffi.Pointer<obs_source> transition,
    int enable,
    int duration_ms,
  ) {
    _obs_transition_enable_fixed ??= _dylib.lookupFunction<
        _c_obs_transition_enable_fixed,
        _dart_obs_transition_enable_fixed>('obs_transition_enable_fixed');
    return _obs_transition_enable_fixed(
      transition,
      enable,
      duration_ms,
    );
  }

  _dart_obs_transition_enable_fixed _obs_transition_enable_fixed;

  int obs_transition_fixed(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_fixed ??= _dylib.lookupFunction<_c_obs_transition_fixed,
        _dart_obs_transition_fixed>('obs_transition_fixed');
    return _obs_transition_fixed(
      transition,
    );
  }

  _dart_obs_transition_fixed _obs_transition_fixed;

  double obs_transition_get_time(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_get_time ??= _dylib.lookupFunction<
        _c_obs_transition_get_time,
        _dart_obs_transition_get_time>('obs_transition_get_time');
    return _obs_transition_get_time(
      transition,
    );
  }

  _dart_obs_transition_get_time _obs_transition_get_time;

  void obs_transition_force_stop(
    ffi.Pointer<obs_source> transition,
  ) {
    _obs_transition_force_stop ??= _dylib.lookupFunction<
        _c_obs_transition_force_stop,
        _dart_obs_transition_force_stop>('obs_transition_force_stop');
    return _obs_transition_force_stop(
      transition,
    );
  }

  _dart_obs_transition_force_stop _obs_transition_force_stop;

  void obs_transition_video_render(
    ffi.Pointer<obs_source> transition,
    ffi.Pointer<ffi.NativeFunction<obs_transition_video_render_callback_t>>
        callback,
  ) {
    _obs_transition_video_render ??= _dylib.lookupFunction<
        _c_obs_transition_video_render,
        _dart_obs_transition_video_render>('obs_transition_video_render');
    return _obs_transition_video_render(
      transition,
      callback,
    );
  }

  _dart_obs_transition_video_render _obs_transition_video_render;

  /// Directly renders its sub-source instead of to texture.  Returns false if no
  /// longer transitioning
  int obs_transition_video_render_direct(
    ffi.Pointer<obs_source> transition,
    int target,
  ) {
    _obs_transition_video_render_direct ??= _dylib.lookupFunction<
            _c_obs_transition_video_render_direct,
            _dart_obs_transition_video_render_direct>(
        'obs_transition_video_render_direct');
    return _obs_transition_video_render_direct(
      transition,
      target,
    );
  }

  _dart_obs_transition_video_render_direct _obs_transition_video_render_direct;

  int obs_transition_audio_render(
    ffi.Pointer<obs_source> transition,
    ffi.Pointer<ffi.Uint64> ts_out,
    ffi.Pointer<obs_source_audio_mix> audio,
    int mixers,
    int channels,
    int sample_rate,
    ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
        mix_a_callback,
    ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
        mix_b_callback,
  ) {
    _obs_transition_audio_render ??= _dylib.lookupFunction<
        _c_obs_transition_audio_render,
        _dart_obs_transition_audio_render>('obs_transition_audio_render');
    return _obs_transition_audio_render(
      transition,
      ts_out,
      audio,
      mixers,
      channels,
      sample_rate,
      mix_a_callback,
      mix_b_callback,
    );
  }

  _dart_obs_transition_audio_render _obs_transition_audio_render;

  void obs_transition_swap_begin(
    ffi.Pointer<obs_source> tr_dest,
    ffi.Pointer<obs_source> tr_source,
  ) {
    _obs_transition_swap_begin ??= _dylib.lookupFunction<
        _c_obs_transition_swap_begin,
        _dart_obs_transition_swap_begin>('obs_transition_swap_begin');
    return _obs_transition_swap_begin(
      tr_dest,
      tr_source,
    );
  }

  _dart_obs_transition_swap_begin _obs_transition_swap_begin;

  void obs_transition_swap_end(
    ffi.Pointer<obs_source> tr_dest,
    ffi.Pointer<obs_source> tr_source,
  ) {
    _obs_transition_swap_end ??= _dylib.lookupFunction<
        _c_obs_transition_swap_end,
        _dart_obs_transition_swap_end>('obs_transition_swap_end');
    return _obs_transition_swap_end(
      tr_dest,
      tr_source,
    );
  }

  _dart_obs_transition_swap_end _obs_transition_swap_end;

  /// Creates a scene.
  ///
  /// A scene is a source which is a container of other sources with specific
  /// display orientations.  Scenes can also be used like any other source.
  ffi.Pointer<obs_scene> obs_scene_create(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_create ??=
        _dylib.lookupFunction<_c_obs_scene_create, _dart_obs_scene_create>(
            'obs_scene_create');
    return _obs_scene_create(
      name,
    );
  }

  _dart_obs_scene_create _obs_scene_create;

  ffi.Pointer<obs_scene> obs_scene_create_private(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_create_private ??= _dylib.lookupFunction<
        _c_obs_scene_create_private,
        _dart_obs_scene_create_private>('obs_scene_create_private');
    return _obs_scene_create_private(
      name,
    );
  }

  _dart_obs_scene_create_private _obs_scene_create_private;

  /// Duplicates a scene.
  ffi.Pointer<obs_scene> obs_scene_duplicate(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
    int type,
  ) {
    _obs_scene_duplicate ??= _dylib.lookupFunction<_c_obs_scene_duplicate,
        _dart_obs_scene_duplicate>('obs_scene_duplicate');
    return _obs_scene_duplicate(
      scene,
      name,
      type,
    );
  }

  _dart_obs_scene_duplicate _obs_scene_duplicate;

  void obs_scene_addref(
    ffi.Pointer<obs_scene> scene,
  ) {
    _obs_scene_addref ??=
        _dylib.lookupFunction<_c_obs_scene_addref, _dart_obs_scene_addref>(
            'obs_scene_addref');
    return _obs_scene_addref(
      scene,
    );
  }

  _dart_obs_scene_addref _obs_scene_addref;

  void obs_scene_release(
    ffi.Pointer<obs_scene> scene,
  ) {
    _obs_scene_release ??=
        _dylib.lookupFunction<_c_obs_scene_release, _dart_obs_scene_release>(
            'obs_scene_release');
    return _obs_scene_release(
      scene,
    );
  }

  _dart_obs_scene_release _obs_scene_release;

  /// Gets the scene's source context
  ffi.Pointer<obs_source> obs_scene_get_source(
    ffi.Pointer<obs_scene> scene,
  ) {
    _obs_scene_get_source ??= _dylib.lookupFunction<_c_obs_scene_get_source,
        _dart_obs_scene_get_source>('obs_scene_get_source');
    return _obs_scene_get_source(
      scene,
    );
  }

  _dart_obs_scene_get_source _obs_scene_get_source;

  /// Gets the scene from its source, or NULL if not a scene
  ffi.Pointer<obs_scene> obs_scene_from_source(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_scene_from_source ??= _dylib.lookupFunction<_c_obs_scene_from_source,
        _dart_obs_scene_from_source>('obs_scene_from_source');
    return _obs_scene_from_source(
      source,
    );
  }

  _dart_obs_scene_from_source _obs_scene_from_source;

  /// Determines whether a source is within a scene
  ffi.Pointer<obs_scene_item> obs_scene_find_source(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_find_source ??= _dylib.lookupFunction<_c_obs_scene_find_source,
        _dart_obs_scene_find_source>('obs_scene_find_source');
    return _obs_scene_find_source(
      scene,
      name,
    );
  }

  _dart_obs_scene_find_source _obs_scene_find_source;

  ffi.Pointer<obs_scene_item> obs_scene_find_source_recursive(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_find_source_recursive ??= _dylib.lookupFunction<
            _c_obs_scene_find_source_recursive,
            _dart_obs_scene_find_source_recursive>(
        'obs_scene_find_source_recursive');
    return _obs_scene_find_source_recursive(
      scene,
      name,
    );
  }

  _dart_obs_scene_find_source_recursive _obs_scene_find_source_recursive;

  ffi.Pointer<obs_scene_item> obs_scene_find_sceneitem_by_id(
    ffi.Pointer<obs_scene> scene,
    int id,
  ) {
    _obs_scene_find_sceneitem_by_id ??= _dylib.lookupFunction<
        _c_obs_scene_find_sceneitem_by_id,
        _dart_obs_scene_find_sceneitem_by_id>('obs_scene_find_sceneitem_by_id');
    return _obs_scene_find_sceneitem_by_id(
      scene,
      id,
    );
  }

  _dart_obs_scene_find_sceneitem_by_id _obs_scene_find_sceneitem_by_id;

  /// Enumerates sources within a scene
  void obs_scene_enum_items(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.NativeFunction<_typedefC_14>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_scene_enum_items ??= _dylib.lookupFunction<_c_obs_scene_enum_items,
        _dart_obs_scene_enum_items>('obs_scene_enum_items');
    return _obs_scene_enum_items(
      scene,
      callback,
      param,
    );
  }

  _dart_obs_scene_enum_items _obs_scene_enum_items;

  int obs_scene_reorder_items(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Pointer<obs_scene_item>> item_order,
    int item_order_size,
  ) {
    _obs_scene_reorder_items ??= _dylib.lookupFunction<
        _c_obs_scene_reorder_items,
        _dart_obs_scene_reorder_items>('obs_scene_reorder_items');
    return _obs_scene_reorder_items(
      scene,
      item_order,
      item_order_size,
    );
  }

  _dart_obs_scene_reorder_items _obs_scene_reorder_items;

  int obs_scene_reorder_items2(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<obs_sceneitem_order_info> item_order,
    int item_order_size,
  ) {
    _obs_scene_reorder_items2 ??= _dylib.lookupFunction<
        _c_obs_scene_reorder_items2,
        _dart_obs_scene_reorder_items2>('obs_scene_reorder_items2');
    return _obs_scene_reorder_items2(
      scene,
      item_order,
      item_order_size,
    );
  }

  _dart_obs_scene_reorder_items2 _obs_scene_reorder_items2;

  /// Adds/creates a new scene item for a source
  ffi.Pointer<obs_scene_item> obs_scene_add(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<obs_source> source,
  ) {
    _obs_scene_add ??= _dylib
        .lookupFunction<_c_obs_scene_add, _dart_obs_scene_add>('obs_scene_add');
    return _obs_scene_add(
      scene,
      source,
    );
  }

  _dart_obs_scene_add _obs_scene_add;

  void obs_scene_atomic_update(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.NativeFunction<obs_scene_atomic_update_func>> func,
    ffi.Pointer<ffi.Void> data,
  ) {
    _obs_scene_atomic_update ??= _dylib.lookupFunction<
        _c_obs_scene_atomic_update,
        _dart_obs_scene_atomic_update>('obs_scene_atomic_update');
    return _obs_scene_atomic_update(
      scene,
      func,
      data,
    );
  }

  _dart_obs_scene_atomic_update _obs_scene_atomic_update;

  void obs_sceneitem_addref(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_addref ??= _dylib.lookupFunction<_c_obs_sceneitem_addref,
        _dart_obs_sceneitem_addref>('obs_sceneitem_addref');
    return _obs_sceneitem_addref(
      item,
    );
  }

  _dart_obs_sceneitem_addref _obs_sceneitem_addref;

  void obs_sceneitem_release(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_release ??= _dylib.lookupFunction<_c_obs_sceneitem_release,
        _dart_obs_sceneitem_release>('obs_sceneitem_release');
    return _obs_sceneitem_release(
      item,
    );
  }

  _dart_obs_sceneitem_release _obs_sceneitem_release;

  /// Removes a scene item.
  void obs_sceneitem_remove(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_remove ??= _dylib.lookupFunction<_c_obs_sceneitem_remove,
        _dart_obs_sceneitem_remove>('obs_sceneitem_remove');
    return _obs_sceneitem_remove(
      item,
    );
  }

  _dart_obs_sceneitem_remove _obs_sceneitem_remove;

  /// Gets the scene parent associated with the scene item.
  ffi.Pointer<obs_scene> obs_sceneitem_get_scene(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_scene ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_scene,
        _dart_obs_sceneitem_get_scene>('obs_sceneitem_get_scene');
    return _obs_sceneitem_get_scene(
      item,
    );
  }

  _dart_obs_sceneitem_get_scene _obs_sceneitem_get_scene;

  /// Gets the source of a scene item.
  ffi.Pointer<obs_source> obs_sceneitem_get_source(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_source ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_source,
        _dart_obs_sceneitem_get_source>('obs_sceneitem_get_source');
    return _obs_sceneitem_get_source(
      item,
    );
  }

  _dart_obs_sceneitem_get_source _obs_sceneitem_get_source;

  void obs_sceneitem_select(
    ffi.Pointer<obs_scene_item> item,
    int select,
  ) {
    _obs_sceneitem_select ??= _dylib.lookupFunction<_c_obs_sceneitem_select,
        _dart_obs_sceneitem_select>('obs_sceneitem_select');
    return _obs_sceneitem_select(
      item,
      select,
    );
  }

  _dart_obs_sceneitem_select _obs_sceneitem_select;

  int obs_sceneitem_selected(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_selected ??= _dylib.lookupFunction<_c_obs_sceneitem_selected,
        _dart_obs_sceneitem_selected>('obs_sceneitem_selected');
    return _obs_sceneitem_selected(
      item,
    );
  }

  _dart_obs_sceneitem_selected _obs_sceneitem_selected;

  int obs_sceneitem_locked(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_locked ??= _dylib.lookupFunction<_c_obs_sceneitem_locked,
        _dart_obs_sceneitem_locked>('obs_sceneitem_locked');
    return _obs_sceneitem_locked(
      item,
    );
  }

  _dart_obs_sceneitem_locked _obs_sceneitem_locked;

  int obs_sceneitem_set_locked(
    ffi.Pointer<obs_scene_item> item,
    int lock,
  ) {
    _obs_sceneitem_set_locked ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_locked,
        _dart_obs_sceneitem_set_locked>('obs_sceneitem_set_locked');
    return _obs_sceneitem_set_locked(
      item,
      lock,
    );
  }

  _dart_obs_sceneitem_set_locked _obs_sceneitem_set_locked;

  void obs_sceneitem_set_pos(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> pos,
  ) {
    _obs_sceneitem_set_pos ??= _dylib.lookupFunction<_c_obs_sceneitem_set_pos,
        _dart_obs_sceneitem_set_pos>('obs_sceneitem_set_pos');
    return _obs_sceneitem_set_pos(
      item,
      pos,
    );
  }

  _dart_obs_sceneitem_set_pos _obs_sceneitem_set_pos;

  void obs_sceneitem_set_rot(
    ffi.Pointer<obs_scene_item> item,
    double rot_deg,
  ) {
    _obs_sceneitem_set_rot ??= _dylib.lookupFunction<_c_obs_sceneitem_set_rot,
        _dart_obs_sceneitem_set_rot>('obs_sceneitem_set_rot');
    return _obs_sceneitem_set_rot(
      item,
      rot_deg,
    );
  }

  _dart_obs_sceneitem_set_rot _obs_sceneitem_set_rot;

  void obs_sceneitem_set_scale(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> scale,
  ) {
    _obs_sceneitem_set_scale ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_scale,
        _dart_obs_sceneitem_set_scale>('obs_sceneitem_set_scale');
    return _obs_sceneitem_set_scale(
      item,
      scale,
    );
  }

  _dart_obs_sceneitem_set_scale _obs_sceneitem_set_scale;

  void obs_sceneitem_set_alignment(
    ffi.Pointer<obs_scene_item> item,
    int alignment,
  ) {
    _obs_sceneitem_set_alignment ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_alignment,
        _dart_obs_sceneitem_set_alignment>('obs_sceneitem_set_alignment');
    return _obs_sceneitem_set_alignment(
      item,
      alignment,
    );
  }

  _dart_obs_sceneitem_set_alignment _obs_sceneitem_set_alignment;

  void obs_sceneitem_set_order(
    ffi.Pointer<obs_scene_item> item,
    int movement,
  ) {
    _obs_sceneitem_set_order ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_order,
        _dart_obs_sceneitem_set_order>('obs_sceneitem_set_order');
    return _obs_sceneitem_set_order(
      item,
      movement,
    );
  }

  _dart_obs_sceneitem_set_order _obs_sceneitem_set_order;

  void obs_sceneitem_set_order_position(
    ffi.Pointer<obs_scene_item> item,
    int position,
  ) {
    _obs_sceneitem_set_order_position ??= _dylib.lookupFunction<
            _c_obs_sceneitem_set_order_position,
            _dart_obs_sceneitem_set_order_position>(
        'obs_sceneitem_set_order_position');
    return _obs_sceneitem_set_order_position(
      item,
      position,
    );
  }

  _dart_obs_sceneitem_set_order_position _obs_sceneitem_set_order_position;

  void obs_sceneitem_set_bounds_type(
    ffi.Pointer<obs_scene_item> item,
    int type,
  ) {
    _obs_sceneitem_set_bounds_type ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_bounds_type,
        _dart_obs_sceneitem_set_bounds_type>('obs_sceneitem_set_bounds_type');
    return _obs_sceneitem_set_bounds_type(
      item,
      type,
    );
  }

  _dart_obs_sceneitem_set_bounds_type _obs_sceneitem_set_bounds_type;

  void obs_sceneitem_set_bounds_alignment(
    ffi.Pointer<obs_scene_item> item,
    int alignment,
  ) {
    _obs_sceneitem_set_bounds_alignment ??= _dylib.lookupFunction<
            _c_obs_sceneitem_set_bounds_alignment,
            _dart_obs_sceneitem_set_bounds_alignment>(
        'obs_sceneitem_set_bounds_alignment');
    return _obs_sceneitem_set_bounds_alignment(
      item,
      alignment,
    );
  }

  _dart_obs_sceneitem_set_bounds_alignment _obs_sceneitem_set_bounds_alignment;

  void obs_sceneitem_set_bounds(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> bounds,
  ) {
    _obs_sceneitem_set_bounds ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_bounds,
        _dart_obs_sceneitem_set_bounds>('obs_sceneitem_set_bounds');
    return _obs_sceneitem_set_bounds(
      item,
      bounds,
    );
  }

  _dart_obs_sceneitem_set_bounds _obs_sceneitem_set_bounds;

  int obs_sceneitem_get_id(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_id ??= _dylib.lookupFunction<_c_obs_sceneitem_get_id,
        _dart_obs_sceneitem_get_id>('obs_sceneitem_get_id');
    return _obs_sceneitem_get_id(
      item,
    );
  }

  _dart_obs_sceneitem_get_id _obs_sceneitem_get_id;

  void obs_sceneitem_get_pos(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> pos,
  ) {
    _obs_sceneitem_get_pos ??= _dylib.lookupFunction<_c_obs_sceneitem_get_pos,
        _dart_obs_sceneitem_get_pos>('obs_sceneitem_get_pos');
    return _obs_sceneitem_get_pos(
      item,
      pos,
    );
  }

  _dart_obs_sceneitem_get_pos _obs_sceneitem_get_pos;

  double obs_sceneitem_get_rot(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_rot ??= _dylib.lookupFunction<_c_obs_sceneitem_get_rot,
        _dart_obs_sceneitem_get_rot>('obs_sceneitem_get_rot');
    return _obs_sceneitem_get_rot(
      item,
    );
  }

  _dart_obs_sceneitem_get_rot _obs_sceneitem_get_rot;

  void obs_sceneitem_get_scale(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> scale,
  ) {
    _obs_sceneitem_get_scale ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_scale,
        _dart_obs_sceneitem_get_scale>('obs_sceneitem_get_scale');
    return _obs_sceneitem_get_scale(
      item,
      scale,
    );
  }

  _dart_obs_sceneitem_get_scale _obs_sceneitem_get_scale;

  int obs_sceneitem_get_alignment(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_alignment ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_alignment,
        _dart_obs_sceneitem_get_alignment>('obs_sceneitem_get_alignment');
    return _obs_sceneitem_get_alignment(
      item,
    );
  }

  _dart_obs_sceneitem_get_alignment _obs_sceneitem_get_alignment;

  int obs_sceneitem_get_bounds_type(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_bounds_type ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_bounds_type,
        _dart_obs_sceneitem_get_bounds_type>('obs_sceneitem_get_bounds_type');
    return _obs_sceneitem_get_bounds_type(
      item,
    );
  }

  _dart_obs_sceneitem_get_bounds_type _obs_sceneitem_get_bounds_type;

  int obs_sceneitem_get_bounds_alignment(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_bounds_alignment ??= _dylib.lookupFunction<
            _c_obs_sceneitem_get_bounds_alignment,
            _dart_obs_sceneitem_get_bounds_alignment>(
        'obs_sceneitem_get_bounds_alignment');
    return _obs_sceneitem_get_bounds_alignment(
      item,
    );
  }

  _dart_obs_sceneitem_get_bounds_alignment _obs_sceneitem_get_bounds_alignment;

  void obs_sceneitem_get_bounds(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> bounds,
  ) {
    _obs_sceneitem_get_bounds ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_bounds,
        _dart_obs_sceneitem_get_bounds>('obs_sceneitem_get_bounds');
    return _obs_sceneitem_get_bounds(
      item,
      bounds,
    );
  }

  _dart_obs_sceneitem_get_bounds _obs_sceneitem_get_bounds;

  void obs_sceneitem_get_info(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<obs_transform_info> info,
  ) {
    _obs_sceneitem_get_info ??= _dylib.lookupFunction<_c_obs_sceneitem_get_info,
        _dart_obs_sceneitem_get_info>('obs_sceneitem_get_info');
    return _obs_sceneitem_get_info(
      item,
      info,
    );
  }

  _dart_obs_sceneitem_get_info _obs_sceneitem_get_info;

  void obs_sceneitem_set_info(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<obs_transform_info> info,
  ) {
    _obs_sceneitem_set_info ??= _dylib.lookupFunction<_c_obs_sceneitem_set_info,
        _dart_obs_sceneitem_set_info>('obs_sceneitem_set_info');
    return _obs_sceneitem_set_info(
      item,
      info,
    );
  }

  _dart_obs_sceneitem_set_info _obs_sceneitem_set_info;

  void obs_sceneitem_get_draw_transform(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<matrix4> transform,
  ) {
    _obs_sceneitem_get_draw_transform ??= _dylib.lookupFunction<
            _c_obs_sceneitem_get_draw_transform,
            _dart_obs_sceneitem_get_draw_transform>(
        'obs_sceneitem_get_draw_transform');
    return _obs_sceneitem_get_draw_transform(
      item,
      transform,
    );
  }

  _dart_obs_sceneitem_get_draw_transform _obs_sceneitem_get_draw_transform;

  void obs_sceneitem_get_box_transform(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<matrix4> transform,
  ) {
    _obs_sceneitem_get_box_transform ??= _dylib.lookupFunction<
            _c_obs_sceneitem_get_box_transform,
            _dart_obs_sceneitem_get_box_transform>(
        'obs_sceneitem_get_box_transform');
    return _obs_sceneitem_get_box_transform(
      item,
      transform,
    );
  }

  _dart_obs_sceneitem_get_box_transform _obs_sceneitem_get_box_transform;

  void obs_sceneitem_get_box_scale(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<vec2> scale,
  ) {
    _obs_sceneitem_get_box_scale ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_box_scale,
        _dart_obs_sceneitem_get_box_scale>('obs_sceneitem_get_box_scale');
    return _obs_sceneitem_get_box_scale(
      item,
      scale,
    );
  }

  _dart_obs_sceneitem_get_box_scale _obs_sceneitem_get_box_scale;

  int obs_sceneitem_visible(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_visible ??= _dylib.lookupFunction<_c_obs_sceneitem_visible,
        _dart_obs_sceneitem_visible>('obs_sceneitem_visible');
    return _obs_sceneitem_visible(
      item,
    );
  }

  _dart_obs_sceneitem_visible _obs_sceneitem_visible;

  int obs_sceneitem_set_visible(
    ffi.Pointer<obs_scene_item> item,
    int visible,
  ) {
    _obs_sceneitem_set_visible ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_visible,
        _dart_obs_sceneitem_set_visible>('obs_sceneitem_set_visible');
    return _obs_sceneitem_set_visible(
      item,
      visible,
    );
  }

  _dart_obs_sceneitem_set_visible _obs_sceneitem_set_visible;

  void obs_sceneitem_set_crop(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<obs_sceneitem_crop> crop,
  ) {
    _obs_sceneitem_set_crop ??= _dylib.lookupFunction<_c_obs_sceneitem_set_crop,
        _dart_obs_sceneitem_set_crop>('obs_sceneitem_set_crop');
    return _obs_sceneitem_set_crop(
      item,
      crop,
    );
  }

  _dart_obs_sceneitem_set_crop _obs_sceneitem_set_crop;

  void obs_sceneitem_get_crop(
    ffi.Pointer<obs_scene_item> item,
    ffi.Pointer<obs_sceneitem_crop> crop,
  ) {
    _obs_sceneitem_get_crop ??= _dylib.lookupFunction<_c_obs_sceneitem_get_crop,
        _dart_obs_sceneitem_get_crop>('obs_sceneitem_get_crop');
    return _obs_sceneitem_get_crop(
      item,
      crop,
    );
  }

  _dart_obs_sceneitem_get_crop _obs_sceneitem_get_crop;

  void obs_sceneitem_set_scale_filter(
    ffi.Pointer<obs_scene_item> item,
    int filter,
  ) {
    _obs_sceneitem_set_scale_filter ??= _dylib.lookupFunction<
        _c_obs_sceneitem_set_scale_filter,
        _dart_obs_sceneitem_set_scale_filter>('obs_sceneitem_set_scale_filter');
    return _obs_sceneitem_set_scale_filter(
      item,
      filter,
    );
  }

  _dart_obs_sceneitem_set_scale_filter _obs_sceneitem_set_scale_filter;

  int obs_sceneitem_get_scale_filter(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_scale_filter ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_scale_filter,
        _dart_obs_sceneitem_get_scale_filter>('obs_sceneitem_get_scale_filter');
    return _obs_sceneitem_get_scale_filter(
      item,
    );
  }

  _dart_obs_sceneitem_get_scale_filter _obs_sceneitem_get_scale_filter;

  void obs_sceneitem_force_update_transform(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_force_update_transform ??= _dylib.lookupFunction<
            _c_obs_sceneitem_force_update_transform,
            _dart_obs_sceneitem_force_update_transform>(
        'obs_sceneitem_force_update_transform');
    return _obs_sceneitem_force_update_transform(
      item,
    );
  }

  _dart_obs_sceneitem_force_update_transform
      _obs_sceneitem_force_update_transform;

  void obs_sceneitem_defer_update_begin(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_defer_update_begin ??= _dylib.lookupFunction<
            _c_obs_sceneitem_defer_update_begin,
            _dart_obs_sceneitem_defer_update_begin>(
        'obs_sceneitem_defer_update_begin');
    return _obs_sceneitem_defer_update_begin(
      item,
    );
  }

  _dart_obs_sceneitem_defer_update_begin _obs_sceneitem_defer_update_begin;

  void obs_sceneitem_defer_update_end(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_defer_update_end ??= _dylib.lookupFunction<
        _c_obs_sceneitem_defer_update_end,
        _dart_obs_sceneitem_defer_update_end>('obs_sceneitem_defer_update_end');
    return _obs_sceneitem_defer_update_end(
      item,
    );
  }

  _dart_obs_sceneitem_defer_update_end _obs_sceneitem_defer_update_end;

  /// Gets private front-end settings data.  This data is saved/loaded
  /// automatically.  Returns an incremented reference.
  ffi.Pointer<obs_data_t> obs_sceneitem_get_private_settings(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_private_settings ??= _dylib.lookupFunction<
            _c_obs_sceneitem_get_private_settings,
            _dart_obs_sceneitem_get_private_settings>(
        'obs_sceneitem_get_private_settings');
    return _obs_sceneitem_get_private_settings(
      item,
    );
  }

  _dart_obs_sceneitem_get_private_settings _obs_sceneitem_get_private_settings;

  ffi.Pointer<obs_scene_item> obs_scene_add_group(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_add_group ??= _dylib.lookupFunction<_c_obs_scene_add_group,
        _dart_obs_scene_add_group>('obs_scene_add_group');
    return _obs_scene_add_group(
      scene,
      name,
    );
  }

  _dart_obs_scene_add_group _obs_scene_add_group;

  ffi.Pointer<obs_scene_item> obs_scene_insert_group(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
    int count,
  ) {
    _obs_scene_insert_group ??= _dylib.lookupFunction<_c_obs_scene_insert_group,
        _dart_obs_scene_insert_group>('obs_scene_insert_group');
    return _obs_scene_insert_group(
      scene,
      name,
      items,
      count,
    );
  }

  _dart_obs_scene_insert_group _obs_scene_insert_group;

  ffi.Pointer<obs_scene_item> obs_scene_add_group2(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
    int signal,
  ) {
    _obs_scene_add_group2 ??= _dylib.lookupFunction<_c_obs_scene_add_group2,
        _dart_obs_scene_add_group2>('obs_scene_add_group2');
    return _obs_scene_add_group2(
      scene,
      name,
      signal,
    );
  }

  _dart_obs_scene_add_group2 _obs_scene_add_group2;

  ffi.Pointer<obs_scene_item> obs_scene_insert_group2(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
    int count,
    int signal,
  ) {
    _obs_scene_insert_group2 ??= _dylib.lookupFunction<
        _c_obs_scene_insert_group2,
        _dart_obs_scene_insert_group2>('obs_scene_insert_group2');
    return _obs_scene_insert_group2(
      scene,
      name,
      items,
      count,
      signal,
    );
  }

  _dart_obs_scene_insert_group2 _obs_scene_insert_group2;

  ffi.Pointer<obs_scene_item> obs_scene_get_group(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_scene_get_group ??= _dylib.lookupFunction<_c_obs_scene_get_group,
        _dart_obs_scene_get_group>('obs_scene_get_group');
    return _obs_scene_get_group(
      scene,
      name,
    );
  }

  _dart_obs_scene_get_group _obs_scene_get_group;

  int obs_sceneitem_is_group(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_is_group ??= _dylib.lookupFunction<_c_obs_sceneitem_is_group,
        _dart_obs_sceneitem_is_group>('obs_sceneitem_is_group');
    return _obs_sceneitem_is_group(
      item,
    );
  }

  _dart_obs_sceneitem_is_group _obs_sceneitem_is_group;

  ffi.Pointer<obs_scene> obs_sceneitem_group_get_scene(
    ffi.Pointer<obs_scene_item> group,
  ) {
    _obs_sceneitem_group_get_scene ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_get_scene,
        _dart_obs_sceneitem_group_get_scene>('obs_sceneitem_group_get_scene');
    return _obs_sceneitem_group_get_scene(
      group,
    );
  }

  _dart_obs_sceneitem_group_get_scene _obs_sceneitem_group_get_scene;

  void obs_sceneitem_group_ungroup(
    ffi.Pointer<obs_scene_item> group,
  ) {
    _obs_sceneitem_group_ungroup ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_ungroup,
        _dart_obs_sceneitem_group_ungroup>('obs_sceneitem_group_ungroup');
    return _obs_sceneitem_group_ungroup(
      group,
    );
  }

  _dart_obs_sceneitem_group_ungroup _obs_sceneitem_group_ungroup;

  void obs_sceneitem_group_ungroup2(
    ffi.Pointer<obs_scene_item> group,
    int signal,
  ) {
    _obs_sceneitem_group_ungroup2 ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_ungroup2,
        _dart_obs_sceneitem_group_ungroup2>('obs_sceneitem_group_ungroup2');
    return _obs_sceneitem_group_ungroup2(
      group,
      signal,
    );
  }

  _dart_obs_sceneitem_group_ungroup2 _obs_sceneitem_group_ungroup2;

  void obs_sceneitem_group_add_item(
    ffi.Pointer<obs_scene_item> group,
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_group_add_item ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_add_item,
        _dart_obs_sceneitem_group_add_item>('obs_sceneitem_group_add_item');
    return _obs_sceneitem_group_add_item(
      group,
      item,
    );
  }

  _dart_obs_sceneitem_group_add_item _obs_sceneitem_group_add_item;

  void obs_sceneitem_group_remove_item(
    ffi.Pointer<obs_scene_item> group,
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_group_remove_item ??= _dylib.lookupFunction<
            _c_obs_sceneitem_group_remove_item,
            _dart_obs_sceneitem_group_remove_item>(
        'obs_sceneitem_group_remove_item');
    return _obs_sceneitem_group_remove_item(
      group,
      item,
    );
  }

  _dart_obs_sceneitem_group_remove_item _obs_sceneitem_group_remove_item;

  ffi.Pointer<obs_scene_item> obs_sceneitem_get_group(
    ffi.Pointer<obs_scene> scene,
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_get_group ??= _dylib.lookupFunction<
        _c_obs_sceneitem_get_group,
        _dart_obs_sceneitem_get_group>('obs_sceneitem_get_group');
    return _obs_sceneitem_get_group(
      scene,
      item,
    );
  }

  _dart_obs_sceneitem_get_group _obs_sceneitem_get_group;

  int obs_source_is_group(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_source_is_group ??= _dylib.lookupFunction<_c_obs_source_is_group,
        _dart_obs_source_is_group>('obs_source_is_group');
    return _obs_source_is_group(
      source,
    );
  }

  _dart_obs_source_is_group _obs_source_is_group;

  int obs_scene_is_group(
    ffi.Pointer<obs_scene> scene,
  ) {
    _obs_scene_is_group ??=
        _dylib.lookupFunction<_c_obs_scene_is_group, _dart_obs_scene_is_group>(
            'obs_scene_is_group');
    return _obs_scene_is_group(
      scene,
    );
  }

  _dart_obs_scene_is_group _obs_scene_is_group;

  void obs_sceneitem_group_enum_items(
    ffi.Pointer<obs_scene_item> group,
    ffi.Pointer<ffi.NativeFunction<_typedefC_15>> callback,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_sceneitem_group_enum_items ??= _dylib.lookupFunction<
        _c_obs_sceneitem_group_enum_items,
        _dart_obs_sceneitem_group_enum_items>('obs_sceneitem_group_enum_items');
    return _obs_sceneitem_group_enum_items(
      group,
      callback,
      param,
    );
  }

  _dart_obs_sceneitem_group_enum_items _obs_sceneitem_group_enum_items;

  /// Gets the group from its source, or NULL if not a group
  ffi.Pointer<obs_scene> obs_group_from_source(
    ffi.Pointer<obs_source> source,
  ) {
    _obs_group_from_source ??= _dylib.lookupFunction<_c_obs_group_from_source,
        _dart_obs_group_from_source>('obs_group_from_source');
    return _obs_group_from_source(
      source,
    );
  }

  _dart_obs_group_from_source _obs_group_from_source;

  void obs_sceneitem_defer_group_resize_begin(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_defer_group_resize_begin ??= _dylib.lookupFunction<
            _c_obs_sceneitem_defer_group_resize_begin,
            _dart_obs_sceneitem_defer_group_resize_begin>(
        'obs_sceneitem_defer_group_resize_begin');
    return _obs_sceneitem_defer_group_resize_begin(
      item,
    );
  }

  _dart_obs_sceneitem_defer_group_resize_begin
      _obs_sceneitem_defer_group_resize_begin;

  void obs_sceneitem_defer_group_resize_end(
    ffi.Pointer<obs_scene_item> item,
  ) {
    _obs_sceneitem_defer_group_resize_end ??= _dylib.lookupFunction<
            _c_obs_sceneitem_defer_group_resize_end,
            _dart_obs_sceneitem_defer_group_resize_end>(
        'obs_sceneitem_defer_group_resize_end');
    return _obs_sceneitem_defer_group_resize_end(
      item,
    );
  }

  _dart_obs_sceneitem_defer_group_resize_end
      _obs_sceneitem_defer_group_resize_end;

  ffi.Pointer<ffi.Int8> obs_output_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_output_get_display_name ??= _dylib.lookupFunction<
        _c_obs_output_get_display_name,
        _dart_obs_output_get_display_name>('obs_output_get_display_name');
    return _obs_output_get_display_name(
      id,
    );
  }

  _dart_obs_output_get_display_name _obs_output_get_display_name;

  /// Creates an output.
  ///
  /// Outputs allow outputting to file, outputting to network, outputting to
  /// directshow, or other custom outputs.
  ffi.Pointer<obs_output> obs_output_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    _obs_output_create ??=
        _dylib.lookupFunction<_c_obs_output_create, _dart_obs_output_create>(
            'obs_output_create');
    return _obs_output_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  _dart_obs_output_create _obs_output_create;

  /// Adds/releases a reference to an output.  When the last reference is
  /// released, the output is destroyed.
  void obs_output_addref(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_addref ??=
        _dylib.lookupFunction<_c_obs_output_addref, _dart_obs_output_addref>(
            'obs_output_addref');
    return _obs_output_addref(
      output,
    );
  }

  _dart_obs_output_addref _obs_output_addref;

  void obs_output_release(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_release ??=
        _dylib.lookupFunction<_c_obs_output_release, _dart_obs_output_release>(
            'obs_output_release');
    return _obs_output_release(
      output,
    );
  }

  _dart_obs_output_release _obs_output_release;

  void obs_weak_output_addref(
    ffi.Pointer<obs_weak_output> weak,
  ) {
    _obs_weak_output_addref ??= _dylib.lookupFunction<_c_obs_weak_output_addref,
        _dart_obs_weak_output_addref>('obs_weak_output_addref');
    return _obs_weak_output_addref(
      weak,
    );
  }

  _dart_obs_weak_output_addref _obs_weak_output_addref;

  void obs_weak_output_release(
    ffi.Pointer<obs_weak_output> weak,
  ) {
    _obs_weak_output_release ??= _dylib.lookupFunction<
        _c_obs_weak_output_release,
        _dart_obs_weak_output_release>('obs_weak_output_release');
    return _obs_weak_output_release(
      weak,
    );
  }

  _dart_obs_weak_output_release _obs_weak_output_release;

  ffi.Pointer<obs_output> obs_output_get_ref(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_ref ??=
        _dylib.lookupFunction<_c_obs_output_get_ref, _dart_obs_output_get_ref>(
            'obs_output_get_ref');
    return _obs_output_get_ref(
      output,
    );
  }

  _dart_obs_output_get_ref _obs_output_get_ref;

  ffi.Pointer<obs_weak_output> obs_output_get_weak_output(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_weak_output ??= _dylib.lookupFunction<
        _c_obs_output_get_weak_output,
        _dart_obs_output_get_weak_output>('obs_output_get_weak_output');
    return _obs_output_get_weak_output(
      output,
    );
  }

  _dart_obs_output_get_weak_output _obs_output_get_weak_output;

  ffi.Pointer<obs_output> obs_weak_output_get_output(
    ffi.Pointer<obs_weak_output> weak,
  ) {
    _obs_weak_output_get_output ??= _dylib.lookupFunction<
        _c_obs_weak_output_get_output,
        _dart_obs_weak_output_get_output>('obs_weak_output_get_output');
    return _obs_weak_output_get_output(
      weak,
    );
  }

  _dart_obs_weak_output_get_output _obs_weak_output_get_output;

  int obs_weak_output_references_output(
    ffi.Pointer<obs_weak_output> weak,
    ffi.Pointer<obs_output> output,
  ) {
    _obs_weak_output_references_output ??= _dylib.lookupFunction<
            _c_obs_weak_output_references_output,
            _dart_obs_weak_output_references_output>(
        'obs_weak_output_references_output');
    return _obs_weak_output_references_output(
      weak,
      output,
    );
  }

  _dart_obs_weak_output_references_output _obs_weak_output_references_output;

  ffi.Pointer<ffi.Int8> obs_output_get_name(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_name ??= _dylib.lookupFunction<_c_obs_output_get_name,
        _dart_obs_output_get_name>('obs_output_get_name');
    return _obs_output_get_name(
      output,
    );
  }

  _dart_obs_output_get_name _obs_output_get_name;

  /// Starts the output.
  int obs_output_start(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_start ??=
        _dylib.lookupFunction<_c_obs_output_start, _dart_obs_output_start>(
            'obs_output_start');
    return _obs_output_start(
      output,
    );
  }

  _dart_obs_output_start _obs_output_start;

  /// Stops the output.
  void obs_output_stop(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_stop ??=
        _dylib.lookupFunction<_c_obs_output_stop, _dart_obs_output_stop>(
            'obs_output_stop');
    return _obs_output_stop(
      output,
    );
  }

  _dart_obs_output_stop _obs_output_stop;

  /// Sets the current output delay, in seconds (if the output supports delay).
  ///
  /// If delay is currently active, it will set the delay value, but will not
  /// affect the current delay, it will only affect the next time the output is
  /// activated.
  void obs_output_set_delay(
    ffi.Pointer<obs_output> output,
    int delay_sec,
    int flags,
  ) {
    _obs_output_set_delay ??= _dylib.lookupFunction<_c_obs_output_set_delay,
        _dart_obs_output_set_delay>('obs_output_set_delay');
    return _obs_output_set_delay(
      output,
      delay_sec,
      flags,
    );
  }

  _dart_obs_output_set_delay _obs_output_set_delay;

  /// Gets the currently set delay value, in seconds.
  int obs_output_get_delay(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_delay ??= _dylib.lookupFunction<_c_obs_output_get_delay,
        _dart_obs_output_get_delay>('obs_output_get_delay');
    return _obs_output_get_delay(
      output,
    );
  }

  _dart_obs_output_get_delay _obs_output_get_delay;

  /// If delay is active, gets the currently active delay value, in seconds.
  int obs_output_get_active_delay(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_active_delay ??= _dylib.lookupFunction<
        _c_obs_output_get_active_delay,
        _dart_obs_output_get_active_delay>('obs_output_get_active_delay');
    return _obs_output_get_active_delay(
      output,
    );
  }

  _dart_obs_output_get_active_delay _obs_output_get_active_delay;

  /// Forces the output to stop.  Usually only used with delay.
  void obs_output_force_stop(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_force_stop ??= _dylib.lookupFunction<_c_obs_output_force_stop,
        _dart_obs_output_force_stop>('obs_output_force_stop');
    return _obs_output_force_stop(
      output,
    );
  }

  _dart_obs_output_force_stop _obs_output_force_stop;

  /// Returns whether the output is active
  int obs_output_active(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_active ??=
        _dylib.lookupFunction<_c_obs_output_active, _dart_obs_output_active>(
            'obs_output_active');
    return _obs_output_active(
      output,
    );
  }

  _dart_obs_output_active _obs_output_active;

  /// Returns output capability flags
  int obs_output_get_flags(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_flags ??= _dylib.lookupFunction<_c_obs_output_get_flags,
        _dart_obs_output_get_flags>('obs_output_get_flags');
    return _obs_output_get_flags(
      output,
    );
  }

  _dart_obs_output_get_flags _obs_output_get_flags;

  /// Returns output capability flags
  int obs_get_output_flags(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_output_flags ??= _dylib.lookupFunction<_c_obs_get_output_flags,
        _dart_obs_get_output_flags>('obs_get_output_flags');
    return _obs_get_output_flags(
      id,
    );
  }

  _dart_obs_get_output_flags _obs_get_output_flags;

  /// Gets the default settings for an output type
  ffi.Pointer<obs_data_t> obs_output_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_output_defaults ??= _dylib.lookupFunction<_c_obs_output_defaults,
        _dart_obs_output_defaults>('obs_output_defaults');
    return _obs_output_defaults(
      id,
    );
  }

  _dart_obs_output_defaults _obs_output_defaults;

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_get_output_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_output_properties ??= _dylib.lookupFunction<
        _c_obs_get_output_properties,
        _dart_obs_get_output_properties>('obs_get_output_properties');
    return _obs_get_output_properties(
      id,
    );
  }

  _dart_obs_get_output_properties _obs_get_output_properties;

  /// Returns the property list of an existing output, if any.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_output_properties(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_properties ??= _dylib.lookupFunction<_c_obs_output_properties,
        _dart_obs_output_properties>('obs_output_properties');
    return _obs_output_properties(
      output,
    );
  }

  _dart_obs_output_properties _obs_output_properties;

  /// Updates the settings for this output context
  void obs_output_update(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<obs_data_t> settings,
  ) {
    _obs_output_update ??=
        _dylib.lookupFunction<_c_obs_output_update, _dart_obs_output_update>(
            'obs_output_update');
    return _obs_output_update(
      output,
      settings,
    );
  }

  _dart_obs_output_update _obs_output_update;

  /// Specifies whether the output can be paused
  int obs_output_can_pause(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_can_pause ??= _dylib.lookupFunction<_c_obs_output_can_pause,
        _dart_obs_output_can_pause>('obs_output_can_pause');
    return _obs_output_can_pause(
      output,
    );
  }

  _dart_obs_output_can_pause _obs_output_can_pause;

  /// Pauses the output (if the functionality is allowed by the output
  int obs_output_pause(
    ffi.Pointer<obs_output> output,
    int pause,
  ) {
    _obs_output_pause ??=
        _dylib.lookupFunction<_c_obs_output_pause, _dart_obs_output_pause>(
            'obs_output_pause');
    return _obs_output_pause(
      output,
      pause,
    );
  }

  _dart_obs_output_pause _obs_output_pause;

  /// Returns whether output is paused
  int obs_output_paused(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_paused ??=
        _dylib.lookupFunction<_c_obs_output_paused, _dart_obs_output_paused>(
            'obs_output_paused');
    return _obs_output_paused(
      output,
    );
  }

  _dart_obs_output_paused _obs_output_paused;

  ffi.Pointer<obs_data_t> obs_output_get_settings(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_settings ??= _dylib.lookupFunction<
        _c_obs_output_get_settings,
        _dart_obs_output_get_settings>('obs_output_get_settings');
    return _obs_output_get_settings(
      output,
    );
  }

  _dart_obs_output_get_settings _obs_output_get_settings;

  /// Returns the signal handler for an output
  ffi.Pointer<signal_handler_t> obs_output_get_signal_handler(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_signal_handler ??= _dylib.lookupFunction<
        _c_obs_output_get_signal_handler,
        _dart_obs_output_get_signal_handler>('obs_output_get_signal_handler');
    return _obs_output_get_signal_handler(
      output,
    );
  }

  _dart_obs_output_get_signal_handler _obs_output_get_signal_handler;

  /// Returns the procedure handler for an output
  ffi.Pointer<proc_handler_t> obs_output_get_proc_handler(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_proc_handler ??= _dylib.lookupFunction<
        _c_obs_output_get_proc_handler,
        _dart_obs_output_get_proc_handler>('obs_output_get_proc_handler');
    return _obs_output_get_proc_handler(
      output,
    );
  }

  _dart_obs_output_get_proc_handler _obs_output_get_proc_handler;

  /// Sets the current audio/video media contexts associated with this output,
  /// required for non-encoded outputs.  Can be null.
  void obs_output_set_media(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<video_t> video,
    ffi.Pointer<audio_t> audio,
  ) {
    _obs_output_set_media ??= _dylib.lookupFunction<_c_obs_output_set_media,
        _dart_obs_output_set_media>('obs_output_set_media');
    return _obs_output_set_media(
      output,
      video,
      audio,
    );
  }

  _dart_obs_output_set_media _obs_output_set_media;

  /// Returns the video media context associated with this output
  ffi.Pointer<video_t> obs_output_video(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_video ??=
        _dylib.lookupFunction<_c_obs_output_video, _dart_obs_output_video>(
            'obs_output_video');
    return _obs_output_video(
      output,
    );
  }

  _dart_obs_output_video _obs_output_video;

  /// Returns the audio media context associated with this output
  ffi.Pointer<audio_t> obs_output_audio(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_audio ??=
        _dylib.lookupFunction<_c_obs_output_audio, _dart_obs_output_audio>(
            'obs_output_audio');
    return _obs_output_audio(
      output,
    );
  }

  _dart_obs_output_audio _obs_output_audio;

  /// Sets the current audio mixer for non-encoded outputs
  void obs_output_set_mixer(
    ffi.Pointer<obs_output> output,
    int mixer_idx,
  ) {
    _obs_output_set_mixer ??= _dylib.lookupFunction<_c_obs_output_set_mixer,
        _dart_obs_output_set_mixer>('obs_output_set_mixer');
    return _obs_output_set_mixer(
      output,
      mixer_idx,
    );
  }

  _dart_obs_output_set_mixer _obs_output_set_mixer;

  /// Gets the current audio mixer for non-encoded outputs
  int obs_output_get_mixer(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_mixer ??= _dylib.lookupFunction<_c_obs_output_get_mixer,
        _dart_obs_output_get_mixer>('obs_output_get_mixer');
    return _obs_output_get_mixer(
      output,
    );
  }

  _dart_obs_output_get_mixer _obs_output_get_mixer;

  /// Sets the current audio mixes (mask) for a non-encoded multi-track output
  void obs_output_set_mixers(
    ffi.Pointer<obs_output> output,
    int mixers,
  ) {
    _obs_output_set_mixers ??= _dylib.lookupFunction<_c_obs_output_set_mixers,
        _dart_obs_output_set_mixers>('obs_output_set_mixers');
    return _obs_output_set_mixers(
      output,
      mixers,
    );
  }

  _dart_obs_output_set_mixers _obs_output_set_mixers;

  /// Gets the current audio mixes (mask) for a non-encoded multi-track output
  int obs_output_get_mixers(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_mixers ??= _dylib.lookupFunction<_c_obs_output_get_mixers,
        _dart_obs_output_get_mixers>('obs_output_get_mixers');
    return _obs_output_get_mixers(
      output,
    );
  }

  _dart_obs_output_get_mixers _obs_output_get_mixers;

  /// Sets the current video encoder associated with this output,
  /// required for encoded outputs
  void obs_output_set_video_encoder(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_output_set_video_encoder ??= _dylib.lookupFunction<
        _c_obs_output_set_video_encoder,
        _dart_obs_output_set_video_encoder>('obs_output_set_video_encoder');
    return _obs_output_set_video_encoder(
      output,
      encoder,
    );
  }

  _dart_obs_output_set_video_encoder _obs_output_set_video_encoder;

  /// Sets the current audio encoder associated with this output,
  /// required for encoded outputs.
  ///
  /// The idx parameter specifies the audio encoder index to set the encoder to.
  /// Only used with outputs that have multiple audio outputs (RTMP typically),
  /// otherwise the parameter is ignored.
  void obs_output_set_audio_encoder(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<obs_encoder> encoder,
    int idx,
  ) {
    _obs_output_set_audio_encoder ??= _dylib.lookupFunction<
        _c_obs_output_set_audio_encoder,
        _dart_obs_output_set_audio_encoder>('obs_output_set_audio_encoder');
    return _obs_output_set_audio_encoder(
      output,
      encoder,
      idx,
    );
  }

  _dart_obs_output_set_audio_encoder _obs_output_set_audio_encoder;

  /// Returns the current video encoder associated with this output
  ffi.Pointer<obs_encoder> obs_output_get_video_encoder(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_video_encoder ??= _dylib.lookupFunction<
        _c_obs_output_get_video_encoder,
        _dart_obs_output_get_video_encoder>('obs_output_get_video_encoder');
    return _obs_output_get_video_encoder(
      output,
    );
  }

  _dart_obs_output_get_video_encoder _obs_output_get_video_encoder;

  /// Returns the current audio encoder associated with this output
  ///
  /// The idx parameter specifies the audio encoder index.  Only used with
  /// outputs that have multiple audio outputs, otherwise the parameter is
  /// ignored.
  ffi.Pointer<obs_encoder> obs_output_get_audio_encoder(
    ffi.Pointer<obs_output> output,
    int idx,
  ) {
    _obs_output_get_audio_encoder ??= _dylib.lookupFunction<
        _c_obs_output_get_audio_encoder,
        _dart_obs_output_get_audio_encoder>('obs_output_get_audio_encoder');
    return _obs_output_get_audio_encoder(
      output,
      idx,
    );
  }

  _dart_obs_output_get_audio_encoder _obs_output_get_audio_encoder;

  /// Sets the current service associated with this output.
  void obs_output_set_service(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<obs_service> service,
  ) {
    _obs_output_set_service ??= _dylib.lookupFunction<_c_obs_output_set_service,
        _dart_obs_output_set_service>('obs_output_set_service');
    return _obs_output_set_service(
      output,
      service,
    );
  }

  _dart_obs_output_set_service _obs_output_set_service;

  /// Gets the current service associated with this output.
  ffi.Pointer<obs_service> obs_output_get_service(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_service ??= _dylib.lookupFunction<_c_obs_output_get_service,
        _dart_obs_output_get_service>('obs_output_get_service');
    return _obs_output_get_service(
      output,
    );
  }

  _dart_obs_output_get_service _obs_output_get_service;

  /// Sets the reconnect settings.  Set retry_count to 0 to disable reconnecting.
  void obs_output_set_reconnect_settings(
    ffi.Pointer<obs_output> output,
    int retry_count,
    int retry_sec,
  ) {
    _obs_output_set_reconnect_settings ??= _dylib.lookupFunction<
            _c_obs_output_set_reconnect_settings,
            _dart_obs_output_set_reconnect_settings>(
        'obs_output_set_reconnect_settings');
    return _obs_output_set_reconnect_settings(
      output,
      retry_count,
      retry_sec,
    );
  }

  _dart_obs_output_set_reconnect_settings _obs_output_set_reconnect_settings;

  int obs_output_get_total_bytes(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_total_bytes ??= _dylib.lookupFunction<
        _c_obs_output_get_total_bytes,
        _dart_obs_output_get_total_bytes>('obs_output_get_total_bytes');
    return _obs_output_get_total_bytes(
      output,
    );
  }

  _dart_obs_output_get_total_bytes _obs_output_get_total_bytes;

  int obs_output_get_frames_dropped(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_frames_dropped ??= _dylib.lookupFunction<
        _c_obs_output_get_frames_dropped,
        _dart_obs_output_get_frames_dropped>('obs_output_get_frames_dropped');
    return _obs_output_get_frames_dropped(
      output,
    );
  }

  _dart_obs_output_get_frames_dropped _obs_output_get_frames_dropped;

  int obs_output_get_total_frames(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_total_frames ??= _dylib.lookupFunction<
        _c_obs_output_get_total_frames,
        _dart_obs_output_get_total_frames>('obs_output_get_total_frames');
    return _obs_output_get_total_frames(
      output,
    );
  }

  _dart_obs_output_get_total_frames _obs_output_get_total_frames;

  /// Sets the preferred scaled resolution for this output.  Set width and height
  /// to 0 to disable scaling.
  ///
  /// If this output uses an encoder, it will call obs_encoder_set_scaled_size on
  /// the encoder before the stream is started.  If the encoder is already active,
  /// then this function will trigger a warning and do nothing.
  void obs_output_set_preferred_size(
    ffi.Pointer<obs_output> output,
    int width,
    int height,
  ) {
    _obs_output_set_preferred_size ??= _dylib.lookupFunction<
        _c_obs_output_set_preferred_size,
        _dart_obs_output_set_preferred_size>('obs_output_set_preferred_size');
    return _obs_output_set_preferred_size(
      output,
      width,
      height,
    );
  }

  _dart_obs_output_set_preferred_size _obs_output_set_preferred_size;

  /// For video outputs, returns the width of the encoded image
  int obs_output_get_width(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_width ??= _dylib.lookupFunction<_c_obs_output_get_width,
        _dart_obs_output_get_width>('obs_output_get_width');
    return _obs_output_get_width(
      output,
    );
  }

  _dart_obs_output_get_width _obs_output_get_width;

  /// For video outputs, returns the height of the encoded image
  int obs_output_get_height(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_height ??= _dylib.lookupFunction<_c_obs_output_get_height,
        _dart_obs_output_get_height>('obs_output_get_height');
    return _obs_output_get_height(
      output,
    );
  }

  _dart_obs_output_get_height _obs_output_get_height;

  ffi.Pointer<ffi.Int8> obs_output_get_id(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_id ??=
        _dylib.lookupFunction<_c_obs_output_get_id, _dart_obs_output_get_id>(
            'obs_output_get_id');
    return _obs_output_get_id(
      output,
    );
  }

  _dart_obs_output_get_id _obs_output_get_id;

  double obs_output_get_congestion(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_congestion ??= _dylib.lookupFunction<
        _c_obs_output_get_congestion,
        _dart_obs_output_get_congestion>('obs_output_get_congestion');
    return _obs_output_get_congestion(
      output,
    );
  }

  _dart_obs_output_get_congestion _obs_output_get_congestion;

  int obs_output_get_connect_time_ms(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_connect_time_ms ??= _dylib.lookupFunction<
        _c_obs_output_get_connect_time_ms,
        _dart_obs_output_get_connect_time_ms>('obs_output_get_connect_time_ms');
    return _obs_output_get_connect_time_ms(
      output,
    );
  }

  _dart_obs_output_get_connect_time_ms _obs_output_get_connect_time_ms;

  int obs_output_reconnecting(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_reconnecting ??= _dylib.lookupFunction<
        _c_obs_output_reconnecting,
        _dart_obs_output_reconnecting>('obs_output_reconnecting');
    return _obs_output_reconnecting(
      output,
    );
  }

  _dart_obs_output_reconnecting _obs_output_reconnecting;

  /// Pass a string of the last output error, for UI use
  void obs_output_set_last_error(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<ffi.Int8> message,
  ) {
    _obs_output_set_last_error ??= _dylib.lookupFunction<
        _c_obs_output_set_last_error,
        _dart_obs_output_set_last_error>('obs_output_set_last_error');
    return _obs_output_set_last_error(
      output,
      message,
    );
  }

  _dart_obs_output_set_last_error _obs_output_set_last_error;

  ffi.Pointer<ffi.Int8> obs_output_get_last_error(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_last_error ??= _dylib.lookupFunction<
        _c_obs_output_get_last_error,
        _dart_obs_output_get_last_error>('obs_output_get_last_error');
    return _obs_output_get_last_error(
      output,
    );
  }

  _dart_obs_output_get_last_error _obs_output_get_last_error;

  ffi.Pointer<ffi.Int8> obs_output_get_supported_video_codecs(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_supported_video_codecs ??= _dylib.lookupFunction<
            _c_obs_output_get_supported_video_codecs,
            _dart_obs_output_get_supported_video_codecs>(
        'obs_output_get_supported_video_codecs');
    return _obs_output_get_supported_video_codecs(
      output,
    );
  }

  _dart_obs_output_get_supported_video_codecs
      _obs_output_get_supported_video_codecs;

  ffi.Pointer<ffi.Int8> obs_output_get_supported_audio_codecs(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_supported_audio_codecs ??= _dylib.lookupFunction<
            _c_obs_output_get_supported_audio_codecs,
            _dart_obs_output_get_supported_audio_codecs>(
        'obs_output_get_supported_audio_codecs');
    return _obs_output_get_supported_audio_codecs(
      output,
    );
  }

  _dart_obs_output_get_supported_audio_codecs
      _obs_output_get_supported_audio_codecs;

  ffi.Pointer<ffi.Void> obs_output_get_type_data(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_type_data ??= _dylib.lookupFunction<
        _c_obs_output_get_type_data,
        _dart_obs_output_get_type_data>('obs_output_get_type_data');
    return _obs_output_get_type_data(
      output,
    );
  }

  _dart_obs_output_get_type_data _obs_output_get_type_data;

  /// Optionally sets the video conversion info.  Used only for raw output
  void obs_output_set_video_conversion(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<video_scale_info> conversion,
  ) {
    _obs_output_set_video_conversion ??= _dylib.lookupFunction<
            _c_obs_output_set_video_conversion,
            _dart_obs_output_set_video_conversion>(
        'obs_output_set_video_conversion');
    return _obs_output_set_video_conversion(
      output,
      conversion,
    );
  }

  _dart_obs_output_set_video_conversion _obs_output_set_video_conversion;

  /// Optionally sets the audio conversion info.  Used only for raw output
  void obs_output_set_audio_conversion(
    ffi.Pointer<obs_output> output,
    ffi.Pointer<audio_convert_info> conversion,
  ) {
    _obs_output_set_audio_conversion ??= _dylib.lookupFunction<
            _c_obs_output_set_audio_conversion,
            _dart_obs_output_set_audio_conversion>(
        'obs_output_set_audio_conversion');
    return _obs_output_set_audio_conversion(
      output,
      conversion,
    );
  }

  _dart_obs_output_set_audio_conversion _obs_output_set_audio_conversion;

  /// Returns whether data capture can begin with the specified flags
  int obs_output_can_begin_data_capture(
    ffi.Pointer<obs_output> output,
    int flags,
  ) {
    _obs_output_can_begin_data_capture ??= _dylib.lookupFunction<
            _c_obs_output_can_begin_data_capture,
            _dart_obs_output_can_begin_data_capture>(
        'obs_output_can_begin_data_capture');
    return _obs_output_can_begin_data_capture(
      output,
      flags,
    );
  }

  _dart_obs_output_can_begin_data_capture _obs_output_can_begin_data_capture;

  /// Initializes encoders (if any)
  int obs_output_initialize_encoders(
    ffi.Pointer<obs_output> output,
    int flags,
  ) {
    _obs_output_initialize_encoders ??= _dylib.lookupFunction<
        _c_obs_output_initialize_encoders,
        _dart_obs_output_initialize_encoders>('obs_output_initialize_encoders');
    return _obs_output_initialize_encoders(
      output,
      flags,
    );
  }

  _dart_obs_output_initialize_encoders _obs_output_initialize_encoders;

  /// Begins data capture from media/encoders.
  ///
  /// @param  output  Output context
  /// @param  flags   Set this to 0 to use default output flags set in the
  /// obs_output_info structure, otherwise set to a either
  /// OBS_OUTPUT_VIDEO or OBS_OUTPUT_AUDIO to specify whether to
  /// connect audio or video.  This is useful for things like
  /// ffmpeg which may or may not always want to use both audio
  /// and video.
  /// @return         true if successful, false otherwise.
  int obs_output_begin_data_capture(
    ffi.Pointer<obs_output> output,
    int flags,
  ) {
    _obs_output_begin_data_capture ??= _dylib.lookupFunction<
        _c_obs_output_begin_data_capture,
        _dart_obs_output_begin_data_capture>('obs_output_begin_data_capture');
    return _obs_output_begin_data_capture(
      output,
      flags,
    );
  }

  _dart_obs_output_begin_data_capture _obs_output_begin_data_capture;

  /// Ends data capture from media/encoders
  void obs_output_end_data_capture(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_end_data_capture ??= _dylib.lookupFunction<
        _c_obs_output_end_data_capture,
        _dart_obs_output_end_data_capture>('obs_output_end_data_capture');
    return _obs_output_end_data_capture(
      output,
    );
  }

  _dart_obs_output_end_data_capture _obs_output_end_data_capture;

  /// Signals that the output has stopped itself.
  ///
  /// @param  output  Output context
  /// @param  code    Error code (or OBS_OUTPUT_SUCCESS if not an error)
  void obs_output_signal_stop(
    ffi.Pointer<obs_output> output,
    int code,
  ) {
    _obs_output_signal_stop ??= _dylib.lookupFunction<_c_obs_output_signal_stop,
        _dart_obs_output_signal_stop>('obs_output_signal_stop');
    return _obs_output_signal_stop(
      output,
      code,
    );
  }

  _dart_obs_output_signal_stop _obs_output_signal_stop;

  int obs_output_get_pause_offset(
    ffi.Pointer<obs_output> output,
  ) {
    _obs_output_get_pause_offset ??= _dylib.lookupFunction<
        _c_obs_output_get_pause_offset,
        _dart_obs_output_get_pause_offset>('obs_output_get_pause_offset');
    return _obs_output_get_pause_offset(
      output,
    );
  }

  _dart_obs_output_get_pause_offset _obs_output_get_pause_offset;

  ffi.Pointer<ffi.Int8> obs_encoder_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_encoder_get_display_name ??= _dylib.lookupFunction<
        _c_obs_encoder_get_display_name,
        _dart_obs_encoder_get_display_name>('obs_encoder_get_display_name');
    return _obs_encoder_get_display_name(
      id,
    );
  }

  _dart_obs_encoder_get_display_name _obs_encoder_get_display_name;

  /// Creates a video encoder context
  ///
  /// @param  id        Video encoder ID
  /// @param  name      Name to assign to this context
  /// @param  settings  Settings
  /// @return           The video encoder context, or NULL if failed or not found.
  ffi.Pointer<obs_encoder> obs_video_encoder_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    _obs_video_encoder_create ??= _dylib.lookupFunction<
        _c_obs_video_encoder_create,
        _dart_obs_video_encoder_create>('obs_video_encoder_create');
    return _obs_video_encoder_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  _dart_obs_video_encoder_create _obs_video_encoder_create;

  /// Creates an audio encoder context
  ///
  /// @param  id        Audio Encoder ID
  /// @param  name      Name to assign to this context
  /// @param  settings  Settings
  /// @param  mixer_idx Index of the mixer to use for this audio encoder
  /// @return           The video encoder context, or NULL if failed or not found.
  ffi.Pointer<obs_encoder> obs_audio_encoder_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    int mixer_idx,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    _obs_audio_encoder_create ??= _dylib.lookupFunction<
        _c_obs_audio_encoder_create,
        _dart_obs_audio_encoder_create>('obs_audio_encoder_create');
    return _obs_audio_encoder_create(
      id,
      name,
      settings,
      mixer_idx,
      hotkey_data,
    );
  }

  _dart_obs_audio_encoder_create _obs_audio_encoder_create;

  /// Adds/releases a reference to an encoder.  When the last reference is
  /// released, the encoder is destroyed.
  void obs_encoder_addref(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_addref ??=
        _dylib.lookupFunction<_c_obs_encoder_addref, _dart_obs_encoder_addref>(
            'obs_encoder_addref');
    return _obs_encoder_addref(
      encoder,
    );
  }

  _dart_obs_encoder_addref _obs_encoder_addref;

  void obs_encoder_release(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_release ??= _dylib.lookupFunction<_c_obs_encoder_release,
        _dart_obs_encoder_release>('obs_encoder_release');
    return _obs_encoder_release(
      encoder,
    );
  }

  _dart_obs_encoder_release _obs_encoder_release;

  void obs_weak_encoder_addref(
    ffi.Pointer<obs_weak_encoder> weak,
  ) {
    _obs_weak_encoder_addref ??= _dylib.lookupFunction<
        _c_obs_weak_encoder_addref,
        _dart_obs_weak_encoder_addref>('obs_weak_encoder_addref');
    return _obs_weak_encoder_addref(
      weak,
    );
  }

  _dart_obs_weak_encoder_addref _obs_weak_encoder_addref;

  void obs_weak_encoder_release(
    ffi.Pointer<obs_weak_encoder> weak,
  ) {
    _obs_weak_encoder_release ??= _dylib.lookupFunction<
        _c_obs_weak_encoder_release,
        _dart_obs_weak_encoder_release>('obs_weak_encoder_release');
    return _obs_weak_encoder_release(
      weak,
    );
  }

  _dart_obs_weak_encoder_release _obs_weak_encoder_release;

  ffi.Pointer<obs_encoder> obs_encoder_get_ref(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_ref ??= _dylib.lookupFunction<_c_obs_encoder_get_ref,
        _dart_obs_encoder_get_ref>('obs_encoder_get_ref');
    return _obs_encoder_get_ref(
      encoder,
    );
  }

  _dart_obs_encoder_get_ref _obs_encoder_get_ref;

  ffi.Pointer<obs_weak_encoder> obs_encoder_get_weak_encoder(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_weak_encoder ??= _dylib.lookupFunction<
        _c_obs_encoder_get_weak_encoder,
        _dart_obs_encoder_get_weak_encoder>('obs_encoder_get_weak_encoder');
    return _obs_encoder_get_weak_encoder(
      encoder,
    );
  }

  _dart_obs_encoder_get_weak_encoder _obs_encoder_get_weak_encoder;

  ffi.Pointer<obs_encoder> obs_weak_encoder_get_encoder(
    ffi.Pointer<obs_weak_encoder> weak,
  ) {
    _obs_weak_encoder_get_encoder ??= _dylib.lookupFunction<
        _c_obs_weak_encoder_get_encoder,
        _dart_obs_weak_encoder_get_encoder>('obs_weak_encoder_get_encoder');
    return _obs_weak_encoder_get_encoder(
      weak,
    );
  }

  _dart_obs_weak_encoder_get_encoder _obs_weak_encoder_get_encoder;

  int obs_weak_encoder_references_encoder(
    ffi.Pointer<obs_weak_encoder> weak,
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_weak_encoder_references_encoder ??= _dylib.lookupFunction<
            _c_obs_weak_encoder_references_encoder,
            _dart_obs_weak_encoder_references_encoder>(
        'obs_weak_encoder_references_encoder');
    return _obs_weak_encoder_references_encoder(
      weak,
      encoder,
    );
  }

  _dart_obs_weak_encoder_references_encoder
      _obs_weak_encoder_references_encoder;

  void obs_encoder_set_name(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _obs_encoder_set_name ??= _dylib.lookupFunction<_c_obs_encoder_set_name,
        _dart_obs_encoder_set_name>('obs_encoder_set_name');
    return _obs_encoder_set_name(
      encoder,
      name,
    );
  }

  _dart_obs_encoder_set_name _obs_encoder_set_name;

  ffi.Pointer<ffi.Int8> obs_encoder_get_name(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_name ??= _dylib.lookupFunction<_c_obs_encoder_get_name,
        _dart_obs_encoder_get_name>('obs_encoder_get_name');
    return _obs_encoder_get_name(
      encoder,
    );
  }

  _dart_obs_encoder_get_name _obs_encoder_get_name;

  /// Returns the codec of an encoder by the id
  ffi.Pointer<ffi.Int8> obs_get_encoder_codec(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_encoder_codec ??= _dylib.lookupFunction<_c_obs_get_encoder_codec,
        _dart_obs_get_encoder_codec>('obs_get_encoder_codec');
    return _obs_get_encoder_codec(
      id,
    );
  }

  _dart_obs_get_encoder_codec _obs_get_encoder_codec;

  /// Returns the type of an encoder by the id
  int obs_get_encoder_type(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_encoder_type ??= _dylib.lookupFunction<_c_obs_get_encoder_type,
        _dart_obs_get_encoder_type>('obs_get_encoder_type');
    return _obs_get_encoder_type(
      id,
    );
  }

  _dart_obs_get_encoder_type _obs_get_encoder_type;

  /// Returns the codec of the encoder
  ffi.Pointer<ffi.Int8> obs_encoder_get_codec(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_codec ??= _dylib.lookupFunction<_c_obs_encoder_get_codec,
        _dart_obs_encoder_get_codec>('obs_encoder_get_codec');
    return _obs_encoder_get_codec(
      encoder,
    );
  }

  _dart_obs_encoder_get_codec _obs_encoder_get_codec;

  /// Returns the type of an encoder
  int obs_encoder_get_type(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_type ??= _dylib.lookupFunction<_c_obs_encoder_get_type,
        _dart_obs_encoder_get_type>('obs_encoder_get_type');
    return _obs_encoder_get_type(
      encoder,
    );
  }

  _dart_obs_encoder_get_type _obs_encoder_get_type;

  /// Sets the scaled resolution for a video encoder.  Set width and height to 0
  /// to disable scaling.  If the encoder is active, this function will trigger
  /// a warning, and do nothing.
  void obs_encoder_set_scaled_size(
    ffi.Pointer<obs_encoder> encoder,
    int width,
    int height,
  ) {
    _obs_encoder_set_scaled_size ??= _dylib.lookupFunction<
        _c_obs_encoder_set_scaled_size,
        _dart_obs_encoder_set_scaled_size>('obs_encoder_set_scaled_size');
    return _obs_encoder_set_scaled_size(
      encoder,
      width,
      height,
    );
  }

  _dart_obs_encoder_set_scaled_size _obs_encoder_set_scaled_size;

  /// For video encoders, returns true if pre-encode scaling is enabled
  int obs_encoder_scaling_enabled(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_scaling_enabled ??= _dylib.lookupFunction<
        _c_obs_encoder_scaling_enabled,
        _dart_obs_encoder_scaling_enabled>('obs_encoder_scaling_enabled');
    return _obs_encoder_scaling_enabled(
      encoder,
    );
  }

  _dart_obs_encoder_scaling_enabled _obs_encoder_scaling_enabled;

  /// For video encoders, returns the width of the encoded image
  int obs_encoder_get_width(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_width ??= _dylib.lookupFunction<_c_obs_encoder_get_width,
        _dart_obs_encoder_get_width>('obs_encoder_get_width');
    return _obs_encoder_get_width(
      encoder,
    );
  }

  _dart_obs_encoder_get_width _obs_encoder_get_width;

  /// For video encoders, returns the height of the encoded image
  int obs_encoder_get_height(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_height ??= _dylib.lookupFunction<_c_obs_encoder_get_height,
        _dart_obs_encoder_get_height>('obs_encoder_get_height');
    return _obs_encoder_get_height(
      encoder,
    );
  }

  _dart_obs_encoder_get_height _obs_encoder_get_height;

  /// For audio encoders, returns the sample rate of the audio
  int obs_encoder_get_sample_rate(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_sample_rate ??= _dylib.lookupFunction<
        _c_obs_encoder_get_sample_rate,
        _dart_obs_encoder_get_sample_rate>('obs_encoder_get_sample_rate');
    return _obs_encoder_get_sample_rate(
      encoder,
    );
  }

  _dart_obs_encoder_get_sample_rate _obs_encoder_get_sample_rate;

  /// Sets the preferred video format for a video encoder.  If the encoder can use
  /// the format specified, it will force a conversion to that format if the
  /// obs output format does not match the preferred format.
  ///
  /// If the format is set to VIDEO_FORMAT_NONE, will revert to the default
  /// functionality of converting only when absolutely necessary.
  void obs_encoder_set_preferred_video_format(
    ffi.Pointer<obs_encoder> encoder,
    int format,
  ) {
    _obs_encoder_set_preferred_video_format ??= _dylib.lookupFunction<
            _c_obs_encoder_set_preferred_video_format,
            _dart_obs_encoder_set_preferred_video_format>(
        'obs_encoder_set_preferred_video_format');
    return _obs_encoder_set_preferred_video_format(
      encoder,
      format,
    );
  }

  _dart_obs_encoder_set_preferred_video_format
      _obs_encoder_set_preferred_video_format;

  int obs_encoder_get_preferred_video_format(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_preferred_video_format ??= _dylib.lookupFunction<
            _c_obs_encoder_get_preferred_video_format,
            _dart_obs_encoder_get_preferred_video_format>(
        'obs_encoder_get_preferred_video_format');
    return _obs_encoder_get_preferred_video_format(
      encoder,
    );
  }

  _dart_obs_encoder_get_preferred_video_format
      _obs_encoder_get_preferred_video_format;

  /// Gets the default settings for an encoder type
  ffi.Pointer<obs_data_t> obs_encoder_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_encoder_defaults ??= _dylib.lookupFunction<_c_obs_encoder_defaults,
        _dart_obs_encoder_defaults>('obs_encoder_defaults');
    return _obs_encoder_defaults(
      id,
    );
  }

  _dart_obs_encoder_defaults _obs_encoder_defaults;

  ffi.Pointer<obs_data_t> obs_encoder_get_defaults(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_defaults ??= _dylib.lookupFunction<
        _c_obs_encoder_get_defaults,
        _dart_obs_encoder_get_defaults>('obs_encoder_get_defaults');
    return _obs_encoder_get_defaults(
      encoder,
    );
  }

  _dart_obs_encoder_get_defaults _obs_encoder_get_defaults;

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_get_encoder_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_encoder_properties ??= _dylib.lookupFunction<
        _c_obs_get_encoder_properties,
        _dart_obs_get_encoder_properties>('obs_get_encoder_properties');
    return _obs_get_encoder_properties(
      id,
    );
  }

  _dart_obs_get_encoder_properties _obs_get_encoder_properties;

  /// Returns the property list of an existing encoder, if any.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_encoder_properties(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_properties ??= _dylib.lookupFunction<_c_obs_encoder_properties,
        _dart_obs_encoder_properties>('obs_encoder_properties');
    return _obs_encoder_properties(
      encoder,
    );
  }

  _dart_obs_encoder_properties _obs_encoder_properties;

  /// Updates the settings of the encoder context.  Usually used for changing
  /// bitrate while active
  void obs_encoder_update(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<obs_data_t> settings,
  ) {
    _obs_encoder_update ??=
        _dylib.lookupFunction<_c_obs_encoder_update, _dart_obs_encoder_update>(
            'obs_encoder_update');
    return _obs_encoder_update(
      encoder,
      settings,
    );
  }

  _dart_obs_encoder_update _obs_encoder_update;

  /// Gets extra data (headers) associated with this context
  int obs_encoder_get_extra_data(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> extra_data,
    ffi.Pointer<ffi.Uint64> size,
  ) {
    _obs_encoder_get_extra_data ??= _dylib.lookupFunction<
        _c_obs_encoder_get_extra_data,
        _dart_obs_encoder_get_extra_data>('obs_encoder_get_extra_data');
    return _obs_encoder_get_extra_data(
      encoder,
      extra_data,
      size,
    );
  }

  _dart_obs_encoder_get_extra_data _obs_encoder_get_extra_data;

  /// Returns the current settings for this encoder
  ffi.Pointer<obs_data_t> obs_encoder_get_settings(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_settings ??= _dylib.lookupFunction<
        _c_obs_encoder_get_settings,
        _dart_obs_encoder_get_settings>('obs_encoder_get_settings');
    return _obs_encoder_get_settings(
      encoder,
    );
  }

  _dart_obs_encoder_get_settings _obs_encoder_get_settings;

  /// Sets the video output context to be used with this encoder
  void obs_encoder_set_video(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<video_t> video,
  ) {
    _obs_encoder_set_video ??= _dylib.lookupFunction<_c_obs_encoder_set_video,
        _dart_obs_encoder_set_video>('obs_encoder_set_video');
    return _obs_encoder_set_video(
      encoder,
      video,
    );
  }

  _dart_obs_encoder_set_video _obs_encoder_set_video;

  /// Sets the audio output context to be used with this encoder
  void obs_encoder_set_audio(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<audio_t> audio,
  ) {
    _obs_encoder_set_audio ??= _dylib.lookupFunction<_c_obs_encoder_set_audio,
        _dart_obs_encoder_set_audio>('obs_encoder_set_audio');
    return _obs_encoder_set_audio(
      encoder,
      audio,
    );
  }

  _dart_obs_encoder_set_audio _obs_encoder_set_audio;

  /// Returns the video output context used with this encoder, or NULL if not
  /// a video context
  ffi.Pointer<video_t> obs_encoder_video(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_video ??=
        _dylib.lookupFunction<_c_obs_encoder_video, _dart_obs_encoder_video>(
            'obs_encoder_video');
    return _obs_encoder_video(
      encoder,
    );
  }

  _dart_obs_encoder_video _obs_encoder_video;

  /// Returns the audio output context used with this encoder, or NULL if not
  /// a audio context
  ffi.Pointer<audio_t> obs_encoder_audio(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_audio ??=
        _dylib.lookupFunction<_c_obs_encoder_audio, _dart_obs_encoder_audio>(
            'obs_encoder_audio');
    return _obs_encoder_audio(
      encoder,
    );
  }

  _dart_obs_encoder_audio _obs_encoder_audio;

  /// Returns true if encoder is active, false otherwise
  int obs_encoder_active(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_active ??=
        _dylib.lookupFunction<_c_obs_encoder_active, _dart_obs_encoder_active>(
            'obs_encoder_active');
    return _obs_encoder_active(
      encoder,
    );
  }

  _dart_obs_encoder_active _obs_encoder_active;

  ffi.Pointer<ffi.Void> obs_encoder_get_type_data(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_type_data ??= _dylib.lookupFunction<
        _c_obs_encoder_get_type_data,
        _dart_obs_encoder_get_type_data>('obs_encoder_get_type_data');
    return _obs_encoder_get_type_data(
      encoder,
    );
  }

  _dart_obs_encoder_get_type_data _obs_encoder_get_type_data;

  ffi.Pointer<ffi.Int8> obs_encoder_get_id(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_id ??=
        _dylib.lookupFunction<_c_obs_encoder_get_id, _dart_obs_encoder_get_id>(
            'obs_encoder_get_id');
    return _obs_encoder_get_id(
      encoder,
    );
  }

  _dart_obs_encoder_get_id _obs_encoder_get_id;

  int obs_get_encoder_caps(
    ffi.Pointer<ffi.Int8> encoder_id,
  ) {
    _obs_get_encoder_caps ??= _dylib.lookupFunction<_c_obs_get_encoder_caps,
        _dart_obs_get_encoder_caps>('obs_get_encoder_caps');
    return _obs_get_encoder_caps(
      encoder_id,
    );
  }

  _dart_obs_get_encoder_caps _obs_get_encoder_caps;

  int obs_encoder_get_caps(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_caps ??= _dylib.lookupFunction<_c_obs_encoder_get_caps,
        _dart_obs_encoder_get_caps>('obs_encoder_get_caps');
    return _obs_encoder_get_caps(
      encoder,
    );
  }

  _dart_obs_encoder_get_caps _obs_encoder_get_caps;

  /// Duplicates an encoder packet
  void obs_duplicate_encoder_packet(
    ffi.Pointer<encoder_packet> dst,
    ffi.Pointer<encoder_packet> src,
  ) {
    _obs_duplicate_encoder_packet ??= _dylib.lookupFunction<
        _c_obs_duplicate_encoder_packet,
        _dart_obs_duplicate_encoder_packet>('obs_duplicate_encoder_packet');
    return _obs_duplicate_encoder_packet(
      dst,
      src,
    );
  }

  _dart_obs_duplicate_encoder_packet _obs_duplicate_encoder_packet;

  void obs_free_encoder_packet(
    ffi.Pointer<encoder_packet> packet,
  ) {
    _obs_free_encoder_packet ??= _dylib.lookupFunction<
        _c_obs_free_encoder_packet,
        _dart_obs_free_encoder_packet>('obs_free_encoder_packet');
    return _obs_free_encoder_packet(
      packet,
    );
  }

  _dart_obs_free_encoder_packet _obs_free_encoder_packet;

  void obs_encoder_packet_ref(
    ffi.Pointer<encoder_packet> dst,
    ffi.Pointer<encoder_packet> src,
  ) {
    _obs_encoder_packet_ref ??= _dylib.lookupFunction<_c_obs_encoder_packet_ref,
        _dart_obs_encoder_packet_ref>('obs_encoder_packet_ref');
    return _obs_encoder_packet_ref(
      dst,
      src,
    );
  }

  _dart_obs_encoder_packet_ref _obs_encoder_packet_ref;

  void obs_encoder_packet_release(
    ffi.Pointer<encoder_packet> packet,
  ) {
    _obs_encoder_packet_release ??= _dylib.lookupFunction<
        _c_obs_encoder_packet_release,
        _dart_obs_encoder_packet_release>('obs_encoder_packet_release');
    return _obs_encoder_packet_release(
      packet,
    );
  }

  _dart_obs_encoder_packet_release _obs_encoder_packet_release;

  ffi.Pointer<ffi.Void> obs_encoder_create_rerouted(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Int8> reroute_id,
  ) {
    _obs_encoder_create_rerouted ??= _dylib.lookupFunction<
        _c_obs_encoder_create_rerouted,
        _dart_obs_encoder_create_rerouted>('obs_encoder_create_rerouted');
    return _obs_encoder_create_rerouted(
      encoder,
      reroute_id,
    );
  }

  _dart_obs_encoder_create_rerouted _obs_encoder_create_rerouted;

  /// Returns whether encoder is paused
  int obs_encoder_paused(
    ffi.Pointer<obs_encoder> output,
  ) {
    _obs_encoder_paused ??=
        _dylib.lookupFunction<_c_obs_encoder_paused, _dart_obs_encoder_paused>(
            'obs_encoder_paused');
    return _obs_encoder_paused(
      output,
    );
  }

  _dart_obs_encoder_paused _obs_encoder_paused;

  ffi.Pointer<ffi.Int8> obs_encoder_get_last_error(
    ffi.Pointer<obs_encoder> encoder,
  ) {
    _obs_encoder_get_last_error ??= _dylib.lookupFunction<
        _c_obs_encoder_get_last_error,
        _dart_obs_encoder_get_last_error>('obs_encoder_get_last_error');
    return _obs_encoder_get_last_error(
      encoder,
    );
  }

  _dart_obs_encoder_get_last_error _obs_encoder_get_last_error;

  void obs_encoder_set_last_error(
    ffi.Pointer<obs_encoder> encoder,
    ffi.Pointer<ffi.Int8> message,
  ) {
    _obs_encoder_set_last_error ??= _dylib.lookupFunction<
        _c_obs_encoder_set_last_error,
        _dart_obs_encoder_set_last_error>('obs_encoder_set_last_error');
    return _obs_encoder_set_last_error(
      encoder,
      message,
    );
  }

  _dart_obs_encoder_set_last_error _obs_encoder_set_last_error;

  ffi.Pointer<ffi.Int8> obs_service_get_display_name(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_service_get_display_name ??= _dylib.lookupFunction<
        _c_obs_service_get_display_name,
        _dart_obs_service_get_display_name>('obs_service_get_display_name');
    return _obs_service_get_display_name(
      id,
    );
  }

  _dart_obs_service_get_display_name _obs_service_get_display_name;

  ffi.Pointer<obs_service> obs_service_create(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
    ffi.Pointer<obs_data_t> hotkey_data,
  ) {
    _obs_service_create ??=
        _dylib.lookupFunction<_c_obs_service_create, _dart_obs_service_create>(
            'obs_service_create');
    return _obs_service_create(
      id,
      name,
      settings,
      hotkey_data,
    );
  }

  _dart_obs_service_create _obs_service_create;

  ffi.Pointer<obs_service> obs_service_create_private(
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<obs_data_t> settings,
  ) {
    _obs_service_create_private ??= _dylib.lookupFunction<
        _c_obs_service_create_private,
        _dart_obs_service_create_private>('obs_service_create_private');
    return _obs_service_create_private(
      id,
      name,
      settings,
    );
  }

  _dart_obs_service_create_private _obs_service_create_private;

  /// Adds/releases a reference to a service.  When the last reference is
  /// released, the service is destroyed.
  void obs_service_addref(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_addref ??=
        _dylib.lookupFunction<_c_obs_service_addref, _dart_obs_service_addref>(
            'obs_service_addref');
    return _obs_service_addref(
      service,
    );
  }

  _dart_obs_service_addref _obs_service_addref;

  void obs_service_release(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_release ??= _dylib.lookupFunction<_c_obs_service_release,
        _dart_obs_service_release>('obs_service_release');
    return _obs_service_release(
      service,
    );
  }

  _dart_obs_service_release _obs_service_release;

  void obs_weak_service_addref(
    ffi.Pointer<obs_weak_service> weak,
  ) {
    _obs_weak_service_addref ??= _dylib.lookupFunction<
        _c_obs_weak_service_addref,
        _dart_obs_weak_service_addref>('obs_weak_service_addref');
    return _obs_weak_service_addref(
      weak,
    );
  }

  _dart_obs_weak_service_addref _obs_weak_service_addref;

  void obs_weak_service_release(
    ffi.Pointer<obs_weak_service> weak,
  ) {
    _obs_weak_service_release ??= _dylib.lookupFunction<
        _c_obs_weak_service_release,
        _dart_obs_weak_service_release>('obs_weak_service_release');
    return _obs_weak_service_release(
      weak,
    );
  }

  _dart_obs_weak_service_release _obs_weak_service_release;

  ffi.Pointer<obs_service> obs_service_get_ref(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_ref ??= _dylib.lookupFunction<_c_obs_service_get_ref,
        _dart_obs_service_get_ref>('obs_service_get_ref');
    return _obs_service_get_ref(
      service,
    );
  }

  _dart_obs_service_get_ref _obs_service_get_ref;

  ffi.Pointer<obs_weak_service> obs_service_get_weak_service(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_weak_service ??= _dylib.lookupFunction<
        _c_obs_service_get_weak_service,
        _dart_obs_service_get_weak_service>('obs_service_get_weak_service');
    return _obs_service_get_weak_service(
      service,
    );
  }

  _dart_obs_service_get_weak_service _obs_service_get_weak_service;

  ffi.Pointer<obs_service> obs_weak_service_get_service(
    ffi.Pointer<obs_weak_service> weak,
  ) {
    _obs_weak_service_get_service ??= _dylib.lookupFunction<
        _c_obs_weak_service_get_service,
        _dart_obs_weak_service_get_service>('obs_weak_service_get_service');
    return _obs_weak_service_get_service(
      weak,
    );
  }

  _dart_obs_weak_service_get_service _obs_weak_service_get_service;

  int obs_weak_service_references_service(
    ffi.Pointer<obs_weak_service> weak,
    ffi.Pointer<obs_service> service,
  ) {
    _obs_weak_service_references_service ??= _dylib.lookupFunction<
            _c_obs_weak_service_references_service,
            _dart_obs_weak_service_references_service>(
        'obs_weak_service_references_service');
    return _obs_weak_service_references_service(
      weak,
      service,
    );
  }

  _dart_obs_weak_service_references_service
      _obs_weak_service_references_service;

  ffi.Pointer<ffi.Int8> obs_service_get_name(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_name ??= _dylib.lookupFunction<_c_obs_service_get_name,
        _dart_obs_service_get_name>('obs_service_get_name');
    return _obs_service_get_name(
      service,
    );
  }

  _dart_obs_service_get_name _obs_service_get_name;

  /// Gets the default settings for a service
  ffi.Pointer<obs_data_t> obs_service_defaults(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_service_defaults ??= _dylib.lookupFunction<_c_obs_service_defaults,
        _dart_obs_service_defaults>('obs_service_defaults');
    return _obs_service_defaults(
      id,
    );
  }

  _dart_obs_service_defaults _obs_service_defaults;

  /// Returns the property list, if any.  Free with obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_get_service_properties(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_get_service_properties ??= _dylib.lookupFunction<
        _c_obs_get_service_properties,
        _dart_obs_get_service_properties>('obs_get_service_properties');
    return _obs_get_service_properties(
      id,
    );
  }

  _dart_obs_get_service_properties _obs_get_service_properties;

  /// Returns the property list of an existing service context, if any.  Free with
  /// obs_properties_destroy
  ffi.Pointer<obs_properties_t> obs_service_properties(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_properties ??= _dylib.lookupFunction<_c_obs_service_properties,
        _dart_obs_service_properties>('obs_service_properties');
    return _obs_service_properties(
      service,
    );
  }

  _dart_obs_service_properties _obs_service_properties;

  /// Gets the service type
  ffi.Pointer<ffi.Int8> obs_service_get_type(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_type ??= _dylib.lookupFunction<_c_obs_service_get_type,
        _dart_obs_service_get_type>('obs_service_get_type');
    return _obs_service_get_type(
      service,
    );
  }

  _dart_obs_service_get_type _obs_service_get_type;

  /// Updates the settings of the service context
  void obs_service_update(
    ffi.Pointer<obs_service> service,
    ffi.Pointer<obs_data_t> settings,
  ) {
    _obs_service_update ??=
        _dylib.lookupFunction<_c_obs_service_update, _dart_obs_service_update>(
            'obs_service_update');
    return _obs_service_update(
      service,
      settings,
    );
  }

  _dart_obs_service_update _obs_service_update;

  /// Returns the current settings for this service
  ffi.Pointer<obs_data_t> obs_service_get_settings(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_settings ??= _dylib.lookupFunction<
        _c_obs_service_get_settings,
        _dart_obs_service_get_settings>('obs_service_get_settings');
    return _obs_service_get_settings(
      service,
    );
  }

  _dart_obs_service_get_settings _obs_service_get_settings;

  /// Returns the URL for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_url(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_url ??= _dylib.lookupFunction<_c_obs_service_get_url,
        _dart_obs_service_get_url>('obs_service_get_url');
    return _obs_service_get_url(
      service,
    );
  }

  _dart_obs_service_get_url _obs_service_get_url;

  /// Returns the stream key (if any) for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_key(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_key ??= _dylib.lookupFunction<_c_obs_service_get_key,
        _dart_obs_service_get_key>('obs_service_get_key');
    return _obs_service_get_key(
      service,
    );
  }

  _dart_obs_service_get_key _obs_service_get_key;

  /// Returns the username (if any) for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_username(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_username ??= _dylib.lookupFunction<
        _c_obs_service_get_username,
        _dart_obs_service_get_username>('obs_service_get_username');
    return _obs_service_get_username(
      service,
    );
  }

  _dart_obs_service_get_username _obs_service_get_username;

  /// Returns the password (if any) for this service context
  ffi.Pointer<ffi.Int8> obs_service_get_password(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_password ??= _dylib.lookupFunction<
        _c_obs_service_get_password,
        _dart_obs_service_get_password>('obs_service_get_password');
    return _obs_service_get_password(
      service,
    );
  }

  _dart_obs_service_get_password _obs_service_get_password;

  /// Applies service-specific video encoder settings.
  ///
  /// @param  video_encoder_settings  Video encoder settings.  Optional.
  /// @param  audio_encoder_settings  Audio encoder settings.  Optional.
  void obs_service_apply_encoder_settings(
    ffi.Pointer<obs_service> service,
    ffi.Pointer<obs_data_t> video_encoder_settings,
    ffi.Pointer<obs_data_t> audio_encoder_settings,
  ) {
    _obs_service_apply_encoder_settings ??= _dylib.lookupFunction<
            _c_obs_service_apply_encoder_settings,
            _dart_obs_service_apply_encoder_settings>(
        'obs_service_apply_encoder_settings');
    return _obs_service_apply_encoder_settings(
      service,
      video_encoder_settings,
      audio_encoder_settings,
    );
  }

  _dart_obs_service_apply_encoder_settings _obs_service_apply_encoder_settings;

  ffi.Pointer<ffi.Void> obs_service_get_type_data(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_type_data ??= _dylib.lookupFunction<
        _c_obs_service_get_type_data,
        _dart_obs_service_get_type_data>('obs_service_get_type_data');
    return _obs_service_get_type_data(
      service,
    );
  }

  _dart_obs_service_get_type_data _obs_service_get_type_data;

  ffi.Pointer<ffi.Int8> obs_service_get_id(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_id ??=
        _dylib.lookupFunction<_c_obs_service_get_id, _dart_obs_service_get_id>(
            'obs_service_get_id');
    return _obs_service_get_id(
      service,
    );
  }

  _dart_obs_service_get_id _obs_service_get_id;

  ffi.Pointer<ffi.Int8> obs_service_get_output_type(
    ffi.Pointer<obs_service> service,
  ) {
    _obs_service_get_output_type ??= _dylib.lookupFunction<
        _c_obs_service_get_output_type,
        _dart_obs_service_get_output_type>('obs_service_get_output_type');
    return _obs_service_get_output_type(
      service,
    );
  }

  _dart_obs_service_get_output_type _obs_service_get_output_type;

  void obs_source_frame_init(
    ffi.Pointer<obs_source_frame> frame,
    int format,
    int width,
    int height,
  ) {
    _obs_source_frame_init ??= _dylib.lookupFunction<_c_obs_source_frame_init,
        _dart_obs_source_frame_init>('obs_source_frame_init');
    return _obs_source_frame_init(
      frame,
      format,
      width,
      height,
    );
  }

  _dart_obs_source_frame_init _obs_source_frame_init;

  void obs_source_frame_free(
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_frame_free ??= _dylib.lookupFunction<_c_obs_source_frame_free,
        _dart_obs_source_frame_free>('obs_source_frame_free');
    return _obs_source_frame_free(
      frame,
    );
  }

  _dart_obs_source_frame_free _obs_source_frame_free;

  ffi.Pointer<obs_source_frame> obs_source_frame_create(
    int format,
    int width,
    int height,
  ) {
    _obs_source_frame_create ??= _dylib.lookupFunction<
        _c_obs_source_frame_create,
        _dart_obs_source_frame_create>('obs_source_frame_create');
    return _obs_source_frame_create(
      format,
      width,
      height,
    );
  }

  _dart_obs_source_frame_create _obs_source_frame_create;

  void obs_source_frame_destroy(
    ffi.Pointer<obs_source_frame> frame,
  ) {
    _obs_source_frame_destroy ??= _dylib.lookupFunction<
        _c_obs_source_frame_destroy,
        _dart_obs_source_frame_destroy>('obs_source_frame_destroy');
    return _obs_source_frame_destroy(
      frame,
    );
  }

  _dart_obs_source_frame_destroy _obs_source_frame_destroy;

  void obs_source_frame_copy(
    ffi.Pointer<obs_source_frame> dst,
    ffi.Pointer<obs_source_frame> src,
  ) {
    _obs_source_frame_copy ??= _dylib.lookupFunction<_c_obs_source_frame_copy,
        _dart_obs_source_frame_copy>('obs_source_frame_copy');
    return _obs_source_frame_copy(
      dst,
      src,
    );
  }

  _dart_obs_source_frame_copy _obs_source_frame_copy;

  /// Adds a frame callback for this source.
  ///
  /// @param  source   The source.
  /// @param  frame    The frame callback which is called each time a frame
  /// updates.
  /// @param  param    The user data to be associated with this frame callback.
  void obs_source_add_frame_callback(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<_typedefC_16>> frame,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_add_frame_callback ??= _dylib.lookupFunction<
        _c_obs_source_add_frame_callback,
        _dart_obs_source_add_frame_callback>('obs_source_add_frame_callback');
    return _obs_source_add_frame_callback(
      source,
      frame,
      param,
    );
  }

  _dart_obs_source_add_frame_callback _obs_source_add_frame_callback;

  /// Removes a frame callback for this source
  void obs_source_remove_frame_callback(
    ffi.Pointer<obs_source> source,
    ffi.Pointer<ffi.NativeFunction<_typedefC_17>> frame,
    ffi.Pointer<ffi.Void> param,
  ) {
    _obs_source_remove_frame_callback ??= _dylib.lookupFunction<
            _c_obs_source_remove_frame_callback,
            _dart_obs_source_remove_frame_callback>(
        'obs_source_remove_frame_callback');
    return _obs_source_remove_frame_callback(
      source,
      frame,
      param,
    );
  }

  _dart_obs_source_remove_frame_callback _obs_source_remove_frame_callback;

  int obs_source_get_icon_type(
    ffi.Pointer<ffi.Int8> id,
  ) {
    _obs_source_get_icon_type ??= _dylib.lookupFunction<
        _c_obs_source_get_icon_type,
        _dart_obs_source_get_icon_type>('obs_source_get_icon_type');
    return _obs_source_get_icon_type(
      id,
    );
  }

  _dart_obs_source_get_icon_type _obs_source_get_icon_type;
}

class matrix4 extends ffi.Struct {}

class obs_display extends ffi.Struct {}

class obs_view extends ffi.Struct {}

class obs_source extends ffi.Struct {}

class obs_scene extends ffi.Struct {}

class obs_scene_item extends ffi.Struct {}

class obs_output extends ffi.Struct {}

class obs_encoder extends ffi.Struct {}

class obs_service extends ffi.Struct {}

class obs_module extends ffi.Struct {}

class obs_fader extends ffi.Struct {}

class obs_volmeter extends ffi.Struct {}

class obs_weak_source extends ffi.Struct {}

class obs_weak_output extends ffi.Struct {}

class obs_weak_encoder extends ffi.Struct {}

class obs_weak_service extends ffi.Struct {}

/// Used for changing the order of items (for example, filters in a source,
/// or items in a scene)
abstract class obs_order_movement {
  static const int OBS_ORDER_MOVE_UP = 0;
  static const int OBS_ORDER_MOVE_DOWN = 1;
  static const int OBS_ORDER_MOVE_TOP = 2;
  static const int OBS_ORDER_MOVE_BOTTOM = 3;
}

/// Used with obs_source_process_filter to specify whether the filter should
/// render the source directly with the specified effect, or whether it should
/// render it to a texture
abstract class obs_allow_direct_render {
  static const int OBS_NO_DIRECT_RENDERING = 0;
  static const int OBS_ALLOW_DIRECT_RENDERING = 1;
}

abstract class obs_scale_type {
  static const int OBS_SCALE_DISABLE = 0;
  static const int OBS_SCALE_POINT = 1;
  static const int OBS_SCALE_BICUBIC = 2;
  static const int OBS_SCALE_BILINEAR = 3;
  static const int OBS_SCALE_LANCZOS = 4;
  static const int OBS_SCALE_AREA = 5;
}

/// Used with scene items to indicate the type of bounds to use for scene items.
/// Mostly determines how the image will be scaled within those bounds, or
/// whether to use bounds at all.
abstract class obs_bounds_type {
  /// < no bounds
  static const int OBS_BOUNDS_NONE = 0;

  /// < stretch (ignores base scale)
  static const int OBS_BOUNDS_STRETCH = 1;

  /// < scales to inner rectangle
  static const int OBS_BOUNDS_SCALE_INNER = 2;

  /// < scales to outer rectangle
  static const int OBS_BOUNDS_SCALE_OUTER = 3;

  /// < scales to the width
  static const int OBS_BOUNDS_SCALE_TO_WIDTH = 4;

  /// < scales to the height
  static const int OBS_BOUNDS_SCALE_TO_HEIGHT = 5;

  /// < no scaling, maximum size only
  static const int OBS_BOUNDS_MAX_ONLY = 6;
}

class vec2 extends ffi.Struct {}

class obs_transform_info extends ffi.Struct {}

/// Video initialization structure
class obs_video_info extends ffi.Struct {
  /// Graphics module to use (usually "libobs-opengl" or "libobs-d3d11")
  ffi.Pointer<ffi.Int8> graphics_module;

  /// < Output FPS numerator
  @ffi.Uint32()
  int fps_num;

  /// < Output FPS denominator
  @ffi.Uint32()
  int fps_den;

  /// < Base compositing width
  @ffi.Uint32()
  int base_width;

  /// < Base compositing height
  @ffi.Uint32()
  int base_height;

  /// < Output width
  @ffi.Uint32()
  int output_width;

  /// < Output height
  @ffi.Uint32()
  int output_height;

  /// < Output format
  @ffi.Int32()
  int output_format;

  /// Video adapter index to use (NOTE: avoid for optimus laptops)
  @ffi.Uint32()
  int adapter;

  /// Use shaders to convert to different color formats
  @ffi.Uint8()
  int gpu_conversion;

  /// < YUV type (if YUV)
  @ffi.Int32()
  int colorspace;

  /// < YUV range (if YUV)
  @ffi.Int32()
  int range;

  /// < How to scale if scaling
  @ffi.Int32()
  int scale_type;
}

/// Audio initialization structure
class obs_audio_info extends ffi.Struct {
  @ffi.Uint32()
  int samples_per_sec;

  @ffi.Int32()
  int speakers;
}

/// Sent to source filters via the filter_audio callback to allow filtering of
/// audio data
class obs_audio_data extends ffi.Struct {}

/// Source audio output structure.  Used with obs_source_output_audio to output
/// source audio.  Audio is automatically resampled and remixed as necessary.
class obs_source_audio extends ffi.Struct {}

/// Source asynchronous video output structure.  Used with
/// obs_source_output_video to output asynchronous video.  Video is buffered as
/// necessary to play according to timestamps.  When used with audio output,
/// audio is synced to video as it is played.
///
/// If a YUV format is specified, it will be automatically upsampled and
/// converted to RGB via shader on the graphics processor.
///
/// NOTE: Non-YUV formats will always be treated as full range with this
/// structure!  Use obs_source_frame2 along with obs_source_output_video2
/// instead if partial range support is desired for non-YUV video formats.
class obs_source_frame extends ffi.Struct {}

class obs_source_frame2 extends ffi.Struct {}

/// Access to the argc/argv used to start OBS. What you see is what you get.
class obs_cmdline_args extends ffi.Struct {
  @ffi.Int32()
  int argc;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv;
}

class profiler_name_store_t extends ffi.Struct {}

class obs_module_info extends ffi.Struct {
  ffi.Pointer<ffi.Int8> bin_path;

  ffi.Pointer<ffi.Int8> data_path;
}

class lookup_t extends ffi.Struct {}

class audio_t extends ffi.Struct {}

class video_t extends ffi.Struct {}

abstract class obs_base_effect {
  /// < RGB/YUV
  static const int OBS_EFFECT_DEFAULT = 0;

  /// < RGB/YUV (using texture_rect)
  static const int OBS_EFFECT_DEFAULT_RECT = 1;

  /// < RGB/YUV (alpha set to 1.0)
  static const int OBS_EFFECT_OPAQUE = 2;

  /// < RGB/YUV (solid color only)
  static const int OBS_EFFECT_SOLID = 3;

  /// < Bicubic downscale
  static const int OBS_EFFECT_BICUBIC = 4;

  /// < Lanczos downscale
  static const int OBS_EFFECT_LANCZOS = 5;

  /// < Bilinear low resolution downscale
  static const int OBS_EFFECT_BILINEAR_LOWRES = 6;

  /// < Premultiplied alpha
  static const int OBS_EFFECT_PREMULTIPLIED_ALPHA = 7;

  /// < RGB/YUV (repeating)
  static const int OBS_EFFECT_REPEAT = 8;

  /// < Area rescale
  static const int OBS_EFFECT_AREA = 9;
}

class gs_effect_t extends ffi.Struct {}

class signal_handler_t extends ffi.Struct {}

class proc_handler_t extends ffi.Struct {}

class gs_texture_t extends ffi.Struct {}

class obs_data_t extends ffi.Struct {}

class obs_data_array_t extends ffi.Struct {}

abstract class obs_obj_type {
  static const int OBS_OBJ_TYPE_INVALID = 0;
  static const int OBS_OBJ_TYPE_SOURCE = 1;
  static const int OBS_OBJ_TYPE_OUTPUT = 2;
  static const int OBS_OBJ_TYPE_ENCODER = 3;
  static const int OBS_OBJ_TYPE_SERVICE = 4;
}

class video_scale_info extends ffi.Struct {
  @ffi.Int32()
  int format;

  @ffi.Uint32()
  int width;

  @ffi.Uint32()
  int height;

  @ffi.Int32()
  int range;

  @ffi.Int32()
  int colorspace;
}

class video_data extends ffi.Struct {}

abstract class obs_task_type {
  static const int OBS_TASK_UI = 0;
  static const int OBS_TASK_GRAPHICS = 1;
}

class objc_ivar extends ffi.Struct {
  ffi.Pointer<ffi.Int8> ivar_name;

  ffi.Pointer<ffi.Int8> ivar_type;

  @ffi.Int32()
  int ivar_offset;

  @ffi.Int32()
  int space;
}

class objc_ivar_list extends ffi.Struct {}

class SEL extends ffi.Struct {}

class objc_method extends ffi.Struct {
  ffi.Pointer<SEL> method_name;

  ffi.Pointer<ffi.Int8> method_types;

  ffi.Pointer<ffi.NativeFunction<IMP>> method_imp;
}

class objc_method_list extends ffi.Struct {}

class objc_cache extends ffi.Struct {}

class objc_protocol_list extends ffi.Struct {}

class Class extends ffi.Struct {
  ffi.Pointer<Class> isa;

  ffi.Pointer<Class> super_class;

  ffi.Pointer<ffi.Int8> name;

  @ffi.Int64()
  int version;

  @ffi.Int64()
  int info;

  @ffi.Int64()
  int instance_size;

  ffi.Pointer<objc_ivar_list> ivars;

  ffi.Pointer<ffi.Pointer<objc_method_list>> methodLists;

  ffi.Pointer<objc_cache> cache;

  ffi.Pointer<objc_protocol_list> protocols;
}

class id extends ffi.Struct {
  ffi.Pointer<Class> isa;
}

class gs_window extends ffi.Struct {
  ffi.Pointer<id> view;
}

class gs_init_data extends ffi.Struct {}

class obs_properties_t extends ffi.Struct {}

class audio_data extends ffi.Struct {}

abstract class obs_deinterlace_mode {
  static const int OBS_DEINTERLACE_MODE_DISABLE = 0;
  static const int OBS_DEINTERLACE_MODE_DISCARD = 1;
  static const int OBS_DEINTERLACE_MODE_RETRO = 2;
  static const int OBS_DEINTERLACE_MODE_BLEND = 3;
  static const int OBS_DEINTERLACE_MODE_BLEND_2X = 4;
  static const int OBS_DEINTERLACE_MODE_LINEAR = 5;
  static const int OBS_DEINTERLACE_MODE_LINEAR_2X = 6;
  static const int OBS_DEINTERLACE_MODE_YADIF = 7;
  static const int OBS_DEINTERLACE_MODE_YADIF_2X = 8;
}

abstract class obs_deinterlace_field_order {
  static const int OBS_DEINTERLACE_FIELD_ORDER_TOP = 0;
  static const int OBS_DEINTERLACE_FIELD_ORDER_BOTTOM = 1;
}

abstract class obs_monitoring_type {
  static const int OBS_MONITORING_TYPE_NONE = 0;
  static const int OBS_MONITORING_TYPE_MONITOR_ONLY = 1;
  static const int OBS_MONITORING_TYPE_MONITOR_AND_OUTPUT = 2;
}

class vec3 extends ffi.Struct {}

class obs_mouse_event extends ffi.Struct {
  @ffi.Uint32()
  int modifiers;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;
}

class obs_key_event extends ffi.Struct {
  @ffi.Uint32()
  int modifiers;

  ffi.Pointer<ffi.Int8> text;

  @ffi.Uint32()
  int native_modifiers;

  @ffi.Uint32()
  int native_scancode;

  @ffi.Uint32()
  int native_vkey;
}

class audio_output_data extends ffi.Struct {}

class obs_source_audio_mix extends ffi.Struct {}

abstract class obs_transition_target {
  static const int OBS_TRANSITION_SOURCE_A = 0;
  static const int OBS_TRANSITION_SOURCE_B = 1;
}

abstract class obs_transition_mode {
  static const int OBS_TRANSITION_MODE_AUTO = 0;
  static const int OBS_TRANSITION_MODE_MANUAL = 1;
}

abstract class obs_transition_scale_type {
  static const int OBS_TRANSITION_SCALE_MAX_ONLY = 0;
  static const int OBS_TRANSITION_SCALE_ASPECT = 1;
  static const int OBS_TRANSITION_SCALE_STRETCH = 2;
}

abstract class obs_scene_duplicate_type {
  /// < Source refs only
  static const int OBS_SCENE_DUP_REFS = 0;

  /// < Fully duplicate
  static const int OBS_SCENE_DUP_COPY = 1;

  /// < Source refs only (as private)
  static const int OBS_SCENE_DUP_PRIVATE_REFS = 2;

  /// < Fully duplicate (as private)
  static const int OBS_SCENE_DUP_PRIVATE_COPY = 3;
}

class obs_sceneitem_order_info extends ffi.Struct {
  ffi.Pointer<obs_scene_item> group;

  ffi.Pointer<obs_scene_item> item;
}

class obs_sceneitem_crop extends ffi.Struct {
  @ffi.Int32()
  int left;

  @ffi.Int32()
  int top;

  @ffi.Int32()
  int right;

  @ffi.Int32()
  int bottom;
}

class audio_convert_info extends ffi.Struct {
  @ffi.Uint32()
  int samples_per_sec;

  @ffi.Int32()
  int format;

  @ffi.Int32()
  int speakers;
}

/// Encoder output packet
class encoder_packet extends ffi.Struct {
  /// < Packet data
  ffi.Pointer<ffi.Uint8> data;

  /// < Packet size
  @ffi.Uint64()
  int size;

  /// < Presentation timestamp
  @ffi.Int64()
  int pts;

  /// < Decode timestamp
  @ffi.Int64()
  int dts;

  /// < Timebase numerator
  @ffi.Int32()
  int timebase_num;

  /// < Timebase denominator
  @ffi.Int32()
  int timebase_den;

  /// < Encoder type
  @ffi.Int32()
  int type;

  /// < Is a keyframe
  @ffi.Uint8()
  int keyframe;

  @ffi.Int64()
  int dts_usec;

  @ffi.Int64()
  int sys_dts_usec;

  /// Packet priority
  ///
  /// This is generally use by video encoders to specify the priority
  /// of the packet.
  @ffi.Int32()
  int priority;

  /// Dropped packet priority
  ///
  /// If this packet needs to be dropped, the next packet must be of this
  /// priority or higher to continue transmission.
  @ffi.Int32()
  int drop_priority;

  /// Audio track index (used with outputs)
  @ffi.Uint64()
  int track_idx;

  /// Encoder from which the track originated from
  ffi.Pointer<obs_encoder> encoder;
}

const int LIBOBS_API_MAJOR_VER = 26;

const int LIBOBS_API_MINOR_VER = 0;

const int LIBOBS_API_PATCH_VER = 2;

const int LIBOBS_API_VER = 436207618;

const String OBS_VERSION = 'unknown';

const String OBS_DATA_PATH = '../../data';

const String OBS_INSTALL_PREFIX = '';

const String OBS_PLUGIN_DESTINATION = 'obs-plugins';

const String OBS_RELATIVE_PREFIX = '../../';

const int OBS_RELEASE_CANDIDATE_MAJOR = 0;

const int OBS_RELEASE_CANDIDATE_MINOR = 0;

const int OBS_RELEASE_CANDIDATE_PATCH = 0;

const int OBS_RELEASE_CANDIDATE_VER = 0;

const int OBS_RELEASE_CANDIDATE = 0;

const String OBS_INSTALL_DATA_PATH = '../../data';

const int OBS_SOURCE_FLAG_UNUSED_1 = 1;

const int OBS_SOURCE_FLAG_FORCE_MONO = 2;

const int OBS_OUTPUT_DELAY_PRESERVE = 1;

typedef _c_obs_find_data_file = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_obs_find_data_file = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_obs_add_data_path = ffi.Void Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_obs_add_data_path = void Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_obs_remove_data_path = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_obs_remove_data_path = int Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_obs_startup = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> locale,
  ffi.Pointer<ffi.Int8> module_config_path,
  ffi.Pointer<profiler_name_store_t> store,
);

typedef _dart_obs_startup = int Function(
  ffi.Pointer<ffi.Int8> locale,
  ffi.Pointer<ffi.Int8> module_config_path,
  ffi.Pointer<profiler_name_store_t> store,
);

typedef _c_obs_shutdown = ffi.Void Function();

typedef _dart_obs_shutdown = void Function();

typedef _c_obs_initialized = ffi.Uint8 Function();

typedef _dart_obs_initialized = int Function();

typedef _c_obs_get_version = ffi.Uint32 Function();

typedef _dart_obs_get_version = int Function();

typedef _c_obs_get_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _dart_obs_get_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _c_obs_set_cmdline_args = ffi.Void Function(
  ffi.Int32 argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _dart_obs_set_cmdline_args = void Function(
  int argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _c_obs_set_locale = ffi.Void Function(
  ffi.Pointer<ffi.Int8> locale,
);

typedef _dart_obs_set_locale = void Function(
  ffi.Pointer<ffi.Int8> locale,
);

typedef _c_obs_get_locale = ffi.Pointer<ffi.Int8> Function();

typedef _dart_obs_get_locale = ffi.Pointer<ffi.Int8> Function();

typedef _c_obs_get_profiler_name_store = ffi.Pointer<profiler_name_store_t>
    Function();

typedef _dart_obs_get_profiler_name_store = ffi.Pointer<profiler_name_store_t>
    Function();

typedef _c_obs_reset_video = ffi.Int32 Function(
  ffi.Pointer<obs_video_info> ovi,
);

typedef _dart_obs_reset_video = int Function(
  ffi.Pointer<obs_video_info> ovi,
);

typedef _c_obs_reset_audio = ffi.Uint8 Function(
  ffi.Pointer<obs_audio_info> oai,
);

typedef _dart_obs_reset_audio = int Function(
  ffi.Pointer<obs_audio_info> oai,
);

typedef _c_obs_get_video_info = ffi.Uint8 Function(
  ffi.Pointer<obs_video_info> ovi,
);

typedef _dart_obs_get_video_info = int Function(
  ffi.Pointer<obs_video_info> ovi,
);

typedef _c_obs_get_audio_info = ffi.Uint8 Function(
  ffi.Pointer<obs_audio_info> oai,
);

typedef _dart_obs_get_audio_info = int Function(
  ffi.Pointer<obs_audio_info> oai,
);

typedef _c_obs_open_module = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<obs_module>> module,
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> data_path,
);

typedef _dart_obs_open_module = int Function(
  ffi.Pointer<ffi.Pointer<obs_module>> module,
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> data_path,
);

typedef _c_obs_init_module = ffi.Uint8 Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_init_module = int Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module = ffi.Pointer<obs_module> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_module = ffi.Pointer<obs_module> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_module_get_locale_string = ffi.Uint8 Function(
  ffi.Pointer<obs_module> mod,
  ffi.Pointer<ffi.Int8> lookup_string,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> translated_string,
);

typedef _dart_obs_module_get_locale_string = int Function(
  ffi.Pointer<obs_module> mod,
  ffi.Pointer<ffi.Int8> lookup_string,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> translated_string,
);

typedef _c_obs_module_get_locale_text = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> mod,
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_obs_module_get_locale_text = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> mod,
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_obs_log_loaded_modules = ffi.Void Function();

typedef _dart_obs_log_loaded_modules = void Function();

typedef _c_obs_get_module_file_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_file_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_author = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_author = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_binary_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_binary_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_get_module_data_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _dart_obs_get_module_data_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
);

typedef _c_obs_add_module_path = ffi.Void Function(
  ffi.Pointer<ffi.Int8> bin,
  ffi.Pointer<ffi.Int8> data,
);

typedef _dart_obs_add_module_path = void Function(
  ffi.Pointer<ffi.Int8> bin,
  ffi.Pointer<ffi.Int8> data,
);

typedef _c_obs_load_all_modules = ffi.Void Function();

typedef _dart_obs_load_all_modules = void Function();

typedef _c_obs_post_load_modules = ffi.Void Function();

typedef _dart_obs_post_load_modules = void Function();

typedef obs_find_module_callback_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_module_info>,
);

typedef _c_obs_find_modules = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_find_module_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_find_modules = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_find_module_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef obs_enum_module_callback_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_module>,
);

typedef _c_obs_enum_modules = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_enum_module_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_modules = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_enum_module_callback_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_module_load_locale = ffi.Pointer<lookup_t> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> default_locale,
  ffi.Pointer<ffi.Int8> locale,
);

typedef _dart_obs_module_load_locale = ffi.Pointer<lookup_t> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> default_locale,
  ffi.Pointer<ffi.Int8> locale,
);

typedef _c_obs_find_module_file = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_obs_find_module_file = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_obs_module_get_config_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_obs_module_get_config_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_module> module,
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_obs_enum_source_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_source_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_input_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_input_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_input_types2 = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> unversioned_id,
);

typedef _dart_obs_enum_input_types2 = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> unversioned_id,
);

typedef _c_obs_get_latest_input_type_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> unversioned_id,
);

typedef _dart_obs_get_latest_input_type_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> unversioned_id,
);

typedef _c_obs_enum_filter_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_filter_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_transition_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_transition_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_output_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_output_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_encoder_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_encoder_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enum_service_types = ffi.Uint8 Function(
  ffi.Uint64 idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_enum_service_types = int Function(
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _c_obs_enter_graphics = ffi.Void Function();

typedef _dart_obs_enter_graphics = void Function();

typedef _c_obs_leave_graphics = ffi.Void Function();

typedef _dart_obs_leave_graphics = void Function();

typedef _c_obs_get_audio = ffi.Pointer<audio_t> Function();

typedef _dart_obs_get_audio = ffi.Pointer<audio_t> Function();

typedef _c_obs_get_video = ffi.Pointer<video_t> Function();

typedef _dart_obs_get_video = ffi.Pointer<video_t> Function();

typedef _c_obs_video_active = ffi.Uint8 Function();

typedef _dart_obs_video_active = int Function();

typedef _c_obs_set_output_source = ffi.Void Function(
  ffi.Uint32 channel,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_set_output_source = void Function(
  int channel,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_get_output_source = ffi.Pointer<obs_source> Function(
  ffi.Uint32 channel,
);

typedef _dart_obs_get_output_source = ffi.Pointer<obs_source> Function(
  int channel,
);

typedef _typedefC_1 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
);

typedef _c_obs_enum_sources = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_sources = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_2 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
);

typedef _c_obs_enum_scenes = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_scenes = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_3 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_output>,
);

typedef _c_obs_enum_outputs = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_outputs = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_4 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_encoder>,
);

typedef _c_obs_enum_encoders = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_encoders = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_5 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_service>,
);

typedef _c_obs_enum_services = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_enum_services = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> enum_proc,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_get_source_by_name = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_source_by_name = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_get_output_by_name = ffi.Pointer<obs_output> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_output_by_name = ffi.Pointer<obs_output> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_get_encoder_by_name = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_encoder_by_name = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_get_service_by_name = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_get_service_by_name = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_get_base_effect = ffi.Pointer<gs_effect_t> Function(
  ffi.Int32 effect,
);

typedef _dart_obs_get_base_effect = ffi.Pointer<gs_effect_t> Function(
  int effect,
);

typedef _c_obs_get_default_rect_effect = ffi.Pointer<gs_effect_t> Function();

typedef _dart_obs_get_default_rect_effect = ffi.Pointer<gs_effect_t> Function();

typedef _c_obs_get_signal_handler = ffi.Pointer<signal_handler_t> Function();

typedef _dart_obs_get_signal_handler = ffi.Pointer<signal_handler_t> Function();

typedef _c_obs_get_proc_handler = ffi.Pointer<proc_handler_t> Function();

typedef _dart_obs_get_proc_handler = ffi.Pointer<proc_handler_t> Function();

typedef _c_obs_render_main_view = ffi.Void Function();

typedef _dart_obs_render_main_view = void Function();

typedef _c_obs_render_main_texture = ffi.Void Function();

typedef _dart_obs_render_main_texture = void Function();

typedef _c_obs_render_main_texture_src_color_only = ffi.Void Function();

typedef _dart_obs_render_main_texture_src_color_only = void Function();

typedef _c_obs_get_main_texture = ffi.Pointer<gs_texture_t> Function();

typedef _dart_obs_get_main_texture = ffi.Pointer<gs_texture_t> Function();

typedef _c_obs_set_master_volume = ffi.Void Function(
  ffi.Float volume,
);

typedef _dart_obs_set_master_volume = void Function(
  double volume,
);

typedef _c_obs_get_master_volume = ffi.Float Function();

typedef _dart_obs_get_master_volume = double Function();

typedef _c_obs_save_source = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_save_source = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_load_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_data_t> data,
);

typedef _dart_obs_load_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_data_t> data,
);

typedef _c_obs_source_save = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_save = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_load = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_load = void Function(
  ffi.Pointer<obs_source> source,
);

typedef obs_load_source_cb = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
);

typedef _c_obs_load_sources = ffi.Void Function(
  ffi.Pointer<obs_data_array_t> array,
  ffi.Pointer<ffi.NativeFunction<obs_load_source_cb>> cb,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _dart_obs_load_sources = void Function(
  ffi.Pointer<obs_data_array_t> array,
  ffi.Pointer<ffi.NativeFunction<obs_load_source_cb>> cb,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _c_obs_save_sources = ffi.Pointer<obs_data_array_t> Function();

typedef _dart_obs_save_sources = ffi.Pointer<obs_data_array_t> Function();

typedef obs_save_source_filter_cb = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
);

typedef _c_obs_save_sources_filtered = ffi.Pointer<obs_data_array_t> Function(
  ffi.Pointer<ffi.NativeFunction<obs_save_source_filter_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_save_sources_filtered = ffi.Pointer<obs_data_array_t>
    Function(
  ffi.Pointer<ffi.NativeFunction<obs_save_source_filter_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_obj_get_type = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _dart_obs_obj_get_type = int Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _c_obs_obj_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _dart_obs_obj_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _c_obs_obj_invalid = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _dart_obs_obj_invalid = int Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _c_obs_obj_get_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef _dart_obs_obj_get_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> obj,
);

typedef obs_enum_audio_device_cb = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_obs_enum_audio_monitoring_devices = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_enum_audio_device_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_enum_audio_monitoring_devices = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_enum_audio_device_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_set_audio_monitoring_device = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_set_audio_monitoring_device = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_audio_monitoring_device = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _dart_obs_get_audio_monitoring_device = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> id,
);

typedef _typedefC_6 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Float,
);

typedef _c_obs_add_tick_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> tick,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_add_tick_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> tick,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_7 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Float,
);

typedef _c_obs_remove_tick_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> tick,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_remove_tick_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> tick,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_8 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_add_main_render_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_add_main_render_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_9 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_remove_main_render_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_remove_main_render_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_10 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<video_data>,
);

typedef _c_obs_add_raw_video_callback = ffi.Void Function(
  ffi.Pointer<video_scale_info> conversion,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_add_raw_video_callback = void Function(
  ffi.Pointer<video_scale_info> conversion,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_11 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<video_data>,
);

typedef _c_obs_remove_raw_video_callback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_remove_raw_video_callback = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_get_video_frame_time = ffi.Uint64 Function();

typedef _dart_obs_get_video_frame_time = int Function();

typedef _c_obs_get_active_fps = ffi.Double Function();

typedef _dart_obs_get_active_fps = double Function();

typedef _c_obs_get_average_frame_time_ns = ffi.Uint64 Function();

typedef _dart_obs_get_average_frame_time_ns = int Function();

typedef _c_obs_get_frame_interval_ns = ffi.Uint64 Function();

typedef _dart_obs_get_frame_interval_ns = int Function();

typedef _c_obs_get_total_frames = ffi.Uint32 Function();

typedef _dart_obs_get_total_frames = int Function();

typedef _c_obs_get_lagged_frames = ffi.Uint32 Function();

typedef _dart_obs_get_lagged_frames = int Function();

typedef _c_obs_nv12_tex_active = ffi.Uint8 Function();

typedef _dart_obs_nv12_tex_active = int Function();

typedef _c_obs_apply_private_data = ffi.Void Function(
  ffi.Pointer<obs_data_t> settings,
);

typedef _dart_obs_apply_private_data = void Function(
  ffi.Pointer<obs_data_t> settings,
);

typedef _c_obs_set_private_data = ffi.Void Function(
  ffi.Pointer<obs_data_t> settings,
);

typedef _dart_obs_set_private_data = void Function(
  ffi.Pointer<obs_data_t> settings,
);

typedef _c_obs_get_private_data = ffi.Pointer<obs_data_t> Function();

typedef _dart_obs_get_private_data = ffi.Pointer<obs_data_t> Function();

typedef obs_task_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_queue_task = ffi.Void Function(
  ffi.Int32 type,
  ffi.Pointer<ffi.NativeFunction<obs_task_t>> task,
  ffi.Pointer<ffi.Void> param,
  ffi.Uint8 wait,
);

typedef _dart_obs_queue_task = void Function(
  int type,
  ffi.Pointer<ffi.NativeFunction<obs_task_t>> task,
  ffi.Pointer<ffi.Void> param,
  int wait,
);

typedef obs_task_handler_t = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_task_t>>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint8,
);

typedef _c_obs_set_ui_task_handler = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<obs_task_handler_t>> handler,
);

typedef _dart_obs_set_ui_task_handler = void Function(
  ffi.Pointer<ffi.NativeFunction<obs_task_handler_t>> handler,
);

typedef _c_obs_view_create = ffi.Pointer<obs_view> Function();

typedef _dart_obs_view_create = ffi.Pointer<obs_view> Function();

typedef _c_obs_view_destroy = ffi.Void Function(
  ffi.Pointer<obs_view> view,
);

typedef _dart_obs_view_destroy = void Function(
  ffi.Pointer<obs_view> view,
);

typedef _c_obs_view_set_source = ffi.Void Function(
  ffi.Pointer<obs_view> view,
  ffi.Uint32 channel,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_view_set_source = void Function(
  ffi.Pointer<obs_view> view,
  int channel,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_view_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_view> view,
  ffi.Uint32 channel,
);

typedef _dart_obs_view_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_view> view,
  int channel,
);

typedef _c_obs_view_render = ffi.Void Function(
  ffi.Pointer<obs_view> view,
);

typedef _dart_obs_view_render = void Function(
  ffi.Pointer<obs_view> view,
);

typedef _c_obs_display_create = ffi.Pointer<obs_display> Function(
  ffi.Pointer<gs_init_data> graphics_data,
  ffi.Uint32 backround_color,
);

typedef _dart_obs_display_create = ffi.Pointer<obs_display> Function(
  ffi.Pointer<gs_init_data> graphics_data,
  int backround_color,
);

typedef _c_obs_display_destroy = ffi.Void Function(
  ffi.Pointer<obs_display> display,
);

typedef _dart_obs_display_destroy = void Function(
  ffi.Pointer<obs_display> display,
);

typedef _c_obs_display_resize = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Uint32 cx,
  ffi.Uint32 cy,
);

typedef _dart_obs_display_resize = void Function(
  ffi.Pointer<obs_display> display,
  int cx,
  int cy,
);

typedef _typedefC_12 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_display_add_draw_callback = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_display_add_draw_callback = void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_13 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_display_remove_draw_callback = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_display_remove_draw_callback = void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> draw,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_display_set_enabled = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Uint8 enable,
);

typedef _dart_obs_display_set_enabled = void Function(
  ffi.Pointer<obs_display> display,
  int enable,
);

typedef _c_obs_display_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_display> display,
);

typedef _dart_obs_display_enabled = int Function(
  ffi.Pointer<obs_display> display,
);

typedef _c_obs_display_set_background_color = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Uint32 color,
);

typedef _dart_obs_display_set_background_color = void Function(
  ffi.Pointer<obs_display> display,
  int color,
);

typedef _c_obs_display_size = ffi.Void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.Uint32> width,
  ffi.Pointer<ffi.Uint32> height,
);

typedef _dart_obs_display_size = void Function(
  ffi.Pointer<obs_display> display,
  ffi.Pointer<ffi.Uint32> width,
  ffi.Pointer<ffi.Uint32> height,
);

typedef _c_obs_source_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_source_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_source_create = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _dart_obs_source_create = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _c_obs_source_create_private = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
);

typedef _dart_obs_source_create_private = ffi.Pointer<obs_source> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
);

typedef _c_obs_source_duplicate = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> desired_name,
  ffi.Uint8 create_private,
);

typedef _dart_obs_source_duplicate = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> desired_name,
  int create_private,
);

typedef _c_obs_source_addref = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_addref = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_release = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_release = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_weak_source_addref = ffi.Void Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _dart_obs_weak_source_addref = void Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _c_obs_weak_source_release = ffi.Void Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _dart_obs_weak_source_release = void Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _c_obs_source_get_ref = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_ref = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_weak_source = ffi.Pointer<obs_weak_source> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_weak_source = ffi.Pointer<obs_weak_source>
    Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_weak_source_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _dart_obs_weak_source_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_weak_source> weak,
);

typedef _c_obs_weak_source_references_source = ffi.Uint8 Function(
  ffi.Pointer<obs_weak_source> weak,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_weak_source_references_source = int Function(
  ffi.Pointer<obs_weak_source> weak,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_remove = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_remove = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_removed = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_removed = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_output_flags = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_output_flags = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_get_source_output_flags = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_source_output_flags = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_source_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_source_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_source_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_source_properties = ffi.Pointer<obs_properties_t>
    Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_is_source_configurable = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_is_source_configurable = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_source_configurable = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_configurable = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_update = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_data_t> settings,
);

typedef _dart_obs_source_update = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_data_t> settings,
);

typedef _c_obs_source_video_render = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_video_render = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_width = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_width = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_height = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_height = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_filter_get_parent = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_filter_get_parent = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_filter_get_target = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_filter_get_target = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_default_render = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_default_render = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_filter_add = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_source_filter_add = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_filter_remove = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_source_filter_remove = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_filter_set_order = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
  ffi.Int32 movement,
);

typedef _dart_obs_source_filter_set_order = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source> filter,
  int movement,
);

typedef _c_obs_source_get_settings = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_settings = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_name = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_source_set_name = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_source_get_type = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_type = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_unversioned_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_unversioned_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_signal_handler = ffi.Pointer<signal_handler_t>
    Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_signal_handler = ffi.Pointer<signal_handler_t>
    Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_proc_handler = ffi.Pointer<proc_handler_t> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_proc_handler = ffi.Pointer<proc_handler_t>
    Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_volume = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Float volume,
);

typedef _dart_obs_source_set_volume = void Function(
  ffi.Pointer<obs_source> source,
  double volume,
);

typedef _c_obs_source_get_volume = ffi.Float Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_volume = double Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_speaker_layout = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_speaker_layout = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_balance_value = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Float balance,
);

typedef _dart_obs_source_set_balance_value = void Function(
  ffi.Pointer<obs_source> source,
  double balance,
);

typedef _c_obs_source_get_balance_value = ffi.Float Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_balance_value = double Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_sync_offset = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int64 offset,
);

typedef _dart_obs_source_set_sync_offset = void Function(
  ffi.Pointer<obs_source> source,
  int offset,
);

typedef _c_obs_source_get_sync_offset = ffi.Int64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_sync_offset = int Function(
  ffi.Pointer<obs_source> source,
);

typedef obs_source_enum_proc_t = ffi.Void Function(
  ffi.Pointer<obs_source>,
  ffi.Pointer<obs_source>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_source_enum_active_sources = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_enum_active_sources = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_enum_active_tree = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_enum_active_tree = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> enum_callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_active = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_active = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_showing = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_showing = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_flags = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint32 flags,
);

typedef _dart_obs_source_set_flags = void Function(
  ffi.Pointer<obs_source> source,
  int flags,
);

typedef _c_obs_source_get_flags = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_flags = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_audio_mixers = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint32 mixers,
);

typedef _dart_obs_source_set_audio_mixers = void Function(
  ffi.Pointer<obs_source> source,
  int mixers,
);

typedef _c_obs_source_get_audio_mixers = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_audio_mixers = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_inc_showing = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_inc_showing = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_inc_active = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_inc_active = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_dec_showing = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_dec_showing = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_dec_active = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_dec_active = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_enum_filters = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_enum_filters = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_enum_proc_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_get_filter_by_name = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_source_get_filter_by_name = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_source_copy_filters = ffi.Void Function(
  ffi.Pointer<obs_source> dst,
  ffi.Pointer<obs_source> src,
);

typedef _dart_obs_source_copy_filters = void Function(
  ffi.Pointer<obs_source> dst,
  ffi.Pointer<obs_source> src,
);

typedef _c_obs_source_copy_single_filter = ffi.Void Function(
  ffi.Pointer<obs_source> dst,
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_source_copy_single_filter = void Function(
  ffi.Pointer<obs_source> dst,
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_enabled = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_enabled = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 enabled,
);

typedef _dart_obs_source_set_enabled = void Function(
  ffi.Pointer<obs_source> source,
  int enabled,
);

typedef _c_obs_source_muted = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_muted = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_muted = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 muted,
);

typedef _dart_obs_source_set_muted = void Function(
  ffi.Pointer<obs_source> source,
  int muted,
);

typedef _c_obs_source_push_to_mute_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_push_to_mute_enabled = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_enable_push_to_mute = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 enabled,
);

typedef _dart_obs_source_enable_push_to_mute = void Function(
  ffi.Pointer<obs_source> source,
  int enabled,
);

typedef _c_obs_source_get_push_to_mute_delay = ffi.Uint64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_push_to_mute_delay = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_push_to_mute_delay = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint64 delay,
);

typedef _dart_obs_source_set_push_to_mute_delay = void Function(
  ffi.Pointer<obs_source> source,
  int delay,
);

typedef _c_obs_source_push_to_talk_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_push_to_talk_enabled = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_enable_push_to_talk = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 enabled,
);

typedef _dart_obs_source_enable_push_to_talk = void Function(
  ffi.Pointer<obs_source> source,
  int enabled,
);

typedef _c_obs_source_get_push_to_talk_delay = ffi.Uint64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_push_to_talk_delay = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_push_to_talk_delay = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint64 delay,
);

typedef _dart_obs_source_set_push_to_talk_delay = void Function(
  ffi.Pointer<obs_source> source,
  int delay,
);

typedef obs_source_audio_capture_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
  ffi.Pointer<audio_data>,
  ffi.Uint8,
);

typedef _c_obs_source_add_audio_capture_callback = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_add_audio_capture_callback = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_remove_audio_capture_callback = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_remove_audio_capture_callback = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<obs_source_audio_capture_t>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_set_deinterlace_mode = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int32 mode,
);

typedef _dart_obs_source_set_deinterlace_mode = void Function(
  ffi.Pointer<obs_source> source,
  int mode,
);

typedef _c_obs_source_get_deinterlace_mode = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_deinterlace_mode = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_deinterlace_field_order = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int32 field_order,
);

typedef _dart_obs_source_set_deinterlace_field_order = void Function(
  ffi.Pointer<obs_source> source,
  int field_order,
);

typedef _c_obs_source_get_deinterlace_field_order = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_deinterlace_field_order = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_monitoring_type = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int32 type,
);

typedef _dart_obs_source_set_monitoring_type = void Function(
  ffi.Pointer<obs_source> source,
  int type,
);

typedef _c_obs_source_get_monitoring_type = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_monitoring_type = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_private_settings = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_source> item,
);

typedef _dart_obs_source_get_private_settings = ffi.Pointer<obs_data_t>
    Function(
  ffi.Pointer<obs_source> item,
);

typedef _c_obs_source_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_draw_set_color_matrix = ffi.Void Function(
  ffi.Pointer<matrix4> color_matrix,
  ffi.Pointer<vec3> color_range_min,
  ffi.Pointer<vec3> color_range_max,
);

typedef _dart_obs_source_draw_set_color_matrix = void Function(
  ffi.Pointer<matrix4> color_matrix,
  ffi.Pointer<vec3> color_range_min,
  ffi.Pointer<vec3> color_range_max,
);

typedef _c_obs_source_draw = ffi.Void Function(
  ffi.Pointer<gs_texture_t> image,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint32 cx,
  ffi.Uint32 cy,
  ffi.Uint8 flip,
);

typedef _dart_obs_source_draw = void Function(
  ffi.Pointer<gs_texture_t> image,
  int x,
  int y,
  int cx,
  int cy,
  int flip,
);

typedef _c_obs_source_output_video = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_output_video = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_output_video2 = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _dart_obs_source_output_video2 = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _c_obs_source_set_async_rotation = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int64 rotation,
);

typedef _dart_obs_source_set_async_rotation = void Function(
  ffi.Pointer<obs_source> source,
  int rotation,
);

typedef _c_obs_source_preload_video = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_preload_video = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_preload_video2 = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _dart_obs_source_preload_video2 = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _c_obs_source_show_preloaded_video = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_show_preloaded_video = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_video_frame = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_set_video_frame = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_set_video_frame2 = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _dart_obs_source_set_video_frame2 = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame2> frame,
);

typedef _c_obs_source_output_audio = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_audio> audio,
);

typedef _dart_obs_source_output_audio = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_audio> audio,
);

typedef _c_obs_source_update_properties = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_update_properties = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_frame = ffi.Pointer<obs_source_frame> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_frame = ffi.Pointer<obs_source_frame> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_release_frame = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_release_frame = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_process_filter_begin = ffi.Uint8 Function(
  ffi.Pointer<obs_source> filter,
  ffi.Int32 format,
  ffi.Int32 allow_direct,
);

typedef _dart_obs_source_process_filter_begin = int Function(
  ffi.Pointer<obs_source> filter,
  int format,
  int allow_direct,
);

typedef _c_obs_source_process_filter_end = ffi.Void Function(
  ffi.Pointer<obs_source> filter,
  ffi.Pointer<gs_effect_t> effect,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_source_process_filter_end = void Function(
  ffi.Pointer<obs_source> filter,
  ffi.Pointer<gs_effect_t> effect,
  int width,
  int height,
);

typedef _c_obs_source_process_filter_tech_end = ffi.Void Function(
  ffi.Pointer<obs_source> filter,
  ffi.Pointer<gs_effect_t> effect,
  ffi.Uint32 width,
  ffi.Uint32 height,
  ffi.Pointer<ffi.Int8> tech_name,
);

typedef _dart_obs_source_process_filter_tech_end = void Function(
  ffi.Pointer<obs_source> filter,
  ffi.Pointer<gs_effect_t> effect,
  int width,
  int height,
  ffi.Pointer<ffi.Int8> tech_name,
);

typedef _c_obs_source_skip_video_filter = ffi.Void Function(
  ffi.Pointer<obs_source> filter,
);

typedef _dart_obs_source_skip_video_filter = void Function(
  ffi.Pointer<obs_source> filter,
);

typedef _c_obs_source_add_active_child = ffi.Uint8 Function(
  ffi.Pointer<obs_source> parent,
  ffi.Pointer<obs_source> child,
);

typedef _dart_obs_source_add_active_child = int Function(
  ffi.Pointer<obs_source> parent,
  ffi.Pointer<obs_source> child,
);

typedef _c_obs_source_remove_active_child = ffi.Void Function(
  ffi.Pointer<obs_source> parent,
  ffi.Pointer<obs_source> child,
);

typedef _dart_obs_source_remove_active_child = void Function(
  ffi.Pointer<obs_source> parent,
  ffi.Pointer<obs_source> child,
);

typedef _c_obs_source_send_mouse_click = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  ffi.Int32 type,
  ffi.Uint8 mouse_up,
  ffi.Uint32 click_count,
);

typedef _dart_obs_source_send_mouse_click = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  int type,
  int mouse_up,
  int click_count,
);

typedef _c_obs_source_send_mouse_move = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  ffi.Uint8 mouse_leave,
);

typedef _dart_obs_source_send_mouse_move = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  int mouse_leave,
);

typedef _c_obs_source_send_mouse_wheel = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  ffi.Int32 x_delta,
  ffi.Int32 y_delta,
);

typedef _dart_obs_source_send_mouse_wheel = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_mouse_event> event,
  int x_delta,
  int y_delta,
);

typedef _c_obs_source_send_focus = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 focus,
);

typedef _dart_obs_source_send_focus = void Function(
  ffi.Pointer<obs_source> source,
  int focus,
);

typedef _c_obs_source_send_key_click = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_key_event> event,
  ffi.Uint8 key_up,
);

typedef _dart_obs_source_send_key_click = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_key_event> event,
  int key_up,
);

typedef _c_obs_source_set_default_flags = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint32 flags,
);

typedef _dart_obs_source_set_default_flags = void Function(
  ffi.Pointer<obs_source> source,
  int flags,
);

typedef _c_obs_source_get_base_width = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_base_width = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_base_height = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_base_height = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_audio_pending = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_audio_pending = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_audio_timestamp = ffi.Uint64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_audio_timestamp = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_audio_mix = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_audio_mix> audio,
);

typedef _dart_obs_source_get_audio_mix = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<obs_source_audio_mix> audio,
);

typedef _c_obs_source_set_async_unbuffered = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 unbuffered,
);

typedef _dart_obs_source_set_async_unbuffered = void Function(
  ffi.Pointer<obs_source> source,
  int unbuffered,
);

typedef _c_obs_source_async_unbuffered = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_async_unbuffered = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_async_decoupled = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 decouple,
);

typedef _dart_obs_source_set_async_decoupled = void Function(
  ffi.Pointer<obs_source> source,
  int decouple,
);

typedef _c_obs_source_async_decoupled = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_async_decoupled = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_set_audio_active = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 show_1,
);

typedef _dart_obs_source_set_audio_active = void Function(
  ffi.Pointer<obs_source> source,
  int show_1,
);

typedef _c_obs_source_audio_active = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_audio_active = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_get_last_obs_version = ffi.Uint32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_get_last_obs_version = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_play_pause = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Uint8 pause,
);

typedef _dart_obs_source_media_play_pause = void Function(
  ffi.Pointer<obs_source> source,
  int pause,
);

typedef _c_obs_source_media_restart = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_restart = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_stop = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_stop = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_next = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_next = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_previous = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_previous = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_get_duration = ffi.Int64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_get_duration = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_get_time = ffi.Int64 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_get_time = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_set_time = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Int64 ms,
);

typedef _dart_obs_source_media_set_time = void Function(
  ffi.Pointer<obs_source> source,
  int ms,
);

typedef _c_obs_source_media_get_state = ffi.Int32 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_get_state = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_started = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_started = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_source_media_ended = ffi.Void Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_media_ended = void Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_transition_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> transition,
  ffi.Int32 target,
);

typedef _dart_obs_transition_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> transition,
  int target,
);

typedef _c_obs_transition_clear = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_clear = void Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_get_active_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_get_active_source = ffi.Pointer<obs_source>
    Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_start = ffi.Uint8 Function(
  ffi.Pointer<obs_source> transition,
  ffi.Int32 mode,
  ffi.Uint32 duration_ms,
  ffi.Pointer<obs_source> dest,
);

typedef _dart_obs_transition_start = int Function(
  ffi.Pointer<obs_source> transition,
  int mode,
  int duration_ms,
  ffi.Pointer<obs_source> dest,
);

typedef _c_obs_transition_set = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_transition_set = void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_transition_set_manual_time = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Float t,
);

typedef _dart_obs_transition_set_manual_time = void Function(
  ffi.Pointer<obs_source> transition,
  double t,
);

typedef _c_obs_transition_set_manual_torque = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Float torque,
  ffi.Float clamp,
);

typedef _dart_obs_transition_set_manual_torque = void Function(
  ffi.Pointer<obs_source> transition,
  double torque,
  double clamp,
);

typedef _c_obs_transition_set_scale_type = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Int32 type,
);

typedef _dart_obs_transition_set_scale_type = void Function(
  ffi.Pointer<obs_source> transition,
  int type,
);

typedef _c_obs_transition_get_scale_type = ffi.Int32 Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_get_scale_type = int Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_set_alignment = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Uint32 alignment,
);

typedef _dart_obs_transition_set_alignment = void Function(
  ffi.Pointer<obs_source> transition,
  int alignment,
);

typedef _c_obs_transition_get_alignment = ffi.Uint32 Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_get_alignment = int Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_set_size = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Uint32 cx,
  ffi.Uint32 cy,
);

typedef _dart_obs_transition_set_size = void Function(
  ffi.Pointer<obs_source> transition,
  int cx,
  int cy,
);

typedef _c_obs_transition_get_size = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.Uint32> cx,
  ffi.Pointer<ffi.Uint32> cy,
);

typedef _dart_obs_transition_get_size = void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.Uint32> cx,
  ffi.Pointer<ffi.Uint32> cy,
);

typedef _c_obs_transition_enable_fixed = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Uint8 enable,
  ffi.Uint32 duration_ms,
);

typedef _dart_obs_transition_enable_fixed = void Function(
  ffi.Pointer<obs_source> transition,
  int enable,
  int duration_ms,
);

typedef _c_obs_transition_fixed = ffi.Uint8 Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_fixed = int Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_get_time = ffi.Float Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_get_time = double Function(
  ffi.Pointer<obs_source> transition,
);

typedef _c_obs_transition_force_stop = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
);

typedef _dart_obs_transition_force_stop = void Function(
  ffi.Pointer<obs_source> transition,
);

typedef obs_transition_video_render_callback_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<gs_texture_t>,
  ffi.Pointer<gs_texture_t>,
  ffi.Float,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _c_obs_transition_video_render = ffi.Void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.NativeFunction<obs_transition_video_render_callback_t>>
      callback,
);

typedef _dart_obs_transition_video_render = void Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.NativeFunction<obs_transition_video_render_callback_t>>
      callback,
);

typedef _c_obs_transition_video_render_direct = ffi.Uint8 Function(
  ffi.Pointer<obs_source> transition,
  ffi.Int32 target,
);

typedef _dart_obs_transition_video_render_direct = int Function(
  ffi.Pointer<obs_source> transition,
  int target,
);

typedef obs_transition_audio_mix_callback_t = ffi.Float Function(
  ffi.Pointer<ffi.Void>,
  ffi.Float,
);

typedef _c_obs_transition_audio_render = ffi.Uint8 Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.Uint64> ts_out,
  ffi.Pointer<obs_source_audio_mix> audio,
  ffi.Uint32 mixers,
  ffi.Uint64 channels,
  ffi.Uint64 sample_rate,
  ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
      mix_a_callback,
  ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
      mix_b_callback,
);

typedef _dart_obs_transition_audio_render = int Function(
  ffi.Pointer<obs_source> transition,
  ffi.Pointer<ffi.Uint64> ts_out,
  ffi.Pointer<obs_source_audio_mix> audio,
  int mixers,
  int channels,
  int sample_rate,
  ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
      mix_a_callback,
  ffi.Pointer<ffi.NativeFunction<obs_transition_audio_mix_callback_t>>
      mix_b_callback,
);

typedef _c_obs_transition_swap_begin = ffi.Void Function(
  ffi.Pointer<obs_source> tr_dest,
  ffi.Pointer<obs_source> tr_source,
);

typedef _dart_obs_transition_swap_begin = void Function(
  ffi.Pointer<obs_source> tr_dest,
  ffi.Pointer<obs_source> tr_source,
);

typedef _c_obs_transition_swap_end = ffi.Void Function(
  ffi.Pointer<obs_source> tr_dest,
  ffi.Pointer<obs_source> tr_source,
);

typedef _dart_obs_transition_swap_end = void Function(
  ffi.Pointer<obs_source> tr_dest,
  ffi.Pointer<obs_source> tr_source,
);

typedef _c_obs_scene_create = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_create = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_create_private = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_create_private = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_duplicate = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 type,
);

typedef _dart_obs_scene_duplicate = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  int type,
);

typedef _c_obs_scene_addref = ffi.Void Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _dart_obs_scene_addref = void Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _c_obs_scene_release = ffi.Void Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _dart_obs_scene_release = void Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _c_obs_scene_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _dart_obs_scene_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _c_obs_scene_from_source = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_scene_from_source = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_scene_find_source = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_find_source = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_find_source_recursive = ffi.Pointer<obs_scene_item>
    Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_find_source_recursive = ffi.Pointer<obs_scene_item>
    Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_find_sceneitem_by_id = ffi.Pointer<obs_scene_item>
    Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Int64 id,
);

typedef _dart_obs_scene_find_sceneitem_by_id = ffi.Pointer<obs_scene_item>
    Function(
  ffi.Pointer<obs_scene> scene,
  int id,
);

typedef _typedefC_14 = ffi.Uint8 Function(
  ffi.Pointer<obs_scene>,
  ffi.Pointer<obs_scene_item>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_scene_enum_items = ffi.Void Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.NativeFunction<_typedefC_14>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_scene_enum_items = void Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.NativeFunction<_typedefC_14>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_scene_reorder_items = ffi.Uint8 Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> item_order,
  ffi.Uint64 item_order_size,
);

typedef _dart_obs_scene_reorder_items = int Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> item_order,
  int item_order_size,
);

typedef _c_obs_scene_reorder_items2 = ffi.Uint8 Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_sceneitem_order_info> item_order,
  ffi.Uint64 item_order_size,
);

typedef _dart_obs_scene_reorder_items2 = int Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_sceneitem_order_info> item_order,
  int item_order_size,
);

typedef _c_obs_scene_add = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_scene_add = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_source> source,
);

typedef obs_scene_atomic_update_func = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_scene>,
);

typedef _c_obs_scene_atomic_update = ffi.Void Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.NativeFunction<obs_scene_atomic_update_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obs_scene_atomic_update = void Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.NativeFunction<obs_scene_atomic_update_func>> func,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obs_sceneitem_addref = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_addref = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_release = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_release = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_remove = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_remove = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_scene = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_scene = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_source = ffi.Pointer<obs_source> Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_select = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint8 select,
);

typedef _dart_obs_sceneitem_select = void Function(
  ffi.Pointer<obs_scene_item> item,
  int select,
);

typedef _c_obs_sceneitem_selected = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_selected = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_locked = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_locked = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_set_locked = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint8 lock,
);

typedef _dart_obs_sceneitem_set_locked = int Function(
  ffi.Pointer<obs_scene_item> item,
  int lock,
);

typedef _c_obs_sceneitem_set_pos = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> pos,
);

typedef _dart_obs_sceneitem_set_pos = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> pos,
);

typedef _c_obs_sceneitem_set_rot = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Float rot_deg,
);

typedef _dart_obs_sceneitem_set_rot = void Function(
  ffi.Pointer<obs_scene_item> item,
  double rot_deg,
);

typedef _c_obs_sceneitem_set_scale = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _dart_obs_sceneitem_set_scale = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _c_obs_sceneitem_set_alignment = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint32 alignment,
);

typedef _dart_obs_sceneitem_set_alignment = void Function(
  ffi.Pointer<obs_scene_item> item,
  int alignment,
);

typedef _c_obs_sceneitem_set_order = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Int32 movement,
);

typedef _dart_obs_sceneitem_set_order = void Function(
  ffi.Pointer<obs_scene_item> item,
  int movement,
);

typedef _c_obs_sceneitem_set_order_position = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Int32 position,
);

typedef _dart_obs_sceneitem_set_order_position = void Function(
  ffi.Pointer<obs_scene_item> item,
  int position,
);

typedef _c_obs_sceneitem_set_bounds_type = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Int32 type,
);

typedef _dart_obs_sceneitem_set_bounds_type = void Function(
  ffi.Pointer<obs_scene_item> item,
  int type,
);

typedef _c_obs_sceneitem_set_bounds_alignment = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint32 alignment,
);

typedef _dart_obs_sceneitem_set_bounds_alignment = void Function(
  ffi.Pointer<obs_scene_item> item,
  int alignment,
);

typedef _c_obs_sceneitem_set_bounds = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> bounds,
);

typedef _dart_obs_sceneitem_set_bounds = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> bounds,
);

typedef _c_obs_sceneitem_get_id = ffi.Int64 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_id = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_pos = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> pos,
);

typedef _dart_obs_sceneitem_get_pos = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> pos,
);

typedef _c_obs_sceneitem_get_rot = ffi.Float Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_rot = double Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_scale = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _dart_obs_sceneitem_get_scale = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _c_obs_sceneitem_get_alignment = ffi.Uint32 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_alignment = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_bounds_type = ffi.Int32 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_bounds_type = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_bounds_alignment = ffi.Uint32 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_bounds_alignment = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_bounds = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> bounds,
);

typedef _dart_obs_sceneitem_get_bounds = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> bounds,
);

typedef _c_obs_sceneitem_get_info = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_transform_info> info,
);

typedef _dart_obs_sceneitem_get_info = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_transform_info> info,
);

typedef _c_obs_sceneitem_set_info = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_transform_info> info,
);

typedef _dart_obs_sceneitem_set_info = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_transform_info> info,
);

typedef _c_obs_sceneitem_get_draw_transform = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<matrix4> transform,
);

typedef _dart_obs_sceneitem_get_draw_transform = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<matrix4> transform,
);

typedef _c_obs_sceneitem_get_box_transform = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<matrix4> transform,
);

typedef _dart_obs_sceneitem_get_box_transform = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<matrix4> transform,
);

typedef _c_obs_sceneitem_get_box_scale = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _dart_obs_sceneitem_get_box_scale = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<vec2> scale,
);

typedef _c_obs_sceneitem_visible = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_visible = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_set_visible = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Uint8 visible,
);

typedef _dart_obs_sceneitem_set_visible = int Function(
  ffi.Pointer<obs_scene_item> item,
  int visible,
);

typedef _c_obs_sceneitem_set_crop = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_sceneitem_crop> crop,
);

typedef _dart_obs_sceneitem_set_crop = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_sceneitem_crop> crop,
);

typedef _c_obs_sceneitem_get_crop = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_sceneitem_crop> crop,
);

typedef _dart_obs_sceneitem_get_crop = void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Pointer<obs_sceneitem_crop> crop,
);

typedef _c_obs_sceneitem_set_scale_filter = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
  ffi.Int32 filter,
);

typedef _dart_obs_sceneitem_set_scale_filter = void Function(
  ffi.Pointer<obs_scene_item> item,
  int filter,
);

typedef _c_obs_sceneitem_get_scale_filter = ffi.Int32 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_scale_filter = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_force_update_transform = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_force_update_transform = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_defer_update_begin = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_defer_update_begin = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_defer_update_end = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_defer_update_end = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_private_settings = ffi.Pointer<obs_data_t>
    Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_private_settings = ffi.Pointer<obs_data_t>
    Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_scene_add_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_add_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_scene_insert_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
  ffi.Uint64 count,
);

typedef _dart_obs_scene_insert_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
  int count,
);

typedef _c_obs_scene_add_group2 = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint8 signal,
);

typedef _dart_obs_scene_add_group2 = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  int signal,
);

typedef _c_obs_scene_insert_group2 = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
  ffi.Uint64 count,
  ffi.Uint8 signal,
);

typedef _dart_obs_scene_insert_group2 = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<obs_scene_item>> items,
  int count,
  int signal,
);

typedef _c_obs_scene_get_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_scene_get_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_sceneitem_is_group = ffi.Uint8 Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_is_group = int Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_group_get_scene = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene_item> group,
);

typedef _dart_obs_sceneitem_group_get_scene = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_scene_item> group,
);

typedef _c_obs_sceneitem_group_ungroup = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
);

typedef _dart_obs_sceneitem_group_ungroup = void Function(
  ffi.Pointer<obs_scene_item> group,
);

typedef _c_obs_sceneitem_group_ungroup2 = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Uint8 signal,
);

typedef _dart_obs_sceneitem_group_ungroup2 = void Function(
  ffi.Pointer<obs_scene_item> group,
  int signal,
);

typedef _c_obs_sceneitem_group_add_item = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_group_add_item = void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_group_remove_item = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_group_remove_item = void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_get_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_get_group = ffi.Pointer<obs_scene_item> Function(
  ffi.Pointer<obs_scene> scene,
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_source_is_group = ffi.Uint8 Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_source_is_group = int Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_scene_is_group = ffi.Uint8 Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _dart_obs_scene_is_group = int Function(
  ffi.Pointer<obs_scene> scene,
);

typedef _typedefC_15 = ffi.Uint8 Function(
  ffi.Pointer<obs_scene>,
  ffi.Pointer<obs_scene_item>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_obs_sceneitem_group_enum_items = ffi.Void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_sceneitem_group_enum_items = void Function(
  ffi.Pointer<obs_scene_item> group,
  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> callback,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_group_from_source = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_source> source,
);

typedef _dart_obs_group_from_source = ffi.Pointer<obs_scene> Function(
  ffi.Pointer<obs_source> source,
);

typedef _c_obs_sceneitem_defer_group_resize_begin = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_defer_group_resize_begin = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_sceneitem_defer_group_resize_end = ffi.Void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _dart_obs_sceneitem_defer_group_resize_end = void Function(
  ffi.Pointer<obs_scene_item> item,
);

typedef _c_obs_output_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_output_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_output_create = ffi.Pointer<obs_output> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _dart_obs_output_create = ffi.Pointer<obs_output> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _c_obs_output_addref = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_addref = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_release = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_release = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_weak_output_addref = ffi.Void Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _dart_obs_weak_output_addref = void Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _c_obs_weak_output_release = ffi.Void Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _dart_obs_weak_output_release = void Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _c_obs_output_get_ref = ffi.Pointer<obs_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_ref = ffi.Pointer<obs_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_weak_output = ffi.Pointer<obs_weak_output> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_weak_output = ffi.Pointer<obs_weak_output>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_weak_output_get_output = ffi.Pointer<obs_output> Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _dart_obs_weak_output_get_output = ffi.Pointer<obs_output> Function(
  ffi.Pointer<obs_weak_output> weak,
);

typedef _c_obs_weak_output_references_output = ffi.Uint8 Function(
  ffi.Pointer<obs_weak_output> weak,
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_weak_output_references_output = int Function(
  ffi.Pointer<obs_weak_output> weak,
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_start = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_start = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_stop = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_stop = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_delay = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 delay_sec,
  ffi.Uint32 flags,
);

typedef _dart_obs_output_set_delay = void Function(
  ffi.Pointer<obs_output> output,
  int delay_sec,
  int flags,
);

typedef _c_obs_output_get_delay = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_delay = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_active_delay = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_active_delay = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_force_stop = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_force_stop = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_active = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_active = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_flags = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_flags = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_get_output_flags = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_output_flags = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_output_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_output_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_output_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_output_properties = ffi.Pointer<obs_properties_t>
    Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_output_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_update = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_data_t> settings,
);

typedef _dart_obs_output_update = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_data_t> settings,
);

typedef _c_obs_output_can_pause = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_can_pause = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_pause = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint8 pause,
);

typedef _dart_obs_output_pause = int Function(
  ffi.Pointer<obs_output> output,
  int pause,
);

typedef _c_obs_output_paused = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_paused = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_settings = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_settings = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_signal_handler = ffi.Pointer<signal_handler_t>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_signal_handler = ffi.Pointer<signal_handler_t>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_proc_handler = ffi.Pointer<proc_handler_t> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_proc_handler = ffi.Pointer<proc_handler_t>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_media = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<video_t> video,
  ffi.Pointer<audio_t> audio,
);

typedef _dart_obs_output_set_media = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<video_t> video,
  ffi.Pointer<audio_t> audio,
);

typedef _c_obs_output_video = ffi.Pointer<video_t> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_video = ffi.Pointer<video_t> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_audio = ffi.Pointer<audio_t> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_audio = ffi.Pointer<audio_t> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_mixer = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint64 mixer_idx,
);

typedef _dart_obs_output_set_mixer = void Function(
  ffi.Pointer<obs_output> output,
  int mixer_idx,
);

typedef _c_obs_output_get_mixer = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_mixer = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_mixers = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint64 mixers,
);

typedef _dart_obs_output_set_mixers = void Function(
  ffi.Pointer<obs_output> output,
  int mixers,
);

typedef _c_obs_output_get_mixers = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_mixers = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_video_encoder = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_output_set_video_encoder = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_output_set_audio_encoder = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_encoder> encoder,
  ffi.Uint64 idx,
);

typedef _dart_obs_output_set_audio_encoder = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_encoder> encoder,
  int idx,
);

typedef _c_obs_output_get_video_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_video_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_audio_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint64 idx,
);

typedef _dart_obs_output_get_audio_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_output> output,
  int idx,
);

typedef _c_obs_output_set_service = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_output_set_service = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_output_get_service = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_service = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_reconnect_settings = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Int32 retry_count,
  ffi.Int32 retry_sec,
);

typedef _dart_obs_output_set_reconnect_settings = void Function(
  ffi.Pointer<obs_output> output,
  int retry_count,
  int retry_sec,
);

typedef _c_obs_output_get_total_bytes = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_total_bytes = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_frames_dropped = ffi.Int32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_frames_dropped = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_total_frames = ffi.Int32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_total_frames = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_preferred_size = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_output_set_preferred_size = void Function(
  ffi.Pointer<obs_output> output,
  int width,
  int height,
);

typedef _c_obs_output_get_width = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_width = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_height = ffi.Uint32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_height = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_congestion = ffi.Float Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_congestion = double Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_connect_time_ms = ffi.Int32 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_connect_time_ms = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_reconnecting = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_reconnecting = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_last_error = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_obs_output_set_last_error = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<ffi.Int8> message,
);

typedef _c_obs_output_get_last_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_last_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_supported_video_codecs = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_supported_video_codecs = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_supported_audio_codecs = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_supported_audio_codecs = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_set_video_conversion = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<video_scale_info> conversion,
);

typedef _dart_obs_output_set_video_conversion = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<video_scale_info> conversion,
);

typedef _c_obs_output_set_audio_conversion = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<audio_convert_info> conversion,
);

typedef _dart_obs_output_set_audio_conversion = void Function(
  ffi.Pointer<obs_output> output,
  ffi.Pointer<audio_convert_info> conversion,
);

typedef _c_obs_output_can_begin_data_capture = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 flags,
);

typedef _dart_obs_output_can_begin_data_capture = int Function(
  ffi.Pointer<obs_output> output,
  int flags,
);

typedef _c_obs_output_initialize_encoders = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 flags,
);

typedef _dart_obs_output_initialize_encoders = int Function(
  ffi.Pointer<obs_output> output,
  int flags,
);

typedef _c_obs_output_begin_data_capture = ffi.Uint8 Function(
  ffi.Pointer<obs_output> output,
  ffi.Uint32 flags,
);

typedef _dart_obs_output_begin_data_capture = int Function(
  ffi.Pointer<obs_output> output,
  int flags,
);

typedef _c_obs_output_end_data_capture = ffi.Void Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_end_data_capture = void Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_output_signal_stop = ffi.Void Function(
  ffi.Pointer<obs_output> output,
  ffi.Int32 code,
);

typedef _dart_obs_output_signal_stop = void Function(
  ffi.Pointer<obs_output> output,
  int code,
);

typedef _c_obs_output_get_pause_offset = ffi.Uint64 Function(
  ffi.Pointer<obs_output> output,
);

typedef _dart_obs_output_get_pause_offset = int Function(
  ffi.Pointer<obs_output> output,
);

typedef _c_obs_encoder_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_encoder_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_video_encoder_create = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _dart_obs_video_encoder_create = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _c_obs_audio_encoder_create = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  ffi.Uint64 mixer_idx,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _dart_obs_audio_encoder_create = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  int mixer_idx,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _c_obs_encoder_addref = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_addref = void Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_release = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_release = void Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_weak_encoder_addref = ffi.Void Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _dart_obs_weak_encoder_addref = void Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _c_obs_weak_encoder_release = ffi.Void Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _dart_obs_weak_encoder_release = void Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _c_obs_encoder_get_ref = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_ref = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_weak_encoder = ffi.Pointer<obs_weak_encoder>
    Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_weak_encoder = ffi.Pointer<obs_weak_encoder>
    Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_weak_encoder_get_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _dart_obs_weak_encoder_get_encoder = ffi.Pointer<obs_encoder> Function(
  ffi.Pointer<obs_weak_encoder> weak,
);

typedef _c_obs_weak_encoder_references_encoder = ffi.Uint8 Function(
  ffi.Pointer<obs_weak_encoder> weak,
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_weak_encoder_references_encoder = int Function(
  ffi.Pointer<obs_weak_encoder> weak,
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_name = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_obs_encoder_set_name = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_obs_encoder_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_get_encoder_codec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_encoder_codec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_encoder_type = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_encoder_type = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_encoder_get_codec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_codec = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_type = ffi.Int32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_type = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_scaled_size = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_encoder_set_scaled_size = void Function(
  ffi.Pointer<obs_encoder> encoder,
  int width,
  int height,
);

typedef _c_obs_encoder_scaling_enabled = ffi.Uint8 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_scaling_enabled = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_width = ffi.Uint32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_width = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_height = ffi.Uint32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_height = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_sample_rate = ffi.Uint32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_sample_rate = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_preferred_video_format = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Int32 format,
);

typedef _dart_obs_encoder_set_preferred_video_format = void Function(
  ffi.Pointer<obs_encoder> encoder,
  int format,
);

typedef _c_obs_encoder_get_preferred_video_format = ffi.Int32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_preferred_video_format = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_encoder_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_encoder_get_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_get_encoder_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_encoder_properties = ffi.Pointer<obs_properties_t>
    Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_encoder_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_update = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<obs_data_t> settings,
);

typedef _dart_obs_encoder_update = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<obs_data_t> settings,
);

typedef _c_obs_encoder_get_extra_data = ffi.Uint8 Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> extra_data,
  ffi.Pointer<ffi.Uint64> size,
);

typedef _dart_obs_encoder_get_extra_data = int Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> extra_data,
  ffi.Pointer<ffi.Uint64> size,
);

typedef _c_obs_encoder_get_settings = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_settings = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_video = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<video_t> video,
);

typedef _dart_obs_encoder_set_video = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<video_t> video,
);

typedef _c_obs_encoder_set_audio = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<audio_t> audio,
);

typedef _dart_obs_encoder_set_audio = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<audio_t> audio,
);

typedef _c_obs_encoder_video = ffi.Pointer<video_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_video = ffi.Pointer<video_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_audio = ffi.Pointer<audio_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_audio = ffi.Pointer<audio_t> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_active = ffi.Uint8 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_active = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_get_encoder_caps = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> encoder_id,
);

typedef _dart_obs_get_encoder_caps = int Function(
  ffi.Pointer<ffi.Int8> encoder_id,
);

typedef _c_obs_encoder_get_caps = ffi.Uint32 Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_caps = int Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_duplicate_encoder_packet = ffi.Void Function(
  ffi.Pointer<encoder_packet> dst,
  ffi.Pointer<encoder_packet> src,
);

typedef _dart_obs_duplicate_encoder_packet = void Function(
  ffi.Pointer<encoder_packet> dst,
  ffi.Pointer<encoder_packet> src,
);

typedef _c_obs_free_encoder_packet = ffi.Void Function(
  ffi.Pointer<encoder_packet> packet,
);

typedef _dart_obs_free_encoder_packet = void Function(
  ffi.Pointer<encoder_packet> packet,
);

typedef _c_obs_encoder_packet_ref = ffi.Void Function(
  ffi.Pointer<encoder_packet> dst,
  ffi.Pointer<encoder_packet> src,
);

typedef _dart_obs_encoder_packet_ref = void Function(
  ffi.Pointer<encoder_packet> dst,
  ffi.Pointer<encoder_packet> src,
);

typedef _c_obs_encoder_packet_release = ffi.Void Function(
  ffi.Pointer<encoder_packet> packet,
);

typedef _dart_obs_encoder_packet_release = void Function(
  ffi.Pointer<encoder_packet> packet,
);

typedef _c_obs_encoder_create_rerouted = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> reroute_id,
);

typedef _dart_obs_encoder_create_rerouted = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> reroute_id,
);

typedef _c_obs_encoder_paused = ffi.Uint8 Function(
  ffi.Pointer<obs_encoder> output,
);

typedef _dart_obs_encoder_paused = int Function(
  ffi.Pointer<obs_encoder> output,
);

typedef _c_obs_encoder_get_last_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _dart_obs_encoder_get_last_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_encoder> encoder,
);

typedef _c_obs_encoder_set_last_error = ffi.Void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_obs_encoder_set_last_error = void Function(
  ffi.Pointer<obs_encoder> encoder,
  ffi.Pointer<ffi.Int8> message,
);

typedef _c_obs_service_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_service_get_display_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_service_create = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _dart_obs_service_create = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
  ffi.Pointer<obs_data_t> hotkey_data,
);

typedef _c_obs_service_create_private = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
);

typedef _dart_obs_service_create_private = ffi.Pointer<obs_service> Function(
  ffi.Pointer<ffi.Int8> id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<obs_data_t> settings,
);

typedef _c_obs_service_addref = ffi.Void Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_addref = void Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_release = ffi.Void Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_release = void Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_weak_service_addref = ffi.Void Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _dart_obs_weak_service_addref = void Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _c_obs_weak_service_release = ffi.Void Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _dart_obs_weak_service_release = void Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _c_obs_service_get_ref = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_ref = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_weak_service = ffi.Pointer<obs_weak_service>
    Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_weak_service = ffi.Pointer<obs_weak_service>
    Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_weak_service_get_service = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _dart_obs_weak_service_get_service = ffi.Pointer<obs_service> Function(
  ffi.Pointer<obs_weak_service> weak,
);

typedef _c_obs_weak_service_references_service = ffi.Uint8 Function(
  ffi.Pointer<obs_weak_service> weak,
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_weak_service_references_service = int Function(
  ffi.Pointer<obs_weak_service> weak,
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_service_defaults = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_get_service_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_get_service_properties = ffi.Pointer<obs_properties_t>
    Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_obs_service_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_properties = ffi.Pointer<obs_properties_t> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_type = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_type = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_update = ffi.Void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data_t> settings,
);

typedef _dart_obs_service_update = void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data_t> settings,
);

typedef _c_obs_service_get_settings = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_settings = ffi.Pointer<obs_data_t> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_url = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_url = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_key = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_key = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_username = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_username = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_password = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_password = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_apply_encoder_settings = ffi.Void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data_t> video_encoder_settings,
  ffi.Pointer<obs_data_t> audio_encoder_settings,
);

typedef _dart_obs_service_apply_encoder_settings = void Function(
  ffi.Pointer<obs_service> service,
  ffi.Pointer<obs_data_t> video_encoder_settings,
  ffi.Pointer<obs_data_t> audio_encoder_settings,
);

typedef _c_obs_service_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_type_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_service_get_output_type = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _dart_obs_service_get_output_type = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<obs_service> service,
);

typedef _c_obs_source_frame_init = ffi.Void Function(
  ffi.Pointer<obs_source_frame> frame,
  ffi.Int32 format,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_source_frame_init = void Function(
  ffi.Pointer<obs_source_frame> frame,
  int format,
  int width,
  int height,
);

typedef _c_obs_source_frame_free = ffi.Void Function(
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_frame_free = void Function(
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_frame_create = ffi.Pointer<obs_source_frame> Function(
  ffi.Int32 format,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_obs_source_frame_create = ffi.Pointer<obs_source_frame> Function(
  int format,
  int width,
  int height,
);

typedef _c_obs_source_frame_destroy = ffi.Void Function(
  ffi.Pointer<obs_source_frame> frame,
);

typedef _dart_obs_source_frame_destroy = void Function(
  ffi.Pointer<obs_source_frame> frame,
);

typedef _c_obs_source_frame_copy = ffi.Void Function(
  ffi.Pointer<obs_source_frame> dst,
  ffi.Pointer<obs_source_frame> src,
);

typedef _dart_obs_source_frame_copy = void Function(
  ffi.Pointer<obs_source_frame> dst,
  ffi.Pointer<obs_source_frame> src,
);

typedef _typedefC_16 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
  ffi.Pointer<obs_source_frame>,
);

typedef _c_obs_source_add_frame_callback = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<_typedefC_16>> frame,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_add_frame_callback = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<_typedefC_16>> frame,
  ffi.Pointer<ffi.Void> param,
);

typedef _typedefC_17 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<obs_source>,
  ffi.Pointer<obs_source_frame>,
);

typedef _c_obs_source_remove_frame_callback = ffi.Void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> frame,
  ffi.Pointer<ffi.Void> param,
);

typedef _dart_obs_source_remove_frame_callback = void Function(
  ffi.Pointer<obs_source> source,
  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> frame,
  ffi.Pointer<ffi.Void> param,
);

typedef _c_obs_source_get_icon_type = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_obs_source_get_icon_type = int Function(
  ffi.Pointer<ffi.Int8> id,
);

typedef IMP = ffi.Void Function();
